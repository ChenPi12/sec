<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<title>极语言中文编程-开发文档-教程资料-说明书</title>
<meta name="keywords" content="中文编程,极语言编程,中文编程教程,极语言开发文档,中文编程资料" />
<style type="text/css">
.box{width: 100%;}
.box1{width:128px;padding-left:2px;float: left;}
.box2{height:100%;padding-left:2px;overflow:auto;font-size: 20px;line-height:40px}
.box2 table{border: 1px solid #e33ecc;}
.box3{padding-left:6px;display:none;color: red;}	
</style>
<script>function show(d1){
if (document.getElementById(d1).style.display == 'block') {
document.getElementById(d1).style.display = 'none'; 
} else {document.getElementById(d1).style.display = 'block';}
}</script>
</head>
<body>
<div class="box">
<div class="box1">
<div>&#9889 <a href="javascript:onClick=show('j1')">极语言基础</a></div>
<div id="j1" class="box3">
&#8673 <a href="#入门">1.入门知识</a><br>
&#8673 <a href="#变量">2.变量类型</a><br>
&#8673 <a href="#转义">3.转义符号</a><br>
&#8673 <a href="#运算">4.运算符号</a><br>
&#8673 <a href="#语法">5.编程语法</a><br>
&#8673 <a href="#数组">6.数组文本</a><br>
&#8673 <a href="#指针">7.指针列举</a><br>
&#8673 <a href="#置入">8.置入指令</a><br>
&#8673 <a href="#跳转">9.跳转标记</a><br>
&#8673 <a href="#结构">10.结构体</a><br>
&#8673 <a href="#数据">11.数据表</a><br>
&#8673 <a href="#子类">12.类对象</a><br>
&#8673 <a href="#常量">13.常量值</a><br>
&#8673 <a href="#信息框">14.信息框</a><br>
&#8673 <a href="#链接库">15.DLL开发</a><br>
&#8673 <a href="#控制台">16.控制台</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j0')">极面向对象</a></div>
<div id="j0" class="box3">
&#8673 <a href="#面向对象">1.面向对象</a><br>
&#8673 <a href="#句柄对象">2.句柄对象</a><br>
&#8673 <a href="#对象管理">3.对象管理</a><br>
&#8673 <a href="#对象接口">4.对象接口</a><br>
&#8673 <a href="#处理限制">5.处理限制</a><br>
&#8673 <a href="#处理继承">6.处理继承</a><br>
&#8673 <a href="#对象类别">7.对象类别</a><br>
&#8673 <a href="#用户对象">8.用户对象</a><br>
&#8673 <a href="#GDI对象">9.图形对象</a><br>
&#8673 <a href="#内核对象">10.内核对象</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j2')">窗口与控件</a></div>
<div id="j2" class="box3">
&#8673 <a href="#窗口">1.窗口消息</a><br>
&#8673 <a href="#字体">2.字体热键</a><br>
&#8673 <a href="#外观">3.窗口外观</a><br>
&#8673 <a href="#控件">4.控件事件</a><br>
&#8673 <a href="#区外">5.窗口区外</a><br>
&#8673 <a href="#键盘">6.键盘事件</a><br>
&#8673 <a href="#菜单">7.菜单事件</a><br>
&#8673 <a href="#鼠标">8.鼠标事件</a><br>
&#8673 <a href="#系统">9.系统通信</a><br>
&#8673 <a href="#子窗口">10.子窗口</a><br>
&#8673 <a href="#剪切板">11.剪切板</a><br>
&#8673 <a href="#编辑框">12.编辑框</a><br>
&#8673 <a href="#按钮">13.按钮系列</a><br>
&#8673 <a href="#组合框">14.组合框</a><br>
&#8673 <a href="#静态框">15.图片标签</a><br>
&#8673 <a href="#列表框">16.列表框</a><br>
&#8673 <a href="#滚动条">17.滚动条</a><br>
&#8673 <a href="#网页框">18.网页框</a><br>
&#8673 <a href="#富编辑">19.文档编辑</a><br>
&#8673 <a href="#用户控件">20.用户控件</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j3')">公用控件库</a></div>
<div id="j3" class="box3">
&#8673 <a href="#进度条">1.进度条</a><br>
&#8673 <a href="#表格框">2.表格框</a><br>
&#8673 <a href="#标头框">3.标头框</a><br>
&#8673 <a href="#树表框">4.树表框</a><br>
&#8673 <a href="#工具提示">5.工具提示</a><br>
&#8673 <a href="#选项卡">6.选项卡</a><br>
&#8673 <a href="#对话框">7.对话框</a><br>
&#8673 <a href="#工具栏">8.工具栏</a><br>
&#8673 <a href="#调节框">9.调节框</a><br>
&#8673 <a href="#月历框">10.月历框</a><br>
&#8673 <a href="#日期框">28.日期框</a><br>
&#8673 <a href="#超组合框">11.超组合框</a><br>
&#8673 <a href="#伸缩条">12.伸缩条</a><br>
&#8673 <a href="#IP框">13.IP控件</a><br>
&#8673 <a href="#状态栏">14.状态栏</a><br>
&#8673 <a href="#分页框">15.分页导航</a><br>
&#8673 <a href="#链接框">16.链接控件</a><br>
&#8673 <a href="#热键框">17.热键控件</a><br>
&#8673 <a href="#滑块条">18.滑块条</a><br>
&#8673 <a href="#影音动画">19.影音动画</a><br>
&#8673 <a href="#图像列表">20.图像列表</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j4')">通用对话框</a></div>
<div id="j4" class="box3">
&#8673 <a href="#通用简介">1.对话框简介</a><br>
&#8673 <a href="#颜色对话">2.颜色对话框</a><br>
&#8673 <a href="#字体对话">3.字体选择框</a><br>
&#8673 <a href="#文件对话">4.文件对话框</a><br>
&#8673 <a href="#查找替换">5.查找替换框</a><br>
&#8673 <a href="#目录对话">6.目录选择框</a><br>
&#8673 <a href="#页面设置">7.页面设置框</a><br>
&#8673 <a href="#打印对话">8.打印对话框</a><br>
&#8673 <a href="#打印属性">9.打印属性表</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j5')">核心库函数</a></div>
<div id="j5" class="box3">
&#8673 <a href="#文件系统">1.文件系统</a><br>
&#8673 <a href="#原子名单">2.原子名单</a><br>
&#8673 <a href="#程序资源">3.程序资源</a><br>
&#8673 <a href="#串口通信">4.串口通信</a><br>
&#8673 <a href="#进程线程">5.进程线程</a><br>
&#8673 <a href="#命名管道">6.命名管道</a><br>
&#8673 <a href="#同步异步">7.同步异步</a><br>
&#8673 <a href="#磁盘分区">8.磁盘分区</a><br>
&#8673 <a href="#系统时间">9.系统时间</a><br>
&#8673 <a href="#配置文件">10.配置文件</a><br>
&#8673 <a href="#内存读写">11.内存读写</a><br>
&#8673 <a href="#语言文字">12.语言文字</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j6')">用户界面库</a></div>
<div id="j6" class="box3">
&#8673 <a href="#键盘鼠标">1.键盘鼠标</a><br>
&#8673 <a href="#窗口消息">2.窗口消息</a><br>
&#8673 <a href="#图形显示">3.图形显示</a><br>
&#8673 <a href="#菜单资源">4.菜单资源</a><br>
&#8673 <a href="#窗口控件">5.窗口控件</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j7')">基本图形库</a></div>
<div id="j7" class="box3">
&#8673 <a href="#图形入门">&emsp;图形入门</a><br>
&#8673 <a href="#位图设备">1.位图设备</a><br>
&#8673 <a href="#画刷画笔">2.画刷画笔</a><br>
&#8673 <a href="#字体文字">3.字体文字</a><br>
&#8673 <a href="#剪裁区域">4.剪裁区域</a><br>
&#8673 <a href="#画板绘图">5.画板绘图</a><br>
&#8673 <a href="#空间转换">6.空间转换</a><br>
&#8673 <a href="#形状填充">7.形状填充</a><br>
&#8673 <a href="#图元文件">8.图元文件</a><br>
&#8673 <a href="#路径转换">9.路径转换</a><br>
&#8673 <a href="#打印操作">10.打印操作</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j8')">高级图形库</a></div>
<div id="j8" class="box3">
&#8673 <a href="#绘图入门">&emsp;绘图入门</a><br>
&#8673 <a href="#初始绘图">1.初始绘图</a><br>
&#8673 <a href="#画笔画刷">2.画笔画刷</a><br>
&#8673 <a href="#文本字体">3.文本字体</a><br>
&#8673 <a href="#定制线帽">4.定制线帽</a><br>
&#8673 <a href="#路径迭代">5.路径迭代</a><br>
&#8673 <a href="#矩阵变换">6.矩阵变换</a><br>
&#8673 <a href="#位图缓存">7.位图缓存</a><br>
&#8673 <a href="#图像图元">8.图像图元</a><br>
&#8673 <a href="#图像属性">9.图像属性</a><br>
&#8673 <a href="#纹理图刷">10.纹理图刷</a><br>
&#8673 <a href="#图面区域">11.图面区域</a><br>
&#8673 <a href="#编码解码">12.编码解码</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j9')">算法权限库</a></div>
<div id="j9" class="box3">
&#8673 <a href="#访问权限">1.访问权限</a><br>
&#8673 <a href="#进程令牌">2.进程令牌</a><br>
&#8673 <a href="#日志事件">3.日志事件</a><br>
&#8673 <a href="#加密算法">4.加密算法</a><br>
&#8673 <a href="#注册表">5.注册表</a><br>
&#8673 <a href="#服务管理">6.服务管理</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j10')">运行环境库</a></div>
<div id="j10" class="box3">
&#8673 <a href="#界面拖曳">1.界面拖曳</a><br>
&#8673 <a href="#托盘图标">2.托盘图标</a><br>
&#8673 <a href="#图标提取">3.图标提取</a><br>
&#8673 <a href="#应用消息">4.应用消息</a><br>
&#8673 <a href="#磁盘路径">5.磁盘路径</a><br>
&#8673 <a href="#系统环境">6.系统环境</a><br>
&#8673 <a href="#文字查找">7.文字查找</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j11')">互联网通信</a></div>
<div id="j11" class="box3">
&#8673 <a href="#通信协议">1.通信协议</a><br>
&#8673 <a href="#通信模型">2.通信模型</a><br>
&#8673 <a href="#地址转换">3.地址转换</a><br>
&#8673 <a href="#客户端">4.客户端</a><br>
&#8673 <a href="#服务端">5.服务端</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j12')">极语言模块</a></div>
<div id="j12" class="box3">
&#8673 <a href="#模块">1.模块简介</a><br>
&#8673 <a href="#模块">2.定时器</a><br>
&#8673 <a href="#模块">3.音乐播放</a><br>
&#8673 <a href="#模块">4.数据库</a><br>
&#8673 <a href="#模块">5.集合容器</a><br>
&#8673 <a href="#模块">6.网络通信</a><br>
&#8673 <a href="#模块">7.哈希加密</a><br>
&#8673 <a href="#模块">8.编码转换</a><br>
&#8673 <a href="#模块">9.分割文字</a><br>
&#8673 <a href="#模块">10.替换文字</a><br>
&#8673 <a href="#模块">11.文件内容</a><br>
&#8673 <a href="#模块">12.配置文件</a><br>
&#8673 <a href="#模块">13.资源数据</a><br>
&#8673 <a href="#模块">14.剪切板</a><br>
&#8673 <a href="#模块">15.CRC校验</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j13')">组件对象库</a></div>
<div id="j13" class="box3">
&#8673 <a href="#组件对象">1.组件对象</a><br>
&#8673 <a href="#链接对象">2.链接对象</a><br>
&#8673 <a href="#内存对象">3.内存对象</a><br>
&#8673 <a href="#字节对象">4.字节对象</a><br>
&#8673 <a href="#流对象">5.流对象</a><br>
&#8673 <a href="#存储对象">6.存储对象</a><br>
&#8673 <a href="#存储流">7.存储流</a><br>
&#8673 <a href="#存储库">8.存储库</a><br>
&#8673 <a href="#存储文件">9.存储文件</a><br>
&#8673 <a href="#存储类">10.存储类</a><br>
&#8673 <a href="#枚举器">11.枚举器</a><br>
&#8673 <a href="#数据对象">12.数据对象</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j14')">数据驱动库</a></div>
<div id="j14" class="box3">
&#8673 <a href="#数据类型">1.数据类型</a><br>
&#8673 <a href="#建立连接">2.建立连接</a><br>
&#8673 <a href="#执行语句">3.执行语句</a><br>
&#8673 <a href="#读取数据">4.读取数据</a><br>
&#8673 <a href="#写入数据">5.写入数据</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j15')">三维图形库</a></div>
<div id="j15" class="box3">
&#8673 <a href="#图形窗口">1.图形窗口</a><br>
&#8673 <a href="#绘制图形">2.绘制图形</a><br>
&#8673 <a href="#图形着色">3.图形着色</a><br>
&#8673 <a href="#结构变量">4.结构变量</a><br>
&#8673 <a href="#平移变换">5.平移变换</a><br>
&#8673 <a href="#旋转变换">6.旋转变换</a><br>
&#8673 <a href="#缩放变换">7.缩放变换</a><br>
&#8673 <a href="#插值索引">8.插值索引</a><br>
&#8673 <a href="#矩阵阶乘">9.矩阵阶乘</a><br>
&#8673 <a href="#透视投影">10.透视投影</a><br>
&#8673 <a href="#相机空间">11.相机空间</a><br>
&#8673 <a href="#纹理贴图">12.纹理贴图</a><br>
&#8673 <a href="#环境光源">13.环境光源</a><br>
&#8673 <a href="#数据模型">14.数据模型</a><br>
&#8673 <a href="#天空盒">15.天空盒</a><br>
&#8673 <a href="#法线纹理">16.法线纹理</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j16')">绘图对象库</a></div>
<div id="j16" class="box3">
&#8673 <a href="#绘图对象">1.绘图对象</a><br>
&#8673 <a href="#图面对象">2.图面对象</a><br>
&#8673 <a href="#调色对象">3.调色对象</a><br>
&#8673 <a href="#剪辑对象">4.剪辑对象</a><br>
&#8673 <a href="#颜色对象">5.颜色对象</a><br>
&#8673 <a href="#渐变对象">6.渐变对象</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j17')">三维对象库</a></div>
<div id="j17" class="box3">
&#8673 <a href="#三维对象">1.三维对象</a><br>
&#8673 <a href="#三维图形">2.三维图形</a><br>
&#8673 <a href="#三维资源">3.三维资源</a><br>
&#8673 <a href="#基本纹理">4.基本纹理</a><br>
&#8673 <a href="#三维纹理">5.三维纹理</a><br>
&#8673 <a href="#三维图面">6.三维图面</a><br>
&#8673 <a href="#索引缓冲">7.索引缓冲</a><br>
&#8673 <a href="#顶点缓冲">8.顶点缓冲</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j18')">运行时函数</a></div>
<div id="j18" class="box3">
&#8673 <a href="#运行时库">1.运行时库</a><br>
&#8673 <a href="#运行时库">2.变量类型</a><br>
&#8673 <a href="#运行时库">3.运算符号</a><br>
&#8673 <a href="#运行时库">4.转义符号</a><br>
&#8673 <a href="#运行时库">5.编程语法</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j19')">活动模板库</a></div>
<div id="j19" class="box3">
&#8673 <a href="#活动模板">1.活动模板</a><br>
&#8673 <a href="#活动模板">2.变量类型</a><br>
&#8673 <a href="#活动模板">3.运算符号</a><br>
&#8673 <a href="#活动模板">4.转义符号</a><br>
&#8673 <a href="#活动模板">5.编程语法</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j20')">多媒体对象</a></div>
<div id="j20" class="box3">
&#8673 <a href="#音频视频">1.音频视频</a><br>
&#8673 <a href="#核心音频">2.核心音频</a><br>
&#8673 <a href="#直接显示">3.直接显示</a><br>
&#8673 <a href="#媒体基础">4.媒体基础</a><br>
&#8673 <a href="#多媒体">5.多媒体MCI</a><br>
</div>
<div>&#9889 <a href="javascript:onClick=show('j21')">极人工智能</a></div>
<div id="j21" class="box3">
&#8673 <a href="#机器学习">1.机器学习</a><br>
&#8673 <a href="#训练教程">2.训练教程</a><br>
&#8673 <a href="#开发示例">3.开发示例</a><br>
&#8673 <a href="#集成模型">4.集成模型</a><br>
&#8673 <a href="#智能接口">5.智能接口</a><br>
</div>
</div>
<div class="box2">
<p><font size="6"><a name="入门">第一节</a> 入门</font></p>
<p><b>1.初学者使用极语言集成开发环境</b></p>
启动极语言编程，点击初级程序进入主界面。设计界面小窗口没显示图标,请关闭设计窗口重开<br>
控件设计器可以<font color="#8000FF">使用右键创建</font>，也可以拖曳鼠标画控件。<br>
<font color="#0000FF">调整控件大小是在控件的四角或四边</font>按住鼠标左键移动鼠标调整。<br>
选中控件并选择左顶宽高属性,可使用<font color="#8000FF">鼠标滚轮调整大小和位置</font>。<br>
双击属性列表可以修改控件名称、文字、左边、顶边、宽度、高度等属性，控件编号也就是唯一的标识符<br>
控件上双击左键或单击右键<font color="#8000FF">绑定事件</font>可自定义名称，如按钮点击，列表双击。<br>
右键添加控件跟上个控件的大小相同，并根据鼠标位置自动计算与上个控件的左边或顶边位置对齐。<br>
设计菜单的界面,添加第一个自动设为弹出菜单,再添加的内容此菜单的子项目,弹出菜单也叫子菜单。<br>
点击子菜单会弹出它包含的项目，项目内容前面自动增加空格缩进，用来区分子菜单及其项目。<br>
添加完项目再加新的子菜单时，需要选中弹出复选框，添加完子菜单后，自动取消弹出选项的选中。<br>
如果需要在子菜单下面添加二级子菜单，可以在名称前加空格，并选中弹出选项，然后继续添加项目。<br>
编辑菜单和快捷键表均可以绑定事件，子菜单没有编号，不能绑定事件，每个事件对应唯一的标识编号。<br>
设计窗体界面全部共用一个窗体消息来接受系统事件，对话框界面则按相应名称的消息过程接收消息事件。<br>
模式对话框跟消息框一样，加载显示对话框会一直等待，直到关闭对话框，才会执行后面的代码。<br>
无模式对话框可以指定窗口图标，设计器里的图标编号可以用来指定不同图标，对应资源里图标的编号。<br>
对话框窗体的编号是指定资源里的编号，跟菜单资源绑定一致。窗体不含对话框资源，编号是指定菜单资源。<br>
对话框的控件名称中加入& 符号，后面写大写字母，例如：打开(&O)，窗口上按下Alt+O键自动点击该控件。<br>
编译生成的程序默认是6.0界面风格,工程菜单取消<font color="#8000FF">"新版界面"</font>选择，则使用Windows 95风格<br>
极语言关键语法主要是<font color="#0000FF">如果否则判断循环</font>这几种，其中<font color="#FF0000">循环</font>语法有四种写法<br>
<font color="#8000FF">循环在和循环于</font>是为了迎合传统编程的习惯，不推荐初学者在极语言里使用<br>
<font color="#0000FF">程序段</font> 名称后面可以加小括号传递参数，传递参数和返回值没有约定限制<br>
不会因为参数类型去限制传送的数据类型，用户可以自由提交数值或者是变量的指针地址。<br>
程序段可以无返回值,或者返回整数,返回小数需要加冒号，<font color="#0000FF">返回(:值*6.5)</font><br>
参数变量可以指定<font color="#FF0000">默认值</font>，不指定数值默认为0，不写参数按默认值提交给程序段<br>
获取控件的文字内容，可以使用~符号直接操作。获取内容需要申请一个文本变量：<font color="#0000FF">文本 内容[16];<br>
内容~文本框1; 内容~窗体; 内容~标签1;</font>获取控件内容，就把控件名写到~右边，写入内容把控件名写左边：<br>
<font color="#8000FF">文本框1~内容; 标签2 ~ "你好"; 窗体 ~ 内存; </font>写入内容右边的变量可以是内存指针的整数变量或者一段文字<br>
编辑代码使用的快捷键：
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>CTRL+Z</td><td>撤销</td></tr>
<tr align="center"><td>CTRL+Y</td><td>重做</td></tr>
<tr align="center"><td>CTRL+C</td><td>复制</td></tr>
<tr align="center"><td>CTRL+V</td><td>粘贴</td></tr>
<tr align="center"><td>Delete</td><td>删除</td></tr>
<tr align="center"><td>CTRL+F</td><td>查找</td></tr>
<tr align="center"><td>CTRL+R</td><td>替换</td></tr>
<tr align="center"><td>CTRL+P</td><td>编译</td></tr>
<tr align="center"><td>CTRL+W</td><td>关闭</td></tr>
<tr align="center"><td>CTRL+拖曳</td><td>复制文字</td></tr>
<tr align="center"><td>F1</td><td>编程帮助</td></tr>
<tr align="center"><td>F2</td><td>语法补全</td></tr>
<tr align="center"><td>F3</td><td>查找下个</td></tr>
<tr align="center"><td>F4</td><td>编辑模块</td></tr>
<tr align="center"><td>F5</td><td>水平平铺</td></tr>
<tr align="center"><td>F6</td><td>垂直平铺</td></tr>
<tr align="center"><td>F7</td><td>标点转换</td></tr>
<tr align="center"><td>F8</td><td>更新日志</td></tr>
</table>
<p><b>常见问题：</b></p>
1.中文输入法打不开。编译运行之后，占用了输入法会导致极语言编辑器的输入法关闭。<br>
解决办法：此时可以按CTRL+F进行搜索然后按Esc取消搜索，这时候输入法就被重新激活。<br>
2.鼠标悬停信息。极语言编辑器里<font color="#FF0000">选中相应带颜色的文字可以看到相关的解释</font>，想看解释就选中文字，比搜索要方便<br>
而鼠标指向文字的提示每动一下鼠标，就会产生很多次鼠标移动事件，然后再去读取鼠标下面的文字，并解析出关键字内容<br>
效率并不会很好，况且用键盘打字时，可以直接用键盘选中文字，而不用频繁的使用鼠标，包括语法补全也是用键盘而非鼠标<br>
3.关于内存回收和安全机制。极语言的内存使用主要由开发者自己控制，局部变量的内存是离开程序段时自动回收<br>
全局变量内存包括开发者申请的内存会在关闭程序时系统自动回收，极语言没有变长文本，也不会自动替开发者申请临时内存<br>
申请的内存只要会被使用就不能回收，编译阶段和运行时都不可能精准回收内存，最多能防止内存泄漏，增加内存安全性而已<br>
但是运行时一直监视处理程序的每条执行指令，肯定会影响效率。文本变量用多长申请多长，让开发者学会自己控制内存使用<br>
局部文本内存会自动回收，全局文本内存不回收，需要开发者管理的都是自己申请的内存，全透明的编程对于用户才会更安全<br>
还有就是极语言不像C语言那样有太多的规则限制,导致很多编程语言都要制造很多复杂的概念去突破这些限制,实现更多的功能<br>
而极语言没有这些限制,这些功能就可以轻松实现,不需要语言去专门增加很多新特性去满足开发者需要,因为本来就支持扩展功能<br>
<p><b>2.自制中文编程环境</b></p>
安装目录下Sec.exe为集成开发环境（IDE）<br>
Sc.exe为编译器，可以用其它工具编辑代码让它编译。<br>
规定.sec为单文件二进制源码结构，.SEC和.极为多文件文本结构<br>
其它扩展名均保存为单文件的文本源码，如.txt .c .张三 .李四<br>
使用极语言开发环境保存代码时候加上扩展名，保存为纯文本源码<br>
保存的文件拖曳到Sc.exe上面或者运行Sc.exe点击打开保存的源码<br>
或者使用命令行 cmd Sc.exe 源码路径 完整路径前后不用加双引号<br>
自己开发IDE也是同样方法，Sc.exe后面空格加上路径即可实现编译<br>

<p><font size="6"><a name="变量">第二节</a> 变量类型</font></p>
最常用的变量是整数，如：整数 窗口。就是申请一个名为窗口整数变量。<br>
整数变量也是万能的指针，传送参数参数只有整数和小数这两种。<br>
在小程序片段之内的变量是局部变量，之外的是全局变量<br>
变量的作用主要是用来存取数据，传递参数，算法运算等等。<br>
变量类型之间可以<font color="#FF0000">使用等号进行相互转换</font>，语法：<font color="#0000FF">变量一=变量二</font><br>
就是把右边的变量类型转换成左边变量的类型数据。例如：<br>
<font color="#0000FF">整数</font> 数一;<font color="#0000FF">小数</font> 数二;<font color="#0000FF">浮点</font> 数三;<br>
数一=数二;<font color="#00C000">是小数转整数;</font>数二=数一;<font color="#00C000">是整数转小数;</font><br>
数一=数三;<font color="#00C000">是浮点转整数;</font>数三=数一;<font color="#00C000">是整数转浮点;</font><br>
转换文本时可以拼接。例如:<font color="#0000FF">文本 内容[16]="结果:"+数一"浮点:"+数三;</font><br>
等号左边是文本自动转文本或拼接,等号左边是小数或浮点时表达式进行浮点运算<br>
<font color="#0000FF">内容+数一"\r\n"</font> 是向内容追加文字,原文字增加数一的数字和换行符<br>
如果等号左边是整数,右边是混合运算,尽可能把小数或浮点变量写在前面<br>
如果等号左边和右边都是整数变量,需要浮点运算时,等号后面要加上冒号<br>
例如:数一=:数一 - 数二;还有小数浮点转整数且没有运算: 数一=数二;<br>
<font color="#FF0000">代码后面需要加换行或者分号</font> ,否则难以判定浮点运算与整数的转换<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>英文名称</td><td>中文名称</td><td>数值范围</td></tr>
<tr align="center"><td>Bool</td><td>布尔</td><td >真(True),假(False)</td></tr>
<tr align="center"><td>char,sbyte</td><td> 字符</td><td> -128~127</td></tr>
<tr align="center"><td>byte,uchar</td><td> 字节</td><td> 0到256</td></tr>
<tr align="center"><td>short</td><td>短数/整形</td><td> -32768到32767</td></tr>
<tr align="center"><td>ushort,word</td><td> 正数</td><td> 0到65535</td></tr>
<tr align="center"><td>int,dword</td><td> 整数</td><td> -2147483648到2147483647</td></tr>
<tr align="center"><td>single</td><td> 小数</td><td> 负数-3.402823E38到-1.401298E-45；正数1.401298E-45到3.402823E38</td></tr>
<tr align="center"><td>string</td><td> 文本</td><td>现已取消变长文本,申请时必须指定长度;文本 消息[16]="系统提示";英文1字节，汉字2字节</td></tr>
<tr align="center"><td>bytes</td><td>字节组</td><td>字节组 数组[15,$20,60,128];一组固定的数据,跟文本性质相似</td></tr>
<tr align="center"><td>Double</td><td> 浮点</td><td>负数时-1.79769313486232E308到-4.94065645841247E-324；正数4.94065645841247E-324到1.79769313486232E308</td></tr>
<tr align="center"><td>date</td><td>日期</td><td>8字节日期时间，运算和比较按浮点数格式</td></tr>
<tr align="center"><td>long,ulong</td><td>大数</td><td>64位整数，-9223372036854775808到9223372036854775807。</td></tr>
<tr align="center"><td>type</td><td>类型</td><td>自定义结构体,示例;<font color="#0000FF">类型</font> 窗口类{<font color="#0000FF">整数</font> 句柄,左边,上边,宽度,高度;<font color="#0000FF">文本</font> 标题[64],内容[256];}</td></tr>
<tr align="center"><td>datab</td><td>数据表</td><td>自定义数据表,示例;<font color="#0000FF">数据表</font> 人物表{<font color="#0000FF">整数</font> 生命,内功;字节 等级,职业;<font color="#0000FF">小数</font> 坐标X,坐标Y;<font color="#0000FF">文本</font> 名称[16],帮派[14];}</td></tr>
<tr align="center"><td>object</td><td>对象</td><td>对象 名称=对象名;使用等号给对象定义,否则只是一个整数</td></tr>
<tr align="center"><td>scls</td><td>子类</td><td>子类 类名{整数 变量1,变量2;程序段 登陆(账号)...结束;}</td></tr>
</table>
十六进制数字是用$或者0x表示，格林威治时间可以用整数来表示，如<font color="#0000FF">整数</font> 时间=0@2018-8-15 12:00;不要带引号。<br>
带引号是文本，如 <font color="#0000FF">整数</font> 提示="提示消息";<font color="#0000FF">文本</font> 内容(16)="$374727774367008C7A";<br>
前面加$时把十六进制字符转换成二进制数据。文本拼接的写法：内容="最终结果：" + 数值 "。总共" + 次数 "次"<br>
<font color="#0000FF">整数 数值=转整数(内容)</font>;把数字文本转整数值<br>
<font color="#0000FF">小数 数值=转小数(内容)</font>;把数字文本转小数值<br>
<font color="#0000FF">浮点 数值=转小数(内容)</font>;把数字文本转浮点值<br>
<p><b>关于全局变量和局部变量</b></p>
在程序段内申请的变量包括提交的参数都是局部变量，在程序段和子类之外申请的变量是全局变量。<br>
全局变量包括字符、字节、整形(短数)、正数、整数、日期、小数、浮点、大数、子类、对象和自定义类型。<br>
全局变量使用的是静态数据空间，局部变量使用动态栈内存空间。任何变量在作为参数传递的时候，均为4字节数值。<br>
所以大于4字节的类型比如文本、浮点和自定义类型，提交的是变量的地址而不是值，地址通常大于0x400000。<br>
小数是提交参数要直接进行小数运算时，才需要特别指定。除此之外任何提交的参数都按整数类型。<br>
因此程序段的参数就只有小数和整数这两种，结构体和子类前面可以写上类的名称用来定义参数。例如:<br>
<font color="#0000FF">程序段 示例(坐标类 值)<br>
&emsp;&emsp;整数 横坐标=值.左,纵坐标=值.顶</font><br>
<br><font color="#0000FF">程序段 计算(角色类 人物)<br>
&emsp;&emsp;整数 伤害=(攻击-人物.防御)*1.5 -人物.减伤;</font><br>
局部变量的申请和使用：<br>
局部文本和全局文本都可以像操作数组一样，读写其中每一字节。如：文本 s(16)="abc";s(2)=\d;<br>
也可以像其它变量一样，写入数字。如：s=0;文本就被清空，s=$31323334;文本开头就等于4321<br>
因为十六进制是反转的，最后的34写入字符的第一字节，对应文字是4，用s(1)读取出来就是52<br>

<p><font size="6"><a name="转义">第三节</a> 转义和标点符号</font></p>
转义符号是在文本内容里使用,也就是两个双引号之间的文字内容,例:s="您好\r\n世界";<br>
极语言的代码是允许在中间换行的，两个双引号之间也可以使用换行符制表符分页符等等<br>
符号\r\n转换成换行加回车。其它需要加单引号''如：'\r'为换行符,<br>
'\n'为回车符；'\t'为水平制表符；'\f'为分页符；'\v'为垂直制表符；<br>
''为双引号；'\0'为0字符；'\1'为缩进符号；'\2'为两个换行和回车符组合<br>
<br>另外可以用\把单个文字转换为编码值 ，如 查字符(str,\s);<br>
\转编码值也可以写作'',例如: 查字符(内容,'s');<br>
0#中国;取两个汉字的编码值;0$abcd;取四个英文的编码值<br>
0:1.2.3.4 支持IP段，颜色值，字节高低位等转换为整数值<br>
标点符号在代码中主要是区分文字，或者定义代码范围或行为性质等<br>
这些符号并不生成执行指令，但是可以用来规范或改变生成的执行指令<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>符号</td><td> 类型</td><td> 中文释义和示例</td></tr>
<tr align="center"><td>@</td><td> 多用途</td><td>1标记；2取内存地址；3取已知内存偏移地址</td></tr>
<tr align="center"><td>||</td><td> 多条件判断</td><td>或者</td></tr>
<tr align="center"><td>&&</td><td> 多条件判断</td><td>而且</td></tr>
<tr align="center"><td>$</td><td>二进制文本</td><td>"$4367008C7A",把十六进制字符转换成二进制数据</td></tr>
<tr align="center"><td>`</td><td>宽字符文本</td><td>"`文字内容",ANSI转成宽字符文本</td></tr>
<tr align="center"><td>.</td><td>指针/连接符</td><td>读写指针偏移，也可在名称中使用</td></tr>
<tr align="center"><td>_</td><td>指针/连接符</td><td>读写指针偏移，也可在名称中使用</td></tr>
<tr align="center"><td>""</td><td>文字内容</td><td>文字内容前后用双引号</td></tr>
<tr align="center"><td>$</td><td>声明文本</td><td>变量或函数后使用，代表是文本数据</td></tr>
<tr align="center"><td>:</td><td> 标记</td><td>开头: 跳到 开头</td></tr>
<tr align="center"><td>:</td><td>转成小数运算</td><td>变量或函数前使用</td></tr>
<tr align="center"><td>:</td><td>返回小数值</td><td>返回(:4.5)返回(:结果)</td></tr>
<tr align="center"><td>#</td><td>表示浮点</td><td>浮点 值=45.63#;</td></tr>
<tr align="center"><td>\</td><td>取文字编码</td><td>取单个文字（包括中文）的编码值</td></tr>
<tr align="center"><td>'</td><td>注释符号</td><td>符号后面一行内容为注释</td></tr>
<tr align="center"><td>//</td><td>注释符号</td><td>符号后面一行内容为注释</td></tr>
<tr align="center"><td>/* */</td><td>多行注释</td><td>/*开始到*/之间的内容为注释</td></tr>
<tr align="center"><td>$</td><td>十六进制</td><td>如 数值=$0D0A</td></tr>
<tr align="center"><td>0x</td><td>十六进制</td><td>如 数值=0x0D0A</td></tr>
<tr align="center"><td>0#</td><td>取文字编码</td><td>0#中国;取两个汉字的编码值</td></tr>
<tr align="center"><td>0$</td><td>取文字编码</td><td>0$abcd;取四个英文的编码值</td></tr>
<tr align="center"><td>0@</td><td>取日期数值</td><td>0@2019-4-5;取日期的整数型数值</td></tr>
<tr align="center"><td>0:</td><td>取字段数值</td><td>ip=0:192.168.1.1;颜色=0:255.64.128;键值=0:70,2;(CTRL+F)</td></tr>
<tr align="center"><td>( )</td><td>小括号</td><td>如果(左=右);相加(数,值); 整数 组(10);组(0)=15;数=组(1);</td></tr>
<tr align="center"><td>[ ]</td><td>数组或文本长度</td><td>文本 内容[16];时间类 时间[5];数=内容[2]</td></tr>
<tr align="center"><td>{ }</td><td> 代码片段</td><td>用于条件判断或循环</td></tr></table>

<p><font size="6"><a name="运算">第四节</a> 运算符号</font></p>
变量本身增加或相乘，数=数+8，数=数*10，写起来比较麻烦<br>
可以用+=、-=、*=、/=、|=、&=、%=、^=这样的写法。但加等读起来不顺口<br>
也可以用更简单的<font color="#0000FF">a+2; a-3; a*b+3; a/10; a | b; b & a;</font><br>
也就是运算符号后面的等号可以不写，读起来更顺口。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>符号</td><td>中文</td><td>释义和示例</td></tr>
<tr align="center"><td>+</td><td>加</td><td>数值相加或者增加文字（数字变量自动转换为文本）。中文写法：数 加 值，内容 加 “文字”</td></tr>
<tr align="center"><td>－</td><td>减</td><td> 数值相减或者增加文字（数字变量自动转换为十六进制文本）。中文写法：数 减 值，内容 减 数</td></tr>
<tr align="center"><td>*</td><td>乘</td><td>数值相乘，中文写法：数 乘 值</td></tr>
<tr align="center"><td>/</td><td>除</td><td></td>除法运算，中文写法：数 除 值</tr>
<tr align="center"><td>|</td><td>或</td><td>或运算，数|值。两个数值的比特位包含有1，则结果位就为1，否则为0。中文写法：数 或 值</td></tr>
<tr align="center"><td>^</td><td>异</td><td>异或运算，数^值。两个数值的比特位不相同，则结果位就为1，否则为0。中文写法：数 异 值</td></tr>
<tr align="center"><td>&</td><td>与</td><td> 1运算表达式中是与运算：数 与 值；<br>2单独变量或函数前是取指针地址；<br>3在变量或数组后面是取四字节内存值；<br>4检索语句括号后是获取地址；<br>5循环数组的数据变量后面是每次读写四字节；</td></tr>
<tr align="center"><td>%</td><td>余</td><td>取两个数相除后的余数：数 余 值，也可以在除法后单独使用（数=余）；在变量或数组后面是取两字节内存值（数组(1)%）。</td></tr>
<tr align="center"><td>!</td><td>非</td><td>数值为0则为1，数值不是0则为0，中文写法：非 数</td></tr>
<tr align="center"><td>~</td><td>反</td><td>~数，对每个二进制位进行反相，0变1，1变0，中文写法：反 数</td></tr>
<tr align="center"><td>=</td><td>转</td><td>右边变量或表达式的结果值，根据左边变量类型进行转换，然后保存到左边变量地址</td></tr>
<tr align="center"><td>++</td><td>加一</td><td>数++；变量数增加1。中文写法：数 加一</td></tr>
<tr align="center"><td>--</td><td>减一</td><td>数--；变量数减少1。中文写法：数 减一</td></tr>
<tr align="center"><td>=</td><td>等于</td><td>如果(数=值)，比较两个变量数值是否相等。中文写法：如果(数 等于 值)</td></tr>
<tr align="center"><td>!= <></td><td>不等于</td><td>数!=值，比较判断数不等于值，也可以写作：数<>值，中文写法：如果(数 不等于 值)</td></tr>
<tr align="center"><td><</td><td>小于</td><td>数<值，左边数小于右边值。中文写法：数 小于 值</td></tr>
<tr align="center"><td>></td><td>大于</td><td>数>值，左边数大于右边值。中文写法：数 大于 值</td></tr>
<tr align="center"><td>>=</td><td>不小于</td><td>数>=值	左边数不小于右边值，即大于或等于。中文写法：数 不小于 值</td></tr>
<tr align="center"><td><=</td><td>不大于</td><td>数<=值，左边数不大于右边值，即小于或等于。中文写法：数 不大于 值</td></tr>
<tr align="center"><td>-></td><td>写入</td><td>根据左边变量长度，向右边变量或表达式的地址处写入数据（字节字符1字节，整形短数正数2字节，小数整数4字节，数 写入 值+10</td></tr>
<tr align="center"><td><-</td><td>读取</td><td>根据左边变量长度，从右边变量或表达式的地址处读取数据（字节字符1字节，整形短数正数2字节，小数整数4字节，数</td></tr>
<tr align="center"><td>>></td><td>右移</td><td>数>>值，移位运算(支持小数)。中文写法：数 右移 值</td></tr>
<tr align="center"><td><<</td><td>左移</td><td>数<<值，移位运算(支持小数)。中文写法：数 左移 值</td></tr>
<tr align="center"><td>~</td><td>字</td><td>内容~文本框1，读写控件内容。左边为文本变量读取右边控件;左边为控件对象是把右边内容写入控件，窗体 字 "显示标题"</td></tr>
<tr align="center"><td>?</td><td>存</td><td>取上次赋值的结果，即一号寄存器的数值</td></tr>
<tr align="center"><td>??</td><td>纳秒</td><td>取纳秒计数器的低32位结果,高32位再用%获取。数=纳秒；值=余</td></tr></table>
浮点运算专用符号:表达式的小括号之后使用,用法:(a+b)余弦;(c)正弦;(a*a+b*b)根;(数)平方根;(n)绝对值;
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>中文</td><td>简写</td><td>释义</td></tr>
<tr align="center"><td>绝对值</td><td> 绝</td><td>变量或表达式取绝对值(含整数)；(数-值)绝对值</td></tr>
<tr align="center"><td>余弦</td><td> 余</td><td>变量或表达式取余弦；(数-值)余弦</td></tr>
<tr align="center"><td>正弦</td><td> 正</td><td>变量或表达式取正弦；(数-值)正弦</td></tr>
<tr align="center"><td>平方根</td><td> 根</td><td>变量或表达式取平方根；(数-值)平方根</td></tr>
<tr align="center"><td>正切</td><td> 切</td><td>变量或表达式取正切；(数-值)正切</td></tr>
<tr align="center"><td>反正切</td><td> 反</td><td>变量或表达式取反正切；(数-值)反正切</td></tr></table>

<font size="6"><a name="语法">第五节</a> 编程语法</font><br>
编程代码里的文字部分，包括关键字和名称定义，都是用标点符号区分开的。空格 制表符 回车换行 逗号 分号它们的作用类似<br>
<font color="#FF0080">整数 数一;小数 数二;也可以写成 整数 数一 小数 数二</font> 空格 制表符 回车换行 逗号 分号 括号这些都能把文字给区分开<br>
分号通常用于这句代码结束时,也可以用空格 制表符 回车 换行等符号代替分号;而关键字后面通常是自定义的名称,如:<font color="#0000FF">整数 数一<br></font>
这是要申请一个整数变量,名字叫数一,一句代码的中间是用空格而不是加分号,所以空格 换行 制表符可以代替分号,分号却不能代替空格等<br>
而逗号通常是要连续重复操作某件事时,比如 <font color="#0000FF">整数 数一,数二,数三,数四</font> 这里是要连续申请四个整数变量,使用逗号可以不用每次都写整数<br>
再比如调用函数时,<font color="#0000FF">发送消息(窗口,消息,参数,数据)</font>,小括号里也是要连续提交多个变量,就用逗号隔开;括号都是成对出现,代表一个范围<br>
<font color="#0080FF">程序段 窗体消息(窗口,消息,参数,数据)<br>
&emsp;&emsp;判断(消息)为 窗口关闭{停止(0)}<br>
&emsp;&emsp;为 单击左键{左键点击(参数)}<br>
&emsp;&emsp;否则 处理窗口(窗口,消息,参数,数据)<br>
结束<br></font>
上面这段代码是一个程序段的示例, 程序段后面用空格,表示后面是要定义一个名称:窗体消息<br>
后面是一对小括号,里面也是连续申请了四个接收参数,跟发送消息提交的四个参数一一对应<br>
调用<font color="#0000FF">发送消息</font>函数,把消息发给指定窗口,在窗体消息这里就能收到发过来的四个参数<br>
窗体消息里第一行代码是<font color="#0000FF">判断</font><font color="#00C0FF">消息</font>为<font color="#0000FF">窗口关闭</font>时<font color="#FF0080">停止</font>程序运行,停止哪个程序?括号里写0,代表是本程序<br>
这句话用平时说话的语句,就把所有关键词都写成一段文字了,编程代码是要把这些都区分开<br>
判断后面加小括号就把判断两个字分开,括号里是要判断的对象,这里判断发来的消息是什么<br>
如果消息<font color="#FF0080">为</font>窗口关闭,后面是大括号,它表示可能有多句代码,会执行大括号里的这些代码<br>
如果只有一句,大括号也可以省略,比如<font color="#0000FF">否则 处理窗口(窗口,消息,参数,数据)</font> 就没写大括号<br>
否则后面就要加个空格,不加的话,就是<font color="#FF0080">否则处理窗口</font>,这六个字就不是已经定义的名称,编程器无法解读<br>
最后的结束是这段代码结束了,结束后面可以加分号,但是结束后面一般都有换行,就不用加分号。<br>
程序段的代码也可以用大括号,不用写结束两个字。还有参数默认值是在创建程序段的参数名后面加等号<br>
<font color="#FF0080">程序段 加法计算(数一=10,数二=5)<br>
{<br>&emsp;&emsp;返回(数一 + 数二)<br>
}<br></font>
判断语句只用写一次,第二行还是<font color="#0000FF">判断消息为单击左键</font>的时候,执行<font color="#0000FF">左键点击</font>这个函数<br>
这个消息到来时,参数是控件的编号,数据是控件对象,窗口都是主窗口,设计多个主窗口时,可以根据哪个窗口去执行不同的操作<br>
窗体的消息非常多,大部分都是交给<font color="#0000FF">处理窗口</font>这个函数来处理,<font color="#0000FF">否则</font>就是其它消息就执行这里代码<br>
左键点击也判断提交过来的参数,判断编号是几就执行相应的功能函数,比如:按钮1点击;按钮2点击<br>
也可以根据控件对象进行判断,此时第四个参数:数据是控件对象,判断它是哪个控件<br>
<font color="#FF0080">&emsp;&emsp;为 单击左键{<br>
&emsp;&emsp;如果(数据=编辑框1)编辑事件(参数)<br>
&emsp;&emsp;否则 左键点击(参数)}</font><br>
鼠标点击编辑框,有可能是选中,也有可能是右键,也有可能是双击,使用如果语句比如数据和编辑框1<br>
两者相等就执行编辑副本,否则就执行左键点击事件,这就是如果否则语句的代码写法<br>
更多的语法请参照下表,后面的教程也有讲到更多的语法规范和代码用法<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>英文语法</td><td> 中文语法</td><td> 简单用法</td></tr>
<tr align="center"><td>if</td><td> 如果</td><td> 如果(消息=窗口关闭){停止(0);}</td></tr>
<tr align="center"><td>else</td><td> 否则</td><td> 必须放在如果语句后面,否则{返回(1);}</td></tr>
<tr align="center"><td>switch</td><td> 判断</td><td> 判断(消息)为 窗口关闭{停止(0);}</td></tr>
<tr align="center"><td>do</td><td> 循环</td><td>循环(10){...}10次停止;循环{...}无限循环;循环{...i+2}(i=100)到100停止;循环(i<100){...i++}小于100时循环</td></tr>
<tr align="center"><td>case</td><td> 为</td><td>判断语句后使用,默认判断条件是相等,可加比较符号,逗号多条件,n~m范围条件</td></tr>
<tr align="center"><td>sub</td><td>程序段</td><td> 程序段(整数 a,文本b,字节 c);编写一段程序代码</td></tr>
<tr align="center"><td>end</td><td> 结束</td><td>程序片断代码的末尾，加上此语句表示此段程序结束。可用大括号代替</td></tr>
<tr align="center"><td>sub</td><td>小程序</td><td> 小程序(整数 a,文本b,字节 c);编写一段程序代码</td></tr>
<tr align="center"><td>sub</td><td>函数</td><td> 函数(整数 a,文本b,字节 c);编写一段程序代码</td></tr>
<tr align="center"><td>export</td><td> 导出</td><td>编写一段程序代码,写法与程序段相同，用于写dll时，可被其它程序调用</td></tr>
<tr align="center"><td>import</td><td> 导入</td><td> 导入 StrStrI 支持库 "SHELL32.DLL",2; 导入dll的函数，最后2是参数数量</td></tr>
<tr align="center"><td>include</td><td> 引入</td><td> 引入 "lib\odbc32.lib"; 用于引用库文件</td></tr>
<tr align="center"><td>const</td><td> 常量</td><td> 常量 只读打开=0; const IDYES = 6;用名称定义一个数值</td></tr>
<tr align="center"><td>return</td><td> 返回</td><td> 返回结果给调用者,例如返回(N1* N2);小数结果加冒号,返回(:N1*2.5);</td></tr>
<tr align="center"><td>scls</td><td>子类</td><td>子类{整数 变量1,变量2;小程序 登陆(账号)...结束;}</td></tr>
<tr align="center"><td>new</td><td>新建</td><td>角色=新建 玩家类(等级=1,性别=0);用于新建子类，可选括号内设定初始值。</td></tr>
<tr align="center"><td>object</td><td>对象</td><td>对象 名称=对象名;申请一个对象变量,结构是(类,标识,函数名..)</td></tr>
<tr align="center"><td>crobj</td><td>创建对象</td><td>创建一个对象的实例,创建对象 名称;名称=创建对象 "WinHttp.WinHttpRequest.5.1"</td></tr>
<tr align="center"><td>ctobj</td><td>控件对象</td><td>获取控件窗口对象的实例：对象名=控件对象 窗口名;控件对象 对象名,窗口名</td></tr>
<tr align="center"><td>datab</td><td> 数据表</td><td> 数据表{整数 a,文本 b[16],字节 c;}自定义表头结构</td></tr>
<tr align="center"><td>query</td><td> 读取表</td><td> 读取表(数据库名,数据表头,[长度]);按指定结构把数据表读取到内存中。</td></tr>
<tr align="center"><td>indexof</td><td>检索</td><td>检索(变量名,查询值,[长度]);快速从数组或内存中检索数值，返回序号，未找到返回-1</td></tr>
<tr align="center"><td>addin</td><td>加数组</td><td>加数组(变量名,表名,[字段名]);把表的字段值加入数组，用来检索</td></tr>
<tr align="center"><td>zeros</td><td>清零</td><td>清零(变量名,长度,[设定值]);对数组或内存数据清零或者设定统一值</td></tr>
<tr align="center"><td>call</td><td>调用</td><td>调用 变量名(参数...);获取链接库(dll)的某函数地址到变量中,动态调用执行</td></tr>
<tr align="center"><td>rename</td><td>重命名</td><td>重命名 发送消息=SendMessage; 把英文函数换成中文使用</td></tr>
<tr align="center"><td>type</td><td>结构</td><td> 结构 窗体类{整数 窗口;整数 过程;}</td></tr>
<tr align="center"><td>iif</td><td> 如果是</td><td>a =如果是(消息=0)10,500;相当于三态语句</td></tr>
<tr align="center"><td>while</td><td> 循环在</td><td> 判断条件成立则循环,直到条件不成立. 循环在(a<1000){a++;}</td></tr>
<tr align="center"><td>for</td><td> 循环于</td><td> For(i=0;i<100;i++){i从0到99,每次加1,循环一百次}</td></tr>
<tr align="center"><td>foreach</td><td>循环数组</td><td>循环数组(a<b){}循环数组(a>b){}可循环读或者写数组或特定数据段的值</td></tr>
<tr align="center"><td>Goto</td><td> 跳到</td><td> ABC: ..... goto ABC; 开头: .... 跳到 开头;</td></tr>
<tr align="center"><td>jump</td><td> 跳转</td><td>等于、大于、小于..时跳转到某处，如：起点@ .... 跳转>起点;</td></tr>
<tr align="center"><td>break</td><td> 跳出</td><td> 在循环内使用，可跳出循环</td></tr>
<tr align="center"><td>lib</td><td> 支持库</td><td> import abort lib "MSVCRT.DLL",0;</td></tr>
<tr align="center"><td>local</td><td> 局部</td><td> 局部 整数 图片; 局部变量前面可以局部两个字，方便区分，也可以不加。</td></tr>
<tr align="center"><td>preserve</td><td> 保留</td><td> 整数 数组();重置 数组(20); 保留 数组(200);会保留原来的20个</td></tr>
<tr align="center"><td>reserve</td><td> 重置</td><td> 整数 数组(); 重置 数组(200);把数组重新分配200个，且数据清空</td></tr>
<tr align="center"><td>destroy</td><td> 销毁</td><td> 销毁 数组; 把数组或子类销毁，释放内存。</td></tr>
<tr align="center"><td>direct</td><td> 置入</td><td> 置入[字节 $68]; 置入[整数 $20];相当于写机器语言</td></tr>
<tr align="center"><td>order</td><td> 指令</td><td> 指令[6820088800];连续的十六进制机器码</td></tr>
<tr align="center"><td>movads</td><td> 传址</td><td>传址[$4001200,a];可以把变量值或数值写入指定内存位置</td></tr>
<tr align="center"><td>bytes</td><td> 字节组</td><td> 字节组 tmp[15,$20,60,128];</td></tr>
<tr align="center"><td>outfile</td><td>输出文件</td><td>修改编译输出文件的扩展名。例如：输出文件=exe</td></tr>
<tr align="center"><td>with</td><td> 列举</td><td> 列举 form{.s=1;.l=5;}等效于form.s=1;form.l=5;</td></tr>
<tr align="center"><td>alias</td><td> 别名</td><td> 导入 信息框 别名 MessageBoxA lib "USER32.DLL",4;</td></tr>
<tr align="center"><td>pever</td><td>程序版本</td><td>"1.00",或者用退格符分割的全部版权信息: "注释'\t'公司名'\t'文件描述'\t'主.次.版本'\t'工程名'\t'版权'\t'商标'\t'产品名"</td></tr>
<tr align="center"><td></td><td> 程序类型</td><td>默认0初级程序,1扩展DLL,2命令控制台,3函数类库。共0-7种。加8是8位，加16是16位，加32是32位，加64是64位，加128是宽字符环境。</td></tr>
<tr align="center"><td>peres</td><td> 程序资源</td><td>指定资源类型和文件名.例如:程序资源 10,"sec.jpg"</td></tr>
<tr align="center"><td>picon</td><td> 程序图标</td><td> 程序图标“sec.ico”;</td></tr>
</table>
<font size="6"><a name="数组">第六节</a> 文本和数组的使用</font><br>
文本是一段文字数据，数组是按数据类型连续排列的数据，指针是指向内存中某个地址位置的数值。<br>
它们都是用一个整数值来表示所在位置，操作是比较近似的。都可以用指针的语法进行操作<br>
文本相当于一维的字节数组，数组可以用来存放更多数据，跟申请内存一样都可以作为缓冲区<br>
二维数组跟一维数组用法类似，只是多了一组括号，数组都有动态和静态两种申请方法<br>
固定数组申请时括号里指定固定的数值，如：<font color="#0000FF">整数 数一(10);小数 数三(15,3);</font><br>
使用方法:<font color="#0000FF"> 数一(3)=66; 数二=数一(5) 数三(3)(0)=88.4567; 数值=数三(2)(1)</font><br>
动态数组是在申请时候括号里写空: <font color="#0000FF">整数</font> 数二(); 然后在代码段使用重置:<br>
<font color="#0000FF">重置 数二(886679) 重置 数二(66,55);</font>文本变量的数组其实就是二维的<br>
例如: <font color="#0000FF">文本 内容(64,10);</font>注意文本变量和固定数组的长度必须是数值<br>
不能是变量,例如这样就是是错的: <font color="#FF0000">文本 内容; 文本 文字(数三)</font><br>
文本数组赋值时请使用中括号，内容[1]="文字内容",是向1号数组写入文本;取值使用小括号，内容(0),内容(2)<br>
文本数组使用整数更加方便,申请全局变量,<font color="#0000FF">整数 内容(10)</font><br>
<font color="#0000FF">内容(0)="中国"</font><br>
<font color="#0000FF">内容(1)="你好"</font><br>
<font color="#0000FF">信息框(0,内容(0),内容(1),信息图标)</font><br>
普通文本使用括号是读写二进制数值,跟字节数组和内存缓冲区的用法相同。示例代码：<br>
文本 内容[64]="0123456789ABCDEF中华人民共和国";<br>
整数 数值=内容<br>
//数值得到数据缓冲区的内存地址<br>
数值=内容(0)<br>
//从数据缓冲区读取第一字节数值,0这个字<br>
数值=内容%<br>
//从数据缓冲区读取两字节数据到数值变量,01这两个字<br>
数值=内容&<br>
//从缓冲区读取四字节数据,0123这四个字,(0)可以不写<br>
数值=内容(2)<br>
//从缓冲区的2字节后读取一字节数据,2这个字<br>
数值=内容(2)%<br>
//从缓冲区的2字节后读取两字节数据,23这两个字<br>
数值=内容(2)&<br>
//从缓冲区的2字节后读取四字节数据,2345这四个字<br>
内容% =数值<br>
//向缓冲区写入两字节数值,01被修改<br>
内容& =数值<br>
//向缓冲区写入四字节数值,0123被修改<br>
内容(2)% =数值<br>
//向缓冲区的2字节后写入两字节数值,23被修改<br>
内容(2)& =数值<br>
//向缓冲区的2字节后写入四字节数值,2345被修改<br>
读写文本内的文字使用的是数组的写法，同时也是指针的用法<br>
数组和文本内置成员表:
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>中文名</td><td>英文名</td><td>变量类型</td><td>功能作用</td></tr>
<tr align="center"><td>.指针</td><td>.Ptr</td><td>数组</td><td>数据缓冲区的指针</td></tr>
<tr align="center"><td>.长度</td><td>.len</td><td>数组/文本</td><td>数组成员的数量/文本变量缓冲区大小</td></tr>
<tr align="center"><td>.维数</td><td>.dim</td><td>数组</td><td>第一维数组的长度</td></tr>
</table><br>

<font size="6"><a name="指针">第七节</a> 指针和列举语法</font><br>
极语言并没有专门的指针定义，但是可以实现甚至超越指针的所有功能<br>
例如 <font color="#0000FF">整数 s="sdkfskd";</font><br>
这里s为整数变量，它指向的就是后面这段文字的地址<br>
s(0)=\b;就把文本的第一个字符替换成字符b；<br>
整数变量本身不是一段文字，通过它却能读写文字的内容<br>
同样 <font color="#0000FF">整数 m=申请内存(128);</font><br>
m(13)=128;就是把128这个数字写入第14字节处<br>
a=m(10);是从第11字节处读取1字节。<br>
由于传统编程的文本字节数组和内存数据的用法完全不同<br>
文本只能用处理文字的函数来操作文字里面的内容数据<br>
申请内存也只能使用复制传送内存的函数来读写数据<br>
字节数组才可以使用数组的写法来读写数组成员数据<br>
所以需要一种特殊的指针来突破这些限制自由的读写数据<br>
而极语言没有这些限制，所以本身就可以实现指针的功能<br>
同时也把<font color="#FF0000">其它特性</font>比如列举功能整合到指针上<br>
结构体类型和子类数据包含有很多成员，可以使用列举语法：<br>
<font color="#0000FF">列举 人物{.等级=35;.职业=6;<br>
物攻=.攻击;血量=.生命}</font><br>
列举是记住结构体或子类的首地址,加上成员的偏移地址进行读写操作<br>
同样在数组操作时，也会已经记住变量的首地址，可以使用仿列举来读写数据。<br>
还使用一个文本变量来演示,示例代码：<br>
<font color="#0000FF">文本 内容[64]="0123456789ABCDEF";<br>
数值=内容(1);</font>使用数组获取第二字节数值<br>
.(6)=数值<br>
//6是指针之后偏移6字节,读写操作6这个字<br>
.%6=数值<br>
//6是指针之后偏移6字节,读写操作67这两个字<br>
.&6=数值<br>
//6是指针之后偏移6字节,读写操作6789这四个字<br>
.!6=数值<br>
//6是指针之后偏移6字节,读写操作6789这四个字的小数值<br>
<font color="#FF0000">使用.语法跟列举的写法类似,但是文本或数据或者内存缓冲区<br>
这些变量并没有成员变量,不能通过成员名来定位,则可以使用数值来定位偏移地址<br>
最早是用#符号作为虚指针的偏移定位,代码写法如下:</font><br>
数值=#4<br>
//#4是指针之后偏移4字节,就是读取4567这四个字<br>
数值=#(4)<br>
//#(4)是指针之后偏移4字节,小括号就是读取4这一个字<br>
数值=#[4]<br>
//#[4]是指针之后偏移4字节,中括号就是读取45这两个字<br>
数值=#@4<br>
//#@4是指针之后偏移4字节,就是4这个字的位置（取文本）<br>
数值=##4<br>
//#4是指针之后偏移4字节,就是读取456789AB这8个字（取浮点数）<br>
指针操作相关符号：
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>符号</td><td> 作用</td><td> 用法示例</td></tr>
<tr align="center"><td>@</td><td> 取内存地址</td><td>@变量名或程序段名</td></tr>
<tr align="center"><td><-</td><td> 左取符号</td><td>从右边表达式的内存地址读取数据，根据左边变量类型读1到4字节</td></tr>
<tr align="center"><td>-></td><td> 右写符号</td><td>向右边表达式的内存地址写入数据，根据左边变量类型写1到4字节</td></tr>
<tr align="center"><td>[]</td><td> 取内存处的数据</td><td>值=变量[8]；获取变量地址后第8字节处的字节值</td></tr>
<tr align="center"><td>[]%</td><td> 取内存处的数据</td><td>值=变量[8]%；获取变量地址后第8字节处的正数值</td></tr>
<tr align="center"><td>[]&</td><td> 取内存处的数据</td><td>值=变量[8]&；获取变量地址后第8字节处的整数值</td></tr>
<tr align="center"><td>`</td><td> 取已知内存</td><td>使用中括号后取1字节值：值=`；指针后移1字节</td></tr>
<tr align="center"><td>`%</td><td> 取已知内存</td><td>使用中括号后取2字节值：值=`%；指针后移2字节</td></tr>
<tr align="center"><td>`&</td><td> 取已知内存</td><td>使用中括号后取4字节值：值=`&；指针后移4字节</td></tr>
<tr align="center"><td>.?</td><td> 写结果内存</td><td>.?=30;向返回结果的内存地址写入一字节数值</td></tr>
<tr align="center"><td>.?2</td><td> 写结果内存</td><td>.?2=300;向返回结果的内存地址写入两字节数值</td></tr>
<tr align="center"><td>.?4</td><td> 写结果内存</td><td>.?4=888;向返回结果的内存地址写入四字节数值</td></tr>
<tr align="center"><td>()</td><td>读写指定内存数据</td><td>b=a(3);a(b*6+c/100)=66+d*78;非数组读写一字节</td></tr>
<tr align="center"><td>()%</td><td>读写指定内存数据</td><td>数=组%;组(b*6)%=值;非数组读写两字节</td></tr>
<tr align="center"><td>()&</td><td>读写指定内存数据</td><td>数=组(2)%;组&=值;非数组读写四字节</td></tr>
<tr align="center"><td>%</td><td>读写指定内存数据</td><td>数=组%;组%=值;非数组读写两字节，(0)%偏移为零时可省略(0)</td></tr>
<tr align="center"><td>&</td><td>读写指定内存数据</td><td>数=组&;组&=值;非数组读写四字节，(0)&偏移为零时可省略(0)</td></tr>
<tr align="center"><td>()$</td><td> 读写指定内存地址</td><td>数组指针获取地址指针：地址=$460</td></tr>
<tr align="center"><td>()!</td><td> 读写指定内存数据</td><td>数组指针读取或写入单精度值：数=组(2)!;组(6)!=值;</td></tr>
<tr align="center"><td>()#</td><td> 读写指定内存数据</td><td>数组指针读取或写入双精度值：数=组(2)#;组(6)#=值;</td></tr>
<tr align="center"><td>#</td><td> 取已知内存</td><td>使用小括号或列举后取值（整数或小数）：#4</td></tr>
<tr align="center"><td>#@</td><td> 取已知内存</td><td>使用小括号或列举后取地址（文本）：#@8</td></tr>
<tr align="center"><td>#()</td><td> 取已知内存</td><td>使用小括号或列举后取值（字节）：#(12)</td></tr>
<tr align="center"><td>#[]</td><td> 取已知内存</td><td>使用小括号或列举后取值（正数）：#[12]</td></tr>
<tr align="center"><td>##</td><td> 取已知内存</td><td>使用小括号或列举后取值（浮点）：##16</td></tr>
<tr align="center"><td>_[]</td><td> 读写已知内存</td><td>使用中括号后读取或写入字节值：_(2)=60</td></tr>
<tr align="center"><td>_[]%</td><td> 读写已知内存</td><td>使用中括号后读取或写入2字节值：_(4)%=60</td></tr>
<tr align="center"><td>_[]&</td><td> 读写已知内存</td><td>使用中括号后读取或写入整数值：_(2)&=60;n=_[4]&</td></tr>
<tr align="center"><td>_[]$</td><td> 读写已知内存地址</td><td>使用中括号后获取地址指针：地址=_[460]$</td></tr>
<tr align="center"><td>_[]!</td><td> 读写已知内存</td><td>使用中括号后读取或写入单精度值：_(4)!=60</td></tr>
<tr align="center"><td>_[]#</td><td> 读写已知内存</td><td>使用中括号后读取或写入双精度值：_(8)#=60</td></tr>
<tr align="center"><td>.()</td><td> 读写已知内存</td><td>使用小括号或列举后读取或写入字节值：.(2)=60</td></tr>
<tr align="center"><td>.%</td><td> 读写已知内存</td><td>使用小括号或列举后读取或写入2字节值：.%4=60</td></tr>
<tr align="center"><td>.&</td><td> 读写已知内存</td><td>使用小括号或列举后读取或写入整数值：.&2=60;n=.&4</td></tr>
<tr align="center"><td>.$</td><td> 读写已知内存地址</td><td>使用小括号或列举后获取地址指针：地址=.$460</td></tr>
<tr align="center"><td>.!</td><td> 读写已知内存</td><td>使用小括号或列举后读取或写入单精度值：.!4=60</td></tr>
<tr align="center"><td>.#</td><td> 读写已知内存</td><td>使用小括号或列举后读取或写入双精度值：.#6=60</td></tr>
<tr align="center"><td>.+</td><td> 增加已知内存</td><td>数据表使用列举时内存增加指定长度：.+10;.+长度;</td></tr>
<tr align="center"><td>.++</td><td> 增加已知内存</td><td>数据表使用列举时内存增加到下一行</td></tr>
<tr align="center"><td><</td><td>读指定内存数值</td><td>a < b;从b地址处取数据到a,a是字节取一字节,整形取两字节,局部变量固定4字节</td></tr>
<tr align="center"><td>></td><td>写指定内存值</td><td>a>b+8;向b+8地址处写入a的数值,a是字节写一字节,整形写两字节,局部变量固定4字节</td></tr>
</table>
虚指针就是记住一个内存地址,使用数值定位指针之后的位置进行读写数据<br>
用特殊符号来定义读写的数据是什么类型,而不需要进行字节组和其它类型的数据转换<br>
比如在括号后面加 % 就可以读写两字节正数,加 & 读写四字节整数,加 # 读写八字节浮点。示例代码：<br>
文本 内容[64]="0123456789ABCDEF";<br>
数值=内容[0]<br>
//从数据缓冲区读取第一字节数值,0这个字<br>
数值=_[2]<br>
//从缓冲区的2字节后读取一字节数据,2这个字<br>
数值=_[2]%<br>
//从缓冲区的2字节后读取两字节数据,23这两个字<br>
数值=_[2]&<br>
//从缓冲区的2字节后读取四字节数据,2345这四个字<br>
_[4]=数值<br>
//内容缓冲区向后4字节,就是向4这个字处写一字节<br>
_[4]%=数值<br>
//内容缓冲区向后4字节,百分号就是向45这两个字处写入两字节<br>
_[4]&=数值<br>
//内容缓冲区向后4字节,连接号就是向4567这里写入四字节数值<br>
//==============更早期还有一种指针用法=============<br>
全局变量是字节 整形 整数 小数等4字节以内的数值类型,可以使用左取右写符号<br>
如 文本 a="$32A4B8C6428B";字节 b;正数 i;小数 s;整数 d;<br>
b < a;就是取第一字节，b就得到0x32=50<br>
b > a+2;就把a的第三位置0xB8，换成了50<br>
i < a+3;i取得数值就是0x8B42=35650;<br>
小数使用等号时会把右边的结果转换成小数进行赋值<br>
s < a+4;这样写就不会进行转换,直接从内存地址处获取数据<br>
比如游戏封包里包含有坐标值是小数的结构数据<br>
就不能直接使用等号进行赋值,使用左取右写符号直接读写数据<br>

<font size="6"><a name="置入">第八节</a> 置入指令和机器指令的语法规范</font><br>
编程语法里有一个"指令"的语法,解释为连续的十六进制机器指令,例如: 指令[6820088800];<br>
这些十六进制字符串就是我们常说的机器语言,严格来说它不是编程语言,应该叫它机器指令<br>
在CRC32校验的模块里就有机器指令的书写示例,由于它比较难懂,我们主要看它的书写规范<br>
<font color="#0000FF">整数 CRC0;<br>
程序段 校验开启<br>
&emsp;&emsp;CRC0=申请内存(1024)<br>
&emsp;&emsp;指令[89C730C90FB6C1B508D1E87305352083B8EDFECD75F3ABFEC175E9];<br>
结束<br>
<br>
程序段 校验数据(数据,长度)<br>
&emsp;&emsp;指令[8B75088B4D0C8B3D];置入[地址 CRC0];<br>
&emsp;&emsp;指令[31C04831DB8A1E30C3C1E80833049F464975F283F0FF];<br>
结束</font><br>
机器指令穿插有置入指令的使用,因为程序里的变量函数等内存地址并不是固定的<br>
机器指令可以使用更多寄存器去优化处理速度,减少冗余的代码,可以使用更多的指令<br>
置入指令的功能表如下:
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>英文语法</td><td> 中文语法</td><td> 简单用法</td></tr>
<tr align="center"><td>byte</td><td>字节</td><td>置入[字节 15,20,40];多个用逗号隔开;</td></tr>
<tr align="center"><td>dword</td><td>整数</td><td>置入[整数 66,$204068AA];相当于汇编的DD</td></tr>
<tr align="center"><td>word</td><td>整形</td><td>置入[整形 $2040,88];相当于汇编的DW</td></tr>
<tr align="center"><td>single</td><td>小数</td><td>置入[小数 3.14];</td></tr>
<tr align="center"><td>string</td><td> 文本</td><td>置入[文本 "你好"];不带引号时是插入指定长度的0,置入[文本 50];</td></tr>
<tr align="center"><td>address</td><td>地址</td><td>置入[地址 窗体];地址是指变量的内存地址</td></tr>
<tr align="center"><td>local</td><td>局部</td><td>置入[局部 参数];局部是指局部变量的内存地址</td></tr>
<tr align="center"><td>call</td><td>调用</td><td>置入[调用 加法];调用一个程序段</td></tr>
<tr align="center"><td>function</td><td>函数</td><td>置入[函数 信息框];函数是指向外部API函数</td></tr>
<tr align="center"><td>@</td><td>指针</td><td>置入[@ 加法];指针是获取变量或程序段的偏移地址</td></tr>
</table><p><font size="6"><a name="跳转">第九节</a> 跳到和跳转标记</font></p>
编程语言实现编译程序使用的机器指令可以分为两种: 运算指令和跳转指令<br>
高级语言里的运算指令用运算符号代替,而跳转指令可分为条件跳转和无条件跳转<br>
无条件跳转在极语言里叫"跳到",就是直接跳到某个标记处;跳转语句就是指条件跳转<br>
如果和否则语句就是对条件条件指令的封装,括号里比较两个结果大小并指定跳转条件<br>
<font color="#0000FF">如果(数>值){关闭网络;退出程序}</font>就是如果数大于值的话<br>
执行关闭网络和退出程序这两个函数,实现原理是先比较数和值的大小,然后执行条件跳转<br>
代码里写的是大于,编译时的指令就是它反向条件:小于或等于,跳转到}这里也就是两句代码之后<br>
最终生成的指令是如果数小于或等于值,则跳转到关闭网络和退出程序这两句代码之后<br>
处理器判断不符合小于或者等于这个条件,就会执行这两句代码,符合条件就跳过不执行<br>
如果代码之后又有否则语句时该如何处理?<font color="#0000FF">否则{值=数}</font>多了一层逻辑判断关系<br>
只需要在}这里加一条直接跳到{值=数}这个代码之后,这两层逻辑关系的跳转过程也就实现了<br>
处理器比较数和值的大小,符合大于条件就执行关闭网络和退出程序这两句代码再跳过{值=数}这句代码<br>
符合小于或等于条件就跳过关闭网络和退出程序这两句代码去执行{值=数}这句代码<br>
还有循环语句也是通过跳转实现的: <font color="#0000FF">循环{数++}(数=10000)</font><br>
这个执行过程就是先让数递增,然后把数和一万进行比较,如果不等于就直接跳到循环这里<br>
数就会继续增加,如果等于一万就不再跳回去,处理器就会继续执行后面的代码<br>
循环的第二种写法 <font color="#0000FF">循环(数<10000){数++}</font>它会更复杂一些<br>
先比较数和一万,反向判断如果数大于或等于一万就跳转到{数++}的后面,只有这个跳转并不能循环<br>
还需要在数++之后插入一条指令,直接跳到循环这里继续比较大小并进行条件跳转<br>
循环的第三种写法: <font color="#0000FF">循环(10000){数++}</font>无条件但有次数<br>
它的实现原理是先存入条件里一万这个数,执行完{数++}之后对数值递减,结果不为0就跳回去<br>
这种循环不用比较,递减是运算指令,同样会有各种状态标志,然后根据标志进行条件跳转<br>
循环的第四种写法: <font color="#0000FF">循环{数++}</font>无条件也无次数<br>
这种循环就是无限循环,常用于DLL进程或者新创建的线程里,实现原理就更为简单<br>
执行{数++}然后无条件跳到循环这里继续执行,无条件循环只有程序关闭时才会结束<br>
跳转指令在高级语言里几乎就用不到，极语言里可以使用，且记跳转不要和跳到语句弄错<br>
在如果和循环语句中也可以指令这些条件,例如: <font color="#0000FF">如果(数#3值) 循环(数#4值)</font><br>
在数学运算之后,可以使用 <font color="#0000FF">跳转 #0 标记</font>意思是如果溢出则转移到标记处<br>
标记是在一段文字之后加上冒号或者@符号,例如下面的代码:<br>
<font color="#0000FF">整数 值=数*10000;<br>
跳转 #1 标记1<br>
信息框(0,"结果值溢出","错误提示",错误图标)<br>
标记1:</font><br>
通常跳转条件是反向设置,不溢出就转到标记1这里,那么溢出就会弹出错误提示<br>
实际开发中使用跳到要比跳转语法更多一些,比如实现一个特殊的循环过程<br>
<font color="#0000FF">标记1:<br>
{过程代码...}跳到 标记1</font><br>
这段代码就是最简单的无限循环,再举一个替换文字中某个字符的例子
<font color="#0000FF">重查:<br>
整数 数值=查找字符(文字1,\?)<br>
如果(数值>0){数值(0)=\!;跳到 重查}</font><br>
在极语言的判断条件里是不会进行赋值操作的<br>
<font color="#0000FF">循环(数值=查找字符(文字1,\?))</font>这样写只会比较数值和查找结果是否相等<br>
<font color="#0000FF">循环于(整数 数值=查找字符(文字1,\?),数值>0,数值(0)=33)</font>这样写也不行<br>
因为循环于的第一步是申请变量并向它初始化赋值,它是不会循环执行这个赋值操作的<br>
要实现不用跳到语句进行替换文字,就需要用特殊的指针写法:<br>
<font color="#0000FF">循环(查找字符(文字1,\?))<br>
{数值=?;数值(0)=\!}</font><br>
这里?是当前查找字符的内存地址,向这里写入一字节数值</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>用法</td><td>作用解释</td></tr>
<tr align="center"><td>跳转 = 标记</td><td>相等则转移到标记</td></tr>
<tr align="center"><td>跳转 != 标记</td><td>不相等则转移到标记</td></tr>
<tr align="center"><td>跳转 <> 标记</td><td>不相等则转移到标记</td></tr>
<tr align="center"><td>跳转 > 标记</td><td>大于则转移到标记(比较带符号数)</td></tr>
<tr align="center"><td>跳转 < 标记</td><td>小于则转移到标记(比较带符号数)</td></tr>
<tr align="center"><td>跳转 <= 标记</td><td>小于或等于则转移到标记(比较带符号数)</td></tr>
<tr align="center"><td>跳转 >= 标记</td><td>大于或等于则转移到标记(比较带符号数)</td></tr>
<tr align="center"><td>跳转 #0 标记</td><td>若溢出则转移到标记</td></tr>
<tr align="center"><td>跳转 #1 标记</td><td>不溢出则转移到标记</td></tr>
<tr align="center"><td>跳转 #2 标记</td><td>小于则转移到标记(比较无符号数)</td></tr>
<tr align="center"><td>跳转 #3 标记</td><td>大于或等于/进位为零则转移到标记(比较无符号数)</td></tr>
<tr align="center"><td>跳转 #4 标记</td><td>相等则转移到标记</td></tr>
<tr align="center"><td>跳转 #5 标记</td><td>不相等则转移到标记</td></tr>
<tr align="center"><td>跳转 #6 标记</td><td>小于或等于则转移到标记(比较无符号数)</td></tr>
<tr align="center"><td>跳转 #7 标记</td><td>大于则转移到标记(比较无符号数)</td></tr>
<tr align="center"><td>跳转 #8 标记</td><td>结果为负则转移到标记</td></tr>
<tr align="center"><td>跳转 #9 标记</td><td>结果为正则转移到标记</td></tr>
<tr align="center"><td>跳转 #A 标记</td><td>奇偶位为偶则转移到标记</td></tr>
<tr align="center"><td>跳转 #B 标记</td><td>奇偶位为奇则转移到标记</td></tr>
<tr align="center"><td>跳转 #C 标记</td><td>小于则转移(比较带符号数)</td></tr>
<tr align="center"><td>跳转 #D 标记</td><td>大于或等于则转移(比较带符号数)</td></tr>
<tr align="center"><td>跳转 #E 标记</td><td>小于或等于(比较带符号数)</td></tr>
<tr align="center"><td>跳转 #F 标记</td><td>大于则转移(比较带符号数)</td></tr>
</table>
<font size="6"><a name="结构">第十节</a> 结构体类型的使用</font><br>
在申请变量的时候,特定的场合总是会申请相同的多种变量,这些变量的排列顺序也是一样的结构,所以就有了结构体这种类型<br>
极语言里自定义结构体就叫"类型",对于特别常用的结构类型会用套装标准的格式来定义这个结构,比如下面几种结构体:<br>
<font color="#0000FF">类型 坐标类{整数 左,顶;}</font><br>
一个坐标点或者一个几何形体的坐标位置,都需要左和顶两个整数值去定义这个位置<br>
在代码里写书写<font color="#0000FF">坐标类 坐标</font>;就会申请坐标.左和坐标.顶这两个整数变量<br>
<font color="#0000FF">类型 尺寸类{整数 宽,高;}</font><br>
一个方形或者近似方形的几何形状,都需要宽和高两个整数值去定义它的大小<br>
在代码里写书写<font color="#0000FF">尺寸类 大小</font>;就会申请大小.宽和大小.高这两个整数变量<br>
<font color="#0000FF">类型 矩形类{整数 左,顶,宽,高;}</font><br>
一个正方形或者长方形的窗口对象,都需要左和顶以及宽和高这四个整数值去定义它的大小和位置<br>
在代码里写书写<font color="#0000FF">矩形类 矩形</font>;就会申请矩形.左、矩形.顶、矩形.宽、矩形.高这四个整数变量<br>
<font color="#0000FF">类型 快捷键类{整形 行为,键值,标识;}</font><br>
一个快捷键或者键盘鼠标的动作信息,都需要用数值去描述和定义动作行为(SHIFT,CTRL,Alt等)<br>
还需要一个数值去定义具体哪一个动作(鼠标左键,右键,中键,键盘具体哪个键等等)和加速器标识符<br>
在代码里写书写<font color="#0000FF">快捷键类 快捷</font>;就会申请快捷.行为,快捷.键值和快捷.标识这三个整形变量<br>
<font color="#0000FF">类型 窗口类{整数 风格,消息,类长,实长,实例,图标,光标,背景,菜单,名称;}</font><br>
窗口类是创建窗口程序需要使用的类,极语言的基础程序内置模块(GUI.inc)就有使用这个类<br>
<font color="#0000FF">窗口类 程序(风格=$83,实例=$400000,背景=6)</font>申请类型时可以在后面括号里给成员赋值<br>
<font color="#0000FF">类型 窗口外观类{整数 参数,实例,菜单,父窗,高度,宽度,顶部,左边,风格,名称,类名,扩展}</font><br>
窗口外观类可以通过发送消息函数来创建窗口控件,在窗口创建消息到来时也能收到这个结构体<br>
<font color="#FF6000">类型只能是全局变量,在类型变量名后面加小括号设定初始值，不用按顺序指定，需要指定成员名。</font>例如：<br>
<font color="#6000FF">文件框类 文件框(长度=76,路长=64,名长=64);</font><font color="#0F9F00">//要注意预置初始值时，整数只能用数字，文本只能用字符串。<br></font>
<font color="#FF6000">
赋值代码是在程序段之内书写，例如：</font><font color="#6000FF">文件框.标题="打开文件"</font><font color="#FF6000">，用文本向整数变量赋值。</font><br>
标题这个整数成员变量赋值的是"打开文件"这段文字的指针地址,它只能在编译程序时才能确定地址<br>
还有一种情况:文件框.窗口=窗体;虽然都是整数变量,但是窗体是运行程序创建窗口之后才有具体地址<br>
窗体虽然也是个整数变量,但是这个数值指向的地址里包含一系列窗口相关的数据信息,通常称之为对象<br>
类型是用来连续申请多种变量，复杂的类型结构长度也是可变的<br>
这种结构体的第一个变量通常都是长度，其成员结构也并不确定,使用组合标志来确定使用哪些成员<br>
也有的不用长度而只用标志，指定包含哪些数据就去特定位置获取<br>
对于复杂的结构只用指定部分成员数值时,可以使用小括号语法赋值,还有一种大括号初始化值的方法:<br>
<font color="#0000FF">矩形类 矩形={10,20,800,600}</font>这是给单个矩形指定左顶宽高四个值的写法<br>
使用大括号初始化数值,必须给所有成员变量都指定数值,指定的数值跟成员变量的位置是对应的<br>
<font color="#FF6000">矩形类 矩形[5]={<br>
{10,20,800,600},<br>
{30,50,600,500},<br>
{40,60,700,400},<br>
{50,30,900,700},<br>
{20,10,300,200}<br>
}</font>这是给五个矩形类变量初始化值的写法,五组大括号里都包含有四个变量的数值<br>
下面是坐标类,尺寸类,矩形类的结构定义<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>坐标类</td><td>POINT</td><td>8</td><td>用来存储坐标位置的信息</td></tr>
<tr><th colspan=4>坐标类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>水平坐标位置。</td></tr>
<tr><td>顶</td><td>y</td><td>整数</td><td>垂直坐标位置。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>尺寸类</td><td>SIZE</td><td>8</td><td>用来存储尺寸大小的信息</td></tr>
<tr><th colspan=4>尺寸类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>宽</td><td>cx</td><td>整数</td><td>尺寸大小的宽度。</td></tr>
<tr><td>高</td><td>cy</td><td>整数</td><td>尺寸大小的高度。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>矩形类</td><td>RECT</td><td>16</td><td>用来表示一个矩形框的四条边位置。</td></tr>
<tr><th colspan=4>矩形类——成员表</th></tr>
<tr><td>左</td><td>left</td><td>整数</td><td>指定矩形框左上角的x坐标</td></tr>
<tr><td>顶</td><td>top</td><td>整数</td><td>指定矩形框左上角的y坐标</td></tr>
<tr><td>宽</td><td>right</td><td>整数</td><td>指定矩形框右下角的x坐标</td></tr>
<tr><td>高</td><td>bottom</td><td>整数</td><td>指定矩形框右下角的y坐标</td></tr>
</table><br>
<font size="6"><a name="数据">第十一节</a> 数据表和数据库的使用</font><br>
数据表是为批量读取数据库而设计的特殊类型，可以自定义数据结构，然后直接把数据读取到相应结构内存中，无需使用ADO等对象。<br>
通常我们使用ADO对象来读写数据，由于记录集对象结构过于复杂，每行每列的类型、名称、序号、长度、缓冲区指针和长度，以及各种属性、方法等。<br>
可是实际应用中，往往需要把记录集中的数据，再次读取到自己定义的变量(结构内存)中，所以极语言增加了直接读取数据到指定结构的功能。<br>
只要需要的字段数据读取出来，还可以直接改变数据类型。例如数据库中字段类型为整数，程序需要把整数类型数据全部转换成小数类型。<br>
同样的数值15，整数和单精度小数都占四字节，但是它们的数据却大不相同。程序定义为小数，数据库里是整数，就可以全部提取为小数数据<br>
读取后的数据表读写方法为：表名(行号).字段名。如：lv=玩家表(0).等级;玩家表(3).职业=5; 表名.rows为行数 表名.cols为列数<br>
读取数据是按查询的sql语句里的表名和字段顺序，并不是按照程序里的表名和字段名，所以程序代码里的表名和字段名是完全自定义的。<br>
数据表结构类型，跟自定义类型(type）的性质类似，类型是不支持数组的，所以可以用数据表代替类型，当自定义数组类型使用。<br>
长(表名)获取的是类型结构或者说每一行的数据长度，表名.len是申请的数组长度，使用前需要 重置 表名(数量)。<br>
申请的长度数量要大于或等于查询表的记录数，读取完数据之后，得到 表名.rows 数据表的实际读取记录数。<br>
数据表的序号是从0开始的，100行记录就是按序号0-99获取。读取的数据存放是一段连续的内存，行列是连续整齐排列的。<br>
数据表结构的名称定义和数据库(对象)的字段定义对比:
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>英文语法</td><td>中文语法</td><td>字段类型</td><td>数值范围</td></tr>
<tr align="center"><td>char</td><td>字符</td><td>TinyInt</td><td>-128~127</td></tr>
<tr align="center"><td>byte</td><td>字节</td><td>TinyInt</td><td>数据同上,转为正数</td></tr>
<tr align="center"><td>short</td><td>整形</td><td>SmallInt</td><td>-32768到32767</td></tr>
<tr align="center"><td>int</td><td>整数</td><td>Int</td><td>-2147483648到2147483647</td></tr>
<tr align="center"><td>single</td><td>小数</td><td>Real</td><td>参见数据类型</td></tr>
<tr align="center"><td>double</td><td>浮点</td><td>Float</td><td>参见数据类型</td></tr>
<tr align="center"><td>string</td><td> 文本</td><td>VarChar</td><td>[16]需指定长度</td></tr>
<tr align="center"><td>date</td><td>日期</td><td>DateTime</td><td>64位整数</td></tr>
<tr align="center"><td>long</td><td>大数</td><td>BigInt</td><td>64位整数</td></tr>
<tr align="center"><td>binary</td><td>二进制</td><td>Binary</td><td>[1640]需指定长度</td></tr>
</table>由于数据库中没有字节类型,把TinyInt读入字节类型时,负数会变成加256的正数<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>中文名</td><td>英文名</td><td>功能作用</td></tr>
<tr align="center"><td>.指针</td><td>.Ptr</td><td>数据缓冲区的指针</td></tr>
<tr align="center"><td>.长度</td><td>.len</td><td>初始化可存储行数</td></tr>
<tr align="center"><td>.行数</td><td>.rows</td><td>已读取数据的行数</td></tr>
<tr align="center"><td>.列数</td><td>.cols</td><td>每行数据的列数</td></tr>
<tr align="center"><td>读取表</td><td>query</td><td>读取数据到数组缓冲区</td></tr>
<tr align="center"><td>加数组</td><td>addin</td><td>把某列数据加到一维数组</td></tr></table>
数组,数据表和结构体都属于全局变量,数组可以是静态和动态两种<br>
静态数组例如: 整数 一(10);字节 二(5);动态数组括号内为空,例如 整形()<br>
结构体类型只支持是静态数组,静态数组不支持重置,保留和销毁<br>
数据表只支持动态数组,申请的数据是清零的,支持重置,保留和销毁<br>
使用示例:<br>
1.先在全局段定义一个数据表<br>
<font color="#FF6000">数据表 账号表{文本 密码[16],密保[16],邮箱[16];整数 性别}</font><br>
2.像数组一样重置数据表的长度,数据表可以作为动态二维数组用<br>
<font color="#FF6000">重置 账号表(5000)</font>;此时账号表长度为5000,可以存入五千行数据<br>
如果不用数据库的话,现在就可以直接使用账号表了,比如:<br>
<font color="#FF6000">账号表(0).密码="ASDFGHretuivhJhj";<br>
密码保护验证=账号表(105).密保;<br>
邮箱地址=账号表(8868).邮箱;</font><br>
3.多数情况下使用数据表,也是为了操作数据库,可以在模块列表里选中"数据库"<br>
<font color="#FF6000">数据.连接(连接语句)</font>;首先要跟数据库建立连接<br>
连接语句对于不同的数据库类型,使用不同的驱动连接字符串:<br>
<font color="#00C000">ACCACE数据库: "Driver={Microsoft Access Driver (*.mdb)};DBQ=game.mdb"<br>
SQLite数据库: "Driver={SQLite3 ODBC Driver};Database=d:\game.db"<br>
mssql远程连接: "Driver={SQL Server};Server=127.0.0.1;Database=game;Uid=sa;Pwd=admin;"<br>
mssql本机连接: "Driver={SQL Server};SERVER=(local);Trusted_Connection=yes;DATABASE=game"</font><br>
4.跟数据库建立连接之后,执行SQL语句,查询或更新<br>
数据.执行("update 表名 set 字段名=数值")<br>
数据库语句除了表名和字段可以用中文,其它都是英文,具体上网查<br>
5.快速读取整个表<br>
根据第一步定义的数据表结构,写好查询语句,读取到指定的数据表中<br>
数据库模块提供有读取数据库里整个表字段的方法: 数据.读表
<font color="#0000FF">长度=数据.读表("账号")</font>;通过表名"账号"读取整个表,得到记录数:长度<br>
<font color="#0000FF">读取表(库表,账号表,长度)</font>;这里有三个参数要重要说明一下<br>
第一个参数库表是模块固定的一个变量,刚才读表就是把表对象地址指向库表这个变量<br>
读取表是极语言封装的一个专用库,把整个表对象内数据读取到账号表这个定义的数据表中<br>
第三个参数是可选参数,第二步如果没有重置表的长度,这里加上它就会自动重置长度<br>
好处就是数据库里有多少行,就申请多少内存去存放数据,一点内存也不会浪费<br>
还有第二种情况:如果账号表里很多字段,定义的数据表只是用到的几个,就读取指定字段<br>
<font color="#0000FF">数据.执行("select 密码,密保,邮箱,性别 from 账号")</font>;指定读取这四个字段<br>
<font color="#0000FF">读取表(库表,账号表)</font>;读取表的时候不用指定长度<br>
第二步已经重置了数据表的长度,就无需指定,如果想根据数据库里实际行数去重置数据表行数<br>
<font color="#0000FF">长度=数据.读取("select count(*) from 账号")</font>;注意使用的是读取,语句也不一样<br>
<font color="#0000FF">重置 账号表(长度)</font>;使用重置长度,或者在读取表时候指定长度都可以<br>
但是两者有很多区别,重置是新申请一个内存,原来申请过的话,就要使用销毁语句<br>
而读取表时指定长度是会自动销毁原来的内存,重新申请指定长度的内存<br>

<font size="6"><a name="子类">第十二节</a> 子类和对象的使用</font><br>
子类需要通过"新建"语句创建子类才能使用,数据自动清零,只支持销毁<br>
子类和对象支持全局变量和局部变量，实体是一个整数指针变量<br>
子类代码需要单独一个模块文件来书写，格式为：
<font color="#0000FF">子类 角色类{<br>
整数 攻击,防御,减伤;小数 横标,竖标,纵标;
程序段 函数名(参数)
整数 数字=参数
结束
}</font>整个子类的代码除了"子类 名称"之外,都在大括号范围内<br>
子类代码有全局和局部变量,在子类的程序段内可以直接使用当前子类的全局变量<br>
就是说子类内的全局变量只是在当前子类适用,不是整个工程的全局变量<br>
在工程代码里访问子类变量是在新建实例化之后<br>
<font color="#0000FF">
整数 人物=新建 角色类<br>
人物.攻击=30<br>
左边距=人物.横标<br>
人物.函数名(350)</font><br>
如果是在子类内部,访问另一个子类,就需要提交实例化的子类变量<br>
假如在子类内部写好了这样一个程序段<br>
<font color="#0000FF">程序段 计算(角色类 人物)<br>
&emsp;&emsp;整数 伤害=(攻击-人物.防御)*1.5 -人物.减伤;</font><br>
就可以再创建一个角色类,也就是游戏里人另一个人物角色<br>
<font color="#0000FF">角色类 人物1=新建 角色类<br>
人物.计算(人物1)</font>一号人物攻击另一个人物进行伤害计算<br>
子类内部使用单独的"@"代表子类本身,在需要提交自身这个子类时<br>
<font color="#0000FF">程序段 发动攻击(数据)<br>
&emsp;&emsp;角色类 人物=数据(15)&<br>
人物.计算(@)</font>通过数据获取到另一个人物对象的指针,提交自身并调用另一个子类对象<br>

子类的变量类型支持如下几种:
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>英文语法</td><td>中文语法</td><td>数值范围</td></tr>
<tr align="center"><td>Bool</td><td>布尔</td><td >真(True),假(False)</td></tr>
<tr align="center"><td>char,sbyte</td><td> 字符</td><td> -128~127</td></tr>
<tr align="center"><td>byte,uchar</td><td> 字节</td><td> 0到256</td></tr>
<tr align="center"><td>short</td><td> 整形</td><td> -32768到32767</td></tr>
<tr align="center"><td>word</td><td> 短数</td><td> -32768到32767</td></tr>
<tr align="center"><td>ushort</td><td> 正数</td><td> 0到65535</td></tr>
<tr align="center"><td>int,uint,dword</td><td> 整数</td><td> -2147483648到2147483647</td></tr>
<tr align="center"><td>single</td><td> 小数</td><td> 负数-3.402823E38到-1.401298E-45；正数1.401298E-45到3.402823E38</td></tr>
<tr align="center"><td>Double</td><td> 浮点</td><td> 负数时-1.79769313486232E308到-4.94065645841247E-324；<br>正数4.94065645841247E-324到1.79769313486232E308</td></tr>
<tr align="center"><td>long,ulong</td><td>大数</td><td>64位整数，32位编程下多用于存储或时间计算。</td></tr>
<tr align="center"><td>string</td><td> 文本</td><td>[16]需指定长度,可代替二进制数据</td></tr>
</table>子类对象只有一个内置成员:长度<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>中文名</td><td>英文名</td><td>功能作用</td></tr>
<tr align="center"><td>.长度</td><td>.len</td><td>子类空间的长度</td></tr></table>
COM对象有两个内置成员:类和标识,但是这两个成员也是可选的,可以只有一个,或者两个都没有<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>中文名</td><td>英文名</td><td>变量类型</td><td>功能作用</td></tr>
<tr align="center"><td>.类</td><td></td><td>对象</td><td>对象数据的类关联标识CLSID,或称接口</td></tr>
<tr align="center"><td>.标识</td><td></td><td>对象</td><td>对象数据的IID标识</td></tr></table>
子类变量均可以使用数组,下标长度必须是数字,不支持动态数组<br>
书写子类变量时不能赋值,未新建子类时变量的数据并不存在<br>
子类如果不包含变量,是不需要新建,不用申请内存空间<br>
子类里面包括程序段,可以直接使用子类内部的变量<br>
子类书写完之后,以大括号}结尾,跟命名子类后的{对应<br>
使用子类时先要新建子类,才可以使用其变量和方法函数<br>
子类名 名称1 = 新建 子类名; 整数 名称2=新建 子类名<br>
也可以用赋值指向已存在的子类: 子类名 名称3=名称1;<br>
子类变量用法:整数 数一=名称1.变量名;名称1.变量名=88;<br>
传递参数时也可以使用子类:程序段 测试(子类名 名称3)<br>
名称3.变量=99;变量9=名称3.读取(数据,4);名称3.写入(内容)<br>
销毁子类方法是:销毁 名称2;子类名和子类实体要区分清楚<br>
子类本身并没有特别定义，它可以是全局的整数变量，也可以是局部整数，也可以是整数数组。<br>
全局变量是编译程序时，提前在数据区段申请的。局部变量仅在小程序段内有效，属于临时存储空间。<br>
子类和数据表的变量，是在程序运行之后，去动态申请的内存区块。子类使用前需要使用 新建 子类名称 <br>
数据表相当于自定义二维数组，使用前需要先“重置”数组的长度，该长度不能小于所读取数据的行数。<br>
数据表可以使用数组的重置、保留和销毁方法，而子类只可以使用新建和销毁这两个方法。<br>
子类和数据表的区别：<br>
子类申请的内存区域并不是清零的，所以在新建的时候，可以用：玩家=新建 角色类(等级=1,职业=2,性别=1);<br>
去设置子类变量的数值，未清零的内存数据是随机的，也就是说子类变量在新建子类时数值是不确定的。)<br>
而数据表在重置长度后，内存区域是清零的，所有变量此时值都是0，数据表也可以用作自定义数组。<br>
成员变量使用方法是：玩家表(0).性别，括号内是行号也就是数组的标号，是从0开始计数的。<br>
子类变量的使用方法是：玩家.性别。如果申请的子类变量是数组形式，如：角色类 玩家()<br>
也可以像数组一样，先 重置 玩家(1000)，玩家(0)=新建 角色类; 玩家(0).性别=1;<br>
但是销毁只能是先销毁一个成员，销毁 玩家(0)。或者 N=玩家(0);销毁 N;<br>
子类变量在子类内部可以不加前缀直接访问，如：等级=100;职业=3;xb=性别等等。<br>
COM对象申请可以在全局和局部,方法是:对象 名称=对象名;也可以用对象结构。例如:对象 任务=任务栏类;也可以写成下面的代码形式<br>
对象 任务(<font color="#FF0000">$44F3FD566DFDD011958A006097C9A090,$42F3FD566DFDD011958A006097C9A090</font>,<font color="#0000FF">接口,计数,释放,初始化,添加,删除,激活,活动</font>)<br>
第一项是对象数据和代码关联的类接口CLSID,第二项是与对象通信的接口标识符的IID<br>
这两项为十六进制转换写法,不需要CLSID或者IID时数据可以为空,也可以使用简写:<br>
很多系统对象的后面部分相同,前4字节不同,如:<font color="#FF0000">$0B01000000000000C000000000000046</font><br>
可以只写前面部分:$0B01,注意这里只写了两字节,后面是00就可以不写,还有一种简写:<br>
比如上面申请对象使用的CLSID和IID后面部分相同,只有第一字节不同,第二项可以写成:$42<br>
极语言库里已有的COM对象结构在说明书里有使用方法<br>
例如:任务栏类,链接类,存储类,可以查看具体说明<br>
申请完对象变量,需要使用创建对象去创建对象实体<br>
语法是:创建对象 任务;任务.初始化;任务.添加(窗口)<br>
任务.删除(窗口);任务.激活(窗口),任务.活动(窗口)<br>
对象不使用新建和销毁,释放对象写法是:任务.释放;<br>

<font size="6"><a name="常量">第十三节</a> 常量的申请和使用</font><br>
编程所用到的数值非常多，在调用函数或者实现某个功能时，需要定义某个数值代表什么含义。<br>
调用API函数都会定义每项参数可以使用哪些数值，返回值的数值又代表什么含义，由于这些数值太多太难记。<br>
极语言根据这些数值对应作用进行中文命名，看到这些中文名称就能理解它的使用，常量的名称其实是代表某个数值。<br>
很多时候这些数值是某些选项的组合，比如信息框的图标样式就是多种组合，例如: [确定取消 + 问号图标]。<br>
可以看出是“确定”“取消”两个按钮加上问号图标的组合，这里为什么要用中括号呢？<br>
中括号是在编译时候对括号里的运算表达式进行计算，最终得到一个数值。<br>
不加中括号就不计算，而是编译成运算指令，在程序运行的时候再进行运算处理。<br>
常量通常都是数值，都是可以提前进行计算。所以使用常量或者已知数字进行进行时要加中括号<br>
中括号里面可以嵌套中括号，但是不要嵌套小括号，遇到小括号就会编译成运算指令。<br>
中括号表达式可以使用的运算符号有：+加、-减、*乘、/除、|或、&与、!非、^异或、~乘方。<br>
其中!非运算也就是按位取反，如：!1=-2。~乘方只能在中括号表达式里有效。示例：<br>
常量 样式=[6+[35-12]*150-[60/12]];注意这种计算不是按先乘除后加减进行运算<br>
需要优先计算就要多加一层中括号，通常使用中括号的表达式都不会太复杂，所以是按顺序优先<br>
常量的标准写法如下:<br>
<font color="#0000FF">
常量 窗口创建 = 1;<br>
常量 程序关闭 = 2;<br>
常量 窗口移动 = 3;<br>
常量 窗口缩放 = 5;<br>
常量 窗口激活 = 6;<br>
常量 获得焦点 = 7;<br>
常量 失去焦点 = 8;</font><br>
常量也跟变量一样支持使用逗号连续申请:<br>
<font color="#0000FF">常量 确定取消=1,中止重试=2,是否取消= 3,弹出是否=4,重试取消=5;</font><br>
以上两种常量数值是按十进制连续增加的数值,这些数值不能相互叠加使用,但可以和更高位的值进行相加,如: [确定取消 + 问号图标]。<br>
<font color="#0000FF">常量 错误图标=0x10,问号图标=0x20,惊叹图标=0x30,信息图标=0x40,用户图标=0x80;</font><br>
十六进制的每一位数字0到F占用四位,上面这些图标的低位数都是0,而按钮样式的数值都小于15,相加不会影响高位值,如: [确定取消 + 问号图标] 等同于0x21<br>
再看下面这些常量数值:<br>
<font color="#0000FF">
常量 保持尺寸 = $0001;<br>
常量 保持位置 = $0002;<br>
常量 保持层序 = $0004;<br>
常量 保持图像 = $0008;<br>
常量 保持状态 = $0010;<br>
常量 增加边框 = $0020;<br>
常量 显现窗口 = $0040;<br>
常量 隐藏窗口 = $0080;<br>
常量 清空窗口 = $0100;<br>
常量 不变顺序 = $0200;<br>
常量 防止同步 = $2000;<br>
常量 防止死锁 = $4000;</font><br>
这些数值的每个位都是只有1 2 4 8这四种数值,它们的二进制数值分别是: 0001 0010 0100 1000<br>
如果十六进制再高一位10 20 40 80这四个数值,它们的二进制数值分别是: 00010000 00100000 01000000 10000000<br>
这些数值都是在不同的二进制位是1,其它位是0,它们相加只用把相应位的二进制数写成1即可,跟或运算的结果一致<br>
0001 (1)和0010 (2) 相加是0011也就是3,所以常量值组合经常使用或运算,如: [确定取消 | 问号图标]。<br>
[保持尺寸 | 保持位置 | 保持层序 | 保持图像 | 保持状态 | 增加边框 | 显现窗口 | 隐藏窗口] 结果就是 0xFF<br>
<p><font size="6"><a name="信息框">第十四节</a> 信息框、消息框、延时框——图标按钮样式</font></p>
<font color="#0000FF">如果(信息框(0,"中国","你好",[确定取消 + 问号图标])=选了确定)退出程序</font><br>
信息框不只是按钮和图标样式可以选择,还可以通过返回值,知道用户点击了哪个按钮<br>
不指定按钮也有一个确定按钮和右上角的X关闭,包括按ESC键也会关闭对话框<br>
只有一个按钮时,点X或者按ESC都是返回确定按钮这个数值1,如果有多个按钮<br>
点X或者按ESC通常是返回最后的按钮,取消或者否,对于Win10以前的系统,点X返回关闭8<br>
按ESC返回结果也不一样,为了兼容不同系统,就可以判断点了确定按钮如何处理<br>
否则如何处理,无论是点的取消或者否还是点了X还是按了Esc,都按否则进行处理<br>
<font color="#0000FF">消息框类 信息(风格=用户图标,实例=$400000,图标=1)</font>消息框类的风格跟信息框的图标样式相同，用户自定义图标要指定实例<br>
32位exe程序的实例可以使用0x400000这个固定的数值，内置模块有一个“程序.实例”，是一个全局整数变量，可以在其它程序段里使用<br>
消息框类也是一个全局变量，初始化赋值只能使用已知数值或者常量，不能使用变量<br>
<font color="#0000FF">信息.标题="标题文字"</font>;//在程序段内指定消息框显示的标题文字<br>
<font color="#0000FF">信息.内容="内容文字"</font>;//在程序段内指定消息框显示的内容文字<br>
<font color="#0000FF">整数 编号=消息框(信息)</font>弹出消息框,并返回关闭消息框时点击了哪个按钮<br>
延时框是弹出一个消息框,如果用户没有点击,会在指定时间关闭消息框<br>
<font color="#0000FF">整数 编号=延时框(0,"中国","你好",[弹出是否 + 惊叹图标],0,5000)</font>;//弹出一个延时消息框上面有是、否两个按钮和惊叹图标<br>
最后一个参数指定5000毫秒,就会在5秒之后自动关闭消息框<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>确定取消</td><td>$000001</td><td>MB_OKCANCEL</td><td>弹出的信息框包含“确定”和“取消”两个按钮</td></tr>
<tr><td>中止重试</td><td>$000002</td><td>MB_ABORTRETRYIGNORE</td><td>弹出的信息框包含“中止”、“重试”和“放弃”三个按钮</td></tr>
<tr><td>是否取消</td><td>$000003</td><td>MB_YESNOCANCEL</td><td>弹出的信息框包含“是”、“否”和“取消”三个按钮</td></tr>
<tr><td>弹出是否</td><td>$000004</td><td>MB_YESNO</td><td>弹出的信息框包含“是”和“否”两个按钮</td></tr>
<tr><td>重试取消</td><td>$000005</td><td>MB_RETRYCANCEL</td><td>弹出的信息框包含“重试”和“取消”两个按钮</td></tr>
<tr><td>错误图标</td><td>$000010</td><td>MB_ICONHAND</td><td>弹出的信息框包含红色的“错号”图标</td></tr>
<tr><td>问号图标</td><td>$000020</td><td>MB_ICONQUESTION</td><td>弹出的信息框包含蓝色的“问号”图标</td></tr>
<tr><td>惊叹图标</td><td>$000030</td><td>MB_ICONEXCLAMATION</td><td>弹出的信息框包含黄色三角的“惊叹”图标</td></tr>
<tr><td>信息图标</td><td>$000040</td><td>MB_ICONASTERISK</td><td>弹出的信息框包含蓝色的“i符号”图标</td></tr>
<tr><td>用户图标</td><td>$000080</td><td>MB_USERICON</td><td>弹出的信息框可以显示用户自定义图标</td></tr>
<tr><td>弹出系统</td><td>$001000</td><td>MB_SYSTEMMODAL</td><td>弹出窗口会置顶，且标题栏有系统图标。</td></tr>
<tr><td>弹出任务</td><td>$002000</td><td>MB_TASKMODAL</td><td>弹出窗口到任务栏显示</td></tr>
<tr><td>帮助按钮</td><td>$004000</td><td>MB_HELP</td><td>弹出窗口包含“帮助”按钮。</td></tr>
<tr><td>弹出置前</td><td>$010000</td><td>MB_SETFOREGROUND</td><td>消息框变为前景窗口。</td></tr>
<tr><td>默认桌面</td><td>$020000</td><td>MB_DEFAULT_DESKTOP_ONLY </td><td>当前桌面为默认桌面才会返回</td></tr>
<tr><td>弹出置顶</td><td>$040000</td><td>MB_TOPMOST</td><td>消息框置顶显示。</td></tr>
<tr><td>文字居右</td><td>$080000</td><td>MB_RIGHT</td><td>消息框的内容文字居右显示。</td></tr>
<tr><td>图标居右</td><td>$100000</td><td>MB_RTLREADING</td><td>内容文字在左边，图标在右边，标题文字也在右边</td></tr>
<tr><td>弹出服务</td><td>$200000</td><td>MB_SERVICE_NOTIFICATION</td><td>弹出的消息框即使没有登陆到系统，也会显示。</td></tr>
</table><p><font size="6">信息框、消息框、延时框——点击按钮返回值</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>选了确定</td><td>1</td><td>IDOK </td><td>点击选中了"确定"按钮</td></tr>
<tr><td>选了取消</td><td>2</td><td>IDCANCEL </td><td>点击选中了"取消"按钮</td></tr>
<tr><td>选了中止</td><td>3</td><td>IDABORT </td><td>点击选中了"中止"按钮</td></tr>
<tr><td>选了重试</td><td>4</td><td>IDRETRY </td><td>点击选中了"重试"按钮</td></tr>
<tr><td>选了忽略</td><td>5</td><td>IDIGNORE </td><td>点击选中了"忽略"按钮</td></tr>
<tr><td>选了是</td><td>6</td><td>IDYES </td><td>点击选中了"是"按钮</td></tr>
<tr><td>选了否</td><td>7</td><td>IDNO </td><td>点击选中了"否"按钮</td></tr>
<tr><td>选了关闭</td><td>8</td><td>IDCLOSE </td><td>点击选中了"关闭"按钮</td></tr>
<tr><td>选了帮助</td><td>9</td><td>IDHELP </td><td>点击选中了"帮助"按钮</td></tr>
</table><p><font size="6"><a name="链接库">动态链接库</a>——开发应用</font></p>
新建DLL工程,输入下面的代码:<br>
<font color="#0000FF">导出 计算(参数)<br>
返回(参数+100)<br>
结束<br></font>
点击编译,假设保存的工程名为测试,生成的文件为"测试.dll"<br>
在一个初级程序工程的程序段外加入下面这行代码:<br>
<font color="#0000FF">导入 计算 支持库 "测试.dll",1</font><br>
窗体上设计一个标签或编辑框,假设编号是1,再设计个按钮,绑定单击事件<br>
在按钮_点击事件里插入下面的代码<br>
<font color="#0000FF">整数 数值=计算(50)<br>
改控件数(窗体,1,计算,0)</font><br>
运行程序然后点击按钮,就会看到设计的标签或编辑框显示数值150<br>
<a href="https://www.ixigua.com/i7134399210962551329/" target="_blank"> 中文名动态链接库和二进制八卦符号以及机器语言指令详解</a><br>
以上只是API函数的动态调用实现的方法,如果是作为独立线程一直运行,可以用如下的方法:<br>
<font color="#0000FF">程序段 初始化(实例,模式,数据)<br>
&emsp;&emsp;判断(模式)<br>
&emsp;&emsp;为 初次调用 开启线程(@启动, 0 , 实例)<br>
结束</font><br>
加载DLL链接库会有四种情况下会触发调用这里的代码,判断模式为初次调用时开启新线程,目标是启动这个程序段<br>
<font color="#0000FF">程序段 启动(实例)<br>
循环(等单对象(实例,500)){游戏检测}<br>
结束</font><br>
启动这个程序段工作在一个新的线程,可以一直循环等待单对象,对象的实例是本DLL模块的进程实例,等待周期是500毫秒<br>
只要本DLL实例不被卸载以及主程序不结束运行,等单对象返回结果都是真,相当于每500毫秒循环一次,执行游戏检测的代码<br>
<a href="https://www.ixigua.com/i7128384052385874446/" target="_blank"> 游戏动态链接库开发和堆栈局部变量详解</a><br>
动态 链接库 (DLL) 是一个模块，其中包含可由另一个模块 (应用程序或 DLL) 使用的函数和数据。<br>

DLL 可以定义两种类型的函数：导出函数和内部函数。导出的函数旨在由其他模块调用，以及从定义它们的 DLL 中调用。内部函数通常只能从定义内部函数的 DLL 中调用。<br>
尽管 DLL 可以导出数据，但其数据通常仅由其函数使用。 但是，没有什么可以阻止另一个模块读取或写入该地址。<br>

DLL 提供了一种模块化应用程序的方法，以便可以更轻松地更新和重复使用其功能。 当多个应用程序同时使用相同的功能时，<br>
DLL 从调用进程的虚拟地址空间分配内存。少内存开销，因为尽管每个应用程序都接收自己的 DLL 数据副本，但应用程序会共享 DLL 代码。<br>
DLL 还有助于减动态链接允许模块仅包含加载时或运行时查找导出的 DLL 函数所需的信息。 动态链接不同于更熟悉的静态链接，其中链接器将库函数的代码复制到调用它的每个模块中。<br>

<h2>动态链接的类型</h2>
在 DLL 中调用函数有两种方法：<br>

在 加载时动态链接中，模块显式调用导出的 DLL 函数，就像它们是本地函数一样。 这要求将模块与包含函数的 DLL 的导入库链接。<br>
导入库为系统提供加载 DLL 所需的信息，并在加载应用程序时查找导出的 DLL 函数。<br>
在 运行时动态链接中，模块使用 加载库 或 加载模块 函数在运行时加载 DLL。 加载 DLL 后，模块调用 函数地址 函数以获取导出的 DLL 函数的地址。<br>
该模块使用 GetProcAddress 返回的函数指针调用导出的 DLL 函数。 这样就不需要导入库了。<br>
<h2>DLL 和内存管理</h2>
加载 DLL 的每个进程都会将其映射到其虚拟地址空间。 进程将 DLL 加载到其虚拟地址后，可以调用导出的 DLL 函数。<br>

系统维护每个 DLL 的每个进程引用计数。 当线程加载 DLL 时，引用计数将增加 1。 当进程终止时，或者当引用计数变为零 (运行时动态链接仅) 时，将从进程的虚拟地址空间中卸载 DLL。<br>

与任何其他函数一样，导出的 DLL 函数在调用它的线程的上下文中运行。 因此，以下条件适用：<br>

调用 DLL 的进程线程可以使用 DLL 函数打开的句柄。 同样，调用进程的任何线程打开的句柄都可以在 DLL 函数中使用。<br>
DLL 使用调用线程的堆栈和调用进程的虚拟地址空间。

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>初次调用</td><td>1</td><td>DLL_PROCESS_ATTACH</td><td>当这个DLL被映射到了进程的地址空间时</td></tr>
<tr><td>线程创建</td><td>2</td><td>DLL_THREAD_ATTACH</td><td>一个线程正在被创建</td></tr>
<tr><td>线程结束</td><td>3</td><td>DLL_THREAD_DETACH</td><td>线程终结</td></tr>
<tr><td>结束调用</td><td>0</td><td>DLL_PROCESS_DETACH</td><td>这个DLL从进程的地址空间中解除映射</td></tr>
</table><p><font size="6"><a name="控制台">标准控制台</a>——程序开发：</font></p>
新建工程,选择控制台程序,会自动以下的两行代码<br>
<font color="#0000FF">程序段 初始启动<br>
写文字("你好,我是简易中文编程")<br>
读字符<br>
结束</font><br>
写文字是向控制台窗口写入一行文字,读字符是读取用户输入的字符<br>
如果没有最后这个读字符,程序运行完就结束了,运行就是闪一下然后消失<br>
比较常用的还有写格式,就是把变量按照指定格式转换成文字,显示到窗口<br>
<font color="#0000FF">整数 值=665;浮点 数=8543.267;<br>
写格式("整数:%d\r\n这是整数转换文本的格式")<br>
写格式("浮点:%f\r\n这是浮点转换文本的格式")<br>
写格式("0x%X\r\n这是整数转换十六进制文本的格式")<br>
写格式("浮点:%.15f\r\n这是浮点转换文本显示15位小数的格式")<br>
读字符<br>
结束</font><br>
还有一个命令行的函数,可以执行CMD命令,常用命令如下:<br>
<font color="#0000FF">命令行("title 极语言编程")</font>; //修改窗口标题<br>
<font color="#0000FF">命令行("color 5A")</font>; //修改文字颜色的背景色<br>
第一个字5是红色4加蓝色1组合为紫色背景;后面的A是高亮8加上绿色2组合为高亮红色文字<br>
背景色在高位,文字色在低位,还有文字的其它属性详见下面的<a href="#字符属性">字符属性表</a><br>
紫色=蓝+红;青色=蓝+绿;黄色=红+绿;<br>
<font color="#0000FF">命令行("cls")</font>; //清除屏幕内容<br>
<font color="#0000FF">命令行("pause")</font>; //暂停<br>
<font color="#0000FF">命令行("help")</font>; //显示命令行帮助<br>
使用命令行修改文字和背景颜色,改变的是整个屏幕,还可以使用改字属性修改颜色<br>
然后写入相应文字和背景颜色的字之后,再修改其它颜色,实现多彩文字的效果<br>
<font color="#0000FF">程序段 初始启动<br>
整数 输入=取控制台(标准输入)</font>; //得到输入缓冲区的句柄<br>
<font color="#0000FF">整数 输出=取控制台(标准输出)</font>; //得到输出缓冲区的句柄<br>
<font color="#0000FF">设置标题("极语言编程")</font>; //修改窗口标题<br>
<font color="#0000FF">改字属性(输出,0x5A)</font>; //修改文字颜色属性<br>
<font color="#0000FF">改光标位(输出,0x00150010)</font>; //修改文字写入的位置<br>
高16位是第几行,低16位是第几列,在指定位置写入文字,而不用写空格来指定位置<br>
<font color="#0000FF">写控制台(输出,"你好",4)</font>; //向控制台写指定的文字内容<br>
<font color="#0000FF">整数 模式;获取模式(输入,@模式)</font>; //获取控制台的输入模式<br>
<font color="#0000FF">设置模式(输入,模式|鼠标输入)</font>; //给控制台输入模式增加鼠标输入<br>
<font color="#0000FF">整数 内容[64];</font>; //申请一个文本变量用来读取文字<br>
<font color="#0000FF">读控制台(输入,内容,64)</font>; //从控制台读取输入的文字内容<br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>标准输入</td><td>-10</td><td>STD_INPUT_HANDLE</td><td>标准输入设备。最初这是输入缓冲区 CONIN$ 的控制台。</td></tr>
<tr><td>标准输出</td><td>-11</td><td>STD_OUTPUT_HANDLE</td><td>标准输出设备。最初这是活动控制台屏幕缓冲区 CONOUT$。</td></tr>
<tr><td>标准错误</td><td>-12</td><td>STD_ERROR_HANDLE</td><td>标准错误设备。最初这是活动控制台屏幕缓冲区 CONOUT$。</td></tr>
</table><font size="6"><a name="控制输入">控制台输入模式</a>——读取字符模式组合：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>系统处理</td><td>0x0001</td><td>ENABLE_PROCESSED_INPUT</td><td>Ctrl+C 由系统处理，且不会放入输入缓冲区中。</td></tr>
<tr><td>回车读取</td><td>0x0002</td><td>ENABLE_LINE_INPUT</td><td>仅当读取回车符时，才返回读取内容。如果禁用此模式，则将在有一个或多个字符可用时返回函数。</td></tr>
<tr><td>读取回显</td><td>0x0004</td><td>ENABLE_ECHO_INPUT</td><td>读取的字符在键入到控制台时，将被写入到活动屏幕缓冲区。只有同时启用了 回车读取 模式时，才能使用此模式。</td></tr>
<tr><td>屏幕输入</td><td>0x0008</td><td>ENABLE_WINDOW_INPUT</td><td>更改控制台屏幕缓冲区大小的用户交互将记录到控制台的输入缓冲区中。</td></tr>
<tr><td>鼠标输入</td><td>0x0010</td><td>ENABLE_MOUSE_INPUT</td><td>通过移动鼠标和按下按钮生成的鼠标事件会放置在输入缓冲区中。可用于从输入缓冲区读取鼠标事件输入记录。</td></tr>
<tr><td>插入文字</td><td>0x0020</td><td>ENABLE_INSERT_MODE</td><td>如果启用，在控制台窗口中输入的文本将插入到当前光标位置，并且不会覆盖该位置后面的所有文本。禁用则将覆盖后面的所有文本。</td></tr>
<tr><td>鼠标选择</td><td>0x0040</td><td>ENABLE_QUICK_EDIT_MODE</td><td>用户可通过此标志使用鼠标选择和编辑文本。和输入扩展同时使用。</td></tr>
<tr><td>输入扩展</td><td>0x0080</td><td>ENABLE_EXTENDED_FLAGS</td><td>启用扩展标志位。注：插入文字和鼠标选择为扩展标志位;跟输入扩展同时使用。</td></tr>
<tr><td>虚拟输入</td><td>0x0200</td><td>ENABLE_VIRTUAL_TERMINAL_INPUT</td><td>指导虚拟终端处理引擎将控制台窗口收到的用户输入转换为可由支持的应用程序读取的控制台虚拟终端序列。</td></tr>
</table><font size="6"><a name="控制输出">控制台输出模式</a>——写入字符模式组合：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>分析输出</td><td>0x0001</td><td>ENABLE_PROCESSED_OUTPUT</td><td>针对 ASCII 控制序列对写入的字符或者读取回显的字符进行分析并执行正确的操作。</td></tr>
<tr><td>自动换行</td><td>0x0002</td><td>ENABLE_WRAP_AT_EOL_OUTPUT</td><td>使用写入或者读取回显时，当光标到达当前行的末尾时，它将移到下一行的开头。 </td></tr>
<tr><td>分析控制</td><td>0x0004</td><td>ENABLE_VIRTUAL_TERMINAL_PROCESSING</td><td>写入时分析字符序列可控制光标移动、颜色/字体模式以及其他也可通过现有控制台 API 执行的操作。</td></tr>
<tr><td>延迟换行</td><td>0x0008</td><td>DISABLE_NEWLINE_AUTO_RETURN</td><td>写入时将附加状态添加到行尾换行，从而可能导致延迟光标移动和缓冲区滚动操作。</td></tr>
<tr><td>允许字色</td><td>0x0010</td><td>ENABLE_LVB_GRID_WORLDWIDE</td><td>用于写入字符属性允许使用来自字符属性的标志调整文本的前景色和背景色。 </td></tr>
</table><br><font size="6"><a name="字符属性">控制台字符属性</a>——颜色组合：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>文本蓝色</td><td>1</td><td>FOREGROUND_BLUE</td><td>文本颜色包含蓝色。</td></tr>
<tr><td>文本绿色</td><td>2</td><td>FOREGROUND_GREEN</td><td>文本颜色包含绿色。</td></tr>
<tr><td>文本红色</td><td>4</td><td>FOREGROUND_RED</td><td>文本颜色包含红色。</td></tr>
<tr><td>文本高亮</td><td>8</td><td>FOREGROUND_INTENSITY</td><td>文本颜色增强。</td></tr>
<tr><td>背景蓝色</td><td>0x10</td><td>BACKGROUND_BLUE</td><td>背景色包含蓝色。</td></tr>
<tr><td>背景绿色</td><td>0x20</td><td>BACKGROUND_GREEN</td><td>背景色包含绿色。</td></tr>
<tr><td>背景红色</td><td>0x40</td><td>BACKGROUND_RED</td><td>背景色包含红色。</td></tr>
<tr><td>背景高亮</td><td>0x80</td><td>BACKGROUND_INTENSITY</td><td>背景色增强。</td></tr>
<tr><td>前导字节</td><td>0x100</td><td>COMMON_LVB_LEADING_BYTE</td><td>前导字节。</td></tr>
<tr><td>尾随字节</td><td>0x200</td><td>COMMON_LVB_TRAILING_BYTE</td><td>尾随字节。</td></tr>
<tr><td>顶部水平</td><td>0x400</td><td>COMMON_LVB_GRID_HORIZONTAL</td><td>顶部水平。</td></tr>
<tr><td>左边垂直</td><td>0x800</td><td>COMMON_LVB_GRID_LVERTICAL</td><td>左垂直。</td></tr>
<tr><td>右边垂直</td><td>0x1000</td><td>COMMON_LVB_GRID_RVERTICAL</td><td>右垂直。</td></tr>
<tr><td>反转显示</td><td>0x4000</td><td>COMMON_LVB_REVERSE_VIDEO</td><td>反转前景和背景属性。</td></tr>
<tr><td>带下划线</td><td>0x8000</td><td>COMMON_LVB_UNDERSCORE</td><td>下划线。</td></tr>
</table><br><font size="6">控制台开发</a>——相关函数：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>示例</td><td>释义</td></tr>
<tr><td>分控制台</td><td>AllocConsole</td><td>分控制台</td><td>给当前程序分配一个控制台</td></tr>
<tr><td>命令缓冲</td><td>CreateConsoleScreenBuffer</td><td>命令缓冲(访问,模式,<a href="#安全属性类">继承</a>,1,0)</td><td>创建控制台屏幕缓冲区。</td></tr>
<tr><td>获取模式</td><td>GetConsoleMode</td><td>获取模式(句柄,@模式)</td><td>获取控制台输入缓冲区的当前输入模式或控制台屏幕缓冲区的当前输出模式。</td></tr>
<tr><td>设置模式</td><td>SetConsoleMode</td><td>设置模式(句柄,模式)</td><td>设置控制台输入缓冲区的输入模式或控制台屏幕缓冲区的输出模式。</td></tr>
<tr><td>获取标题</td><td>GetConsoleTitleA</td><td>长度=获取标题(名称,长度)</td><td>获取当前控制台窗口的标题栏名称,返回标题名称的长度</td></tr>
<tr><td>设置标题</td><td>SetConsoleTitleA</td><td>长度=设置标题(名称)</td><td>设置当前控制台窗口的标题栏名称,返回标题名称的长度</td></tr>
<tr><td>命令窗口</td><td>GetConsoleWindow</td><td>窗口=命令窗口</td><td>检索与调用进程相关联的控制台使用的窗口句柄。</td></tr>
<tr><td>取控制台</td><td>GetStdHandle</td><td>句柄=取控制台(类型)</td><td>检索指定标准设备的句柄。类型:标准输入=-10、标准输出=-11或标准错误=-12</td></tr>
<tr><td>改控制台</td><td>SetStdHandle</td><td>改控制台(类型,句柄)</td><td>修改指定标准设备的句柄。类型:标准输入=-10、标准输出=-11或标准错误=-12</td></tr>
<tr><td>读控制台</td><td>ReadConsoleA</td><td>读控制台(句柄,内容,长度,@大小,0)</td><td>从控制台输入缓冲区读取字符输入，并将其从缓冲区删除。</td></tr>
<tr><td>写控制台</td><td>WriteConsoleA</td><td>写控制台(句柄,内容,长度,@大小,0)</td><td>从当前光标位置开始，将字符串写入控制台屏幕缓冲区。</td></tr>
<tr><td>改字属性</td><td>SetConsoleTextAttribute</td><td>窗口=改字属性(句柄,颜色)</td><td>修改写入控制台屏幕缓冲区的<a href="#字符属性">字符属性</a></td></tr>
<tr><td>改光标位</td><td>SetConsoleCursorPosition</td><td>改光标位(句柄,坐标值)</td><td>设置指定控制台屏幕缓冲区中的光标位置。</td></tr>
<tr><td>刷输入区</td><td>FlushConsoleInputBuffer</td><td>刷输入区(输入)</td><td>刷新控制台输入缓冲区。当前在输入缓冲区中的所有输入记录将被丢弃。</td></tr>
<tr><td>释放命令</td><td>FreeConsole</td><td>释放命令(通知)</td><td>从其控制台分离调用进程。</td></tr>
<tr><td>输出属性</td><td>FillConsoleOutputAttribute</td><td>输出属性(输出,属性,字数,坐标值,@实际数)</td><td>设置指定数量的字符单元的字符属性，从屏幕缓冲区中的指定坐标开始。</td></tr>
<tr><td>输出文字</td><td>FillConsoleOutputCharacter</td><td>输出文字(输出,文字,字数,坐标值,@实际数)</td><td>将字符写入控制台屏幕缓冲区指定字数，从指定的坐标开始。</td></tr>
<tr><td>伪控制台</td><td>CreatePseudoConsole</td><td>伪控制台(坐标值,输入流,输出流,标志,@伪)</td><td>为调用进程创建新的伪控制台对象。标志:0标准,1尝试继承游标位置</td></tr>
<tr><td>关闭伪台</td><td>ClosePseudoConsole</td><td>关闭伪台(伪控制台)</td><td>从给定句柄关闭伪控制台。</td></tr>
<tr><td>控制事件</td><td>GenerateConsoleCtrlEvent</td><td>控制事件(信号,进程组)</td><td>将指定的信号发送到控制台进程组，该组共享与调用进程关联的控制台。信号:0=CTRL+C。1=CTRL+BREAK。</td></tr>
<tr><td>控制别名</td><td>GetConsoleAlias</td><td>控制别名(别名,@内容,大小,执行文件)</td><td>检索指定控制台别名和可执行文件的文本。</td></tr>
<tr><td>控制全名</td><td>GetConsoleAliases</td><td>控制全名(@内容,大小,执行文件)</td><td>检索指定可执行文件的所有已定义的控制台别名。源1=目录1\0源2=目标2</td></tr>
<tr><td>控制全长</td><td>GetConsoleAliasesLength</td><td>控制全长(执行文件)</td><td>检索 控制全名 函数使用的缓冲区所需的大小。</td></tr>
<tr><td>控制定名</td><td>GetConsoleAliasesExes</td><td>控制定名(@内容,大小)</td><td>检索定义了控制台别名的所有可执行文件的名称。</td></tr>
<tr><td>控制定长</td><td>GetConsoleAliasesExesLength</td><td>控制定长</td><td>检索 控制定名 函数使用的缓冲区所需的大小。</td></tr>
<tr><td>控制码页</td><td>GetConsoleCP</td><td>控制码页</td><td>检索与调用进程关联的控制台使用的输入代码页。控制台使用其输入代码页将键盘输入转换为相应的字符值。</td></tr>
<tr><td>控制游标</td><td>GetConsoleCursorInfo</td><td>控制游标(输出,<a href="#游标类">游标类</a>)</td><td>检索有关指定控制台屏幕缓冲区的游标大小和可见性的信息。</td></tr>
<tr><td>控制模式</td><td>GetConsoleDisplayMode</td><td>控制模式(@模式)</td><td>检索当前控制台的显示模式。1全屏,2全屏硬显</td></tr>
<tr><td>控制字号</td><td>GetConsoleFontSize</td><td>控制字号(@内容,大小)</td><td>检索指定控制台屏幕缓冲区使用的字体大小。</td></tr>
<tr><td>控制历史</td><td>GetConsoleHistoryInfo</td><td>控制历史(<a href="#历史类">历史类</a>)</td><td>检索调用进程的控制台的历史记录设置。</td></tr>
<tr><td>原始标题</td><td>GetConsoleOriginalTitle</td><td>原始标题(@内容,大小)</td><td>检索当前控制台窗口的原始标题。</td></tr>
<tr><td>输出码页</td><td>GetConsoleOutputCP</td><td>输出码页</td><td>检索与调用进程关联的控制台使用的输出代码页。控制台使用其输出代码页将各种输出函数写入的字符值转换为控制台窗口中显示的图像。</td></tr>
<tr><td>输出数据</td><td>GetConsoleScreenBufferInfo</td><td>输出数据(输出,<a href="#输出类">@数据</a>)</td><td>检索有关指定控制台屏幕缓冲区的信息。</td></tr>
<tr><td>控制字体</td><td>GetCurrentConsoleFont</td><td>控制字体(输出,最大,<a href="#字体类">@字体</a>)</td><td>检索有关当前控制台字体的信息。最大为真获取最大窗口的字体</td></tr>
<tr><td>控窗大小</td><td>GetLargestConsoleWindowSize</td><td>控窗大小(输出)</td><td>根据显示屏的当前字体和大小，检索最大控制台窗口的大小。返回低字为列,高字为行</td></tr>
<tr><td>输入次数</td><td>GetNumberOfConsoleInputEvents</td><td>输入次数(输入,@次数)</td><td>检索控制台输入缓冲区中未读输入记录的数量。</td></tr>
<tr><td>鼠标按钮</td><td>GetNumberOfConsoleMouseButtons</td><td>鼠标按钮(@按钮数)</td><td>检索当前控制台所使用的鼠标上的按钮数。</td></tr>
<tr><td>读取输入</td><td>PeekConsoleInput</td><td>读取输入(输入,@数组,大小,@已读)</td><td>从指定的控制台输入缓冲区读取数据，而不将其从缓冲区中删除。</td></tr>
<tr><td>控制台读</td><td>ReadConsoleInputA</td><td>控制台读(输入,@内容,大小,@已读)</td><td>从控制台输入缓冲区读取数据，并将其从缓冲区删除。</td></tr>
<tr><td>输入区读</td><td>ReadConsoleInputExA</td><td>输入区读(输入,@内容,大小,@已读,标志)</td><td>从控制台输入缓冲区读取数据，并将其从缓冲区删除。标志:1事件保留,2立即返回</td></tr>
<tr><td>读输出区</td><td>ReadConsoleOutputA</td><td>读输出区(输出,@数组,大小,坐标值,<a href="#方形类">方形类</a>)</td><td>从控制台屏幕缓冲区中字符单元的矩形块读取字符和颜色特性数据。</td></tr>
<tr><td>读字属性</td><td>ReadConsoleOutputAttribute</td><td>读字属性(输出,@数组,大小,坐标值,@已读)</td><td>从控制台屏幕缓冲区指定位置的连续<a href="#字格类">单元格</a>复制指定数量的字符特性。</td></tr>
<tr><td>读输出字</td><td>ReadConsoleOutputCharacterA</td><td>读输出字(输出,@数组,大小,坐标值,@已读)</td><td>从控制台屏幕缓冲区指定位置的连续<a href="#字格类">单元格</a>复制多个字符。</td></tr>
<tr><td>缩放伪台</td><td>ResizePseudoConsole</td><td>缩放伪台(伪控制台,坐标值)</td><td>将伪控制台的内部缓冲区大小调整为给定大小。</td></tr>
<tr><td>滚动控区</td><td>ScrollConsoleScreenBufferA</td><td>滚动控区(输出,<a href="#方形类">滚动,剪区</a>,坐标值,<a href="#字格类">填充格</a>)</td><td>移动屏幕缓冲区中指定剪辑矩形的数据块。</td></tr>
<tr><td>改输出区</td><td>SetConsoleActiveScreenBuffer</td><td>改输出区(输出)</td><td>将指定的屏幕缓冲区设置为当前显示的控制台屏幕缓冲区。</td></tr>
<tr><td>码页控制</td><td>SetConsoleCP</td><td>码页控制(代码页)</td><td>设置与调用进程关联的控制台使用的输入代码页。控制台使用其输入代码页将键盘输入转换为相应的字符值。</td></tr>
<tr><td>控制函数</td><td>SetConsoleCtrlHandler</td><td>控制函数(回调,添加)</td><td>从调用进程的处理程序函数列表中添加或删除应用程序定义的 <a href="#控制台信号回调">控制台信号回调</a> 函数。添加=假是删除</td></tr>
<tr><td>游标控制</td><td>SetConsoleCursorInfo</td><td>游标控制(输出,<a href="#游标类">游标类</a>)</td><td>为指定的控制台屏幕缓冲区设置光标的大小和可见性。</td></tr>
<tr><td>模式控制</td><td>SetConsoleDisplayMode</td><td>模式控制(输出模式)</td><td>设置指定控制台屏幕缓冲区的显示模式。1全屏,2窗口</td></tr>
<tr><td>历史控制</td><td>SetConsoleHistoryInfo</td><td>历史控制(<a href="#历史类">历史类</a>)</td><td>设置调用进程的控制台的历史记录设置。</td></tr>
<tr><td>码页输出</td><td>SetConsoleOutputCP</td><td>码页输出(代码页)</td><td>设置与调用进程关联的控制台使用的输出代码页。控制台使用其输出代码页将各种输出函数写入的字符值转换为控制台窗口中显示的图像。</td></tr>
<tr><td>输出扩展</td><td>GetConsoleScreenBufferInfoEx</td><td>输出扩展(输出,<a href="#输出扩展类">@数据</a>)</td><td>检索有关指定控制台屏幕缓冲区的扩展信息。</td></tr>
<tr><td>扩展输出</td><td>SetConsoleScreenBufferInfoEx</td><td>扩展输出(输出,<a href="#输出扩展类">@数据</a>)</td><td>设置有关指定控制台屏幕缓冲区的扩展信息。</td></tr>
<tr><td>控制大小</td><td>SetConsoleScreenBufferSize</td><td>控制大小(输出,坐标值)</td><td>更改指定控制台屏幕缓冲区的大小。</td></tr>
<tr><td>控制方框</td><td>SetConsoleWindowInfo</td><td>控制方框(输出,绝对,<a href="#方形类">方形类</a>)</td><td>设置控制台屏幕缓冲区窗口的当前大小和位置。绝对为假，则坐标相对于当前窗口角</td></tr>
<tr><td>控取字体</td><td>GetCurrentConsoleFontEx</td><td>控取字体(输出,最大,<a href="#字体扩展类">字体</a>)</td><td>检索有关当前控制台字体的扩展信息。最大为假，则设置当前窗口大小的字体信息。</td></tr>
<tr><td>控改字体</td><td>SetCurrentConsoleFontEx</td><td>控改字体(输出,最大,<a href="#字体扩展类">字体</a>)</td><td>设置有关当前控制台字体的扩展信息。最大为假，则设置当前窗口大小的字体信息。</td></tr>
<tr><td>写输入区</td><td>WriteConsoleInputA</td><td>写输入区(输入,数组,数量,@已写)</td><td>将数据直接写入控制台输入缓冲区。</td></tr>
<tr><td>写输出区</td><td>WriteConsoleOutputA</td><td>写输出区(输出,数据,数量,坐标值,<a href="#方形类">方形类</a>)</td><td>将字符和颜色属性<a href="#字格类">数据</a>写入控制台屏幕缓冲区中字符单元的指定矩形块。</td></tr>
<tr><td>字格属性</td><td>WriteConsoleOutputAttribute</td><td>字格属性(输出,属性组,数量,坐标值,@已写)</td><td>从指定位置开始，将多个字符属性复制到控制台屏幕缓冲区的连续单元格。</td></tr>
<tr><td>写输出字</td><td>WriteConsoleOutputCharacterA</td><td>写输出字(输出,文字,数量,坐标值,@已写)</td><td>从指定位置开始，将多个字符复制到控制台屏幕缓冲区的连续单元格。</td></tr>
</table><a name="控制台信号回调">控制台信号回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>控制台信号回调</td><td>HandlerRoutine</td><td>1</td><td>控制台进程使用此函数来处理进程接收的控制信号。收到信号后，系统会在进程中创建新线程来执行函数。</td></tr>
<tr><th colspan=4>控制台信号回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>信号</td><td>dwCtrlType</td><td>整数</td><td>处理程序接收的控制<a href="#信号类型">信号类型</a>。此参数的取值可为下列值之一。</td></tr>
</table><a name="信号类型">信号类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>值</td><td>作用解释</td></tr>
<tr><td>CTRL_C_EVENT</td><td>0</td><td>已从键盘输入或 控制事件 函数生成的信号中接收 CTRL+C 信号。</td></tr>
<tr><td>CTRL_BREAK_EVENT</td><td>1</td><td>已从键盘输入或 控制事件 函数生成的信号中接收 CTRL+BREAK 信号。</td></tr>
<tr><td>CTRL_CLOSE_EVENT</td><td>2</td><td>当用户关闭控制台时，系统向附加到控制台的所有进程发送的信号（单击控制台窗口的窗口菜单上的关闭或单击任务管理器中的结束任务按钮命令）。</td></tr>
<tr><td>CTRL_LOGOFF_EVENT</td><td>5</td><td>系统在用户退出登录时发送到所有控制台进程的信号。 此信号不指示哪个用户正在退出登录，因此无法做出任何假设。请注意，仅由服务接收此信号。 交互式应用程序在退出登录时终止，因此当系统发送此信号时，它们不存在。</td></tr>
<tr><td>CTRL_SHUTDOWN_EVENT</td><td>6</td><td>当系统关闭时发送的信号。 当系统发送此信号时，交互式应用程序不存在，因此这种情况下只能由服务接收它。 服务也有自己的关闭事件通知机制。</td></tr>
</table><a name="游标类">游标类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>游标类</td><td>CONSOLE_CURSOR_INFO</td><td>8</td><td>包含有关控制台游标的信息。 </td></tr>
<tr><th colspan=4>游标类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>比例</td><td>dwSize</td><td>整数</td><td>由游标填充的字符单元的百分比。该值介于 1 到 100 之间。</td></tr>
<tr><td>可见</td><td>bVisible</td><td>整数</td><td>游标的可见性。 如果游标可见，则此成员为 真。</td></tr>
</table><a name="历史类">历史类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>历史类</td><td>CONSOLE_HISTORY_INFO</td><td>16</td><td>包含有关控制台历史记录的信息。 </td></tr>
<tr><th colspan=4>历史类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>条数</td><td>HistoryBufferSize</td><td>整数</td><td>每个历史记录缓冲区中保留的命令数。</td></tr>
<tr><td>区数</td><td>NumberOfHistoryBuffers</td><td>整数</td><td>此控制台进程保留的历史记录缓冲区数。</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>此参数可为零或1。1=重复条目不会存储在历史记录缓冲区中。</td></tr>
</table><a name="字体类">字体类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字体类</td><td>CONSOLE_FONT_INFO</td><td>8</td><td>包含控制台字体的信息。 </td></tr>
<tr><th colspan=4>字体类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>字体</td><td>nFont</td><td>整数</td><td>系统控制台字体表中字体的索引。</td></tr>
<tr><td>宽度</td><td>dwFontSize.X</td><td>整形</td><td>包含字体中每个字符的宽度（以逻辑单元为单位）。</td></tr>
<tr><td>高度</td><td>dwFontSize.Y</td><td>整形</td><td>包含字体中每个字符的高度（以逻辑单元为单位）。</td></tr>
</table><a name="字体扩展类">字体扩展类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字体扩展类</td><td>CONSOLE_FONT_INFOEX</td><td>84</td><td>包含控制台字体的扩展信息。 </td></tr>
<tr><th colspan=4>字体扩展类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>字体</td><td>nFont</td><td>整数</td><td>系统控制台字体表中字体的索引。</td></tr>
<tr><td>宽高</td><td>dwFontSize</td><td>整数</td><td>包含字体中每个字符的宽度和高度（以逻辑单元为单位）。</td></tr>
<tr><td>字系</td><td>FontFamily</td><td>整数</td><td>字体间距和系列。</td></tr>
<tr><td>粗细</td><td>FontWeight</td><td>整数</td><td>字体粗细。 粗细范围为 100 到 1000，按 100 的倍数表示。 例如，正常粗细为 400，而 700 为粗体。</td></tr>
<tr><td>名称</td><td>FaceName[64]</td><td>文本</td><td>字样的名称（如 Courier 或 Arial）。</td></tr>
</table><a name="输出类">输出类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>输出类</td><td>CONSOLE_SCREEN_BUFFER_INFO</td><td>22</td><td>包含有关控制台屏幕缓冲区的信息。 </td></tr>
<tr><th colspan=4>输出类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>列数</td><td>dwSize.X</td><td>整形</td><td>包含控制台屏幕缓冲区的字符列数。</td></tr>
<tr><td>行数</td><td>dwSize.Y</td><td>整形</td><td>包含控制台屏幕缓冲区的字符行数。</td></tr>
<tr><td>左边</td><td>dwCursorPosition.X</td><td>整形</td><td>包含控制台屏幕缓冲区中游标的列坐标位置。</td></tr>
<tr><td>上边</td><td>dwCursorPosition.Y</td><td>整形</td><td>包含控制台屏幕缓冲区中游标的行坐标位置。</td></tr>
<tr><td>属性</td><td>wAttributes</td><td>整形</td><td>屏幕缓冲区的字符的属性。</td></tr>
<tr><td>左</td><td>srWindow.Left</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形左上角的 x 坐标。</td></tr>
<tr><td>上</td><td>srWindow.Top</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形左上角的 y 坐标。</td></tr>
<tr><td>右</td><td>srWindow.Right</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形右下角的 x 坐标。</td></tr>
<tr><td>下</td><td>srWindow.Bottom</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形右下角的 y 坐标。</td></tr>
<tr><td>宽</td><td>dwMaximumWindowSize.X</td><td>整形</td><td>包含控制台窗口的最大宽度（以字符列和行为单位），给定当前屏幕缓冲区的大小和字体以及屏幕大小。</td></tr>
<tr><td>高</td><td>dwMaximumWindowSize.X</td><td>整形</td><td>包含控制台窗口的最大高度（以字符列和行为单位），给定当前屏幕缓冲区的大小和字体以及屏幕大小。</td></tr>
</table><a name="输出扩展类">输出扩展类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>输出扩展类</td><td>CONSOLE_SCREEN_BUFFER_INFOEX</td><td>96</td><td>包含有关控制台屏幕缓冲区的扩展信息。 </td></tr>
<tr><th colspan=4>输出扩展类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>列数</td><td>dwSize.X</td><td>整形</td><td>包含控制台屏幕缓冲区的字符列数。</td></tr>
<tr><td>行数</td><td>dwSize.Y</td><td>整形</td><td>包含控制台屏幕缓冲区的字符行数。</td></tr>
<tr><td>左边</td><td>dwCursorPosition.X</td><td>整形</td><td>包含控制台屏幕缓冲区中游标的列坐标位置。</td></tr>
<tr><td>上边</td><td>dwCursorPosition.Y</td><td>整形</td><td>包含控制台屏幕缓冲区中游标的行坐标位置。</td></tr>
<tr><td>属性</td><td>wAttributes</td><td>整形</td><td>屏幕缓冲区的字符的属性。</td></tr>
<tr><td>左</td><td>srWindow.Left</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形左上角的 x 坐标。</td></tr>
<tr><td>上</td><td>srWindow.Top</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形左上角的 y 坐标。</td></tr>
<tr><td>右</td><td>srWindow.Right</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形右下角的 x 坐标。</td></tr>
<tr><td>下</td><td>srWindow.Bottom</td><td>整形</td><td>包含显示窗口左上角和右下角的控制台屏幕缓冲区坐标的矩形右下角的 y 坐标。</td></tr>
<tr><td>宽</td><td>dwMaximumWindowSize.X</td><td>整形</td><td>包含控制台窗口的最大宽度（以字符列和行为单位），给定当前屏幕缓冲区的大小和字体以及屏幕大小。</td></tr>
<tr><td>高</td><td>dwMaximumWindowSize.X</td><td>整形</td><td>包含控制台窗口的最大高度（以字符列和行为单位），给定当前屏幕缓冲区的大小和字体以及屏幕大小。</td></tr>
<tr><td>填充</td><td>wPopupAttributes</td><td>整形</td><td>控制台弹出窗口的填充属性。</td></tr>
<tr><td>全屏</td><td>bFullscreenSupported</td><td>整数</td><td>如果此成员为真，则支持全屏模式；否则不支持。Windows Vista 之后的系统，此值始终为假，因为对显示器的真正直接 VGA 访问不再可用。</td></tr>
<tr><td>颜色</td><td>ColorTable[16]</td><td>整数</td><td>描述主机颜色设置的 颜色 值的数组。</td></tr>
</table><a name="字格类">字格类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字格类</td><td>CHAR_INFO</td><td>4</td><td>指定 Unicode 或 ANSI 字符及其属性。 控制台函数使用此结构从控制台屏幕缓冲区读取和写入数据。 </td></tr>
<tr><th colspan=4>字格类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>文字</td><td>Char</td><td>整形</td><td>由以下成员组成的联合。UnicodeChar 屏幕缓冲区字符单元的 Unicode 字符。AsciiChar 屏幕缓冲区字符单元的 ANSI 字符。</td></tr>
<tr><td>属性</td><td>Attributes</td><td>整形</td><td>字符属性。</td></tr>
</table><a name="方形类">方形类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>方形类</td><td>SMALL_RECT</td><td>8</td><td>定义矩形左上角和右下角的坐标。 </td></tr>
<tr><th colspan=4>方形类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>左</td><td>Left</td><td>整形</td><td>矩形左上角的 x 坐标。</td></tr>
<tr><td>上</td><td>Top</td><td>整形</td><td>矩形左上角的 y 坐标。</td></tr>
<tr><td>右</td><td>Right</td><td>整形</td><td>矩形右下角的 x 坐标。</td></tr>
<tr><td>下</td><td>Bottom</td><td>整形</td><td>矩形右下角的 x 坐标。</td></tr>
</table><hr>
<p><font size="6"><a name="面向对象">面向对象</a>——简介：</font></p>
面向对象(Object Oriented)是软件开发方法，一种编程范式。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。<br>
面向对象编程将一个系统抽象为许多对象的集合，每一个对象代表了这个系统的特定方面。对象包括函数（方法）和数据（属性）。<br>
一个对象可以向其他部分的代码提供一个公共接口，而其他部分的代码可以通过公共接口执行该对象的特定操作，系统的其他部分不需要关心对象内部是如何完成任务的，这样保持了对象自己内部状态的私有性。<br>
Windows编程对象包含有很多种，这里主要介绍组件对象和句柄对象。<br>
<p><font size="6">组件对象模型 (COM)</font></p>
COM 是一个独立于平台的分布式面向对象的系统，用于创建可以交互的二进制软件组件。<br>
COM 是 Microsoft 的 OLE (复合文档的基础技术，) 和 ActiveX (支持 Internet 的组件) 技术。<br>
这两种技术在极语言里都有提供。极语言提供了简化 COM 对象的实现的编程机制，只需用中文方法表和对象标识就可以创建。<br>
这些对象可以位于单个进程中、其他进程中，甚至在远程计算机上也是如此。<br>
<pre>
若要了解 COM (以及所有基于 COM 的技术) ，必须了解它不是面向对象的语言，而是一种标准。 COM 也不指定应如何构建应用程序;语言、结构和实现详细信息留给应用程序开发人员。
相反，COM 指定对象模型和编程要求，使 COM 对象 (也称为 COM 组件， 有时只是对象) 与其他对象交互。 这些对象可以在单个进程中、在其他进程中，甚至可以位于远程计算机上。
它们可以用不同的语言编写，而且在结构上可能非常不同，这就是为什么 COM 被称为 二进制标准：在程序转换为二进制计算机代码后应用的标准。

COM 的唯一语言要求是，代码以一种语言生成，该语言可以创建指针的结构，并通过指针显式或隐式调用函数。
面向对象的语言（如 C++ 和 极语言）提供了简化 COM 对象的实现的编程机制，可用于创建和使用 COM 对象。

COM 定义 COM 对象的基本性质。 通常，软件对象由一组数据和操作数据的函数组成。 COM 对象是一个对象，在该对象中，只能通过一组或多组相关函数访问对象的数据。
这些函数集称为 接口，接口的函数称为 方法。 此外，COM 要求访问接口方法的唯一方法是通过指向 接口的指针。

除了指定基本二进制对象标准外，COM 还定义了某些基本接口，这些接口提供所有基于 COM 的技术通用的函数，并且它提供所有组件所需的少量函数。
COM 还定义了对象如何在分布式环境中协同工作，并添加了安全功能来帮助提供系统和组件的完整性。
</pre>
<p><font size="6"><a name="句柄对象">句柄对象</a></font></p>
句柄对象是表示系统资源（如文件、线程或图形图像）的数据结构。 应用程序不能直接访问对象数据，也不能直接访问对象表示的系统资源。<br>
应用程序必须获取对象句柄，该句柄可用于检查或修改系统资源。 每个句柄在内部维护的表中都有一个条目。这些条目包含资源的地址，以及标识资源类型的方法。<br>
出于两个入口原因，系统使用对象和句柄来规范对系统资源的访问。 首先，使用 对象可确保微软可以更新系统功能，只要维护原始对象接口。<br>
发布系统的后续版本后，可以使用更新的对象，几乎不需要额外的工作。<br>
其次，使用 对象使你能够利用 Windows 安全性。 每个对象都有自己的访问控制列表 (ACL) ，该列表指定进程可以对对象执行的操作。<br>
每次应用程序创建对象的句柄时，系统都会检查对象的 ACL。<br>
<p><font size="6"><a name="对象管理">对象管理</a></font></p>
对象由标准标头和特定于对象的属性组成。 由于所有对象具有相同的结构，因此 Windows 中有一个维护所有对象的对象管理器。<br>

对象标头包括对象名称等项，以便其他进程可以按名称引用对象和安全描述符，以便对象管理器可以控制哪些进程访问系统资源。<br>

对象管理器执行的任务包括：<br>
<pre>
创建对象
验证进程是否有权使用该对象
创建对象句柄并将其返回给调用方
维护资源配额
创建重复句柄
关闭对象的句柄
</pre>
<p><font size="6"><a name="对象接口">对象接口</a></font></p>
<pre>
Windows 提供执行以下任务的函数：
创建对象
获取对象句柄
获取有关 对象的信息
设置有关对象的信息
关闭对象句柄
销毁对象
其中一些任务并非每个对象都是必需的。 其中一些任务是针对某些对象组合完成的。 例如，应用程序可以创建事件对象。
其他应用程序可以打开 事件以获取此事件对象的唯一句柄。 当每个应用程序使用 完 事件时，它会将其句柄关闭到 对象。
当事件对象没有剩余的打开句柄时，系统会销毁事件对象。 相比之下，应用程序可以获取现有窗口对象的句柄。
当不再需要窗口对象时，应用程序必须销毁 对象，这会使窗口句柄失效。

有时，在关闭所有对象句柄后，对象仍保留在内存中。 例如，线程可以创建事件对象并等待事件句柄。当线程正在等待时，另一个线程可能会关闭同一个事件对象句柄。
事件对象保留在内存中，没有任何事件对象句柄，直到事件对象设置为信号状态并且等待操作完成。 此时，系统会从内存中删除 对象。

句柄和对象消耗内存。 因此，若要保持系统性能，应关闭句柄，并在不再需要对象时立即将其删除。 如果不这样做，应用程序可能会由于过度使用分页文件而损害系统性能。

当进程终止时，系统会自动关闭句柄并删除进程创建的对象。 但是，当线程终止时，系统通常不会关闭句柄或删除对象。
唯一的例外是窗口、挂钩、窗口位置和动态数据交换 (DDE) 会话对象;创建线程终止时，这些对象将被销毁。
</pre>
<p><font size="6"><a name="处理限制">处理限制</a></font></p>
<pre>
某些对象一次仅支持一个句柄。 当应用程序创建 对象时，系统会提供句柄，并在应用程序销毁对象时使句柄失效。 其他对象支持单个对象的多个句柄。
关闭对象的最后一个句柄后，操作系统会自动从内存中删除该对象。
系统中打开的句柄总数仅受可用内存量的限制。 某些对象类型支持每个会话或每个进程的有限数量的句柄。
</pre>
<p><font size="6"><a name="处理继承">处理继承</a></font></p>
<pre>
子进程可以从其父进程继承句柄。 继承的句柄仅在子进程的上下文中有效。 若要使子进程能够从其父进程继承打开的句柄，请使用以下步骤。

创建将 安全属性类 结构的 继承 成员设置为 真 。
使用 创建进程 函数创建子进程，并将 继承 参数设置为 真。
复制对象 函数复制要用于当前进程或其他进程的句柄。 如果应用程序为另一个进程复制了其中一个句柄，则重复的句柄仅在另一个进程的上下文中有效。

复制或继承的句柄是唯一值，但它引用与原始句柄相同的对象。 进程可以继承或复制以下类型的对象的句柄：

访问令牌
通信设备
控制台输入
控制台屏幕缓冲区
桌面
目录
事件
文件
文件映射
作业
邮槽
互斥
管道
进程
注册表项
信号量
网络接口
线程
定时器
窗口工作站
所有其他对象都是创建它们的进程的专用对象;不能复制或继承其对象句柄。
</pre>
<p><font size="6"><a name="对象类别">对象类别</a></font></p>
系统提供三类对象：用户、图形设备接口 (GDI) 和内核。 系统使用用户对象支持窗口管理，使用 GDI 对象支持图形，使用内核对象支持内存管理、进程执行和进程间通信 (IPC) 。 <br>
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>用户对象</th><th>概述</th></tr></thead>
<tbody><tr><td>快捷键表</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/menurc/keyboard-accelerators" target="_blank">键盘加速键</a></td></tr>
<tr><td>西文插入记号</td><td><a href="https://learn.microsoft.com/zh-cn/windows/win32/menurc/carets" target="_blank">插入符号</a></td></tr>
<tr><td>游标</td><td><a href="https://learn.microsoft.com/zh-cn/windows/win32/menurc/cursors" target="_blank">游标</a></td></tr>
<tr><td>DDE 对话</td><td><a href="https://learn.microsoft.com/zh-cn/windows/win32/dataxchg/dynamic-data-exchange-management-library" target="_blank">动态数据交换管理库</a></td>
</tr>
<tr>
<td>挂钩</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/winmsg/hooks" target="_blank">挂钩</a></td>
</tr>
<tr>
<td>图标</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/menurc/icons" target="_blank">图标</a></td>
</tr>
<tr>
<td>菜单</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/menurc/menus" target="_blank">菜单</a></td>
</tr>
<tr>
<td>窗口</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/winmsg/windows" target="_blank">Windows</a></td>
</tr>
<tr>
<td>窗口位置</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/winmsg/windows" target="_blank">Windows</a></td>
</tr>
</tbody>
</table>
<p> </p>
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>GDI 对象</th><th>概述</th></tr></thead>
<tbody>
<tr>
<td>位图</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/bitmaps" target="_blank">位图</a></td>
</tr>
<tr>
<td>画刷</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/brushes" target="_blank">画刷</a></td>
</tr>
<tr>
<td>设备上下文</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/device-contexts" target="_blank">设备上下文</a></td>
</tr>
<tr>
<td>增强型图元文件</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/metafiles" target="_blank">图元文件</a></td>
</tr>
<tr>
<td>增强型图元文件 设备上下文</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/metafiles" target="_blank">图元文件</a></td>
</tr>
<tr>
<td>字体</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/fonts-and-text" target="_blank">字体和文本</a></td>
</tr>
<tr>
<td>内存 设备上下文</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/device-contexts" target="_blank">设备上下文</a></td>
</tr>
<tr>
<td>图元文件</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/metafiles" target="_blank">图元文件</a></td>
</tr>
<tr>
<td>图元文件 设备上下文</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/metafiles" target="_blank">图元文件</a></td>
</tr>
<tr>
<td>调色板</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/colors" target="_blank">颜色</a></td>
</tr>
<tr>
<td>触控笔和扩展笔</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/pens" target="_blank">笔</a></td>
</tr>
<tr>
<td>区域</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/gdi/regions" target="_blank">区域</a></td>
</tr>
</tbody>
</table>
<p> </p>
<table border="1" cellspacing="0" cellpadding="0">
<thead>
<tr>
<th>内核对象</th>
<th>概述</th>
</tr>
</thead>
<tbody>
<tr>
<td>访问令牌</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecAuthZ/access-control" target="_blank">访问控制</a></td>
</tr>
<tr>
<td>更改通知</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/obtaining-directory-change-notifications" target="_blank">目录更改通知</a></td>
</tr>
<tr>
<td>通信设备</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/DevIO/communications-resources" target="_blank">通信</a></td>
</tr>
<tr>
<td>控制台输入</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/console/character-mode-applications" target="_blank">字符模式应用程序</a></td>
</tr>
<tr>
<td>控制台屏幕缓冲区</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/console/character-mode-applications" target="_blank">字符模式应用程序</a></td>
</tr>
<tr>
<td>桌面</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/winstation/desktops" target="_blank">台式机</a></td>
</tr>
<tr>
<td>事件</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization" target="_blank">同步</a></td>
</tr>
<tr>
<td>事件日志</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/EventLog/event-logging" target="_blank">事件日志记录</a></td>
</tr>
<tr>
<td>文件</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/files-and-clusters" target="_blank">文件和群集</a></td>
</tr>
<tr>
<td>文件映射</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Memory/file-mapping" target="_blank">文件映射</a></td>
</tr>
<tr>
<td>堆</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Memory/memory-management" target="_blank">内存管理</a></td>
</tr>
<tr>
<td>作业</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/ProcThread/job-objects" target="_blank">作业对象</a></td>
</tr>
<tr>
<td>邮槽</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/ipc/mailslots" target="_blank">邮槽</a></td>
</tr>
<tr>
<td>模块</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Dlls/dynamic-link-libraries" target="_blank">动态链接库</a></td>
</tr>
<tr>
<td>Mutex</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization" target="_blank">同步</a></td>
</tr>
<tr>
<td>管道</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/ipc/pipes" target="_blank">管道</a></td>
</tr>
<tr>
<td>进程</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/ProcThread/processes-and-threads" target="_blank">进程和线程</a></td>
</tr>
<tr>
<td>信号器</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization" target="_blank">同步</a></td>
</tr>
<tr>
<td>插座</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/WinSock/windows-sockets-start-page-2" target="_blank">Windows 套接字 2</a></td>
</tr>
<tr>
<td>线程</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/ProcThread/processes-and-threads" target="_blank">进程和线程</a></td>
</tr>
<tr>
<td>定时器</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization" target="_blank">同步</a></td>
</tr>
<tr>
<td>计时器队列</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization" target="_blank">同步</a></td>
</tr>
<tr>
<td>计时器队列计时器</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization" target="_blank">同步</a></td>
</tr>
<tr>
<td>更新资源</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/menurc/resources" target="_blank">资源</a></td>
</tr>
<tr>
<td>窗口工作站</td>
<td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/winstation/window-stations" target="_blank">窗口工作站</a></td>
</tr>
</tbody>
</table>
<p><font size="6"><a name="用户对象">用户对象</a></font></p>
<pre>
用户界面对象仅支持每个对象一个句柄。 进程无法继承或复制用户对象的句柄。 一个会话中的进程不能引用另一个会话中的用户句柄。
理论上，每个会话有 65，536 个用户句柄的限制。 但是，每个会话可以打开的最大用户句柄数通常较低，因为它受可用内存的影响。
还有用户句柄的默认每进程限制。 若要更改此限制，请设置以下注册表值：

\ HKEY_LOCAL_MACHINE软件\微软\\ Windows NT CurrentVersion\Windows\USERProcessHandleQuota

此值可以设置为介于 200 和 18，000 之间的数字。

<b>用户对象的句柄</b>
用户对象的句柄对所有进程公开。 也就是说，只要进程对对象具有安全访问权限，任何进程都可以使用用户对象句柄。
创建窗口对象后，应用程序可以使用窗口句柄来显示或更改窗口。 在销毁窗口对象之前，句柄保持有效。
<b>管理用户对象</b>
创建者函数要么创建对象和对象句柄，要么只返回现有的对象句柄。 销毁器函数从内存中删除对象，这会使对象句柄失效。
下表列出了用户对象，以及每个对象的创建者和销毁器函数。 
</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>用户对象</td><td>创建函数</td><td>销毁函数</td></tr>
<tr><td>快捷键表</td><td>创建键表</td><td>销毁键表</td></tr>
<tr><td>西文插入记号</td><td>创建标记</td><td>销毁标记</td></tr>
<tr><td>游标</td><td>创建光标、 载入光标、载入位图</td><td>销毁光标</td></tr>
<tr><td>DDE 对话</td><td>会话连接、会话全连</td><td>会话终止、会话销毁</td></tr>
<tr><td>挂钩</td><td>窗口挂钩</td><td>窗口脱钩</td></tr>
<tr><td>图标</td><td>新建图标、载入图标、载入位图</td><td>销毁图标</td></tr>
<tr><td>菜单</td><td>创建菜单、建子菜单、 载入菜单、加载菜单</td><td>销毁菜单</td></tr>
<tr><td>窗口</td><td>创建窗口、 创建对话、 资源对话、 创建子窗</td><td>销毁窗口</td></tr>
<tr><td>窗口位置</td><td>多窗位置</td><td>控制多窗</td></tr>
</table><br>
<p><font size="6"><a name="GDI对象">GDI 对象</a></font></p>
<pre>
GDI 对象仅支持每个对象一个句柄。 GDI 对象的句柄对进程是专用的。 也就是说，只有创建 GDI 对象的进程才能使用对象句柄。

理论上，每个会话有 65，536 个 GDI 句柄的限制。 但是，每个会话可以打开的最大 GDI 句柄数通常较低，因为它受可用内存的影响。

Windows 2000： 每个会话限制为 16，384 个 GDI 句柄。

还有一个默认的 GDI 句柄每进程限制。 若要更改此限制，请设置以下注册表值：

\ HKEY_LOCAL_MACHINE软件\微软\\ Windows NT CurrentVersion\Windows\GDIProcessHandleQuota

此值可以设置为介于 256 和 65，536 之间的数字。

Windows 2000： 此值可以设置为介于 256 和 16，384 之间的数字。

管理 GDI 对象
下表列出了 GDI 对象，以及每个对象的创建者和销毁器函数。 创建者函数要么创建对象和对象句柄，要么只返回现有的对象句柄。 销毁器函数从内存中删除对象，这会使对象句柄失效。
</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>GDI 对象</td><td>创建 函数</td><td>销毁 函数</td></tr>
<tr><td>位图</td><td>创建位图、新建位图、创建图像、关联位图、内建位图、兼容位图</td><td>删除对象</td></tr>
<tr><td>画刷</td><td>新建笔刷、内建空刷、内建画刷、图案笔刷、内建笔刷、创建画刷</td><td>删除对象</td></tr>
<tr><td>设备上下文</td><td>驱动设备</td><td>删除设备、释放设备</td></tr>
<tr><td>增强型图元文件</td><td>创建强图</td><td>删除强图</td></tr>
<tr><td>增强型图元文件 DC</td><td>创建图元</td><td>删除图元</td></tr>
<tr><td>字体</td><td>创建字体、新建字体</td><td>删除对象</td></tr>
<tr><td>内存 DC</td><td>创建设备</td><td>删除设备</td></tr>
<tr><td>图元文件</td><td>创建图元</td><td>删除图元</td></tr>
<tr><td>图元文件 DC</td><td>创建图元</td><td>关闭图元</td></tr>
<tr><td>调色板</td><td>创建色板</td><td>删除对象</td></tr>
<tr><td>触控笔和扩展笔</td><td>创建画笔、新建画笔、扩展画笔</td><td>删除对象</td></tr>
<tr><td>区域</td><td>合并区域、创建椭圆、新建椭圆、建多边区、叠多边区、创建矩形、新建矩形、建圆矩形、区域转换、转换区域</td><td>删除对象</td></tr>
</table><br>
<p><font size="6"><a name="内核对象">内核对象</a></font></p>
<pre>
内核对象句柄特定于进程。 也就是说，进程必须创建 对象或打开现有对象以获取内核对象句柄。 内核句柄上的每个进程限制为 2^24。
但是，句柄存储在分页池中，因此可以创建的实际句柄数取决于可用内存。 可以在 32 位 Windows 上创建的句柄数明显低于 2^24。

任何进程都可以为现有内核对象创建新句柄 (甚至由另一个进程) 创建的一个新句柄，前提是该进程知道该对象的名称并对该对象具有安全访问权限。
内核对象句柄包括访问权限，这些权限指示可向进程授予或拒绝的操作。 应用程序在创建对象或获取现有对象句柄时指定访问权限。 
每种类型的内核对象都支持其自己的一组访问权限。例如事件句柄可以设置或等待访问 (或同时) ，文件句柄可以具有读取或写入访问权限 (或两者) 。

创建事件对象后，应用程序可以使用事件句柄来设置或等待事件。 在应用程序关闭句柄或终止之前，句柄保持有效。

大多数内核对象支持单个对象的多个句柄。例如应用程序可以使用 打开事件 函数获取其他事件对象句柄。

此方法使应用程序具有具有不同访问权限的句柄。 例如，句柄 1 可能已设置和等待事件访问权限，句柄 2 可能仅具有等待访问权限。

如果另一个进程知道事件名称并对该对象具有安全访问权限，则可以使用 打开事件 创建自己的事件对象句柄。
创建应用程序还可以使用 关闭对象 函数将其一个句柄复制到同一进程或另一个进程中。

只要至少有一个对象句柄存在，对象就保留在内存中。应用程序使用 关闭对象 函数关闭其事件对象句柄。 如果没有事件句柄，系统会从内存中删除 对象。

系统管理文件对象的方式与其他内核对象略有不同。 文件对象包含文件指针 - 指向要读取或写入文件中的下一个字节的指针。
每当应用程序创建新的文件句柄时，系统都创建一个新的文件对象。 因此，多个文件对象可以引用磁盘上的单个文件。

只有通过复制或继承，多个文件句柄才能引用同一个文件对象。
下表列出了每个内核对象，以及每个对象的创建者和销毁器函数。 创建器函数要么创建对象和对象句柄，要么创建新的现有对象句柄。
销毁函数关闭对象句柄。 当应用程序关闭内核对象的最后一个句柄时，系统会从内存中删除该对象。
</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>内核对象</td><td>创建 函数</td><td>销毁 函数</td></tr>
<tr><td>访问令牌</td><td>新建令牌、再造令牌、复制令牌、进程令牌、线程令牌</td><td>关闭对象</td></tr>
<tr><td>更改通知</td><td>初改通知</td><td>停改通知</td></tr>
<tr><td>通信设备</td><td>创建文件</td><td>关闭对象</td></tr>
<tr><td>控制台输入</td><td>创建文件，使用 CONIN$</td><td>关闭对象</td></tr>
<tr><td>控制台屏幕缓冲区</td><td>创建文件，使用 CONOUT$</td><td>关闭对象</td></tr>
<tr><td>事件</td><td>创建事件、新建事件、打开事件</td><td>关闭对象</td></tr>
<tr><td>事件日志</td><td>事件日志、注册事件、打开备份</td><td>关闭日志</td></tr>
<tr><td>文件</td><td>创建文件</td><td>关闭对象、删除文件</td></tr>
<tr><td>文件映射</td><td>映射文件、打开映射</td><td>关闭对象</td></tr>
<tr><td>查找文件</td><td>查找文件</td><td>关闭查找</td></tr>
<tr><td>堆</td><td>内存创建</td><td>内存销毁</td></tr>
<tr><td>I/O 完成端口</td><td>端口关联</td><td>关闭对象</td></tr>
<tr><td>作业</td><td>创建作业</td><td>关闭对象</td></tr>
<tr><td>邮槽</td><td>创建邮槽</td><td>关闭对象</td></tr>
<tr><td>内存资源通知</td><td>内存通知</td><td>关闭对象</td></tr>
<tr><td>模块</td><td>加载库、加载模块 模块地址</td><td>释放引用</td></tr>
<tr><td>互斥</td><td>创建互斥、新建互斥、打开互斥</td><td>关闭对象</td></tr>
<tr><td>管道</td><td>创建名管、创建管道</td><td>关闭对象、断开名管</td></tr>
<tr><td>进程</td><td>创建进程、打开进程、当前进程</td><td>关闭对象、终止进程</td></tr>
<tr><td>信号器</td><td>创建信号、新建信号、打开信号</td><td>关闭对象</td></tr>
<tr><td>网络</td><td>分配，接受</td><td>关闭</td></tr>
<tr><td>线程</td><td>创建线程、远程线程、当前线程</td><td>关闭对象、终止线程</td></tr>
<tr><td>定时器</td><td>创建延时、新建延时、 打开延时</td><td>关闭对象</td></tr>
<tr><td>更新资源</td><td>开更资源</td><td>停更资源</td></tr>
<tr><td>桌面</td><td>线程桌面</td><td>应用程序无法删除此对象。</td></tr>
<tr><td>窗口工作站</td><td>取窗口站</td><td>应用程序无法删除此对象。</td></tr>
</table><br>
 <p><font size="6"><a name="窗口">窗口</a>(对话框/控件)——发送/接收消息：</font></p>
窗口消息可以使用<font color="#0000FF">发送消息</font>向窗口发送消息,也可以在窗体消息这里处理接收的消息<br>
初级程序默认的代码都有<font color="#0000FF">窗体消息</font>这个程序段,在这里可以控制键盘鼠标等各种消息<br>
<font color="#0080FF">程序段 窗体消息(窗口,消息,参数,数据)<br>
&emsp;&emsp;文本 内容[16]="数值"-数据;<br>
&emsp;&emsp;判断(消息)为 窗口创建{信息框(0,"创建")}<br>
&emsp;&emsp;为 程序关闭{停止(0)}<br>
&emsp;&emsp;为 窗口移动{窗体~内容}<br>
&emsp;&emsp;为 窗口缩放{窗体~内容}<br>
&emsp;&emsp;为 单击左键{左键点击(参数)}<br>
&emsp;&emsp;否则 处理窗口(窗口,消息,参数,数据)<br>
结束<br></font>
上面这段代码是在收到窗口创建消息时, 弹出信息框;在收到程序关闭消息时停止程序运行<br>
在收到窗口移动消息时,显示窗口的位置(左顶);在收到窗口缩放消息时,显示窗口的大小(宽高)<br>
当然也可以使用发送消息给窗口,让程序来处理;<font color="#0000FF">发送消息(窗体,窗口关闭,0,0)</font><br>
有些消息主要常用来接收处理,例如窗口改变或键盘鼠标等;有些消息就常用来发送,如获取设置文本等<br>
对于控件有些通用的功能,比如:<font color="#0000FF">控制窗口(按钮,真)</font> 启用按钮接受鼠标和键盘的控制<br>
<font color="#0000FF">控制窗口(编辑框1,假)</font> 禁用编辑框1接受鼠标和键盘的输入<br>
<font color="#0000FF">整数 数值=取控件数(窗体,1)</font>获取窗体上第一个控件内文字,并转换成数值<br>
<font color="#0000FF">改控件数(窗体,2,数值,真)</font>把数值转换成文字显示到窗体上第二个控件窗口<br>
<font color="#FF0080">整个窗口界面可以叫它对话框,对话框里的子窗口叫它控件,设计控件时候都会有独立的编号,称之为标识<br></font>
刚才读写控件内数值使用的数值编号就是标识,在控件操作中十分常用,也就是设计控件时候的编号叫做标识<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>窗口创建</td><td>1</td><td>WM_CREATE</td><td>新建一个窗口。③参数:0;④数据:创建窗口的<a href="#窗口外观类">数据结构</a></td></tr>
<tr><td>程序关闭</td><td>2</td><td>WM_DESTROY</td><td>销毁一个窗口。③参数:0;④数据:0</td></tr>
<tr><td>窗口移动</td><td>3</td><td>WM_MOVE</td><td>移动一个窗口。③参数:0;④数据:xy坐标(各占16位)</td></tr>
<tr><td>窗口缩放</td><td>5</td><td>WM_SIZE</td><td>改变一个窗口的大小。③参数:0=已调整;1最小化;2最大化,3其它窗口还原;4其它窗口最大化;④数据:宽高大小(各16位)</td></tr>
<tr><td>窗口激活</td><td>6</td><td>WM_ACTIVATE</td><td>一个窗口被激活或失去激活状态。③参数:0关闭,1非鼠标激活,2鼠标激活;④数据:参数为0是激活窗口,非0是停用的窗口</td></tr>
<tr><td>获得焦点</td><td>7</td><td>WM_SETFOCUS</td><td>将键盘焦点转向一个窗口。③参数:失去焦点的窗口,可为0;④数据:0</td></tr>
<tr><td>失去焦点</td><td>8</td><td>WM_KILLFOCUS</td><td>使一个窗口失去焦点。③参数:接收焦点的窗口,可为0;④数据:0</td></tr>
<tr><td>可用状态</td><td>10</td><td>WM_ENABLE</td><td>使一个窗口处于可用状态。③参数:0为禁用,非零启用;④数据:0</td></tr>
<tr><td>是否重绘</td><td>11</td><td>WM_SETREDRAW</td><td>设置窗口是否能重绘。③参数:0不重绘,非0重绘;④数据:0</td></tr>
<tr><td>窗口重绘</td><td>15</td><td>WM_PAINT</td><td>当需要绘制一部分应用窗口的时候，发送本消息给所有者程序。③参数:0;④数据:0</td></tr>
<tr><td>窗口关闭</td><td>$0010</td><td>WM_CLOSE</td><td>用户关闭窗口时会发送本消息,紧接着会发送程序关闭消息。③参数:0;④数据:0</td></tr>
<tr><td>消息结束</td><td>$0012</td><td>WM_QUIT</td><td><a href="#提交退出">提交退出</a>函数提交一个代码数值，程序收到此消息，用以关闭消息循环，结束程序的运行。③参数:退出码;④数据:0</td></tr>
<tr><td>窗口恢复</td><td>$0013</td><td>WM_QUERYOPEN</td><td>最小化的窗口即将被恢复以前的大小位置。③参数:0;④数据:0</td></tr>
<tr><td>擦除背景</td><td>$0014</td><td>WM_ERASEBKGND</td><td>当一个窗口的背景必须被擦除时本消息会被触发(如:窗口大小改变时)。③参数:设备;④数据:0</td></tr>
<tr><td>显示窗口</td><td>$0018</td><td>WM_SHOWWINDOW</td><td>发送本消息给一个窗口,以便隐藏或显示该窗口。③参数:0隐藏,非0显示;④数据:0不变,1最小化,2最大化,3正在还原,4已被还原</td></tr>
<tr><td>界面激活</td><td>$001C</td><td>WM_ACTIVATEAPP</td><td>窗口进程激活状态改动,正被激活的窗口属于不同的应用程序。③参数:0停用，非0激活;④数据:线程标识</td></tr>
<tr><td>模态窗口</td><td>$001F</td><td>WM_CANCELMODE</td><td>发送本消息来取消某种正在进行的模态(操作)(如鼠示捕获),例如:启动一个模态窗口时,父窗会收到本消息;③参数:0;④数据:0</td></tr>
<tr><td>窗口改变</td><td>$0024</td><td>WM_GETMINMAXINFO</td><td>当窗口将要改变大小或位置时,由系统发送本消息给窗口,用户拖动一个可重置大小的窗口时便会发出本消息。③参数:0;④数据:MINMAXINFO结构</td></tr>
<tr><td>拖放小窗</td><td>$0037</td><td>WM_QUERYDRAGICON</td><td>本消息发送给最小化的窗口,当该窗口将被拖放而其窗口类中没有定义图标,应用程序能返回一个图标或光标的句柄。③参数:0;④数据:0</td></tr>
<tr><td>显存不足</td><td>$0041</td><td>WM_COMPACTING</td><td>显示内存已经很少了。③参数:时间比;④数据:0。例如，0x8000表示压缩内存所用的 CPU 时间的 50%。</td></tr>
<tr><td>首创窗口</td><td>$0081</td><td>WM_NCCREATE</td><td>当某窗口首次被创建时,本消息在WM_CREATE消息发送前发送。③参数:0;④数据:创建窗口的全部数据</td></tr>
<tr><td>调整大小</td><td>$214</td><td>WM_SIZING</td><td>当用户正在调整窗口大小时,发送本消息给窗口;③参数:1左边缘,2右边缘,3上边缘,4左上角,5右上角,下边缘,7左下角,8右下角;④数据:矩形类</td></tr>
<tr><td>循环调整</td><td>$231</td><td>WM_ENTERSIZEMOVE</td><td>当某窗口进入移动或调整大小的模式循环时,本消息发送到该窗口。③参数:0;④数据:0</td></tr>
<tr><td>退出调整</td><td>$232</td><td>WM_EXITSIZEMOVE</td><td>确定用户改变窗口大小或改变窗口位置的事件是何时完成的。③参数:0;④数据:0</td></tr>
<tr><td>窗口绘制</td><td>$317</td><td>WM_PRINT</td><td>请求窗口在指定的设备(如打印机)绘制自身。③参数:设备;④数据:1绘可见窗口,2绘非工作区,4绘工作区,8擦除背景,16绘所有可见子窗,32绘所有窗口</td></tr>
<tr><td>绘客户区</td><td>$318</td><td>WM_PRINTCLIENT</td><td>请求窗口在指定的设备(如打印机)绘制其客户区。③参数:设备;④数据:1绘可见窗口,2绘非工作区,4绘工作区,8擦除背景,16绘所有可见子窗,32绘所有窗口</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>窗口类</td><td>WNDCLASS</td><td>40</td><td>用来储存某一类窗口的信息，向系统注册此信息才能创建窗体。</td></tr>
<tr><th colspan=4>窗口类——成员表</th></tr>
<tr><td>风格</td><td>style</td><td>整数</td><td>窗口类的风格</td></tr>
<tr><td>消息</td><td>lpfnWndProc</td><td>整数</td><td>窗口消息处理函数</td></tr>
<tr><td>类长</td><td>cbClsExtra</td><td>整数</td><td>窗口类扩展</td></tr>
<tr><td>实长</td><td>cbWndExtra</td><td>整数</td><td>窗口实例扩展</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>当前实例句柄，$400000</td></tr>
<tr><td>图标</td><td>hIcon</td><td>整数</td><td>窗口的小图标</td></tr>
<tr><td>光标</td><td>hCursor</td><td>整数</td><td>窗口鼠标光标</td></tr>
<tr><td>背景</td><td>hbrBackground</td><td>整数</td><td>窗口背景色</td></tr>
<tr><td>菜单</td><td>lpszMenuName</td><td>整数</td><td>窗口菜单</td></tr>
<tr><td>名称</td><td>lpszClassName</td><td>整数</td><td>窗口类名</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="消息类">消息类</a></td><td>MSG</td><td>28</td><td>定义了传递给应用程序的窗口过程的初始化参数，它定义了窗口外观相关特性</td></tr>
<tr><th colspan=4>消息类——成员表</th></tr>
<tr><td>窗口</td><td>hwnd</td><td>整数</td><td>表示消息所属的窗口。</td></tr>
<tr><td>消息</td><td>message</td><td>整数</td><td>表示消息类型的标识符</td></tr>
<tr><td>参数</td><td>wParam</td><td>整数</td><td>附加消息1</td></tr>
<tr><td>附加</td><td>lParam</td><td>整数</td><td>附加消息2</td></tr>
<tr><td>时间</td><td>time</td><td>整数</td><td>表示消息投递到消息队列中的时间</td></tr>
<tr><td>左边</td><td>pt.x</td><td>整数</td><td>鼠标在屏幕上左边的位置</td></tr>
<tr><td>顶部</td><td>pt.y</td><td>整数</td><td>鼠标在屏幕上顶部的位置</td></tr>

</table><p><font size="6"><a name="字体">读写控件文本/字体/热键</a>——控制消息：</font></p>
1.读写窗体/标签/文本框/按钮/单选钮/复选钮/分组框/组合框/高级组合框里的文字内容<br>
<font color="#0000FF">发送消息(窗体,设置文本,0,"标题名称")</font>&emsp;&emsp;这个代码可以修改窗口的标题栏内容<br>
<font color="#0000FF">文本 内容[64];整数 长度=发送消息(文本框1,获取文本,64,内容)</font>&emsp;&emsp;这个代码可以获取编辑框的内容<br>
获取文本时第三参数要指定缓冲区的长度,并不是文字长度,返回值是文本内容的真实长度,接收文本的缓冲区应该用一个比较大的容量<br>
内容这个缓冲区长度为64,那就只能获取63字节数据,因为文字内容必须以0结尾,如果填满了64字节,就会认为后面还有文字没有读取完<br>
如果文本框内容比较多,不清楚有多少字,就需要先获取文字的长度,然后申请相应长度的内存缓冲区<br>
<font color="#0000FF">整数 长度=发送消息(文本框1,文本长度,0,0)</font>&emsp;真实长度不计算文字末尾的0<br>
<font color="#0000FF">整数 内存=申请内存(长度+1)</font>&emsp;申请的内存长度要比真实长度多一字节<br>
如果是宽字符模式,需要多加三字节;动态申请内存缓冲区不能使用 文本 内容[长度]这种方法,只能用申请内存相关的函数<br>
<font color="#0000FF">发送消息(文本框1,获取文本,长度+1,内存)</font>&emsp;指定缓冲区的长度也要加上一<br>
<font color="#0000FF">释放内存(内存)</font>&emsp;内存使用完之后,要释放内存。注意内存这个变量使用了三次<br>
2.修改控件的字体<br>
创建字体可以使用<font color="#0000FF">创建字体和新建字体</font>这两个函数,新建字体需要使用逻辑字体类这个结构体<br>
<font color="#0000FF">逻辑字体类 字号(高度=-12,名字="微软雅黑")</font>添加名为字号的逻辑字体类,高度也就是字体大小,使用负数表示<br>
申请一个整数变量比如叫字体,然后在窗体启动时用 <font color="#0000FF">字体= 新建字体(字号)</font>,也就创建了一个字体<br>
还有一种不用逻辑字体的创建方法:<font color="#8000FF">字体=创建字体(15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "宋体")</font><br>
第一个参数逻辑高度是字体大小,详见:<font color="#0000FF">创建字体(逻辑高度,字符宽度,擒纵角,取向角,粗细,斜体,下划线,删除线,字符集,输出精度,剪辑精度,输出质量,间距和字体,字体名称)</font><br>
创建字体函数不支持微软雅黑等字体,参数也太多,建议使用新建字体这个函数,只需要逻辑字体类这一个结构体参数即可创建</font><br>
创建字体之后可以使用<font color="#0000FF">发送消息(按钮1,指定字体,字体,0)</font>来指定标签,文本框,列表框,按钮等控件的字体<br>
3.为窗口指定热键<br>
<font color="#0000FF">发送消息(窗体,设置热键,0x71,0)</font>&emsp;当用户按下F2键时，系统将激活窗口。键码参见<a href="#键盘">键盘事件</a><br>
第三参数的低8位是键码,高8位是组合类型:1 SHIFT,2 CTRL,4 ALT,8 扩展;参数为0取消热键关联<br>
<font color="#0000FF">发送消息(窗体,设置热键,0x271,0)</font>&emsp;F2键前面加上2，高位就是CTRL，按下CTRL+F2就能激活主窗口
当用户按下热键时，系统会生成一条 系统命令 消息，交给处理窗口函数,会弹出该窗口;设置热键不能指定子窗口<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>设置文本</td><td>12</td><td>WM_SETTEXT</td><td>设置一个窗口的文本。③参数:0;④数据:内容文本</td></tr>
<tr><td>获取文本</td><td>13</td><td>WM_GETTEXT</td><td>复制窗口的文本到缓冲区。③参数:最大长度;④数据:文本缓冲区</td></tr>
<tr><td>文本长度</td><td>14</td><td>WM_GETTEXTLENGTH</td><td>得到窗口的文本长度(不含结束符)。③参数:0;④数据:0</td></tr>
<tr><td>指定字体</td><td>$30</td><td>WM_SETFONT</td><td>指定控件所用字体。③参数:字体;④数据:0不重绘;非0立即重绘</td></tr>
<tr><td>获取字体</td><td>$31</td><td>WM_GETFONT</td><td>得到当前控件绘制其文本所用的字体。③参数:0;④数据:0</td></tr>
<tr><td>设置热键</td><td>$32</td><td>WM_SETHOTKEY</td><td>为某窗口关联一个热键。③参数:键码/高位1SHIFT,2CTRL,4ALT,8扩展;④数据:0</td></tr>
<tr><td>获取热键</td><td>$33</td><td>WM_GETHOTKEY</td><td>为某窗口关联一个热键。③参数:0;④数据:0;返回值:键码/高位1SHIFT,2CTRL,4ALT,8扩展</td></tr>
<tr><td>系统命令</td><td>$112</td><td>WM_SYSCOMMAND</td><td>当用户按下 设置热键 指定的按键。③参数:键值;④数据:窗口</td></tr>
<tr><td>热键消息</td><td>$312</td><td>WM_HOTKEY</td><td>当用户按下由<a href="#注册热键">注册热键</a>函数注册的热键时。③参数:-1窗口,-2桌面;④数据:低字=1Alt,2CTRL,4SHIFT,8WIN;高字=键码</td></tr>
</table><p><font size="6"><a name="外观">窗口外观</a>——控制消息：</font></p>
<font color="#0000FF">整数 图标=加载图像(0,"sec.ico",图标类型,0,0,$10)</font>;从文件中加载一个图标，$10标志是从文件加载<br>
<font color="#0000FF">发送消息(窗体,设置图标,0,图标)</font>;修改窗口标题栏显示的小图标,0是小图标,1是大图标<br>
<font color="#0000FF">删除对象(图标)</font>;删除加载的图标对象,从而释放读取图标使用的内存<br>
加载图标可以使用系统固有的图标,例如把图标换成<font color="#0000FF">整数 图标=载入图标(0,32518)</font><br>
显示的就是一个盾牌图标;32512默认图标,32513错误图标,32514问号图标,32515警告图标,32516,信息图标<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>图标重绘</td><td>$0026</td><td>WM_PAINTICON</td><td>当一个最小化的窗口图标将被重绘时发送本消息。③参数:0;④数据:0</td></tr>
<tr><td>图标背景</td><td>$0027</td><td>WM_ICONERASEBKGND</td><td>本消息发送给某个最小化的窗口,仅当它在画图标前它的背景必须被重画。③参数:0;④数据:0</td></tr>
<tr><td>打印变化</td><td>$002A</td><td>WM_SPOOLERSTATUS</td><td>每当打印管理列队增加或减少一条作业时就会发出本消息。③参数:状态;④数据:作业数</td></tr>
<tr><td>外观改变</td><td>$002B</td><td>WM_DRAWITEM </td><td>按钮、组合框、列表框、菜单的外观改变时会发送本消息给这些控件的所有者。③参数:控件号;④数据:<a href="#绘制项目类">绘制项目类</a></td></tr>
<tr><td>改变窗口</td><td>$0046</td><td>WM_WINDOWPOSCHANGING</td><td>本消息会发送给那些大小和位置(Z_Order)将被改变的窗口,以调用<a href="#设置窗口">设置窗口</a>函数或其它窗口管理函数。③参数:0;④数据: WINDOWPOS 结构</td></tr>
<tr><td>窗口变化</td><td>$0047</td><td>WM_WINDOWPOSCHANGED</td><td>本消息会发送给那些大小和位置(Z_Order)已被改变的窗口,以调用<a href="#设置窗口">设置窗口</a>函数或其它窗口管理函数。③参数:0;④数据: WINDOWPOS 结构</td></tr>
<tr><td>改变风格</td><td>$007C</td><td>WM_STYLECHANGING</td><td>将要改变一个或多个窗口的风格时,发送本消息给那个窗口。③参数:-16窗口样式,-20扩展样式;④数据:STYLESTRUCT 结构</td></tr>
<tr><td>风格变化</td><td>$007D</td><td>WM_STYLECHANGED</td><td>改变一个或多个窗口的风格后,发送本消息给那个窗口。③参数:-16窗口样式,-20扩展样式;④数据:STYLESTRUCT 结构</td></tr>
<tr><td>窗口图标</td><td>$007F</td><td>WM_GETICON</td><td>本消息发送给某个窗口,用于返回与某窗口有关联的大图标或小图标的句柄。③参数:0小图标,1大图标,2生成图标;④数据:DPI大小(16*16)</td></tr>
<tr><td>设置图标</td><td>$0080</td><td>WM_SETICON</td><td>应用程序发送本消息让一个新的大图标或小图标与某窗口相关联。③参数:0小图标,1大图标;④数据:图标;窗口标题栏是小图标,“Alt+Tab”对话框中显示大图标</td></tr>
</table><p><font size="6">图片类型</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>位图类型</td><td>0</td><td>IMAGE_BITMAP</td><td>位图类型（bmp）</td></tr>
<tr><td>图标类型</td><td>1</td><td>IMAGE_ICON</td><td>图标类型（ico）</td></tr>
<tr><td>光标类型</td><td>2</td><td>IMAGE_CURSOR</td><td>光标类型（cur）</td></tr>
<tr><td>强图类型</td><td>3</td><td>IMAGE_ENHMETAFILE</td><td>强图类型（emf）</td></tr>
</table><a name="窗口样式">窗口样式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>细线边框</td><td>WS_BORDER</td><td>0x00800000</td><td>窗口具有细线边框</td></tr>
<tr><td>标题栏</td><td>WS_CAPTION</td><td>0x00C00000</td><td>窗口具有标题栏， (包含 WS_BORDER 样式) 。</td></tr>
<tr><td>是子窗口</td><td>WS_CHILD</td><td>0x40000000</td><td>窗口是子窗口。 具有此样式的窗口不能有菜单栏。 此样式不能与 WS_POPUP 样式一起使用。</td></tr>
<tr><td>是子窗口</td><td>WS_CHILDWINDOW</td><td>0x40000000</td><td>与 WS_CHILD 样式相同。</td></tr>
<tr><td>不绘子窗</td><td>WS_CLIPCHILDREN</td><td>0x02000000</td><td>排除在父窗口内进行绘制时子窗口占用的区域。 创建父窗口时使用此样式。</td></tr>
<tr><td>剪裁子窗</td><td>WS_CLIPSIBLINGS</td><td>0x04000000</td><td>相对于彼此剪裁子窗口;重绘时若有不绘子窗样式会将其他重叠的子窗口剪裁到子窗口的区域之外进行更新。</td></tr>
<tr><td>是否禁用</td><td>WS_DISABLED</td><td>0x08000000</td><td>窗口最初处于禁用状态。 已禁用的窗口无法接收用户的输入。 </td></tr>
<tr><td>对话边框</td><td>WS_DLGFRAME</td><td>0x00400000</td><td>窗口具有通常与对话框一起使用的样式的边框。 具有此样式的窗口不能具有标题栏。</td></tr>
<tr><td>分组控制</td><td>WS_GROUP</td><td>0x00020000</td><td>窗口是一组控件的第一个控件。 组由第一个控件及其后定义的所有控件组成，以便用户可以在组之间移动焦点。</td></tr>
<tr><td>水平滚动</td><td>WS_HSCROLL</td><td>0x00100000</td><td>窗口具有水平滚动条。</td></tr>
<tr><td>垂直滚动</td><td>WS_VSCROLL</td><td>0x00200000</td><td>窗口具有垂直滚动条。</td></tr>
<tr><td>最小化</td><td>WS_ICONIC</td><td>0x20000000</td><td>窗口最初最小化。</td></tr>
<tr><td>最大化</td><td>WS_MAXIMIZE</td><td>0x01000000</td><td>窗口最初是最大化的。</td></tr>
<tr><td>最大化钮</td><td>WS_MAXIMIZEBOX</td><td>0x00010000</td><td>窗口有一个“最大化”按钮。 不能与 WS_EX_CONTEXTHELP 样式组合使用。 还必须指定 WS_SYSMENU 样式。</td></tr>
<tr><td>最小化</td><td>WS_MINIMIZE</td><td>0x20000000</td><td>窗口最初最小化。</td></tr>
<tr><td>最小化钮</td><td>WS_MINIMIZEBOX</td><td>0x00020000</td><td>窗口有一个最小化按钮。 不能与 WS_EX_CONTEXTHELP 样式组合使用。 还必须指定 WS_SYSMENU 样式。</td></tr>
<tr><td>重叠窗口</td><td>WS_OVERLAPPED</td><td>0x00000000</td><td>窗口是重叠的窗口。 </td></tr>
<tr><td>重叠窗口</td><td>WS_TILED</td><td>0x00000000</td><td>该窗口是一个重叠的窗口。 </td></tr>
<tr><td>标题边框</td><td>WS_OVERLAPPEDWINDOW</td><td>0xCF0000</td><td>重叠的窗口带有标题栏和边框。</td></tr>
<tr><td>标题边框</td><td>WS_TILEDWINDOW</td><td>0xCF0000</td><td>重叠的窗口带有标题栏和边框。</td></tr>
<tr><td>弹出窗口</td><td>WS_POPUP</td><td>0x80000000</td><td>窗口是弹出窗口。 此样式不能与子窗口样式一起使用。</td></tr>
<tr><td>弹出标题</td><td>WS_POPUPWINDOW</td><td>0x80880000</td><td>窗口是弹出窗口带有菜单栏和细线边框。</td></tr>
<tr><td>可调边框</td><td>WS_SIZEBOX</td><td>0x00040000</td><td>窗口具有大小调整边框。</td></tr>
<tr><td>可调边框</td><td>WS_THICKFRAME</td><td>0x00040000</td><td>窗口具有调整大小边框。</td></tr>
<tr><td>系统菜单</td><td>WS_SYSMENU</td><td>0x00080000</td><td>窗口的标题栏上有一个窗口菜单。 还必须指定 WS_CAPTION 样式。</td></tr>
<tr><td>制表选择</td><td>WS_TABSTOP</td><td>0x00010000</td><td>窗口是一个控件，当用户按下 TAB 键时，该控件可以接收键盘焦点。</td></tr>
<tr><td>是否可见</td><td>WS_VISIBLE</td><td>0x10000000</td><td>该窗口最初是可见的。</td></tr>
</table><a name="扩展样式">窗口扩展样式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>双边窗口</td><td>WS_EX_DLGMODALFRAME</td><td>1</td><td>窗口有一个双边框</td></tr>
<tr><td>总在顶层</td><td>WS_EX_TOPMOST</td><td>8</td><td>窗口应放置在所有非最顶部窗口的上方</td></tr>
<tr><td>文件拖曳</td><td>WS_EX_ACCEPTFILES</td><td>0x10</td><td>窗口接受拖放文件。</td></tr>
<tr><td>窗口透明</td><td>WS_EX_TRANSPARENT</td><td>0x20</td><td>窗口显示为透明，因为基础同级窗口的位已被绘制。</td></tr>
<tr><td>MDI 窗口</td><td>WS_EX_MDICHILD</td><td>0x40</td><td>该窗口是 MDI 子窗口。</td></tr>
<tr><td>小标题栏</td><td>WS_EX_TOOLWINDOW</td><td>0x80</td><td>工具窗口具有短于普通标题栏的标题栏和使用较小的字体绘制的窗口标题。</td></tr>
<tr><td>凸起边缘</td><td>WS_EX_WINDOWEDGE</td><td>0x100</td><td>窗口的边框带有凸起的边缘。</td></tr>
<tr><td>阴影边界</td><td>WS_EX_CLIENTEDGE</td><td>0x200</td><td>窗口有一个带有凹陷边缘的边框。</td></tr>
<tr><td>问号帮助</td><td>WS_EX_CONTEXTHELP</td><td>0x400</td><td>窗口的标题栏包含问号。单击时光标将变成带指针的问号。随后单击子窗口将收到 WM_HELP 消息。</td></tr>
<tr><td>导航子窗</td><td>WS_EX_CONTROLPARENT</td><td>0x10000</td><td>包含参与对话框导航的子窗口。执行导航操作（例如处理 TAB 键、箭头键或键盘助记键）时，对话管理器将递归为此窗口的子级。</td></tr>
<tr><td>静态边框</td><td>WS_EX_STATICEDGE</td><td>0x20000</td><td>窗口具有三维边框样式，旨在用于不接受用户输入的项。</td></tr>
<tr><td>到任务栏</td><td>WS_EX_APPWINDOW</td><td>0x40000</td><td>在顶级窗口可见时强行将其放在任务栏上。</td></tr>
<tr><td>分层窗口</td><td>WS_EX_LAYERED</td><td>0x80000</td><td>该窗口是一个分层窗口。</td></tr>
<tr><td>不重定向</td><td>WS_EX_NOREDIRECTIONBITMAP</td><td>0x00200000</td><td>窗口不会呈现到重定向图面。这适用于没有可见内容或使用表面以外的机制提供其视觉对象的窗口。</td></tr>
<tr><td>后台窗口</td><td>WS_EX_NOACTIVATE</td><td>0x8000000</td><td>创建的顶级窗口不会成为前台窗口。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>窗口外观类</td><td>CREATESTRUCT</td><td>48</td><td>定义了传递给应用程序的窗口过程的初始化参数，它定义了窗口外观相关特性</td></tr>
<tr><th colspan=4>窗口外观类——成员表</th></tr>
<tr><td>参数</td><td>lpCreateParams</td><td>整数</td><td>指向将被用于创建窗口的数据的指针</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>标识了拥有新窗口的模块的模块实例的句柄</td></tr>
<tr><td>菜单</td><td>hMenu</td><td>整数</td><td>标识了要被用于新窗口的菜单。如果是子窗口，则包含整数ID。</td></tr>
<tr><td>父窗</td><td>hwndParent</td><td>整数</td><td>父窗口句柄</td></tr>
<tr><td>高度</td><td>cy</td><td>整数</td><td>指定新窗口的高度</td></tr>
<tr><td>宽度</td><td>cx</td><td>整数</td><td>指定新窗口的宽度</td></tr>
<tr><td>顶部</td><td>y</td><td>整数</td><td>指定新窗口的左上角y坐标</td></tr>
<tr><td>左边</td><td>x</td><td>整数</td><td>指定新窗口的左上角x坐标</td></tr>
<tr><td>风格</td><td>style</td><td>整数</td><td>指定了新窗口的风格。</td></tr>
<tr><td>名称</td><td>lpszName</td><td>整数</td><td>指定了新窗口的名字</td></tr>
<tr><td>类名</td><td>lpszClass</td><td>整数</td><td>指定了新窗口的类名</td></tr>
<tr><td>扩展</td><td>dwExStyle</td><td>整数</td><td>指定了新窗口的扩展风格</td></tr>
</table><p><font size="6">修改窗口类的值——控制外观</font></p>
示例1:修改窗口背景颜色
<font color="#0000FF">整数 红刷=创建画刷($FF)</font>;创建一个红色的画刷(用来填充颜色)<br>
<font color="#0000FF">修改类值(窗体, 类背景色, 红刷)</font>;修改窗体的背景颜色为红色<br>
<font color="#0000FF">重绘矩形(窗体, 0, 1)</font>重绘窗体擦除背景,从而显示新的背景色<br>
画刷可以使用系统固有的,有0-15种,把红刷改成<font color="#0000FF">整数 红刷=取控件数(窗体,1,0,0)</font><br>
这里假定文本框的编号为1,在文本框里输入0-15的数字,可以修改查看修改窗体背景颜色的效果<br>
示例2:修改窗口光标<br>
<font color="#0000FF">整数 光标=加载图像(0,"sec.cur",光标类型,0,0,$10)</font>;从文件中加载一个图标，$10标志是从文件加载<br>
<font color="#0000FF">修改类值(窗体,窗类光标,光标)</font>;修改窗体的光标为指定的cur文件<br>
<font color="#0000FF">删除对象(光标)</font>;删除加载的光标对象,从而释放读取光标使用的内存<br>
加载光标可以使用系统固有的光标,例如把光标换成<font color="#0000FF">整数 光标=载入光标(0,32649)</font><br>
显示的就是一个手形光标;32512箭头,32513文本I,32514转圈(忙),32515十字,32516,向上<br>
32631笔形,32642左上右下对角线,32643右上左下对角线,32644水平调整,32645垂直调整<br>
32646移动光标,32648禁止,32649链接,32650后台工作,32651帮助,32671定位,32672人员<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>类菜单名</td><td>-8</td><td>GCL_MENUNAME</td><td>获取/替换菜单名字符串的地址。</td></tr>
<tr><td>类背景色</td><td>-10</td><td>GCL_HBRBACKGROUND</td><td>获取/替换与类有关的背景刷子的句柄。</td></tr>
<tr><td>窗类光标</td><td>-12</td><td>GCL_HCURSOR</td><td>获取/替换与类有关的光标的句柄。</td></tr>
<tr><td>窗类图标</td><td>-14</td><td>GCL_HICON</td><td>获取/替换与类有关的图标的句柄。</td></tr>
<tr><td>窗类模块</td><td>-16</td><td>GCL_HMODULE</td><td>获取/替换注册类的模块的句柄。</td></tr>
<tr><td>窗类内存</td><td>-18</td><td>GCL_CBWNDEXTRA</td><td>获得/修改与类中的每个窗口相关的额外窗口中内存空间的字节大小</td></tr>
<tr><td>窗类尺寸</td><td>-20</td><td>GCL_CBCLSEXTRA</td><td>设置与类相关的尺寸的大小。不改变己分配的额外字节数。</td></tr>
<tr><td>窗类过程</td><td>-24</td><td>GCL_WNDPROC</td><td>获取/替换与窗口类有关的窗口过程的地址。</td></tr>
<tr><td>窗类风格</td><td>-26</td><td>GCL_STYLE</td><td>获取/替换窗口类的风格位。</td></tr>
<tr><td>窗类原子</td><td>-32</td><td>GCW_ATOM</td><td>获得一个唯一标识窗口类的原子值</td></tr>
<tr><td>类小图标</td><td>-34</td><td>GCL_HICONSM</td><td>获得与类有关的小图标句柄。</td></tr>
</table><p><font size="6">修改窗口属性——外观指针</font></p>
<font color="#0000FF">改窗口值(窗体,窗口过程,@消息函数)</font>;为窗口过程设置新的函数地址。<br>
<font color="#0000FF">改窗口值(窗体,窗口扩展,$200)</font>;修改窗体的扩展窗口风格为3D边框<br>
<font color="#0000FF">改窗口值(窗体,窗口数值,数据)</font>;修改窗体的定义数值为指定数据<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>窗口过程</td><td>-4</td><td>GWL_WNDPROC</td><td>获得/修改窗口过程的地址</td></tr>
<tr><td>窗口实例</td><td>-6</td><td>GWL_HINSTANCE</td><td>获得/修改应用事例的句柄。</td></tr>
<tr><td>窗口父级</td><td>-8</td><td>GWL_HWNDPARENT</td><td>获得/修改父窗口句柄。</td></tr>
<tr><td>窗口风格</td><td>-16</td><td>GWL_STYLE</td><td>获/修改得窗口风格。</td></tr>
<tr><td>窗口扩展</td><td>-20</td><td>GWL_EXSTYLE</td><td>获得/修改扩展窗口风格。</td></tr>
<tr><td>窗口数值</td><td>-21</td><td>GWL_USERDATA</td><td>获得/修改与窗口有关的定义数值。</td></tr>
<tr><td>窗口标识</td><td>-12</td><td>GWL_ID</td><td>获得/修改窗口标识。</td></tr>
<tr><td>对话消息</td><td>0</td><td>DWL_MSGRESULT</td><td>获得/修改在对话框过程中一个消息处理的返回值。</td></tr>
<tr><td>对话过程</td><td>4</td><td>DWL_DLGPROC</td><td>获得/修改对话框过程的地址</td></tr>
<tr><td>对话定义</td><td>8</td><td>DWL_USER</td><td>获得/修改应用程序私有的额外信息，例如一个句柄或指针。</td></tr>
</table><p><font size="6">修改窗口显示</font></p>
<font color="#0000FF">显隐窗口(窗体,窗口最小)</font>;激活窗口并将其最小化。<br>
<font color="#0000FF">显隐窗口(窗体,窗口隐藏)</font>;隐藏窗口并激活其他窗口<br>
<font color="#0000FF">显隐窗口(窗体,窗口显示)</font>;激活窗口并恢复原来的尺寸。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>窗口隐藏</td><td>0</td><td>SW_HIDE</td><td>隐藏窗口并激活其他窗口。常用于<a href="#显隐窗口">显隐窗口</a></td></tr>
<tr><td>恢复原来</td><td>1</td><td>SW_SHOWNORMAL</td><td>激活并显示一个窗口。如果窗口被最小化或最大化，系统将其恢复到原来的尺寸和大小。</td></tr>
<tr><td>窗口最小</td><td>2</td><td>SW_SHOWMINIMIZED</td><td>激活窗口并将其最小化。</td></tr>
<tr><td>窗口最大</td><td>3</td><td>SW_SHOWMAXIMIZED</td><td>激活窗口并将其最大化</td></tr>
<tr><td>恢复最近</td><td>4</td><td>SW_SHOWNOACTIVATE</td><td>以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。</td></tr>
<tr><td>窗口显示</td><td>5</td><td>SW_SHOW</td><td>在窗口原来的位置以原来的尺寸激活和显示窗口。</td></tr>
<tr><td>最小切换</td><td>6</td><td>SW_MINIMIZE</td><td>最小化指定的窗口并且激活在Z序中的下一个顶层窗口。</td></tr>
<tr><td>最小激活</td><td>7</td><td>SW_SHOWMINNOACTIVE</td><td>窗口最小化，激活窗口仍然维持激活状态。</td></tr>
<tr><td>恢复激活</td><td>8</td><td>SW_SHOWNA</td><td>以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。</td></tr>
<tr><td>激活原来</td><td>9</td><td>SW_RESTORE</td><td>激活并显示窗口。如果窗口最小化或最大化，则系统将窗口恢复到原来的尺寸和位置。</td></tr>
<tr><td>恢复设定</td><td>10</td><td>SW_SHOWDEFAULT</td><td>依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态</td></tr>
</table><p><font size="6">修改窗口大小位置和显示隐藏</font></p>
<font color="#0000FF">设置窗口(标签1,0,0,0,0,0,$23)</font>;在窗口周围画一个边框。尺寸位置不变<br>
<font color="#0000FF">设置窗口(窗口,0,左,顶,0,0,1)</font>;设置窗口的位置,忽略宽高<br>
<font color="#0000FF">设置窗口(窗口,0,0,0,宽,高,2)</font>;设置窗口的宽高,忽略位置。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>保持尺寸</td><td>$0001</td><td>SWP_NOSIZE</td><td>维持当前尺寸（忽略宽高参数）。常用于<a href="#设置窗口">设置窗口</a></td></tr>
<tr><td>保持位置</td><td>$0002</td><td>SWP_NOMOVE</td><td>维持当前位置（忽略左顶参数）。</td></tr>
<tr><td>保持层序</td><td>$0004</td><td>SWP_NOZORDER</td><td>维持当前Z序。</td></tr>
<tr><td>保持图像</td><td>$0008</td><td>SWP_NOREDRAW</td><td>不重画改变的内容。如果设置了这个标志，则不发生任何重画动作。</td></tr>
<tr><td>保持状态</td><td>$0010</td><td>SWP_NOACTIVATE</td><td>不激活窗口。</td></tr>
<tr><td>增加边框</td><td>$0020</td><td>SWP_DRAWFRAME</td><td>在窗口周围画一个边框（定义在窗口类描述中）。</td></tr>
<tr><td>显现窗口</td><td>$0040</td><td>SWP_SHOWWINDOW</td><td>显示窗口</td></tr>
<tr><td>隐藏窗口</td><td>$0080</td><td>SWP_HIDEWINDOW</td><td>隐藏窗口</td></tr>
<tr><td>清空窗口</td><td>$0100</td><td>SWP_NOCOPYBITS</td><td>清除客户区窗口的所有内容。</td></tr>
<tr><td>不变顺序</td><td>$0200</td><td>SWP_NOREPOSITION</td><td>不改变z序中的所有者窗口的位置。</td></tr>
<tr><td>防止同步</td><td>$2000</td><td>SWP_DEFERERASE</td><td>防止产生同步消息。</td></tr>
<tr><td>防止死锁</td><td>$4000</td><td>SWP_ASYNCWINDOWPOS</td><td>如果进程没有窗口，系统会向有窗口的线程发出消息。防止在其他线程处理消息时发生死锁。</td></tr>
</table><p><font size="6">修改窗口层序</font></p>
<font color="#0000FF">设置窗口(标签1,0,0,0,0,0,3)</font>;设置窗口显示在上层。尺寸位置不变<br>
<font color="#0000FF">设置窗口(标签1,-1,0,0,0,0,3)</font>;设置窗口显示在最顶层。尺寸位置不变<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>移至顶序</td><td>0</td><td>HWND_TOP</td><td>将窗口置于Z序的顶部。常用于<a href="#设置窗口">设置窗口</a></td></tr>
<tr><td>移至底层</td><td>1</td><td>HWND_BOTTOM</td><td>将窗口置于Z序的底部。顶层窗口失去顶级位置，并且被置在其他窗口的底部。</td></tr>
<tr><td>移至顶层</td><td>-1</td><td>HWND_TOPMOST</td><td>将窗口置于所有非顶层窗口之上。即使窗口未被激活窗口也将保持顶级位置。</td></tr>
<tr><td>移至顶后</td><td>-2</td><td>HWND_NOTOPMOST</td><td>将窗口置于所有非顶层窗口之上（即在所有顶层窗口之后）。</td></tr>
</table><p><font size="6"> 查找指定窗口的指定关系窗口</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<font color="#0000FF">整数 窗口=获取窗口(窗体,同级首个)</font>;查找窗体同级别第一个窗口<br>
<font color="#0000FF">整数 窗口=获取窗口(窗体,同级最后)</font>;查找窗体同级别最后一个窗口<br>
使用更多的是查找窗口:<font color="#0000FF">整数 窗口=查找窗口(0,窗口名)</font><br>
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>同级首个</td><td>0</td><td>GW_HWNDFIRST</td><td>同级别第一个，常用于GetWindow</td></tr>
<tr><td>同级最后</td><td>1</td><td>GW_HWNDLAST</td><td>同级别最后一个</td></tr>
<tr><td>同级下个</td><td>2</td><td>GW_HWNDNEXT</td><td>同级别下一个</td></tr>
<tr><td>同级上个</td><td>3</td><td>GW_HWNDPREV</td><td>同级别上一个</td></tr>
<tr><td>从主窗口</td><td>4</td><td>GW_OWNER</td><td>属主窗口</td></tr>
<tr><td>属子窗口</td><td>5</td><td>GW_CHILD</td><td>查子窗口</td></tr>
<tr><td>属弹出窗</td><td>6</td><td>GW_ENABLEDPOPUP</td><td>查弹出窗</td></tr>
</table><p><font size="6"><a name="控件">绘制控件</a>——通知消息：</font></p>
如果是指定多个或多种控件的字体,可以在绘制控件消息时指定,比如判断(消息) <font color="#0000FF">为 绘制按钮{发送消息(数据,指定字体,字体,0)}</font><br>
绘制不同的控件可以指定不同的字体,如果要所有控件都指定同一种字体,可以用<font color="#0000FF"> 为 绘制弹窗 ~ 绘制静态{选择对象(参数,字体)}</font><br>
使用波浪线符号是从绘制弹窗 到 绘制静态的消息,包括弹窗,编辑框,列表框,按钮,对话框,滚动条,静态标签框这些控件都指定为同一字体<br>
在绘制控件的时候,第三参数为控件的设备,所以也可以用<font color="#0000FF">选择对象(参数,字体)</font>来修改字体,但是这个方法不支持按钮一类的控件<br>
也可以在绘制控件时指定文字颜色和背景颜色,如:<font color="#FFC0FF">文本改色(参数,$C0FFFF)</font> <font color="#FF30C0">改背景色(参数,$C0FF30)</font><br>
改背景色适合编辑框,其它控件可以使用<font color="#FFC0C0">创建画刷($C0FFC0)</font>来修改背景,或者使用<font color="#FF0000">固有对象(5)</font>让背景透明,这里5是空画刷<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>绘制弹窗</td><td>$0132</td><td>WM_CTLCOLORMSGBOX</td><td>系统绘制消息框前发送本消息给消息框的所有者窗口,可用来设置消息框的文本和背景色③参数:设备;④数据:控件</td></tr>
<tr><td>绘制编辑</td><td>$0133</td><td>WM_CTLCOLOREDIT</td><td>当一个编辑框控件将要被绘制时,发送本消息给其父窗;可用来设置编辑框的文本和背景色③参数:设备;④数据:控件</td></tr>
<tr><td>绘制列表</td><td>$0134</td><td>WM_CTLCOLORLISTBOX</td><td>当一个列表框控件将要被绘制前,发送本消息给其父窗;可用来设置列表框的文本和背景色③参数:设备;④数据:控件</td></tr>
<tr><td>绘制按钮</td><td>$0135</td><td>WM_CTLCOLORBTN</td><td>绘制按钮的背景色③参数:设备;④数据:控件</td></tr>
<tr><td>绘制对话</td><td>$0136</td><td>WM_CTLCOLORDLG</td><td>绘制对话框的背景色③参数:设备;④数据:控件</td></tr>
<tr><td>绘制滚条</td><td>$0137</td><td>WM_CTLCOLORSCROLLBAR</td><td>绘制滚动条的背景色③参数:设备;④数据:控件</td></tr>
<tr><td>绘制静态</td><td>$0138</td><td>WM_CTLCOLORSTATIC</td><td>绘制一个静态控件的背景色③参数:设备;④数据:控件</td></tr>
</table><p><font size="6">控件事件——控制消息：</font></p>
<font color="#0000FF">整数 数值=取控件数(窗体,1)</font>获取窗体上1号控件内文字,并转换成数值<br>
<font color="#0000FF">改控件数(窗体,2,数值,真)</font>把数值转换成文字显示到窗体上2号控件窗口<br>
<font color="#0000FF">文本 内容[16]=取控件字(窗体,3)</font>获取窗体上3号控件内文字<br>
<font color="#0000FF">改控件字(窗体,2,内容)</font>把文字内容显示到窗体上2号控件窗口<br>
判断(消息) <font color="#0000FF">为 控件事件 公共事件(数据)</font>调用公共事件这段程序代码,④数据:包含多项事件信息的数据<br>
<font color="#6000FF">程序段 公共事件(数据)<br>
&emsp;&emsp;整数 窗口=数据&,参数=.&4,事件=.&8<br>
&emsp;&emsp;处理窗口(窗口,控件事件,参数,数据)<br>
结束</font><br>
数据地址里第一个整数是窗口,第二个整数是控件编号(对应窗体消息的参数),第三个整数是控件事件<br>
这种事件是用负数表示,如-2是单击左键,-3是双击左键,具体参照下面:公用控件事件这个表<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>绘制控件</td><td>$0019</td><td>WM_CTLCOLOR</td><td>在每个控件开始绘制之前，都会向其父窗口发送此消息，可用来设置控件显示文本的前景色、背景色以及字体。③参数:设备;④数据:控件</td></tr>
<tr><td>控件创建</td><td>$002C</td><td>WM_MEASUREITEM</td><td>按钮、组合框、列表框、列表控件、菜单项被创建时会发送本消息给这些控件的所有者。③参数:控件号;④数据:<a href="#项目尺寸类">项目尺寸类</a></td></tr>
<tr><td>删除项目</td><td>$002D</td><td>WM_DELETEITEM </td><td>列表框或组合框被销毁或删除清空某些项时,会发送本消息给这些控件的所有者。③参数:控件号;④数据:  <a href="#项目删除类">项目删除类</a></td></tr>
<tr><td>新项位置</td><td>$0039</td><td>WM_COMPAREITEM</td><td>可发送本消息来确定组合框(CBS_SORT)或列表框(LBS_SORT)中新增项的相对位置。③参数:控件号;④数据:<a href="#项目排序类">项目排序类</a></td></tr>
<tr><td>串口事件</td><td>$0044</td><td>WM_COMMNOTIFY</td><td>Win3.1中,当串口事件产生时,通讯设备驱动程序发送消息本消息给系统,指示输入输出队列的状态。</td></tr>
<tr><td>控件事件</td><td>$004E</td><td>WM_NOTIFY</td><td>当某控件的某事件已发生或该控件需得到一些信息时,发送本消息给其父窗。③参数:控件号;④数据:<a href="#通知类">通知类</a></td></tr>
<tr><td>帮助按键</td><td>$0053</td><td>WM_HELP</td><td>按下<F1>后,若某菜单是激活的,就发给此窗口关联的菜单;否则就发送给有焦点的窗口;若当前都没有焦点,发给当前激活的窗口。③参数:0;④数据:<a href="#帮助类">帮助类</a></td></tr>
<tr><td>消息判断</td><td>$0055</td><td>WM_NOTIFYFORMAT</td><td>公用控件、自定义控件和其父窗通过本消息判断控件在WM_NOTIFY通知消息中是使用ANSI还是UNICODE。③参数:窗口;④数据:3控件,4父窗;返回值:1ANSi,2UNICODE</td></tr>
<tr><td>定时事件</td><td>$0113</td><td>WM_TIMER</td><td>发生了定时器事件。③参数:编号;④数据:回调函数</td></tr>
</table><p><font size="6">公用控件事件——通知消息：</font></p>
发生控件事件时,若无特别说明④数据:传递<a href="#通知类">通知类</a> 结构的数据<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件内存不足</td><td>-1</td><td>NM_OUTOFMEMORY</td><td>内存不足,操作不能完成</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键</td></tr>
<tr><td>控件双击左键</td><td>-3</td><td>NM_DBLCLK</td><td>用户在控件上双击了鼠标左键</td></tr>
<tr><td>控件按下回车</td><td>-4</td><td>NM_RETURN</td><td>控件获得键盘焦点并按下回车键</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键</td></tr>
<tr><td>控件双击右键</td><td>-6</td><td>NM_RDBLCLK</td><td>用户在控件上双击了鼠标右键</td></tr>
<tr><td>控件得到焦点</td><td>-7</td><td>NM_SETFOCUS</td><td>控件收到输入焦点</td></tr>
<tr><td>控件失去焦点</td><td>-8</td><td>NM_KILLFOCUS</td><td>用户失去输入焦点</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>控件鼠标掠过</td><td>-13</td><td>NM_HOVER</td><td>用户的鼠标掠过控件</td></tr>
<tr><td>控件命中测试</td><td>-14</td><td>NM_NCHITTEST</td><td>当控件收到消息时，由 伸缩条 控件发送。④数据:NMMOUSE 结构</td></tr>
<tr><td>控件按下键盘</td><td>-15</td><td>NM_KEYDOWN</td><td>控件获得键盘焦点并按下某键</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>控件设置光标</td><td>-17</td><td>NM_SETCURSOR</td><td>控件响应消息要设置光标</td></tr>
<tr><td>控件键入字符</td><td>-18</td><td>NM_CHAR</td><td>字符键被处理后由控件发送</td></tr>
<tr><td>控件工具提示</td><td>-19</td><td>NM_TOOLTIPSCREATED</td><td>通知控件的父窗口控件已创建工具提示控件。④数据:NMTOOLTIPSCREATED 结构</td></tr>
<tr><td>控件鼠标左键</td><td>-20</td><td>NM_LDOWN</td><td>通知控件的父窗口已按下鼠标左键。</td></tr>
<tr><td>控件鼠标右键</td><td>-21</td><td>NM_RDOWN</td><td>不支持此通知代码。</td></tr>
<tr><td>控件主题更改</td><td>-22</td><td>NM_THEMECHANGED</td><td>通知控件的父窗口主题已更改。</td></tr>
<tr><td>控件字体更改</td><td>-23</td><td>NM_FONTCHANGED</td><td>当控件更改字体时，由列表视图控件发送。</td></tr>
<tr><td>控件自定文本</td><td>-24</td><td>NM_CUSTOMTEXT</td><td>通知控件的父窗口有关自定义文本操作的信息。④数据:NMCUSTOMTEXT 结构</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>控件背景颜色</td><td>0x2001</td><td>CCM_SETBKCOLOR</td><td>此消息用于设置控件的背景颜色。③参数:0;④数据:颜色;</td></tr>
<tr><td>控件设置配色</td><td>0x2002</td><td>CCM_SETCOLORSCHEME</td><td>此消息用于设置控件的颜色配置。③参数:0;④数据:COLORSCHEME;</td></tr>
<tr><td>控件获取配色</td><td>0x2003</td><td>CCM_GETCOLORSCHEME</td><td>此消息用于获取控件的颜色配置。③参数:0;④数据:COLORSCHEME;</td></tr>
<tr><td>控件拖放接口</td><td>0x2004</td><td>CCM_GETDROPTARGET</td><td>获取页码控件的 <a href="#拖放目标对象">拖放目标对象</a> 接口指针。③参数:0;④数据:@接口</td></tr>
<tr><td>控件设置宽字</td><td>0x2005</td><td>CCM_SETUNICODEFORMAT</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>0x2006</td><td>CCM_GETUNICODEFORMAT</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
<tr><td>控件设置版本</td><td>0x2007</td><td>CCM_SETVERSION</td><td>此消息用于通知控件与特定版本关联。③参数:版本;④数据:0;</td></tr>
<tr><td>控件获取版本</td><td>0x2008</td><td>CCM_GETVERSION</td><td>获取控件设置的版本号。③参数:0;④数据:0;</td></tr>
<tr><td>控件设置样式</td><td>0x200B</td><td>CCM_SETWINDOWTHEME</td><td>此消息用于设置控件的视觉样式。③参数:0;④数据:样式（宽字符）;</td></tr>
<tr><td>控件启用缩放</td><td>0x200C</td><td>CCM_DPISCALE</td><td>树表、表格、强组合框、标题、按钮、工具栏、动画和图像列表)启用dpi缩放。③参数:真;④数据:0;</td></tr>
</table><font size="6"><a name="通知类">通知类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>通知类</td><td>NMHDR</td><td>12</td><td>包含有关通知消息的信息。</td></tr>
<tr><th colspan=4>通知类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hwndFrom</td><td>整数</td><td>发送消息的控件的窗口句柄。</td></tr>
<tr><td>标识</td><td>idFrom</td><td>整数</td><td>发送消息的控件的标识符。</td></tr>
<tr><td>事件</td><td>code</td><td>整数</td><td>控件事件通知代码。</td></tr>
</table><p><font size="6"><a name="区外">窗口非客户区</a>——通知消息：</font></p>
窗口非客户区包括标题栏菜单栏最小最大化关闭按钮等区域,也就是可以设计显示控件的区域是客户区<br>
鼠标左键按住标题栏可以拖曳窗口移动位置,但是对于无标题栏的窗口怎么拖动位置呢?<br>
判断(消息) <font color="#0000FF">为 按下左键{发送消息(窗口,区外按左,2,0)}</font>在窗口客户区按下鼠标左键<br>
发送消息是区外按左,也就是在非客户区按下鼠标左键,参数写2是标题栏,模拟鼠标左键点击标题的消息<br>
然后移动鼠标,窗体就会跟随鼠标一起移动了,松开鼠标左键再移动鼠标,窗体也不再跟随鼠标移动<br>
③参数:点击区域,0在屏幕与窗口分界线上,1在窗口客户区,2在标题栏,3菜单或子窗口的关闭按钮,4在大小框中<br>
5在菜单中,6在水平滚动条中,7在垂直滚动条,8在最小化按钮中,9在最大化按钮中,10在调整窗口宽度的左边框<br>
11,在调整窗口宽度的右边框,12在窗口的上水平边框中,13边框的左上角,14边框的右上角,15垂直调整边框中<br>
16边框左下角(对角调整),17边框右下角(对角调整),18不可调大小的边框中,20在关闭按钮中,21在帮助按钮中<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>区外删除</td><td>$0082</td><td>WM_NCDESTROY</td><td>本消息通知某窗口,非客户区正在销毁。③参数:0;④数据:0</td></tr>
<tr><td>区外调整</td><td>$0083</td><td>WM_NCCALCSIZE</td><td>当某窗口的客户区的大小和位置须被计算时发送本消息。③参数:0不需要指示工作区的有效部分,非0需要;④数据:参数为真NCCALCSIZE_PARAMS 结构,参数为假 矩形类</td></tr>
<tr><td>区外鼠标</td><td>$0084</td><td>WM_NCHITTEST</td><td>当用户在在非客户区移动鼠标、按住或释放鼠标时发送本消息(击中测试);若鼠标没有被捕获,则在得到光标之后发出。③参数:0;④数据:屏幕坐标x/y</td></tr>
<tr><td>区外重绘</td><td>$0085</td><td>WM_NCPAINT</td><td>当窗口框架(非客户区)必须被被重绘时,应用程序发送本消息给该窗口。③参数:区域;④数据:0</td></tr>
<tr><td>区外激活</td><td>$0086</td><td>WM_NCACTIVATE</td><td>本消息发送给某窗口,在窗口的非客户区被激活时重绘窗口。③参数:0绘制非活动标题栏或图标,非0活动;④数据:0活动窗口,-1不重绘,非活动窗口区域指针</td></tr>
<tr><td>经过区外</td><td>$00A0</td><td>WM_NCMOUSEMOVE</td><td>当光标在某窗口的非客户区内移动时,发送本消息给该窗口。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外按左</td><td>$00A1</td><td>WM_NCLBUTTONDOWN</td><td>当光标在某窗口的非客户区内的同时按下鼠标左键,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外放左</td><td>$00A2</td><td>WM_NCLBUTTONUP</td><td>当用户释放鼠标左键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外双左</td><td>$00A3</td><td>WM_NCLBUTTONDBLCLK</td><td>当用户双击鼠标左键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外按右</td><td>$00A4</td><td>WM_NCRBUTTONDOWN</td><td>当用户按下鼠标右键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外放右</td><td>$00A5</td><td>WM_NCRBUTTONUP</td><td>当用户释放鼠标右键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外双右</td><td>$00A6</td><td>WM_NCRBUTTONDBLCLK</td><td>当用户双击鼠标右键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外按中</td><td>$00A7</td><td>WM_NCMBUTTONDOWN</td><td>当用户按下鼠标中键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外放中</td><td>$00A8</td><td>WM_NCMBUTTONUP</td><td>当用户释放鼠标中键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外双中</td><td>$00A9</td><td>WM_NCMBUTTONDBLCLK</td><td>当用户双击鼠标中键的同时光标在某窗口的非客户区内时,会发送本消息。③参数:点击区域;④数据:坐标x/y;</td></tr>
<tr><td>区外按向</td><td>$00AB</td><td>WM_NCXBUTTONDOWN</td><td>当光标位于窗口非工作区中并且用户按下鼠标前进后退按钮时发送。③参数:1后退(X1),2前进(X2);④数据:坐标类;</td></tr>
<tr><td>区外放向</td><td>$00AC</td><td>WM_NCXBUTTONUP</td><td>当光标位于窗口非工作区中并且用户释放鼠标前进后退按钮时发送。③参数:1后退(X1),2前进(X2);④数据:坐标类;</td></tr>
<tr><td>区外双向</td><td>$00AD</td><td>WM_NCXBUTTONDBLCLK</td><td>当光标位于窗口非工作区中并且用户双击鼠标前进后退按钮时发送。③参数:1后退(X1),2前进(X2);④数据:坐标类;</td></tr>
</table><p><font size="6"><a name="键盘">键盘事件</a>——通知消息：</font></p>
判断(消息) <font color="#0000FF">为 键盘按下 获取键值(参数)<br>
&emsp;&emsp;为 键盘松开 获取键值(参数)</font><br>
在键盘按下的动作事件里,把参数提交给获取键值的程序段,也就是键值<br>
<font color="#0000FF">程序段 获取键值(键码)<br>
&emsp;&emsp;判断(键码)为 37 左方向键<br>
&emsp;&emsp;为 38 上方向键 为 65 字母A键</font><br>
根据不同的键码去执行相应的功能函数(程序段),按键对应的虚拟键代码请查看下面的表<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>窗口激活</td><td>6</td><td>WM_ACTIVATE</td><td>一个窗口被激活或失去激活状态。③参数:0关闭,1非鼠标激活,2鼠标激活;④数据:参数为0是激活窗口,非0是停用的窗口</td></tr>
<tr><td>获得焦点</td><td>7</td><td>WM_SETFOCUS</td><td>将键盘焦点转向一个窗口。③参数:失去焦点的窗口,可为0;④数据:0</td></tr>
<tr><td>失去焦点</td><td>8</td><td>WM_KILLFOCUS</td><td>使一个窗口失去焦点。③参数:接收焦点的窗口,可为0;④数据:0</td></tr>
<tr><td>键盘起始</td><td>$0100</td><td>WM_KEYFIRST</td><td>用于WinCE系统,本消息在使用<a href="#获取消息">获取消息</a>和<a href="#查探消息">查探消息</a>函数时,用于过滤键盘消息</td></tr>
<tr><td>键盘按下</td><td>$0100</td><td>WM_KEYDOWN</td><td>当一个非系统按键被按下时(<ALT>键没有被按下),会发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>键盘松开</td><td>$0101</td><td>WM_KEYUP</td><td>当一个非系统按键被释放弹起时(<ALT>键没有被按下),会发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>键入字符</td><td>$0102</td><td>WM_CHAR</td><td>按下某按键,并已发出按下、松开消息,本消息包含被按下的按键的字符码。③参数:字码;④数据:扫描码</td></tr>
<tr><td>敲击按键</td><td>$0103</td><td>WM_DEADCHAR</td><td>\"死字符\"消息,当使用<a href="#翻译消息">翻译消息</a>函数翻译WM_KEYUP消息时,发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT键按下</td><td>$0104</td><td>WM_SYSKEYDOWN</td><td>当用户按住<ALT>键的同时又按下其它键时,发送本消息给拥有焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT键松开</td><td>$0105</td><td>WM_SYSKEYUP</td><td>当用户释放一个按键的同时<ALT>键还按着时,发送本消息给拥有焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT键字符</td><td>$0106</td><td>WM_SYSCHAR</td><td>当WM_SYSKEYDOWN消息被<a href="#翻译消息">翻译消息</a>函数翻译后,发送本消息给拥有焦点的窗口,注:<ALT>键被按下。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT敲字符</td><td>$0107</td><td>WM_SYSDEADCHAR</td><td>\"死字符\"消息,当使用<a href="#翻译消息">翻译消息</a>函数翻译WM_SYSKEYDOWN消息时,发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>键盘结束</td><td>$0108</td><td>WM_KEYLAST</td><td>用于WinCE系统,本消息在使用<a href="#获取消息">获取消息</a>和<a href="#查探消息">查探消息</a>函数时,用于过滤键盘消息</td></tr>
<tr><td>键入宽字</td><td>$0109</td><td>WM_UNICHAR</td><td>此消息包含按下的键的字符代码。类似于键入字符，但它使用宽字符转换格式UTF-32，而键入字符使用 UTF-16。③参数:键码;④数据:扫描码</td></tr>
<tr><td>系统命令</td><td>$0112</td><td>WM_SYSCOMMAND</td><td>当用户选择一条系统菜单命令、用户最大化或最小化或还原或关闭时。③参数:命令;④数据:点菜单时鼠标位置</td></tr>
<tr><td>热键消息</td><td>$312</td><td>WM_HOTKEY</td><td>当用户按下由<a href="#注册热键">注册热键</a>函数注册的热键时。③参数:-1窗口,-2桌面;④数据:低字=1Alt,2CTRL,4SHIFT,8WIN;高字=键码</td></tr>
<tr><td>程序命令</td><td>$319</td><td>WM_APPCOMMAND</td><td>用户点击应用程序命令按钮或键盘命令键(如导航刷新搜索)③参数:窗口;④数据:命令/设备/按键</td></tr>
<tr><td>输入开始</td><td>$010D</td><td>WM_IME_STARTCOMPOSITION</td><td>在输入法因为击键生成组合字符串之前立即发送。③参数:0;④数据:0</td></tr>
<tr><td>输入结束</td><td>$010E</td><td>WM_IME_ENDCOMPOSITION</td><td>在输入法结束组合时发送到应用程序。③参数:0;④数据:0</td></tr>
<tr><td>输入更改</td><td>$010F</td><td>WM_IME_COMPOSITION</td><td>当输入法因击键而更改组合状态时，发送到应用程序。③参数:字符;④数据:方式</td></tr>
<tr><td>输入启动</td><td>$281</td><td>WM_IME_SETCONTEXT</td><td>应用程序的窗口激活时,系统将向应用程序发送消息。③参数:0非活动,非0活动;④数据:1显候选窗口(左移位数是索引几),<br>15显所有候选,0x40000000显指南窗口,0x80000000显合成窗口</td></tr>
<tr><td>输入改变</td><td>$282</td><td>WM_IME_NOTIFY</td><td>可使用WM_IME_NOTIFY消息来通知关于IME窗口状态的常规改变。③参数:命令;④数据:相应数据</td></tr>
<tr><td>输入控制</td><td>$283</td><td>WM_IME_CONTROL</td><td>可使用WM_IME_CONTROL消息来改变字母组合窗口的位置。③参数:命令;④数据:相应数据</td></tr>
<tr><td>输入超出</td><td>$284</td><td>WM_IME_COMPOSITIONFULL</td><td>用户接口窗口不能增加编码窗口的尺寸时,IME用户接口窗口将发送消息。③参数:0;④数据:0</td></tr>
<tr><td>输入选择</td><td>$285</td><td>WM_IME_SELECT</td><td>系统发此消息以便选择一个新的IME输入法。③参数:0未选,非0已选;④数据:区域</td></tr>
<tr><td>输入打字</td><td>$286</td><td>WM_IME_CHAR</td><td>当打开输入法输入文字时发送消息。③参数:0字码;④数据:扫描码</td></tr>
<tr><td>输入请求</td><td>$288</td><td>WM_IME_REQUEST</td><td>应用程序请求输入法时,触发发送本消息。③参数:命令;④数据:相应数据</td></tr>
<tr><td>输入按下</td><td>$290</td><td>WM_IME_KEYDOWN</td><td>在输入法录字窗口中按下按键时,触发发送本消息。③参数:0键码;④数据:扫描码</td></tr>
<tr><td>输入松开</td><td>$291</td><td>WM_IME_KEYUP</td><td>在输入法录字窗口中释放按键时,触发发送本消息。③参数:0键码;④数据:扫描码</td></tr>
</table><p><font size="6">虚拟键代码表：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>0x01</td><td>鼠标的左键</td><td>0x02</td><td>鼠标的右键</td><td>0x03</td><td>Ctrl+Break</td><td>0x04</td><td>鼠标的中键</td><td>0x08</td><td>Backspace键</td><td>0x09</td><td>Tab键</td><td>0x0C</td><td>Clear键</td><td>0x0D</td><td>Enter键</td></tr>
<tr><td>0x10</td><td>Shift键</td><td>0x11</td><td>Ctrl键</td><td>0x12</td><td>Alt键</td><td>0x13</td><td>Pause键</td><td>0x14</td><td>Caps</td><td>0x15</td><td>IME-朝鲜日文模式</td><td>0x16</td><td>IME-打开</td><td>0x17</td><td>IME-Junja模式</td></tr>
<tr><td>0x18</td><td>IME-最终模式</td><td>0x19</td><td>IME-汉字</td><td>0x1A</td><td>IME-关闭</td><td>0x1B</td><td>Ese键</td><td>0x1C</td><td>IME-转换</td><td>0x1D</td><td>IME-不转换</td><td>0x1E</td><td>IME-接受</td><td>0x1F</td><td>IME-模式更改请求</td></tr>
<tr><td>0x20</td><td>空格键</td><td>0x21</td><td>上页键</td><td>0x22</td><td>下页键</td><td>0x23</td><td>End键</td><td>0x24</td><td>Home键</td><td>0x25</td><td>左键(←)</td><td>0x26</td><td>上键(↑)</td><td>0x27</td><td>右键(→)</td></tr>
<tr><td>0x28</td><td>下键(↓)</td><td>0x29</td><td>Select键</td><td>0x2A</td><td>PRINT键</td><td>0x2B</td><td>EXECUTE键</td><td>0x2C</td><td>（抓屏）</td><td>0x2D</td><td>Ins键</td><td>0x2E</td><td>Del键</td><td>0x2F</td><td>Help键</td></tr>
<tr><td>0x30</td><td>0键</td><td>0x31</td><td>1键</td><td>0x32</td><td>2键</td><td>0x33</td><td>3键</td><td>0x34</td><td>4键</td><td>0x35</td><td>5键</td><td>0x36</td><td>6键</td><td>0x37</td><td>7键</td></tr>
<tr><td>0x38</td><td>8键</td><td>0x39</td><td>9键</td><td>0x41</td><td>A键</td><td>0x42</td><td>B键</td><td>0x43</td><td>C键</td><td>0x44</td><td>D键</td><td>0x45</td><td>E键</td><td>0x46</td><td>F键</td></tr>
<tr><td>0x47</td><td>G键</td><td>0x48</td><td>H键</td><td>0x49</td><td>I键</td><td>0x4A</td><td>J键</td><td>0x4B</td><td>K键</td><td>0x4C</td><td>L键</td><td>0x4D</td><td>M键</td><td>0x4E</td><td>N键</td></tr>
<tr><td>0x4F</td><td>O键</td><td>0x50</td><td>P键</td><td>0x51</td><td>Q键</td><td>0x52</td><td>R键</td><td>0x53</td><td>S键</td><td>0x54</td><td>T键</td><td>0x55</td><td>U键</td><td>0x56</td><td>V键</td></tr>
<tr><td>0x57</td><td>W键</td><td>0x58</td><td>X键</td><td>0x59</td><td>Y键</td><td>0x5A</td><td>Z键</td><td>0x5B</td><td>左win键</td><td>0x5</td><td>右win键</td><td>0x5</td><td>菜单键</td><td>0x5</td><td>休眠键</td></tr>
<tr><td>0x60</td><td>数字键0键</td><td>0x61</td><td>数字键1键</td><td>0x62</td><td>数字键2键</td><td>0x62</td><td>数字键3键</td><td>0x64</td><td>数字键4键</td><td>0x65</td><td>数字键5键</td><td>0x66</td><td>数字键6键</td><td>0x67</td><td>数字键7键</td></tr>
<tr><td>0x68</td><td>数字键8键</td><td>0x69</td><td>数字键9键</td><td>0x6A</td><td>数字*键</td><td>0x6B</td><td>数字+键</td><td>0x6C</td><td>分隔符键</td><td>0x6D</td><td>数字-键</td><td>0x6E</td><td>数字.键</td><td>0x6F</td><td>数字/键</td></tr>
<tr><td>0x70</td><td>F1键</td><td>0x71</td><td>F2键</td><td>0x72</td><td>F3键</td><td>0x73</td><td>F4键</td><td>0x74</td><td>F5键</td><td>0x75</td><td>F6键</td><td>0x76</td><td>F7键</td><td>0x77</td><td>F8键</td></tr>
<tr><td>0x78</td><td>F9键</td><td>0x79</td><td>F10键</td><td>0x7A</td><td>F11键</td><td>0x7B</td><td>F12键</td><td>0x7C</td><td>F13键</td><td>0x7D</td><td>F14键</td><td>0x7E</td><td>F15键</td><td>0x7F</td><td>F16键</td></tr>
<tr><td>0x80</td><td>F17键</td><td>0x81</td><td>F18键</td><td>0x82</td><td>F19键</td><td>0x83</td><td>F20键</td><td>0x84</td><td>F21键</td><td>0x85</td><td>F22键</td><td>0x86</td><td>F23键</td><td>0x87</td><td>F24键</td></tr>
<tr><td>0x90</td><td>数字开关键</td><td>0x91</td><td>ScrollLock键</td><td>0xA0</td><td>左SHIFT键</td><td>0xA1</td><td>右SHIFT键</td><td>0xA2</td><td>左Ctrl键</td><td>0xA3</td><td>右Ctrl键</td><td>0xA4</td><td>左ALT键</td><td>0xA5</td><td>右ALT键</td></tr>
<tr><td>0xA6</td><td>后退键</td><td>0xA7</td><td>前进键</td><td>0xA8</td><td>刷新键</td><td>0xA9</td><td>停止加载</td><td>0xAA</td><td>搜索键</td><td>0xAB</td><td>收藏键</td><td>0xAC</td><td>主页键</td><td>0xAD</td><td>静音键</td></tr>
<tr><td>0xAE</td><td>音量减</td><td>0xAF</td><td>音量加</td><td>0xB0</td><td>下一曲</td><td>0xB1</td><td>上一曲</td><td>0xB2</td><td>停止播放</td><td>0xB3</td><td>播放/暂停</td><td>0xB4</td><td>邮件键</td><td>0xB5</td><td>选曲键</td></tr>
<tr><td>0xB6</td><td>程序1键</td><td>0xB7</td><td>程序2键</td><td>0xBB</td><td>通用+键</td><td>0xBC</td><td>通用,键</td><td>0xBD</td><td>通用-键</td><td>0xBE</td><td>通用.键</td><td>0xE5</td><td>IME-PROCESS</td><td>0xF6</td><td>Attn 键</td></tr>
<tr><td>0xF7</td><td>CrSel键</td><td>0xF8</td><td>ExSel键</td><td>0xF9</td><td>EraseEOF键</td><td>0xFA</td><td>Play键</td><td>0xFB</td><td>Zoom键</td><td>0xFC</td><td>预留</td><td>0xFD</td><td>PA1键</td><td>0xFE</td><td>Clear键</td></tr>
</table><p><font size="6"><a name="菜单">菜单事件</a>——通知消息：</font></p>
菜单的单击事件可以在设计菜单的时候双击菜单列表项目进行绑定<br>
其它的菜单事件都可以交给"处理窗口"这个函数自动完成,下面演示几种常用的菜单操作:<br>
1.控制菜单项选中或者禁用<br>
<font color="#0000FF">菜单复选(菜单,1001,8)</font>&emsp;控制编号为1001的菜单选中<br>
第一个窗体的菜单编号是从1001开始排序,一级菜单和弹出式菜单不计编号,只算可以点击的菜单<br>
最后参数: 0是不选,1是灰色,2是禁用,8是选中,$400相对菜单项<br>
<font color="#0000FF">菜单复选(菜单,1,$408)</font>&emsp;控制相对位置为1的菜单选中<br>
使用相对菜单项$400加上其它功能,然后控制第几个菜单,从0开始排序<br>
2.托盘或控件右键事件弹出菜单<br>
<font color="#0000FF">展示菜单(菜单.1,0,左,顶,窗口,0)</font>&emsp;第一个一级菜单就叫菜单.1<br>
第二个一级菜单就叫菜单.2,设计菜单的时候主菜单名称为空就不会在窗体上显示<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>初始菜单</td><td>$0116</td><td>WM_INITMENU</td><td>当一个菜单将被激活时发送本消息,它发生在用户点击了某菜单项或按下某菜单键。它允许程序在显示前更改菜单。③参数:菜单;④数据:0</td></tr>
<tr><td>弹出菜单</td><td>$0117</td><td>WM_INITMENUPOPUP</td><td>当一个下拉菜单或子菜单将被激活时发送本消息,它允许程序在它显示前更改菜单,却不更改全部菜单。③参数:菜单;④数据:低位=序号,高位=是否菜单</td></tr>
<tr><td>选择菜单</td><td>$011F</td><td>WM_MENUSELECT</td><td>当用户选择一条菜单项时,发送本消息给菜单的所有者(一般是窗口)。③参数:低位=序号,高位=标志;④数据:菜单</td></tr>
<tr><td>菜单激活</td><td>$0120</td><td>WM_MENUCHAR</td><td>当菜单已被激活且用户按下了某菜单字符键(括号括着、带下划线,不同于快捷键)。③参数:低位=序号,高位=标志$10弹出菜单,$2000菜单;④数据:菜单;</td></tr>
<tr><td>菜单右键</td><td>$0122</td><td>WM_MENURBUTTONUP</td><td>本消息允许程序为菜单项提供一个感知上下文的菜单(即快捷菜单)。③参数:序号;④数据:菜单</td></tr>
<tr><td>菜单点击</td><td>$0123</td><td>WM_MENUDRAG</td><td>当用户拖动菜单项时,发送本消息给拖放菜单的拥有者,可让菜单支持拖拽,可使用OLE拖放传输协议启动拖放操作。③参数:序号;④数据:菜单;返回0保持活动,1菜单结束</td></tr>
<tr><td>单击菜单</td><td>$0126</td><td>WM_MENUCOMMAND</td><td>当用户在一个菜单上作出选择时,会发送本消息,菜单要具有MNS_NOTIFYBYPOS风格(在MENUINFO结构体中设置)。③参数:序号;④数据:菜单</td></tr>
<tr><td>进入菜单循环</td><td>$211</td><td>WM_ENTERMENULOOP</td><td>发送本消息通知应用程序的主窗口已进入菜单循环模式。③参数:是否显示菜单;④数据:0</td></tr>
<tr><td>退出菜单循环</td><td>$212</td><td>WM_EXITMENULOOP</td><td>发送本消息通知应用程序的主窗口已退出菜单循环模式。③参数:是否快捷菜单;④数据:0</td></tr>
<tr><td>菜单切换</td><td>$213</td><td>WM_NEXTMENU</td><td>当使用左箭头光标键或右箭头光标键在菜单条与系统菜单之间切换时触发本消息,③参数:键码;④数据:MDINEXTMENU</td></tr>
</table><p><font size="6"><a name="鼠标">鼠标事件</a>——通知消息：</font></p>
计算鼠标手势:
<font color="#0000FF">坐标值 上次;坐标值 当前;</font>&emsp;两个结构体分别记录上次和当前鼠标位置<br>
判断(消息)<br>
&emsp;&emsp;<font color="#0000FF">为 按下左键,按下右键{上次=数据}</font>&emsp;按下鼠标左键或右键时记住当前鼠标位置到上次<br>
&emsp;&emsp;<font color="#0000FF">为 鼠标移动{当前=数据;鼠标手势(参数)上次=数据;}</font>&emsp;移动鼠标先记住当前鼠标位置到当前<br>
然后调用鼠标手势并提交参数,通过它可以判断是否按下了鼠标左键或者右键,计算当前鼠标位置和上次位置差值,最后再把当前坐标写入上次<br>
<font color="#0000FF">程序段 鼠标手势(参数)</font>&emsp;在这个程序段里计算上次鼠标位置和当前位置差<br>
&emsp;&emsp;<font color="#0000FF">判断(参数)为 1{</font>&emsp;按下鼠标左键时移动鼠标的计算<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.左<当前.左)鼠标向右移动</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.左>当前.左)鼠标向左移动</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.顶<当前.顶)鼠标向下移动</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.顶>当前.顶)鼠标向上移动}</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">为 2{</font>&emsp;按下鼠标右键时移动鼠标的计算<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.左<当前.左)鼠标向右移动</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.左>当前.左)鼠标向左移动</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.顶<当前.顶)鼠标向下移动</font>&emsp;<br>
&emsp;&emsp;<font color="#0000FF">如果(上次.顶>当前.顶)鼠标向上移动}</font>&emsp;<br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>捕获光标</td><td>$0020</td><td>WM_SETCURSOR</td><td>若鼠标光标在某窗口内移动且鼠标没被捕获时,就会发送本消息给某个窗口。③参数:窗口;④数据:命中消息</td></tr>
<tr><td>拖曳后窗</td><td>$0021</td><td>WM_MOUSEACTIVATE</td><td>当鼠标光标在某个未激活窗口内,而用户正按着鼠标的某个键时,会发送本消息给当前窗口。③参数:父窗;④数据:命中消息；<br>返回值：1激活窗口不丢弃鼠标，2激活丢弃鼠标，3不激活不丢弃，4不激活丢弃鼠标</td></tr>
<tr><td>点击右键</td><td>$007B</td><td>WM_CONTEXTMENU</td><td>当用户在某窗口中点击右键就发送本消息给该窗口,设置右键菜单。③参数:窗口;④数据:屏幕坐标x/y</td></tr>
<tr><td>命令事件</td><td>$0111</td><td>WM_COMMAND</td><td>用户选择一条菜单命令项或某控件发送一条通知消息给其父窗,或某快捷键被翻译时,本消息被发送。③参数:低位=编号,高位=事件;④数据:控件;菜单高位0,快捷键高位1,两者数据都是0</td></tr>
<tr><td>系统命令</td><td>$0112</td><td>WM_SYSCOMMAND</td><td>当用户选择一条系统菜单命令、用户最大化或最小化或还原或关闭时。③参数:命令;④数据:点菜单时鼠标位置</td></tr>
<tr><td>程序命令</td><td>$319</td><td>WM_APPCOMMAND</td><td>用户点击应用程序命令按钮或键盘命令键(如导航刷新搜索)③参数:窗口;④数据:命令/设备/按键</td></tr>
<tr><td>鼠标起始</td><td>$0200</td><td>WM_MOUSEFIRST</td><td>鼠标移动时发生(与WM_MOUSEMOVE等值),常用于判断鼠标消息的范围</td></tr>
<tr><td>鼠标移动</td><td>$0200</td><td>WM_MOUSEMOVE</td><td>当鼠标在窗口客户区移动时。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>按下左键</td><td>$0201</td><td>WM_LBUTTONDOWN</td><td>当鼠标左键在窗口客户区按下。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>释放左键</td><td>$0202</td><td>WM_LBUTTONUP</td><td>当鼠标左键在窗口客户区放开。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>双击左键</td><td>$0203</td><td>WM_LBUTTONDBLCLK</td><td>当鼠标左键在窗口客户区双击。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>按下右键</td><td>$0204</td><td>WM_RBUTTONDOWN</td><td>当鼠标右键在窗口客户区按下。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>释放右键</td><td>$0205</td><td>WM_RBUTTONUP</td><td>当鼠标右键在窗口客户区放开。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>双击右键</td><td>$0206</td><td>WM_RBUTTONDBLCLK</td><td>当鼠标右键在窗口客户区双击。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>按下中键</td><td>$0207</td><td>WM_MBUTTONDOWN</td><td>当鼠标中键在窗口客户区按下。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>释放中键</td><td>$0208</td><td>WM_MBUTTONUP</td><td>当鼠标中键在窗口客户区放开。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>双击中键</td><td>$0209</td><td>WM_MBUTTONDBLCLK</td><td>当鼠标中键在窗口客户区双击。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>滚轮转动</td><td>$020A</td><td>WM_MOUSEWHEEL</td><td>当滚动鼠标滚轮时。③参数:高位120向后,-120向前;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>鼠标结束</td><td>$020A</td><td>WM_MOUSELAST</td><td>WM_MBUTTONDBLCLK的别名,通常用于判断鼠标消息的范围,对应的还有WM_MOUSEFIRST(鼠标起始)</td></tr>
<tr><td>侧键按下</td><td>$020B</td><td>WM_XBUTTONDOWN</td><td>用户按下X按钮时发布。③参数:高位1第一个X按钮,2第二个X按钮;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>侧键松开</td><td>$020C</td><td>WM_XBUTTONUP</td><td>用户松开X按钮时发布。③参数:高位1第一个X按钮,2第二个X按钮;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>侧键双击</td><td>$020D</td><td>WM_XBUTTONDBLCLK</td><td>用户双击X按钮时发布。③参数:高位1第一个X按钮,2第二个X按钮;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>鼠标滚轮</td><td>$020E</td><td>WM_MOUSEHWHEEL</td><td>当鼠标的水平滚轮倾斜或旋转时发送。③参数:高位120向后,-120向前;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>失去鼠标</td><td>$215</td><td>WM_CAPTURECHANGED</td><td>当它失去捕获的鼠标时,发送本消息给窗口。③参数:0;④数据:窗口</td></tr>
<tr><td>移动消息</td><td>$216</td><td>WM_MOVING</td><td>当用户在移动窗口时发送本消息,通过本消息应用程序以监视窗口大小和位置,也可修改它们。③参数:0;④数据:矩形类</td></tr>
<tr><td>拖放文件</td><td>$233</td><td>WM_DROPFILES</td><td>鼠标拖放时,放下事件产生时发送本消息,比如:文件拖放功能。③参数:文件;④数据:0</td></tr>
<tr><td>鼠标经外</td><td>$2A0</td><td>WM_NCMOUSEHOVER</td><td>当光标悬停在窗口的非工作区上的达到指定时间发送本消息。③参数:命中值;④数据:坐标类;</td></tr>
<tr><td>鼠标经过</td><td>$2A1</td><td>WM_MOUSEHOVER</td><td>当光标悬停在窗口的工作区上的达到指定时间发送本消息。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>鼠标离外</td><td>$2A2</td><td>WM_NCMOUSELEAVE</td><td>当光标离开之前调用 TrackMouseEvent 中指定的窗口的非工作区时发送本消息。③参数:0;④数据:0;</td></tr>
<tr><td>鼠标离开</td><td>$2A3</td><td>WM_MOUSELEAVE</td><td>鼠标离开控件时,触发发送本消息。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
</table><p><font size="6"><a name="系统">系统事件</a>——通知消息：</font></p>
通过窗口可以实现跨进程通信: <br>
<font color="#0000FF">整数 窗口=查找窗口(0,"窗口标题")</font>;&emsp;通过窗口名获取到相应程序的窗口对象<br>
<font color="#0000FF">发送消息(窗口,设置文本,0,"标题文字")</font>;&emsp;修改窗口对象文字可以修改此窗口的标题栏<br>
<font color="#0000FF">发送消息(窗中,设置图标,0,载入图标(0,32518))</font>;&emsp;修改程序窗口的小图标为盾牌图标<br>
<font color="#0000FF">整数 按钮=获取控件(窗口,1)</font>;&emsp;假如此窗口的1号控件是个按钮,获取到按钮控件的子窗口对象<br>
<font color="#0000FF">整数 标签=获取控件(窗口,2)</font>;&emsp;假如此窗口的2号控件是个标签,获取到标签控件的子窗口对象<br>
<font color="#0000FF">整数 编辑=获取控件(窗口,3)</font>;&emsp;假如此窗口的3号控件是个编辑框,获取到编辑框的子窗口对象<br>
<font color="#0000FF">整数 列表=获取控件(窗口,4)</font>;&emsp;假如此窗口的4号控件是个列表框,获取到列表框的子窗口对象<br>
<font color="#0000FF">整数 组合=获取控件(窗口,5)</font>;&emsp;假如此窗口的5号控件是个组合框,获取到组合框的子窗口对象<br>
<font color="#0000FF">发送消息(按钮,模拟点击,0,0)</font>;&emsp;模拟点击另个程序窗口的1号按钮,窗口最小化和隐藏都可操作<br>
<font color="#0000FF">发送消息(标签,设置文本,0,"修改内容")</font>;&emsp;修改另个程序窗口的标签框内容,窗口最小化和隐藏都可操作<br>
<font color="#0000FF">发送消息(编辑,获取文本,64,内容)</font>;&emsp;获取另个程序窗口的编辑框内容,窗口最小化和隐藏都可操作<br>
<font color="#0000FF">发送消息(列表,列表添加,0,"项目内容")</font>;&emsp;向另个程序窗口的列表框添加内容,窗口最小化和隐藏都可操作<br>
<font color="#0000FF">发送消息(组合,组合添加,0,"项目文字")</font>;&emsp;向另个程序窗口的组合框添加内容,窗口最小化和隐藏都可操作<br>
跨进程操作窗口可以使用"控制窗口","显隐窗口","设置窗口","移动窗口"和"发送消息","提交消息"等函数<br>
不能使用"取窗口字","改窗口字","窗口字长","取控件字","改控件字","取控件数","改控件数"等函数<br>
通过<a href="#传递数据类">传递数据类</a>结构体可以自定义传递数据类型,接收方根据不同类型进行相应的处理<br>
发送方:<br>
<font color="#0000FF">传递数据类 传送</font>;&emsp;先申请一个传递数据类的变量名为:传送<br>
<font color="#0000FF">传送.数据="发送一段文字"</font>;&emsp;定义传送的数据为一段文字的指针<br>
<font color="#0000FF">传送.大小=字串长度(传送.数据)</font>;&emsp;定义传送的数据大小为该文字的长度<br>
<font color="#0000FF">整数 窗口=查找窗口(0,"窗口标题")</font>;&emsp;通过窗口名获取到相应程序的窗口对象<br>
<font color="#0000FF">发送消息(窗口,传递数据,0,传送)</font>;&emsp;把自定义数据发送给另个程序的窗口<br>
传送.分类 在没有指定的情况下,默认值是0,接收方可以判断为0的分类,是传送的文本内容<br>
接收方:<br>
<font color="#0000FF">为 传递数据 接收数据(数据)</font>;&emsp;在窗体消息里加入这句代码<br>
<font color="#0000FF">程序段 接收数据(传递数据类 接收)</font>;&emsp;增加一个接收数据的程序段<br>
<font color="#0000FF">传送内存(内容,接收.数据,接收.长度)</font>;&emsp;把数据复制到接收程序的变量里<br>
<font color="#0000FF">信息框(0,内容,"收到数据",信息图标)</font>;&emsp;弹出提示数据已接收完成<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>配置更新</td><td>$001A</td><td>WM_WININICHANGE</td><td>读写"win.ini"时会发送本消息给所有顶层窗口,通知其它进程该文件已被更改。③参数:0;④数据:名称</td></tr>
<tr><td>设备模式</td><td>$001B</td><td>WM_DEVMODECHANGE</td><td>改变设备模式设置("win.ini")时,处理本消息的应用程序可重新初始化它们的设备模式设置③参数:0;④数据:名称</td></tr>
<tr><td>系统关机</td><td>$0011</td><td>WM_QUERYENDSESSION</td><td>关机或注销时系统会按优先级给各进程发送,告诉应用程序要关机或注销了。③参数:0;④数据:0正在关闭事件;1文件要换或资源耗尽;4强制关闭程序;8用户正在注销</td></tr>
<tr><td>开始关机</td><td>$0016</td><td>WM_ENDSESSION</td><td>关机或注销时系统会发出消息给应用程序,通知程序会话结束。③参数:0会话结束,非0正在结束;④数据:0正在关闭事件;1文件要换或资源耗尽;4强制关闭程序;8用户正在注销</td></tr>
<tr><td>时间错误</td><td>$0017</td><td>WM_SYSTEMERROR</td><td>系统时间错误。③参数:0;④数据:0</td></tr>
<tr><td>字库更新</td><td>$001D</td><td>WM_FONTCHANGE</td><td>当系统的字体资源库变化时发送本消息给所有顶级窗口。③参数:0;④数据:0</td></tr>
<tr><td>时间改变</td><td>$001E</td><td>WM_TIMECHANGE</td><td>当系统的时间变化时发送本消息给所有顶级窗口。③参数:0;④数据:0</td></tr>
<tr><td>系统暂停</td><td>$0048</td><td>WM_POWER</td><td>当系统将要进入暂停状态时发送本消息(适用于16位的windows)③参数:1即将挂起,2挂起恢复,3含两种;④数据:0</td></tr>
<tr><td>传递数据</td><td>$004A</td><td>WM_COPYDATA</td><td>当一个应用程序传递数据给另一个应用程序时发送本消息。③参数:窗口;④数据:<a href="#传递数据类">传递数据类</a></td></tr>
<tr><td>取消日志</td><td>$004B</td><td>WM_CANCELJOURNAL</td><td>当用户取消程序日志激活状态时,发送本消息给那个应用程序。该消息使用空窗口句柄发送。③参数:0;④数据:0</td></tr>
<tr><td>用户出入</td><td>$0054</td><td>WM_USERCHANGED</td><td>当用户已登入或退出后发送本消息给所有窗口;当用户登入或退出时以及系统更新用户设置时,立即发送本消息。③参数:0;④数据:0; 自 Windows Vista 起，不支持此消息。</td></tr>
<tr><td>调分辨率</td><td>$007E</td><td>WM_DISPLAYCHANGE</td><td>当显示器的分辨率改变后,发送本消息给所有窗口。③参数:位深;④数据:分辨率x/y</td></tr>
<tr><td>电源消息</td><td>$218</td><td>WM_POWERBROADCAST</td><td>通知它有关电源管理事件。③参数:4正在扶起,7正在恢复,10状态更改,18自动恢复,32781设置更改;④数据:无/POWERBROADCAST_SETTING/PBT_POWERSETTINGCHANGE</td></tr>
<tr><td>硬件修改</td><td>$219</td><td>WM_DEVICECHANGE</td><td>当设备的硬件配置改变时,发送本消息给应用程序或设备驱动程序。③参数:事件;④数据:结构</td></tr>
<tr><td>主题更改</td><td>$31A</td><td>WM_THEMECHANGED</td><td>在主题更改事件后广播到每个窗口。③参数:0;④数据:0</td></tr>
<tr><td>消息保留</td><td>$0000</td><td>PM_NOREMOVE</td><td><a href="#查探消息">查探消息</a>处理后，消息不从队列里除掉。</td></tr>
<tr><td>消息清除</td><td>$0001</td><td>PM_REMOVE</td><td><a href="#查探消息">查探消息</a>处理后，消息从队列里除掉。</td></tr>
<tr><td>消息空闲</td><td>$0002</td><td>PM_NOYIELD</td><td>此标志使系统不释放等待调用程序空闲的线程。</td></tr>
<tr><td>用户消息</td><td>$400</td><td>WM_USER</td><td>用于帮助应用程序自定义私有消息,通常形式为:WM_USER + X</td></tr>
<tr><td>程序消息</td><td>$8000</td><td>WM_APP</td><td>用于帮助应用程序自定义私有消息,通常形式为:WM_APP + X</td></tr>
</table><font size="6"><a name="传递数据类">传递数据类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>传递数据类</td><td>COPYDATASTRUCT</td><td>12</td><td>包含要通过发送消息传递给另一个应用程序的数据。</td></tr>
<tr><th colspan=4>传递数据类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>分类</td><td>dwData</td><td>整数</td><td>要传递给接收应用程序的数据类型。</td></tr>
<tr><td>大小</td><td>cbData</td><td>整数</td><td>指向的数据的大小（以字节为单位）。</td></tr>
<tr><td>数据</td><td>lpData</td><td>整数</td><td>要传递给接收应用程序的数据。</td></tr>
</table><p><font size="6"><a name="子窗口">子窗口事件</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>通知子窗</td><td>$0022</td><td>WM_CHILDACTIVATE</td><td>点击窗口标题栏或当窗口被激活、移动、大小改变时,会发送本消息给MDI子窗口。③参数:0;④数据:0</td></tr>
<tr><td>子窗变动</td><td>$210</td><td>WM_PARENTNOTIFY</td><td>当MDI子窗口被创建或被销毁,或用户按了一下鼠标键而光标在子窗口上时,发送本消息给其父窗③参数:事件;④数据:坐标x/y;</td></tr>
<tr><td>子窗创建</td><td>$220</td><td>WM_MDICREATE</td><td>发送本消息给多文档应用程序的客户窗口来创建一个MDI子窗口。③参数:0;④数据:<a href="#子窗口外观类">子窗结构</a></td></tr>
<tr><td>子窗关闭</td><td>$221</td><td>WM_MDIDESTROY</td><td>发送本消息给多文档应用程序的客户窗口来关闭一个MDI子窗口。③参数:子窗;④数据:0</td></tr>
<tr><td>子窗激活</td><td>$222</td><td>WM_MDIACTIVATE</td><td>发送本消息通知客户窗口激活另一个MDI子窗口。③参数:0;④数据:0忽略,非0最大化</td></tr>
<tr><td>子窗恢复</td><td>$223</td><td>WM_MDIRESTORE</td><td>发送本消息给MDI客户窗口,让子窗口从最大最小化恢复到原来的大小。③参数:子窗;④数据:0</td></tr>
<tr><td>子窗下个</td><td>$224</td><td>WM_MDINEXT</td><td>发送本消息给MDI客户窗口,激活下一个或前一个窗口。③参数:子窗;④数据:0激活下个,非0激活上个</td></tr>
<tr><td>子窗最大</td><td>$225</td><td>WM_MDIMAXIMIZE</td><td>发送本消息给MDI客户窗口来最大化一个MDI子窗口。③参数:子窗;④数据:0</td></tr>
<tr><td>子窗平铺</td><td>$226</td><td>WM_MDITILE</td><td>发送本消息给MDI客户窗口,以平铺方式重新排列所有MDI子窗口。③参数:0垂直,1水平;④数据:0</td></tr>
<tr><td>子窗层叠</td><td>$227</td><td>WM_MDICASCADE</td><td>发送本消息给MDI客户窗口,以层叠方式重新排列所有MDI子窗口。③参数:2不排禁用窗口,4按Z序;④数据:0</td></tr>
<tr><td>子窗排底</td><td>$228</td><td>WM_MDIICONARRANGE</td><td>发送本消息给MDI客户窗口重新排列所有最小化的MDI子窗口。③参数:0;④数据:0</td></tr>
<tr><td>子窗活动</td><td>$229</td><td>WM_MDIGETACTIVE</td><td>发送本消息给MDI客户窗口以找到激活的子窗口句柄。③参数:0;④数据:0忽略,非0最大化</td></tr>
<tr><td>子窗设置菜单</td><td>$230</td><td>WM_MDISETMENU</td><td>发送本消息给MDI客户窗口,用MDI菜单代替子窗口的整个菜单和/或框架窗口菜单。③参数:框架菜单;④数据:窗口菜单</td></tr>
<tr><td>子窗更新菜单</td><td>$234</td><td>WM_MDIREFRESHMENU</td><td>发送本消息给多文档应用程序的客户窗口,根据当前MDI子窗口更新MDI框架窗口的菜单。③参数:0;④数据:0</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>子窗外观类</td><td>MDICREATESTRUCT</td><td>36</td><td>定义了创建MDI窗口的外观相关特性</td></tr>
<tr><th colspan=4>子窗外观类——成员表</th></tr>
<tr><td>类名</td><td>szClass</td><td>整数</td><td>创建MDI Client 窗口的类名</td></tr>
<tr><td>标题</td><td>szTitle</td><td>整数</td><td>创建MDI Client 窗口的标题</td></tr>
<tr><td>实例</td><td>hOwner</td><td>整数</td><td>创建MDI Client 窗口的实例</td></tr>
<tr><td>左边</td><td>x</td><td>整数</td><td>指定子窗口的左上角x坐标</td></tr>
<tr><td>顶部</td><td>y</td><td>整数</td><td>指定子窗口的左上角y坐标</td></tr>
<tr><td>宽度</td><td>cx</td><td>整数</td><td>指定子窗口的宽度</td></tr>
<tr><td>高度</td><td>cy</td><td>整数</td><td>指定子窗口的高度</td></tr>
<tr><td>风格</td><td>style</td><td>整数</td><td>指定了子窗口的风格。</td></tr>
<tr><td>参数</td><td>lParam</td><td>整数</td><td>指定了子窗口的附加参数</td></tr>
</table><p><font size="6"><a name="剪切板">剪切板操作</a>——控制消息：</font></p>
1.控制编辑框使用复制粘贴<br>
<font color="#0000FF">发送消息(编辑框1,内容剪切,0,0)</font>&emsp;剪切编辑框1选中的内容文本<br>
<font color="#0000FF">发送消息(编辑框1,内容复制,0,0)</font>&emsp;复制编辑框1选中的内容文本<br>
<font color="#0000FF">发送消息(编辑框1,内容粘贴,0,0)</font>&emsp;粘贴文本到编辑框1中<br>
<font color="#0000FF">发送消息(编辑框1,内容删除,0,0)</font>&emsp;删除编辑框1选中的内容文本<br>
<font color="#0000FF">发送消息(编辑框1,内容撤销,0,0)</font>&emsp;撤销编辑框1刚刚的操作<br>
2.使用系统剪切板,需要在模块列表里选择剪切板模块<br>
<font color="#0000FF">剪切板="要写入剪切板的内容"</font>&emsp;向剪切板中写入一段文字<br>
<font color="#0000FF">整数 内容=剪切板</font>&emsp;获取剪切板的文本内容指针地址<br>
<font color="#0000FF">发送消息(窗体,设置文本,0,内容)</font>&emsp;把获取到的内容显示到窗口标题栏<br>
<p><font size="6"><a name="剪切板格式">剪切板格式</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>释义</td></tr>
<tr><td>CF_TEXT</td><td>1</td><td>文本格式。 每行以回车符/换行符 (CR-LF) 组合结束。 null 字符表示数据结束。 将此格式用于 ANSI 文本。</td></tr>
<tr><td>CF_BITMAP</td><td>2</td><td>位图 (HBITMAP) 的句柄。</td></tr>
<tr><td>CF_METAFILEPICT</td><td>3</td><td>METAFILEPICT 结构定义的图元文件图片格式的句柄。 通过 DDE 传递 CF_METAFILEPICT 句柄时，负责删除 hMem 的应用程序还应释放 CF_METAFILEPICT 句柄引用的图元文件。</td></tr>
<tr><td>CF_SYLK</td><td>4</td><td>Microsoft 符号链接 (SYLK) 格式。</td></tr>
<tr><td>CF_DIF</td><td>5</td><td>Software Arts 的数据交换格式。</td></tr>
<tr><td>CF_TIFF</td><td>6</td><td>标记图像文件格式。</td></tr>
<tr><td>CF_OEMTEXT</td><td>7</td><td>包含 OEM 字符集中字符的文本格式。 每行以回车符/换行符 (CR-LF) 组合结束。 null 字符表示数据结束。</td></tr>
<tr><td>CF_DIB</td><td>8</td><td>包含 BITMAPINFO 结构的内存对象，后跟位图位。</td></tr>
<tr><td>CF_PALETTE</td><td>9</td><td>调色板的句柄。 每当应用程序在依赖于或假定调色板的剪贴板中放置数据时，它也应该将调色板放在剪贴板上。<br>如果剪贴板包含 CF_PALETTE (逻辑调色板) 格式的数据，则应用程序应使用 SelectPalette 和 RealizePalette 函数实现 (剪贴板中) 任何其他数据与该逻辑调色板进行比较。<br>显示剪贴板数据时，剪贴板始终使用剪贴板上采用 CF_PALETTE 格式的任何对象作为其当前调色板。</td></tr>
<tr><td>CF_PENDATA</td><td>10</td><td>Microsoft Windows for Pen Computing 的笔扩展的数据。</td></tr>
<tr><td>CF_RIFF</td><td>11</td><td>表示的音频数据比以 CF_WAVE 标准波形格式表示的音频数据更为复杂。</td></tr>
<tr><td>CF_WAVE</td><td>12</td><td>表示其中一种标准波形的音频数据，例如 11 kHz 或 22 kHz PCM。</td></tr>
<tr><td>CF_UNICODETEXT</td><td>13</td><td>Unicode 文本格式。 每行以回车符/换行符 (CR-LF) 组合结束。 null 字符表示数据结束。</td></tr>
<tr><td>CF_ENHMETAFILE</td><td>14</td><td>增强型图元文件的句柄 (HENHMETAFILE) 。</td></tr>
<tr><td>CF_HDROP</td><td>15</td><td>类型 HDROP 的句柄，用于标识文件列表。 应用程序可以通过将句柄传递给 DragQueryFile 函数来检索有关文件的信息。</td></tr>
<tr><td>CF_LOCALE</td><td>16</td><td>数据是 HGLOBAL () 与剪贴板中的文本关联的区域设置标识符 (LCID) 的句柄。 关闭剪贴板时，如果剪贴板包含 CF_TEXT 数据但没有 CF_LOCALE 数据，系统会自动将 CF_LOCALE 格式设置为当前输入语言。 可以使用 CF_LOCALE 格式将不同的区域设置与剪贴板文本相关联。<br>从剪贴板粘贴文本的应用程序可以检索此格式，以确定用于生成文本的字符集。<br>请注意，剪贴板不支持多个字符集中的纯文本。 若要实现此目的，请改用带格式的文本数据类型，例如 RTF。<br>系统使用与 CF_LOCALE 关联的代码页从 CF_TEXT 隐式转换为 CF_UNICODETEXT。 因此，使用正确的代码页表进行转换。</td></tr>
<tr><td>CF_DIBV5</td><td>17</td><td>包含 BITMAPV5HEADER 结构的内存对象，后跟位图颜色空间信息和位图位。</td></tr>
<tr><td>CF_OWNERDISPLAY</td><td>0x0080</td><td>所有者显示格式。 剪贴板所有者必须显示和更新剪贴板查看器窗口，并接收 WM_ASKCBFORMATNAME、 WM_HSCROLLCLIPBOARD、 WM_PAINTCLIPBOARD、 WM_SIZECLIPBOARD和 WM_VSCROLLCLIPBOARD 消息。 hMem 参数必须为 NULL。</td></tr>
<tr><td>CF_DSPTEXT</td><td>0x0081</td><td>与专用格式关联的文本显示格式。 hMem 参数必须是可以以文本格式显示的数据的句柄，而不是专用格式的数据。</td></tr>
<tr><td>CF_DSPBITMAP</td><td>0x0082</td><td>与专用格式关联的位图显示格式。 hMem 参数必须是可以以位图格式显示的数据的句柄，而不是专用格式的数据。</td></tr>
<tr><td>CF_DSPMETAFILEPICT</td><td>0x0083</td><td>与专用格式关联的图元文件图片显示格式。 hMem 参数必须是可以以图元文件图片格式显示的数据的句柄，而不是专用格式的数据。</td></tr>
<tr><td>CF_DSPENHMETAFILE</td><td>0x008E</td><td>与专用格式关联的增强型图元文件显示格式。 hMem 参数必须是可以以增强型图元文件格式显示的数据的句柄，而不是专用格式的数据。</td></tr>
<tr><td>CF_PRIVATEFIRST</td><td>0x0200</td><td>专用剪贴板格式的整数值范围的开头。 范围以 CF_PRIVATELAST结尾。 与专用剪贴板格式关联的句柄不会自动释放;剪贴板所有者必须释放此类句柄，通常是为了响应 WM_DESTROYCLIPBOARD 消息。</td></tr>
<tr><td>CF_PRIVATELAST</td><td>0x02FF</td><td>请参阅 CF_PRIVATEFIRST。</td></tr>
<tr><td>CF_GDIOBJFIRST</td><td>0x0300</td><td>应用程序定义的 GDI 对象剪贴板格式的整数值范围的开头。 范围的末尾为 CF_GDIOBJLAST。<br>清空剪贴板时，不会使用 GlobalFree 函数自动删除与此范围内剪贴板格式关联的句柄。 此外，在此范围内使用值时， hMem 参数不是 GDI 对象的句柄，而是由 GlobalAlloc 函数使用 GMEM_MOVEABLE 标志分配的句柄。</td></tr>
<tr><td>CF_GDIOBJLAST</td><td>0x03FF</td><td>请参阅 CF_GDIOBJFIRST。</td></tr>
</table>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>内容剪切</td><td>0x300</td><td>WM_CUT</td><td>剪切删除当前选择的文本。③参数:0;④数据:0</td></tr>
<tr><td>内容复制</td><td>0x301</td><td>WM_COPY</td><td>复制当前选择的文本到剪贴板。③参数:0;④数据:0</td></tr>
<tr><td>内容粘贴</td><td>0x302</td><td>WM_PASTE</td><td>应用程序发送本消息给编辑框或组合框,以便从剪贴板中得到数据。③参数:0;④数据:0</td></tr>
<tr><td>内容删除</td><td>0x303</td><td>WM_CLEAR</td><td>应用程序发送本消息给编辑框或组合框,以清除当前选择的内容。③参数:0;④数据:0</td></tr>
<tr><td>内容撤销</td><td>0x304</td><td>WM_UNDO</td><td>应用程序发送本消息给编辑框或组合框,以撤消最后一次操作。③参数:0;④数据:0</td></tr>
<tr><td>剪切数据</td><td>$305</td><td>WM_RENDERFORMAT</td><td>应用程序需要系统剪切板数据时,触发发送本消息。③参数:剪切格式;④数据:0</td></tr>
<tr><td>剪切数列</td><td>$306</td><td>WM_RENDERALLFORMATS</td><td>应用程序退出时,系统会给当前程序发送该消息,要求提供所有格式的剪帖板数据,避免造成数据丢失。③参数:0;④数据:0</td></tr>
<tr><td>剪切清空</td><td>$307</td><td>WM_DESTROYCLIPBOARD</td><td>当调用"清剪切板"函数时,发送本消息给剪贴板的所有者</td></tr>
<tr><td>剪切变更</td><td>$308</td><td>WM_DRAWCLIPBOARD</td><td>当剪贴板的内容变化时,触发本消息;它允许用剪贴板观察窗口来显示剪贴板的新内容。③参数:0;④数据:0</td></tr>
<tr><td>剪切重绘</td><td>$309</td><td>WM_PAINTCLIPBOARD</td><td>当剪贴板观察窗口的客户区需要重画时,触发发送本消息。③参数:窗口;④数据: PAINTSTRUCT 结构</td></tr>
<tr><td>剪切竖条</td><td>$30A</td><td>WM_VSCROLLCLIPBOARD</td><td>当剪贴板查看器的垂直滚动条被单击时。③参数:窗口;④数据:0上滚一行,1下滚一行,2上滚一页,3下滚一页,4绝对位置(高字是位置),6到左上角,7到右下角,8结束滚动;</td></tr>
<tr><td>剪切缩放</td><td>$30B</td><td>WM_SIZECLIPBOARD</td><td>当剪贴板包含CF_OWNERDIPLAY格式的数据,并且剪贴板观察窗口的大小已改变。③参数:窗口;④数据:矩形类</td></tr>
<tr><td>剪切取名</td><td>$30C</td><td>WM_ASKCBFORMATNAME</td><td>通过剪贴板观察窗口发送本消息给剪贴板的所有者,以请求一个CF_OWNERDISPLAY格式的剪贴板的名字。③参数:大小;④数据:缓冲区</td></tr>
<tr><td>剪切移出</td><td>$30D</td><td>WM_CHANGECBCHAIN</td><td>当一个窗口从剪贴板观察链中移去时,发送本消息给剪贴板观察链的首个窗口。③参数:窗口;④数据:下个窗口</td></tr>
<tr><td>剪切平条</td><td>$30E</td><td>WM_HSCROLLCLIPBOARD</td><td>点击剪贴板观察窗的水平滚动条。③参数:窗口;④数据:0上滚一行,1下滚一行,2上滚一页,3下滚一页,4绝对位置(高字是位置),6到左上角,7到右下角,8结束滚动;</td></tr>
<tr><td>剪切板改</td><td>$31D</td><td>WM_CLIPBOARDUPDATE</td><td>剪贴板的内容发生更改时发送。③参数:0;④数据:0</td></tr>
</table><font size="6" color="#0000FF">剪切板函数——用户界面库</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>剪切板数</td><td>CountClipboardFormats</td><td>数量=剪切板数</td><td>检索剪贴板上当前不同数据格式的数量。</td></tr>
<tr><td>有效剪切</td><td>EnumClipboardFormats</td><td>有效剪切(格式)</td><td>判断指定格式的剪切板是否可用</td></tr>
<tr><td>清剪切板</td><td>EmptyClipboard</td><td>清剪切板</td><td>清空剪贴板，所有权分配给当前打开剪贴板的窗口</td></tr>
<tr><td>开剪切板</td><td>OpenClipboard</td><td>开剪切板(窗口)</td><td>打开剪贴板进行检查，并阻止其他程序修改剪贴板内容</td></tr>
<tr><td>关剪切板</td><td>CloseClipboard</td><td>关剪切板</td><td>关闭剪贴板,使其他窗口或程序能访问剪贴板。</td></tr>
<tr><td>读剪切板</td><td>GetClipboardData</td><td>数据=读剪切板(格式)</td><td>以指定的格式从剪贴板中获得数据,格式1文字2位图3图元4链接5软件数据</td></tr>
<tr><td>写剪切板</td><td>SetClipboardData</td><td>写剪切板(格式,数据)</td><td>以指定的格式向剪贴板写入数据,格式6.TIFF图像7.OEM字符8.DIB图片</td></tr>
<tr><td>剪切板名</td><td>GetClipboardFormatNameA</td><td>剪切板名(格式,名称,长度)</td><td>从剪贴板中检索指定注册格式的名称。</td></tr>
<tr><td>剪切板号</td><td>GetClipboardSequenceNumberA</td><td>序号=剪切板号</td><td>检索当前窗口站的剪贴板序列号。</td></tr>
<tr><td>取剪切窗</td><td>GetClipboardViewer</td><td>窗口=取剪切窗</td><td>检索剪贴板查看器链中第一个窗口的句柄。</td></tr>
<tr><td>改剪切窗</td><td>SetClipboardViewer</td><td>改剪切窗(窗口)</td><td>将指定的窗口添加到剪贴板查看器链中。</td></tr>
<tr><td>查剪切窗</td><td>GetOpenClipboardWindow</td><td>窗口=查剪切窗</td><td>检索当前已打开剪贴板的窗口的句柄。</td></tr>
<tr><td>剪切格式</td><td>GetPriorityClipboardFormat</td><td>格式=剪切格式(格式,数目</td><td>检索指定列表中第一个可用的剪贴板格式。</td></tr>
<tr><td>可用剪板</td><td>GetUpdatedClipboardFormats</td><td>可用剪板(格式组,数量,数目)</td><td>检索当前支持的剪贴板格式。</td></tr>
<tr><td>粘贴格式</td><td>IsClipboardFormatAvailable</td><td>粘贴格式(格式)</td><td>确定剪贴板是否包含指定格式的数据。格式9调色板10画笔
<br>11音频12波形声音13宽字符14增强图元15文件列表</td></tr>
<tr><td>注册剪板</td><td>RegisterClipboardFormatA</td><td>注册剪板(格式名)</td><td>注册新的剪贴板格式。用作有效的剪贴板格式。</td></tr>
<tr><td>删除剪板</td><td>RemoveClipboardFormatListener</td><td>删除剪板(窗口)</td><td>从系统维护的剪贴板格式侦听器列表中删除给定窗口。</td></tr>
</table>
<p><font size="6"><a name="编辑框">编辑框</a>——控件消息：</font></p>
<font color="#0000FF">发送消息(编辑框1,设置文本,0,"文字内容")</font>&emsp;&emsp;这个代码可以修改编辑框里的内容<br>
<font color="#0000FF">文本 内容[64];整数 长度=发送消息(编辑框1,获取文本,64,内容)</font>&emsp;&emsp;这个代码可以获取编辑框的内容<br>
<font color="#0000FF">发送消息(编辑框1,编辑替换,真,"插入替换的文字")</font>&emsp;替换编辑框1选中的内容,若无选中向光标处插入文本<br>
<font color="#0000FF">发送消息(编辑框1,编辑选中,3,9)</font>&emsp;控制选中编辑框1选中的从第3到第9个字之间的内容<br>
<font color="#0000FF">文本 内容[120]=120;发送消息(编辑框1,编辑取行,2,内容)</font>&emsp;获取编辑框1第三行文字到内容缓冲区,要先写入长度数值<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>编辑获得焦点</td><td>0x100</td><td>EN_SETFOCUS</td><td>在编辑控件收到键盘焦点时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑失去焦点</td><td>0x200</td><td>EN_KILLFOCUS</td><td>在编辑控件失去键盘焦点时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑内容更改</td><td>0x300</td><td>EN_CHANGE</td><td>已更改编辑控件中的文本时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑更新重绘</td><td>0x400</td><td>EN_UPDATE</td><td>在编辑控件即将重绘自身时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑内存不足</td><td>0x500</td><td>EN_ERRSPACE</td><td>当编辑控件无法分配足够的内存时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑字数超出</td><td>0x501</td><td>EN_MAXTEXT</td><td>当前文本插入超过编辑控件的指定字符数时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑水平滚动</td><td>0x601</td><td>EN_HSCROLL</td><td>当用户单击编辑控件的水平滚动条时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑垂直滚动</td><td>0x602</td><td>EN_VSCROLL</td><td>单击垂直滚动条或滚动鼠标滚轮时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑从左向右</td><td>0x700</td><td>EN_ALIGN_LTR_EC</td><td>当用户将编辑控件方向更改为从左到右时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑从右向左</td><td>0x701</td><td>EN_ALIGN_RTL_EC</td><td>当用户将编辑控件方向更改为从右到左时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>绘制编辑</td><td>$0133</td><td>WM_CTLCOLOREDIT</td><td>当一个编辑框控件将要被绘制时,发送本消息给其父窗;可用来设置编辑框的文本和背景色③参数:设备;④数据:控件</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>编辑所选</td><td>$B0</td><td>EM_GETSEL</td><td>获取光标位置（④数据）或取得编辑控件中选定内容的范围（③参数为起点，④数据为终点）。返回值中低16位为起点，高16位为终点</td></tr>
<tr><td>编辑选中</td><td>$B1</td><td>EM_SETSEL</td><td>设置编辑控件中文本选定内容范围（或设置光标位置），③参数为起点，④数据为终点。</td></tr>
<tr><td>编辑矩形</td><td>$B2</td><td>EM_GETRECT</td><td>获取编辑控件的格式矩形（控件在其中绘制文本的限制矩形）。在④数据中获取</td></tr>
<tr><td>编辑范围</td><td>$B3</td><td>EM_SETRECT</td><td>设置多行编辑控件的格式矩形（绘制范围）。它与编辑控件窗口的大小无关。在④数据中指定矩形</td></tr>
<tr><td>编辑大小</td><td>$B4</td><td>EM_SETRECTNP</td><td>设置多行编辑控件的格式矩形。与编辑范围的区别是不重绘编辑控件窗口。</td></tr>
<tr><td>编辑竖翻</td><td>$B5</td><td>EM_SCROLL</td><td>在多行编辑控件中垂直滚动文本。③参数：0上滚一行 1下滚一行 2上滚一页 3下滚一页</td></tr>
<tr><td>编辑滚动</td><td>$B6</td><td>EM_LINESCROLL</td><td>滚动多行编辑控件中的文本。③参数：水平滚动字数（富文本框为0），④数据：垂直滚动的行数。</td></tr>
<tr><td>编辑滚点</td><td>$B7</td><td>EM_SCROLLCARET</td><td>将插入点（光标）滚动到编辑控件的视图中。③参数:0;④数据:0</td></tr>
<tr><td>编辑状态</td><td>$B8</td><td>EM_GETMODIFY</td><td>获取编辑控件的修改标志的状态。③参数:0;④数据:0，返回值非零表示编辑控件的内容已修改</td></tr>
<tr><td>编辑修改</td><td>$B9</td><td>EM_SETMODIFY</td><td>设置或清除编辑控件的修改标志。③参数用真或假指定修改标志的状态。</td></tr>
<tr><td>编辑行数</td><td>$BA</td><td>EM_GETLINECOUNT</td><td>获取多行编辑控件中的行数。③参数:0;④数据:0，返回行数。</td></tr>
<tr><td>编辑行位</td><td>$BB</td><td>EM_LINEINDEX</td><td>获取多行编辑控件中指定行的第一个字符的字符索引。也就是从开头的第几个字，③参数：行号 -1表示光标所在行</td></tr>
<tr><td>编辑指针</td><td>$BC</td><td>EM_SETHANDLE</td><td>设置多行编辑控件将使用的内存的句柄。③参数：指定新的内存缓冲区</td></tr>
<tr><td>编辑手柄</td><td>$BD</td><td>EM_GETHANDLE</td><td>获取当前为多行编辑控件的文本分配的内存的句柄。③参数:0;④数据:0，返回句子手柄</td></tr>
<tr><td>编辑滑块</td><td>$BE</td><td>EM_GETTHUMB</td><td>获取多行编辑控件垂直滚动条中滚动框 (滑块) 的位置。③参数:0;④数据:0，返回滑块位置</td></tr>
<tr><td>编辑行字</td><td>$C1</td><td>EM_LINELENGTH</td><td>检索编辑控件中行的字符数。③参数：第几个字，-1是光标处</td></tr>
<tr><td>编辑替换</td><td>$C2</td><td>EM_REPLACESEL</td><td>将编辑控件中的选定文本或丰富的编辑控件替换为指定的文本。③参数为真可撤销，④数据是文本指针</td></tr>
<tr><td>编辑取行</td><td>$C4</td><td>EM_GETLINE</td><td>从编辑控件复制一行文本，并将其置于指定的缓冲区中。③参数：行号（0开始），④数据：接收内容的文本指针</td></tr>
<tr><td>编辑限字</td><td>$C5</td><td>EM_LIMITTEXT</td><td>设置编辑控件的文本限制最大字数。③参数：限制字数</td></tr>
<tr><td>编辑可撤</td><td>$C6</td><td>EM_CANUNDO</td><td>确定编辑控件的撤消队列中是否有任何操作。③参数:0;④数据:0，返回非0表示可以进行撤销</td></tr>
<tr><td>编辑撤销</td><td>$C7</td><td>EM_UNDO</td><td>此消息撤消控件队列中最后一次编辑控件操作。③参数:0;④数据:0，返回真表示撤销成功</td></tr>
<tr><td>编辑软行</td><td>$C8</td><td>EM_FMTLINES</td><td>设置一个标志，用于确定多行编辑控件是否包含软换行符（两个回车加一换行符，英文断词用）。③参数为真是可以有，为假则清除</td></tr>
<tr><td>编辑字行</td><td>$C9</td><td>EM_LINEFROMCHAR</td><td>获取包含多行编辑控件中指定字符索引的行的索引。③参数：第几个字，-1是光标所在行 </td></tr>
<tr><td>编辑制表</td><td>$CB</td><td>EM_SETTABSTOPS</td><td>设置多行编辑控件中的制表位。③参数：制表位数目，④数据：制表位数组</td></tr>
<tr><td>编辑密码</td><td>$CC</td><td>EM_SETPASSWORDCHAR</td><td>设置或删除编辑控件的密码字符。 ③参数：取代内容文字的字符，为0时恢复文字显示</td></tr>
<tr><td>编辑重置</td><td>$CD</td><td>EM_EMPTYUNDOBUFFER</td><td>重置编辑控件的撤消标志。③参数:0;④数据:0。</td></tr>
<tr><td>编辑上字</td><td>$CE</td><td>EM_GETFIRSTVISIBLELINE</td><td>获取多行编辑控件中最上端可见行的从零开始的索引。③参数:0;④数据:0</td></tr>
<tr><td>编辑只读</td><td>$CF</td><td>EM_SETREADONLY</td><td>设置或删除编辑控件的只读样式。③参数为真是只读，为假是可写;④数据:0。</td></tr>
<tr><td>编辑函数</td><td>$D0</td><td>EM_SETWORDBREAKPROC</td><td>将编辑控件的默认 文字显示处理 函数替换为应用程序自定义的处理函数。③参数:0;④数据：<a href="#编辑框断字">编辑框断字</a></td></tr>
<tr><td>编辑地址</td><td>$D1</td><td>EM_GETWORDBREAKPROC</td><td>获取编辑控件的默认 文字显示处理 函数的地址。③参数:0;④数据:0，返回地址。</td></tr>
<tr><td>编辑密字</td><td>$D2</td><td>EM_GETPASSWORDCHAR</td><td>获取编辑控件在用户输入文本时显示的密码字符。③参数:0;④数据:0，返回字符。</td></tr>
<tr><td>编辑边距</td><td>$D3</td><td>EM_SETMARGINS</td><td>设置编辑控件的左右边距的宽度。 ③参数：1是左边距 2右边距，④数据：低位左边距，高位右边距</td></tr>
<tr><td>编辑边宽</td><td>$D4</td><td>EM_GETMARGINS</td><td>获取编辑控件的左右边距的宽度。③参数:0;④数据:0，返回低位是左边宽，高位是右边宽。</td></tr>
<tr><td>编辑字限</td><td>$D5</td><td>EM_GETLIMITTEXT</td><td>获取编辑控件的当前文本限制。 ③参数:0;④数据:0，返回限制字数</td></tr>
<tr><td>编辑坐标</td><td>$D6</td><td>EM_POSFROMCHAR</td><td>检索编辑控件中指定字符的工作区坐标。③参数：字的索引，返回低位是左，高位是顶</td></tr>
<tr><td>编辑点字</td><td>$D7</td><td>EM_CHARFROMPOS</td><td>获取与编辑控件的工作区中指定点最接近的字符的信息。④数据：富文本框是坐标结构指针，普通框是整数。低位左，高位顶。返回指定位置字的索引，编辑框高位包含该行的字索引</td></tr>
<tr><td>编辑交互</td><td>$D8</td><td>EM_SETIMESTATUS</td><td>设置编辑控件如何与输入法编辑器交互。③参数：1组合字符串；④数据：1返回结果字符串,2焦点取消组合字符串,3失去焦点完成组合字符串</td></tr>
<tr><td>编辑方式</td><td>$D9</td><td>EM_GETIMESTATUS</td><td>获取编辑控件如何与输入法编辑器交互。③参数：1组合字符串；④数据：0;返回值:1立即返回结果字符串,2焦点取消组合字符串,3失去焦点完成组合字符串</td></tr>
<tr><td>左边编距</td><td>$1</td><td>EC_LEFTMARGIN</td><td>③参数的值，设置编辑控件的左边距的宽度。</td></tr>
<tr><td>右边编距</td><td>$2</td><td>EC_RIGHTMARGIN</td><td>③参数的值，设置编辑控件的右边距的宽度。</td></tr>
<tr><td>精细编距</td><td>$0FFFF</td><td>EC_USEFONTINFO</td><td>③参数的值，设置编辑控件的边距的精细宽度。</td></tr>
</table><font size="6"><a name="编辑框断字">编辑框断字</a>——回调函数：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>编辑框断字</td><td>Editwordbreakproca</td><td>4</td><td>多行编辑控件或富编辑控件调用此函数来中断文本行</td></tr>
<tr><th colspan=4>编辑框断字——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>控件</td><td>lpch</td><td>整数</td><td>指向编辑控件文本的指针。</td></tr>
<tr><td>断点</td><td>ichCurrent</td><td>整数</td><td>文本缓冲区中字符位置的索引，该索引标识函数应开始检查断字符的点。</td></tr>
<tr><td>字数</td><td>cch</td><td>整数</td><td>ANSI是字节数;Unicode是字数。</td></tr>
<tr><td>操作</td><td>code</td><td>整数</td><td>回调函数要执行的<a href="#断字操作">断字操作</a>。</td></tr>
</table><font size="6"><a name="断字操作">断字操作</a>——常量定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>WB_LEFT</td><td>0</td><td>查找指定位置左侧的单词的开头。</td></tr>
<tr><td>WB_RIGHT</td><td>1</td><td>查找指定位置右侧的单词的开头。 这在右对齐的编辑控件中很有用。</td></tr>
<tr><td>WB_ISDELIMITER</td><td>2</td><td>检查指定位置处的字符是否为分隔符。</td></tr>
<tr><td>WB_CLASSIFY</td><td>3</td><td>检索位于指定位置的字符的字符类和断字符标志。此值及以下用于丰富的编辑控件。</td></tr>
<tr><td>WB_MOVEWORDLEFT</td><td>4</td><td>查找指定位置左侧的单词的开头。此值在 Ctrl+LEFT 键处理期间使用。</td></tr>
<tr><td>WB_MOVEWORDRIGHT</td><td>5</td><td>查找指定位置右侧的单词的开头。 此值在 Ctrl+RIGHT 键处理期间使用。</td></tr>
<tr><td>WB_LEFTBREAK</td><td>6</td><td>查找指定位置左侧的词尾分隔符。</td></tr>
<tr><td>WB_RIGHTBREAK</td><td>7</td><td>查找指定位置右侧的词尾分隔符。</td></tr>
</table><p><font size="6"><a name="按钮">按钮</a>、单选钮、复选框、分组框——控件消息：</font></p>
<font color="#0000FF">发送消息(按钮1,设置文本,0,"标题名称")</font>&emsp;&emsp;这个代码可以修改按钮、单选钮、复选框、分组框里的内容<br>
<font color="#0000FF">文本 内容[64];整数 长度=发送消息(按钮1,获取文本,64,内容)</font>&emsp;&emsp;这个代码可以获取按钮、单选钮、复选框、分组框里的内容<br>
<font color="#0000FF">整数 图标=载入图标(0,32518)<br>
发送消息(按钮1,换按钮图,1,图标)</font>; 显示的是一个盾牌图标<br>
<font color="#0000FF">删除对象(光标)</font>; 删除加载的光标对象,从而释放读取光标使用的内存<br>
32512默认图标,32513错误图标,32514问号图标,32515警告图标,32516,信息图标<br>
<font color="#0000FF">整数 光标=载入光标(0,32649)</font>; 显示的是一个手形光标<br>
<font color="#0000FF">发送消息(按钮1,换按钮图,2,光标)</font> 修改按钮1鼠标经过时显示的光标<br>
<font color="#0000FF">删除对象(光标)</font>; 删除加载的光标对象,从而释放读取光标使用的内存<br>
32512箭头,32513文本I,32514转圈(忙),32515十字,32516,向上<br>
32631笔形,32642左上右下对角线,32643右上左下对角线,32644水平调整,32645垂直调整<br>
32646移动光标,32648禁止,32649链接,32650后台工作,32651帮助,32671定位,32672人员<br>
<font color="#0000FF">状态=发送消息(单选钮1,获取选择,0,0)</font> 获取单选钮1的选中状态，0未选,1选中,2不可用<br>
<font color="#0000FF">发送消息(复选框1,设置选择,1,0)</font> 设置复选框1为选中的状态，0不选,1选中,2不可用<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>按钮单击</td><td>0</td><td>BN_CLICKED</td><td>用户单击按钮时发送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮绘制</td><td>1</td><td>BN_PAINT</td><td>绘制按钮时发送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮选择</td><td>2</td><td>BN_HILITE/BN_PUSHED</td><td>用户选择按钮/状态设置为已推送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮反选</td><td>3</td><td>BN_UNHILITE/BN_UNPUSHED</td><td>从按钮中删除突出显示时/推送状态设置为未推送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮禁用</td><td>4</td><td>BN_DISABLE</td><td>禁用按钮时发送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮双击</td><td>5</td><td>BN_DOUBLECLICKED</td><td>当用户双击按钮时发送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮焦点</td><td>6</td><td>BN_SETFOCUS</td><td>在按钮接收键盘焦点时发送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>按钮失焦</td><td>7</td><td>BN_KILLFOCUS</td><td>当按钮失去键盘焦点时发送。③参数:控件号/通知码;④数据:按钮</td></tr>
<tr><td>绘制按钮</td><td>$0135</td><td>WM_CTLCOLORBTN</td><td>绘制按钮的背景色③参数:设备;④数据:控件</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>按钮点击下拉</td><td>-1248</td><td>BCN_DROPDOWN</td><td>当用户单击按钮上的下拉箭头时发送。④数据:<a href="#下拉类">下拉类</a></td></tr>
<tr><td>按钮热项变更</td><td>-1249</td><td>BCN_HOTITEMCHANGE</td><td>鼠标正在进入或离开按钮控件的工作区。④数据:<a href="#热项类">热项类</a></td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>获取选择</td><td>$00F0</td><td>BM_GETCHECK</td><td>获取单选按钮或复选框的状态。 ③参数:0;④数据:0</td></tr>
<tr><td>设置选择</td><td>$00F1</td><td>BM_SETCHECK</td><td>设置单选按钮或复选框的状态。 ③参数:0不选,1选中,2变灰不可用;④数据:0</td></tr>
<tr><td>获取选形</td><td>$00F2</td><td>BM_GETSTATE</td><td>确定单选按钮或复选框的状态。 ③参数:0;④数据:0</td></tr>
<tr><td>设置选形</td><td>$00F4</td><td>BM_SETSTATE</td><td>改变按钮的高亮状态。 ③参数:0不突出,非0突出显示;④数据:0</td></tr>
<tr><td>改变按钮</td><td>$00F4</td><td>BM_SETSTYLE</td><td>改变按钮的风格。 ③参数:样式;④数据:0不重绘,非0重绘</td></tr>
<tr><td>模拟点击</td><td>$00F5</td><td>BM_CLICK</td><td>模拟用户点击按钮。 ③参数:0;④数据:0</td></tr>
<tr><td>取按钮图</td><td>$00F6</td><td>BM_GETIMAGE</td><td>获取与按钮相关联的图片句柄。 ③参数:0位图,1图标;④数据:0</td></tr>
<tr><td>换按钮图</td><td>$00F7</td><td>BM_SETIMAGE</td><td>把按钮与某张图片相关联。 ③参数:0位图,1图标;④数据:图片</td></tr>
<tr><td>设置单击</td><td>$00F8</td><td>BM_SETDONTCLICK</td><td>控制单选按钮获得焦点时单击事件的生成。 ③参数:0不点,非0点击;④数据:0</td></tr>
<tr><td>按钮获取大小</td><td>0x1601</td><td>BCM_GETIDEALSIZE</td><td>获取最适合其文本和图像的按钮的大小。③参数:0;④数据:尺寸类</td></tr>
<tr><td>按钮设置图表</td><td>0x1602</td><td>BCM_SETIMAGELIST</td><td>将图像列表分配给按钮控件。③参数:0;④数据:<a href="#按钮图表类">按钮图表类</a></td></tr>
<tr><td>按钮获取图表</td><td>0x1603</td><td>BCM_GETIMAGELIST</td><td>获取分配给按钮的图像列表。③参数:0;④数据:<a href="#按钮图表类">按钮图表类</a></td></tr>
<tr><td>按钮设置边框</td><td>0x1604</td><td>BCM_SETTEXTMARGIN</td><td>设置用于在按钮控件中绘制文本的边距。③参数:0;④数据:矩形类</td></tr>
<tr><td>按钮获取边框</td><td>0x1605</td><td>BCM_GETTEXTMARGIN</td><td>获取用于在按钮控件中绘制文本的边距。③参数:0;④数据:矩形类</td></tr>
<tr><td>按钮设置下拉</td><td>0x1606</td><td>BCM_SETDROPDOWNSTATE</td><td>设置具有下拉样式按钮的下拉状态。③参数:是否下拉;④数据:0</td></tr>
<tr><td>按钮设置拆分</td><td>0x1607</td><td>BCM_SETSPLITINFO</td><td>设置拆分按钮控件的信息。③参数:0;④数据:<a name="按钮拆分类">按钮拆分类</a></td></tr>
<tr><td>按钮获取拆分</td><td>0x1608</td><td>BCM_GETSPLITINFO</td><td>获取拆分按钮控件的信息。③参数:0;④数据:<a name="按钮拆分类">按钮拆分类</a></td></tr>
<tr><td>按钮设置注释</td><td>0x1609</td><td>BCM_SETNOTE</td><td>设置与命令链接按钮关联的笔记的文本。③参数:0;④数据:宽字符</td></tr>
<tr><td>按钮获取注释</td><td>0x160A</td><td>BCM_GETNOTE</td><td>获取与命令链接按钮关联的笔记的文本。③参数:大小;④数据:缓冲区</td></tr>
<tr><td>按钮注释长度</td><td>0x160B</td><td>BCM_GETNOTELENGTH</td><td>获取命令链接按钮中显示注释文本的长度。③参数:0;④数据:0</td></tr>
<tr><td>按钮设置提升</td><td>0x160C</td><td>BCM_SETSHIELD</td><td>为按钮或命令链接设置提升图标所需的状态。③参数:0;④数据:是否提升</td></tr>
</table><font size="6"><a name="热项类">热项类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>热项类</td><td>NMBCHOTITEM</td><td>16</td><td>包含有关鼠标在按钮控件上移动的信息。</td></tr>
<tr><th colspan=4>热项类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hwndFrom</td><td>整数</td><td>发送消息的控件的窗口句柄。</td></tr>
<tr><td>标识</td><td>idFrom</td><td>整数</td><td>发送消息的控件的标识符。</td></tr>
<tr><td>事件</td><td>code</td><td>整数</td><td>控件事件通知代码。</td></tr>
<tr><td>方式</td><td>dwFlags</td><td>整数</td><td>鼠标的操作。0x10进入按钮,0x20离开按钮</td></tr>
</table><font size="6"><a name="下拉类">下拉类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>下拉类</td><td>NMBCDROPDOWN</td><td>28</td><td>包含有关按钮点击下拉通知的信息。</td></tr>
<tr><th colspan=4>下拉类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hwndFrom</td><td>整数</td><td>发送消息的控件的窗口句柄。</td></tr>
<tr><td>标识</td><td>idFrom</td><td>整数</td><td>发送消息的控件的标识符。</td></tr>
<tr><td>事件</td><td>code</td><td>整数</td><td>控件事件通知代码。</td></tr>
<tr><td>按钮</td><td>rcButton</td><td>矩形类</td><td>包含按钮工作区的矩形结构。</td></tr>
</table><font size="6"><a name="按钮图表类">按钮图表类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>按钮图表类</td><td>BUTTON_IMAGELIST</td><td>24</td><td>包含有关与按钮控件一起使用的图像列表的信息。</td></tr>
<tr><th colspan=4>按钮图表类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>himl</td><td>整数</td><td>图像列表的句柄。 提供程序保留映像列表的所有权，最终负责其处置。</td></tr>
<tr><td>边距</td><td>margin</td><td>矩形类</td><td>一个矩形类，指定图标周围的边距。</td></tr>
<tr><td>对齐</td><td>uAlign</td><td>整数</td><td>指定图像要使用的对齐方式。0左对齐,1右对齐,2上对齐,3下对齐,4图像居中</td></tr>
</table><font size="6"><a name="按钮拆分类">按钮拆分类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>按钮拆分类</td><td>BUTTON_SPLITINFO</td><td>20</td><td>包含定义拆分按钮的信息。</td></tr>
<tr><th colspan=4>按钮拆分类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>掩码</td><td>mask</td><td>整数</td><td>包含要设置的数据或正在请求哪些成员。1图像有效,2样式为8,4样式有效,8尺寸有效</td></tr>
<tr><td>图像</td><td>himlGlyph</td><td>整数</td><td>图像列表的句柄。掩码:1</td></tr>
<tr><td>样式</td><td>uSplitStyle</td><td>整数</td><td>拆分按钮样式。1=无拆分,2=拉伸字形,4=左对齐,8=图标图像;</td></tr>
<tr><td>宽度</td><td>size.cx</td><td>整数</td><td>指定图像中字形的宽度。掩码:8</td></tr>
<tr><td>高度</td><td>size.cy</td><td>整数</td><td>指定图像中字形的高度。掩码:8</td></tr>
</table><p><font size="6"><a name="组合框">组合框</a>——控件消息：</font></p>
<font color="#0000FF">发送消息(组合框1,组合添加,0,"内容")</font>;向组合框1添加项目<br>
<font color="#0000FF">发送消息(组合框1,组合删除,0,0)</font>;删除组合框1的0号项目<br>
<font color="#0000FF">数量=发送消息(组合框1,组合总项,0,0)</font>;获取组合框1里项目的总数<br>
<font color="#0000FF">发送消息(组合框1,组合文件,0,"*")</font>;组合框1里显示当前目录下所有文件<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>组合更改选择</td><td>1</td><td>CBN_SELCHANGE</td><td>更改组合框列表框中的当前选择。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合双击事件</td><td>2</td><td>CBN_DBLCLK</td><td>双击组合框列表框中的字符串。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合获得焦点</td><td>3</td><td>CBN_SETFOCUS</td><td>组合框收到键盘焦点。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合失去焦点</td><td>4</td><td>CBN_KILLFOCUS</td><td>组合框失去键盘焦点。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合编辑更改</td><td>5</td><td>CBN_EDITCHANGE</td><td>更改组合框编辑控件部分文本的操作。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合编辑更新</td><td>6</td><td>CBN_EDITUPDATE</td><td>组合框的编辑控件部分即将显示更改后的文本。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合点击下拉</td><td>7</td><td>CBN_DROPDOWN</td><td>组合框的列表框即将可见时。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合列表关闭</td><td>8</td><td>CBN_CLOSEUP</td><td>组合框的列表框已关闭时。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合选择表项</td><td>9</td><td>CBN_SELENDOK</td><td>选择列表项，或选择一个项，然后关闭列表时。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>组合正在选择</td><td>10</td><td>CBN_SELENDCANCEL</td><td>选择项时发送，随后选择另一个控件或关闭对话框。③参数:控件号/通知码;④数据:组合框</td></tr>
<tr><td>外观改变</td><td>$002B</td><td>WM_DRAWITEM </td><td>按钮、组合框、列表框、菜单的外观改变时会发送本消息给这些控件的所有者。④数据:<a href="#绘制项目类">绘制项目类</a></td></tr>
<tr><td>控件创建</td><td>$002C</td><td>WM_MEASUREITEM</td><td>按钮、组合框、列表框、列表控件、菜单项被创建时会发送本消息给这些控件的所有者。③参数:控件号;④数据:<a href="#项目尺寸类">项目尺寸类</a></td></tr>
<tr><td>删除项目</td><td>$002D</td><td>WM_DELETEITEM </td><td>列表框或组合框被销毁或删除清空某些项时,会发送本消息给这些控件的所有者。③参数:控件号;④数据:  <a href="#项目删除类">项目删除类</a></td></tr>
<tr><td>新项位置</td><td>$0039</td><td>WM_COMPAREITEM</td><td>可发送本消息来确定组合框(CBS_SORT)或列表框(LBS_SORT)中新增项的相对位置。③参数:控件号;④数据:<a href="#项目排序类">项目排序类</a></td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>组合添加</td><td>$143</td><td>CB_ADDSTRING</td><td>用于向组合框控件追加一个列表项。③参数:0;④数据:文字</td></tr>
<tr><td>组合删除</td><td>$144</td><td>CB_DELETESTRING</td><td>用于删除组合框中指定的列表项。③参数:序号;④数据:0</td></tr>
<tr><td>组合文件</td><td>$145</td><td>CB_DIR</td><td>用于向组合框控件所包含的列表框控件中添加一个文件名列表清单。③参数:路径选项;④数据:路径</td></tr>
<tr><td>组合总项</td><td>$146</td><td>CB_GETCOUNT</td><td>用于返回组合框控件中列表项的总项数。③参数:0;④数据:0</td></tr>
<tr><td>取组合项</td><td>$147</td><td>CB_GETCURSEL</td><td>用于返回当前被选择项的索引。③参数:0;④数据:0</td></tr>
<tr><td>组合读取</td><td>$148</td><td>CB_GETLBTEXT</td><td>获取组合框控件中指定列表项的字符串。③参数:序号;④数据:缓冲区</td></tr>
<tr><td>组合长度</td><td>$149</td><td>CB_GETLBTEXTLEN</td><td>用于返回组合框控件中指定列表项的字符串的长度。③参数:序号;④数据:0</td></tr>
<tr><td>组合插入</td><td>$14A</td><td>CB_INSERTSTRING</td><td>在组合框控件所包含的列表框子控件中的指定位置插入字符串。③参数:序号,-1末尾;④数据:文字</td></tr>
<tr><td>组合清除</td><td>$14B</td><td>CB_RESETCONTENT</td><td>用于清除组合框控件所有列表项。③参数:0;④数据:0</td></tr>
<tr><td>组合查找</td><td>$14C</td><td>CB_FINDSTRING</td><td>在组合框控件中根据给定的字符串查找匹配字符串(忽略大小写)。③参数:序号,-1开头;④数据:文字</td></tr>
<tr><td>组合选择</td><td>$14D</td><td>CB_SELECTSTRING</td><td>在组合框控件中设定与指定字符串相匹配的列表项为选中项。③参数:序号,-1开头;④数据:文字</td></tr>
<tr><td>选组合项</td><td>$14E</td><td>CB_SETCURSEL</td><td>在组合框控件中设置指定的列表项为当前选择项。③参数:序号;④数据:0</td></tr>
<tr><td>下拉显示</td><td>$14F</td><td>CB_SHOWDROPDOWN</td><td>用于显示或关闭下拉式和下拉列表式组合框的列表框。③参数:0隐藏,非0显示;④数据:0</td></tr>
<tr><td>组合数据</td><td>$150</td><td>CB_GETITEMDATA</td><td>获取组合框控件指定列表项的附加数据。③参数:序号;④数据:0</td></tr>
<tr><td>组合附加</td><td>$151</td><td>CB_SETITEMDATA</td><td>更新组合框指定的列表项的32位附加数据。③参数:序号;④数据:新值</td></tr>
<tr><td>组合位置</td><td>$152</td><td>CB_GETDROPPEDCONTROLRECT</td><td>用于取组合框中列表框的屏幕位置。③参数:0;④数据:矩形类</td></tr>
<tr><td>改下拉高</td><td>$153</td><td>CB_SETITEMHEIGHT</td><td>指定组合框中列表项的显示高度。③参数:0项高度,1选字高度;④数据:框高度</td></tr>
<tr><td>取下拉高</td><td>$154</td><td>CB_GETITEMHEIGHT</td><td>用于返回指定列表项的高度。③参数:0项高度,-1选字高度;④数据:0</td></tr>
<tr><td>扩展组合</td><td>$155</td><td>CB_SETEXTENDEDUI</td><td>指定下拉式或下拉列表式组合框是使用默认界面还是扩展界面。③参数:0默认,非0扩展;④数据:0</td></tr>
<tr><td>组合扩展</td><td>$156</td><td>CB_GETEXTENDEDUI</td><td>用于返回组合框是否存在扩展界面。③参数:0;④数据:0</td></tr>
<tr><td>下拉可见</td><td>$157</td><td>CB_GETDROPPEDSTATE</td><td>用于取组合框中列表框是否可见。③参数:0;④数据:0</td></tr>
<tr><td>查组合项</td><td>$158</td><td>CB_FINDSTRINGEXACT</td><td>在组合框中查找字符串,本消息必须整个字符串相同。③参数:序号;④数据:文字</td></tr>
<tr><td>组合设区</td><td>$159</td><td>CB_SETLOCALE</td><td>设置组合框的当前区域。③参数:区域;④数据:0</td></tr>
<tr><td>组合区域</td><td>$15A</td><td>CB_GETLOCALE</td><td>获取组合框的当前区域设置。③参数:0;④数据:0</td></tr>
<tr><td>组合显项</td><td>$15B</td><td>CB_GETTOPINDEX</td><td>检索组合框列表框部分中第一个可见项的从零开始的索引。③参数:0;④数据:0</td></tr>
<tr><td>组合滚项</td><td>$15C</td><td>CB_SETTOPINDEX</td><td>滚动列表框让特定项在组合框的列表框中可见。③参数:序号;④数据:0</td></tr>
<tr><td>组合平宽</td><td>$15D</td><td>CB_GETHORIZONTALEXTENT</td><td>获取列表框可以水平滚动的宽度（像素）。③参数:0;④数据:0</td></tr>
<tr><td>组合改宽</td><td>$15E</td><td>CB_SETHORIZONTALEXTENT</td><td>修改列表框可以水平滚动的宽度（像素）。③参数:宽度;④数据:0</td></tr>
<tr><td>组合宽限</td><td>$15F</td><td>CB_GETDROPPEDWIDTH</td><td>获取组合框的列表框的最小允许宽度（像素）。③参数:0;④数据:0</td></tr>
<tr><td>组合限宽</td><td>$160</td><td>CB_SETDROPPEDWIDTH</td><td>设置组合框的列表框的最小允许宽度（像素）。③参数:宽度;④数据:0</td></tr>
<tr><td>组合内存</td><td>$161</td><td>CB_INITSTORAGE</td><td>分配组合框用于存储列表框项的内存。③参数:项数;④数据:内存大小</td></tr>
<tr><td>组合最少</td><td>$163</td><td>CB_GETMINVISIBLE</td><td>获取组合框下拉列表中可见项的最小数目。③参数:0;④数据:0</td></tr>
<tr><td>组合信息</td><td>$164</td><td>CB_SETDROPPEDWIDTH</td><td>获取有关指定组合框的信息。③参数:0;④数据:<a href="#组合信息类">组合信息类</a></td></tr>
</table><font size="6"><a name="组合信息类">组合信息类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>组合信息类</td><td>COMBOBOXINFO</td><td>52</td><td>包含组合框状态信息。</td></tr>
<tr><th colspan=4>组合信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>字框</td><td>rcItem</td><td>矩形类</td><td>指定编辑框坐标的矩形结构。</td></tr>
<tr><td>按钮</td><td>rcButton</td><td>矩形类</td><td>包含下拉箭头的按钮的坐标。</td></tr>
<tr><td>状态</td><td>stateButton</td><td>整数</td><td>组合框按钮状态。0=按钮未按下,8=按钮已按下,0x8000=没有按钮</td></tr>
<tr><td>组合</td><td>hwndCombo</td><td>整数</td><td>组合框的句柄。</td></tr>
<tr><td>编辑</td><td>hwndItem</td><td>整数</td><td>编辑框的句柄。</td></tr>
<tr><td>列表</td><td>hwndList</td><td>整数</td><td>下拉列表的句柄。</td></tr>
</table><font size="6"><a name="项目排序类">项目排序类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>项目排序类</td><td>COMPAREITEMSTRUCT</td><td>32</td><td>为排序的两个项提供标识符和应用程序提供的数据。</td></tr>
<tr><th colspan=4>项目排序类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>分类</td><td>CtlType</td><td>整数</td><td>2列表框,3组合框。</td></tr>
<tr><td>标识</td><td>CtlID</td><td>整数</td><td>列表框或组合框的标识符。</td></tr>
<tr><td>按钮</td><td>hwndItem</td><td>整数</td><td>控件的句柄。</td></tr>
<tr><td>序号1</td><td>itemID1</td><td>整数</td><td>要比较的列表框或组合框中第一项的索引。</td></tr>
<tr><td>数据1</td><td>itemData1</td><td>整数</td><td>要比较的第一个项的数据内容。</td></tr>
<tr><td>序号2</td><td>itemID2</td><td>整数</td><td>要比较的列表框或组合框中第二项的索引。</td></tr>
<tr><td>数据2</td><td>itemData2</td><td>整数</td><td>正在比较的第二个项目的数据内容。</td></tr>
<tr><td>区域</td><td>dwLocaleId</td><td>整数</td><td>区域设置标识符。</td></tr>
</table><font size="6"><a name="绘制项目类">绘制项目类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>绘制项目类</td><td>DRAWITEMSTRUCT</td><td>40</td><td>用于确定如何绘制所有者绘制的控件或菜单项的信息。</td></tr>
<tr><th colspan=4>绘制项目类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>分类</td><td>CtlType</td><td>整数</td><td>1菜单项,2列表框,3组合框,4按钮,5静态框,101=Tab控件,102=表格框。</td></tr>
<tr><td>标识</td><td>CtlID</td><td>整数</td><td>组合框、列表框、按钮或静态控件的标识符。</td></tr>
<tr><td>序号</td><td>itemID</td><td>整数</td><td>菜单项的菜单项标识符或列表框或组合框中项的索引。</td></tr>
<tr><td>绘图</td><td>itemAction</td><td>整数</td><td>所需的绘图操作。1绘制全部,2检查新的选择状态,4失去或获得键盘焦点。</td></tr>
<tr><td>状态</td><td>itemState</td><td>整数</td><td>当前绘图操作发生后项的<a href="#视觉状态">视觉状态</a>。</td></tr>
<tr><td>控件</td><td>hwndItem</td><td>整数</td><td>组合框、列表框、按钮和静态控件的控件的句柄。</td></tr>
<tr><td>设备</td><td>hDC</td><td>整数</td><td>设备上下文的句柄;对控件执行绘图操作时，必须使用此设备上下文。</td></tr>
<tr><td>边界</td><td>rcItem</td><td>矩形类</td><td>定义要绘制的控件的边界的矩形。</td></tr>
<tr><td>数据</td><td>itemData</td><td>整数</td><td>列表框或组合框以及菜单项关联的应用程序定义值。</td></tr>
</table><font size="6"><a name="视觉状态">绘图视觉状态</a>——常量值定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ODS_SELECTED</td><td>0x0001</td><td>菜单项的状态处于选中状态。</td></tr>
<tr><td>ODS_GRAYED</td><td>0x0002</td><td>该项将灰显。 此位仅适用于菜单。</td></tr>
<tr><td>ODS_DISABLED</td><td>0x0004</td><td>该项将被绘制为已禁用。</td></tr>
<tr><td>ODS_CHECKED</td><td>0x0008</td><td>要检查菜单项。 此位仅适用于菜单。</td></tr>
<tr><td>ODS_FOCUS</td><td>0x0010</td><td>该项具有键盘焦点。</td></tr>
<tr><td>ODS_DEFAULT</td><td>0x0020</td><td>该项是默认项。</td></tr>
<tr><td>ODS_COMBOBOXEDIT</td><td>0x1000</td><td>绘图发生在组合框编辑选择字段中。</td></tr>
<tr><td>ODS_HOTLIGHT</td><td>0x0040</td><td>正在对项进行热跟踪，鼠标位于该项上时突出显示。</td></tr>
<tr><td>ODS_INACTIVE</td><td>0x0080</td><td>该项处于非活动状态，与菜单关联的窗口处于非活动状态。</td></tr>
<tr><td>ODS_NOACCEL</td><td>0x0100</td><td>控件是在没有键盘快捷键提示的情况下绘制的。</td></tr>
<tr><td>ODS_NOFOCUSRECT</td><td>0x0200</td><td>控件是在没有焦点指示器提示的情况下绘制的。</td></tr>
</table><font size="6"><a name="项目尺寸类">项目尺寸类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>项目尺寸类</td><td>MEASUREITEMSTRUCT</td><td>24</td><td>通知系统所有者绘制的控件或菜单项的尺寸。</td></tr>
<tr><th colspan=4>项目尺寸类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>分类</td><td>CtlType</td><td>整数</td><td>1菜单项,2列表框,3组合框,102=表格框。</td></tr>
<tr><td>标识</td><td>CtlID</td><td>整数</td><td>组合框或列表框的标识符。不适用于菜单。</td></tr>
<tr><td>序号</td><td>itemID</td><td>整数</td><td>菜单项的菜单项标识符或列表框或组合框中项的索引。</td></tr>
<tr><td>宽度</td><td>itemWidth</td><td>整数</td><td>菜单项的宽度（以像素为单位）。</td></tr>
<tr><td>高度</td><td>itemHeight</td><td>整数</td><td>列表框或菜单中单个项的高度（以像素为单位）。</td></tr>
<tr><td>数据</td><td>itemData</td><td>整数</td><td>列表框或组合框以及菜单项关联的应用程序定义值。</td></tr>
</table><p><font size="6">组合框、列表框——读取文件列表类型</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>包含只读</td><td>1</td><td>DDL_READONLY</td><td>包括只读文件</td></tr>
<tr><td>包含隐藏</td><td>2</td><td>DDL_HIDDEN</td><td>包括隐藏文件</td></tr>
<tr><td>包含系统</td><td>4</td><td>DDL_SYSTEM</td><td>包括系统文件</td></tr>
<tr><td>包含目录</td><td>$10</td><td>DDL_DIRECTORY</td><td>包括子目录</td></tr>
<tr><td>包含存档</td><td>$20</td><td>DDL_ARCHIVE</td><td>包括存档文件</td></tr>
<tr><td>只传信息</td><td>$2000</td><td>DDL_POSTMSGS</td><td>只把信息传给应用消息队列,不响应列表</td></tr>
<tr><td>包含盘符</td><td>$4000</td><td>DDL_DRIVES</td><td>包括盘符文件</td></tr>
<tr><td>不含读写</td><td>$8000</td><td>DDL_EXCLUSIVE</td><td>不包括默认已经包含的读写文件</td></tr>
<tr><td>全部路径</td><td>$4037</td><td>DIRATTR</td><td>包括全部路径(读写,只读,隐藏,系统,目录,存档,盘符)</td></tr>
</table><p><font size="6"><a name="静态框">静态框</a>——控件消息</font></p>
<font color="#0000FF">发送消息(标签1,设置文本,0,"标题名称")</font>&emsp;&emsp;这个代码可以修改标签框里的内容<br>
<font color="#0000FF">文本 内容[64];整数 长度=发送消息(标签1,获取文本,64,内容)</font>&emsp;&emsp;这个代码可以获取标签里的内容<br>
<font color="#0000FF">整数 图片=加载图像(0,"sec.bmp",图片类型,0,0,$10)</font>;从文件中加载一个图片，$10标志是从文件加载<br>
<font color="#0000FF">发送消息(图像框1,换静图片,0,图片)</font>; 修改图像框1显示的图片<br>
<font color="#0000FF">删除对象(图片)</font>;删除加载的图片对象,从而释放读取图片使用的内存<br>
在设计界面的时候图像框的文字设置为“#1”就会自动加载资源里的1号资源图标，资源号可以在添加资源时候查看<br>
<font color="#0000FF">整数 图标=载入图标(0,32518)<br>
发送消息(图像框1,换静图片,1,图标)</font> 修改图像框1显示的图标<br>
<font color="#0000FF">删除对象(图标)</font>; 删除加载的图标对象,从而释放读取图像使用的内存<br>
显示的是一个盾牌图标;32512默认图标,32513错误图标,32514问号图标,32515警告图标,32516,信息图标<br>
<font color="#0000FF">整数 光标=载入光标(0,32649)</font>; 显示的是一个手形光标<br>
发送消息(图像框1,换静图片,2,光标)</font> 修改图像框1鼠标经过时显示的光标<br>
<font color="#0000FF">删除对象(光标)</font>; 删除加载的光标对象,从而释放读取光标使用的内存<br>
32512箭头,32513文本I,32514转圈(忙),32515十字,32516,向上<br>
32631笔形,32642左上右下对角线,32643右上左下对角线,32644水平调整,32645垂直调整<br>
32646移动光标,32648禁止,32649链接,32650后台工作,32651帮助,32671定位,32672人员<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>静态单击</td><td>0</td><td>STN_CLICKED</td><td>用户单击具有"点击事件"样式的静态控件。③参数:控件号/通知码;④数据:静态框</td></tr>
<tr><td>静态双击</td><td>1</td><td>STN_DBLCLK</td><td>用户双击具有"点击事件"样式的静态控件。③参数:控件号/通知码;④数据:静态框</td></tr>
<tr><td>静态启用</td><td>2</td><td>STN_ENABLE</td><td>启用静态控件时，发送此通知代码。③参数:控件号/通知码;④数据:静态框</td></tr>
<tr><td>静态禁用</td><td>3</td><td>STN_DISABLE</td><td>禁用静态控件时，发送此通知代码。③参数:控件号/通知码;④数据:静态框</td></tr>
<tr><td>绘制静态</td><td>$0138</td><td>WM_CTLCOLORSTATIC</td><td>绘制一个静态控件的背景色③参数:设备;④数据:控件</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>换静图标</td><td>$170</td><td>STM_SETICON</td><td>更改静态图片框的图标。③参数:图标;④数据:0</td></tr>
<tr><td>取静图标</td><td>$171</td><td>STM_GETICON</td><td>获取静态图片框的图标。③参数:0;④数据:0</td></tr>
<tr><td>换静图片</td><td>$172</td><td>STM_SETIMAGE</td><td>更换静态图片框的位图。③参数:0位图,1图标,2光标,3图元;④数据:图片</td></tr>
<tr><td>取静图片</td><td>$173</td><td>STM_GETIMAGE</td><td>获取静态图片框的位图。③参数:0位图,1图标,2光标,3图元;④数据:0</td></tr>
</table><p><font size="6"><a name="列表框">列表框</a>——控件消息：</font></p>
<font color="#0000FF">发送消息(列表框1,列表添加,0,"内容")</font>;向列表框1添加项目<br>
<font color="#0000FF">发送消息(列表框1,列表删除,0,0)</font>;删除列表框1的0号项目<br>
<font color="#0000FF">数量=发送消息(列表框1,列表数量,0,0)</font>;获取列表框1里项目的总数<br>
<font color="#0000FF">序号=发送消息(列表框1,列表选项,0,0)</font>;获取列表框1里选中项目的序号<br>
<font color="#0000FF">发送消息(列表框1,列表文件,0,"*")</font>;列表框1里显示当前目录下所有文件<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>列表选择项目</td><td>1</td><td>LBN_SELCHANGE</td><td>通知应用程序列表框中的选择已因用户输入而更改。③参数:控件号/通知码;④数据:列表框</td></tr>
<tr><td>列表双击项目</td><td>2</td><td>LBN_DBLCLK</td><td>通知应用程序用户已双击列表框中的项。③参数:控件号/通知码;④数据:列表框</td></tr>
<tr><td>列表取消选择</td><td>3</td><td>LBN_SELCANCEL</td><td>通知应用程序用户已取消列表框中的选择。③参数:控件号/通知码;④数据:列表框</td></tr>
<tr><td>列表获得焦点</td><td>4</td><td>LBN_SETFOCUS</td><td>通知应用程序列表框已收到键盘焦点。③参数:控件号/通知码;④数据:列表框</td></tr>
<tr><td>列表失去焦点</td><td>5</td><td>LBN_KILLFOCUS</td><td>通知应用程序列表框已失去键盘焦点。③参数:控件号/通知码;④数据:列表框</td></tr>
<tr><td>列表内存不足</td><td>-2</td><td>LBN_ERRSPACE</td><td>无法分配足够的内存来满足特定请求。③参数:控件号/通知码;④数据:列表框</td></tr>
<tr><td>列表拖动按下</td><td>0x485</td><td>DL_BEGINDRAG</td><td>通知用户已单击项上的鼠标左键。③参数:控件号;④数据:<a href="#拖动类">拖动类</a></td></tr>
<tr><td>列表拖动按下</td><td>0x486</td><td>DL_DRAGGING</td><td>指示用户在拖动项时移动了鼠标。③参数:控件号;④数据:<a href="#拖动类">拖动类</a></td></tr>
<tr><td>列表拖动完成</td><td>0x487</td><td>DL_DROPPED</td><td>指示用户释放鼠标左键已完成拖动操作。③参数:控件号;④数据:<a href="#拖动类">拖动类</a></td></tr>
<tr><td>列表拖动取消</td><td>0x488</td><td>DL_CANCELDRAG</td><td>用户单击鼠标右键或按ESC键，取消拖动操作。③参数:控件号;④数据:<a href="#拖动类">拖动类</a></td></tr>
<tr><td>删除项目</td><td>$002D</td><td>WM_DELETEITEM </td><td>列表框或组合框被销毁或删除清空某些项时,会发送本消息给这些控件的所有者。③参数:控件号;④数据:  <a href="#项目删除类">项目删除类</a></td></tr>
<tr><td>列表按键</td><td>$002E</td><td>WM_VKEYTOITEM</td><td>响应按键风格的列表框会发出本消息给其所有者,以便响应键盘按下消息。③参数:键码/位置;④数据:列表框</td></tr>
<tr><td>列表字符</td><td>$002F</td><td>WM_CHARTOITEM </td><td>响应按键风格的列表框会发送本消息给其所有者,以便响应键入字符消息。③参数:键码/位置;④数据:列表框</td></tr>
<tr><td>绘制列表</td><td>$0134</td><td>WM_CTLCOLORLISTBOX</td><td>当一个列表框控件将要被绘制前,发送本消息给其父窗;可用来设置列表框的文本和背景色③参数:设备;④数据:控件</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>列表添加</td><td>$180</td><td>LB_ADDSTRING</td><td>向列表框中添加字符串。③参数:序号;④数据:文字</td></tr>
<tr><td>列表插入</td><td>$181</td><td>LB_INSERTSTRING</td><td>向列表框中插入一个条目数据或字符串（不排序）。③参数:序号,-1末尾;④数据:文字</td></tr>
<tr><td>列表删除</td><td>$182</td><td>LB_DELETESTRING</td><td>删除列表框中的一个字符串。③参数:序号;④数据:0</td></tr>
<tr><td>列表选多</td><td>$183</td><td>LB_SELITEMRANGEEX</td><td>在多选状态下的列表框中选择一个或多个连续的条目。③参数:首序号;④数据:末序号</td></tr>
<tr><td>列表清除</td><td>$184</td><td>LB_RESETCONTENT</td><td>清除列表框中所有列表项。③参数:0;④数据:0</td></tr>
<tr><td>列表选择</td><td>$185</td><td>LB_SETSEL</td><td>在多选状态下的列表框中选择一个字符串。③参数:0不选,非0选中;④数据:序号,-1所选</td></tr>
<tr><td>列表选中</td><td>$186</td><td>LB_SETCURSEL</td><td>在列表框中选择一个字符串,并高亮新选中的字符串。③参数:序号,-1不选;④数据:0</td></tr>
<tr><td>列表状态</td><td>$187</td><td>LB_GETSEL</td><td>获得列表框中一个条目的选择状态。③参数:序号;④数据:0</td></tr>
<tr><td>列表选项</td><td>$188</td><td>LB_GETCURSEL</td><td>获得列表框中当前被选条目的索引。仅在单选状态的列表框有效。③参数:0;④数据:0</td></tr>
<tr><td>列表读取</td><td>$189</td><td>LB_GETTEXT</td><td>从列表框中获得一个字符串。③参数:序号;④数据:文字</td></tr>
<tr><td>列表长度</td><td>$18A</td><td>LB_GETTEXTLEN</td><td>获得一个列表框中字符串的长度。③参数:序号;④数据:0</td></tr>
<tr><td>列表数量</td><td>$18B</td><td>LB_GETCOUNT</td><td>获得列表框中条目的数量。③参数:0;④数据:0</td></tr>
<tr><td>选列表项</td><td>$18C</td><td>LB_SELECTSTRING</td><td>仅适用于单选择列表框,设定与指定字符串相匹配的列表项为选中项,会滚动列表框以使选择项可见。③参数:序号,-1开头;④数据:文字</td></tr>
<tr><td>列表文件</td><td>$18D</td><td>LB_DIR</td><td>在列表框中列出文件名。③参数:路径选项;④数据:路径</td></tr>
<tr><td>列表查找</td><td>$18F</td><td>LB_FINDSTRING</td><td>在列表框中查找匹配字符串(忽略大小写)。③参数:序号,-1开头;④数据:文字</td></tr>
<tr><td>列表选数</td><td>$190</td><td>LB_GETSELCOUNT</td><td>本消息用于返回选择项的数目。③参数:0;④数据:0</td></tr>
<tr><td>列表选位</td><td>$191</td><td>LB_GETSELITEMS</td><td>本消息用于获得选中项的数目及位置。③参数:数量;④数据:缓冲区</td></tr>
<tr><td>取列表宽</td><td>$193</td><td>LB_GETHORIZONTALEXTENT</td><td>返回列表框的可滚动的宽度。③参数:0;④数据:0</td></tr>
<tr><td>改列表宽</td><td>$194</td><td>LB_SETHORIZONTALEXTENT</td><td>本消息设置列表框的滚动宽度。③参数:像素;④数据:0</td></tr>
<tr><td>列表列数</td><td>$195</td><td>LB_SETCOLUMNWIDTH</td><td>设置多列列表框中所有列的宽度。③参数:像素;④数据:0</td></tr>
<tr><td>列文件名</td><td>$196</td><td>LB_ADDFILE</td><td>为列表框增加文件名。③参数:0;④数据:文字</td></tr>
<tr><td>列表区域</td><td>$198</td><td>LB_GETITEMRECT</td><td>用于列表框中获得列表项的客户区的矩形。③参数:序号;④数据:矩形类</td></tr>
<tr><td>列表数据</td><td>$199</td><td>LB_GETITEMDATA</td><td>本消息用于返回指定列表项的附加数据。③参数:序号;④数据:0</td></tr>
<tr><td>列表附加</td><td>$19A</td><td>LB_SETITEMDATA</td><td>用于更新列表框中指定列表项的32位附加数据。③参数:序号;④数据:新值</td></tr>
<tr><td>列表非选</td><td>$19B</td><td>LB_SELITEMRANGE</td><td>用来使指定范围内的列表项选中或落选。③参数:0不选,非0选择;④数据:开始-最后项</td></tr>
<tr><td>列表指定</td><td>$19C</td><td>LB_SETANCHORINDEX</td><td>用于列表框中设置鼠标最后选中的表项成指定表项。③参数:序号;④数据:0</td></tr>
<tr><td>列表选取</td><td>$19D</td><td>LB_GETANCHORINDEX</td><td>用于列表框中鼠标最后选中的项的索引。③参数:0;④数据:0</td></tr>
<tr><td>列表键选</td><td>$19E</td><td>LB_SETCARETINDEX</td><td>用于列表框中设置键盘输入焦点到指定表项。③参数:序号;④数据:0完全可见,非0部分可见</td></tr>
<tr><td>列表键取</td><td>$19F</td><td>LB_GETCARETINDEX</td><td>用于列表框中返回具有矩形焦点的项目索引。③参数:0;④数据:0</td></tr>
<tr><td>改列表高</td><td>$1A0</td><td>LB_SETITEMHEIGHT</td><td>用于列表框中指定列表项显示高度。③参数:序号;④数据:像素数</td></tr>
<tr><td>取列表高</td><td>$1A1</td><td>LB_GETITEMHEIGHT</td><td>用于列表框中返回列表框中某一项的高度。③参数:序号;④数据:0</td></tr>
<tr><td>查列表项</td><td>$1A2</td><td>LB_FINDSTRINGEXACT</td><td>用于列表框中查找字符串(忽略大小写),本消息必须整个字符串相同。③参数:序号,-1开头;④数据:文字</td></tr>
<tr><td>改列表数</td><td>$1A7</td><td>LB_SETCOUNT</td><td>用于列表框中设置表项数目。③参数:项数量;④数据:0</td></tr>
<tr><td>列表内存</td><td>$1A8</td><td>LB_INITSTORAGE</td><td>分配用于存储列表框项的内存。③参数:项数量;④数据:内存大小</td></tr>
<tr><td>列表点项</td><td>$1A9</td><td>LB_ITEMFROMPOINT</td><td>获取最接近列表框中指定点的项的从零开始的索引。③参数:0;④数据:坐标x/y</td></tr>
</table><font size="6"><a name="拖动类">拖动类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>拖动类</td><td>DRAGLISTINFO</td><td>16</td><td>包含有关拖动事件的信息。</td></tr>
<tr><th colspan=4>拖动类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>uNotification</td><td>整数</td><td>指定拖动事件的类型的通知代码。拖动按下$485到拖动取消$488</td></tr>
<tr><td>控件</td><td>hWnd</td><td>整数</td><td>拖动列表框的句柄。</td></tr>
<tr><td>左</td><td>ptCursor.x</td><td>整数</td><td>包含鼠标光标的x坐标。</td></tr>
<tr><td>顶</td><td>ptCursor.y</td><td>整数</td><td>包含鼠标光标的y坐标。</td></tr>
</table><font size="6"><a name="项目删除类">项目删除类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>项目删除类</td><td>DELETEITEMSTRUCT</td><td>20</td><td>描述已删除的列表框或组合框项。</td></tr>
<tr><th colspan=4>项目删除类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>分类</td><td>CtlType</td><td>整数</td><td>2列表框,3组合框</td></tr>
<tr><td>标识</td><td>CtlID</td><td>整数</td><td>组合框或列表框的标识符。</td></tr>
<tr><td>序号</td><td>itemID</td><td>整数</td><td>要删除的列表框或组合框中项的索引。</td></tr>
<tr><td>控件</td><td>hwndItem</td><td>整数</td><td>控件的句柄。</td></tr>
<tr><td>数据</td><td>itemData</td><td>整数</td><td>项的应用程序定义数据。</td></tr>
</table><p><font size="6"><a name="滚动条">滚动条</a>——控件消息：</font></p>
<font color="#0000FF">发送消息(滚动条1,滚动位置,50,真)</font>;控制滚动条1的滑动块到指定位置<br>
<font color="#0000FF">位置=发送消息(滚动条1,滚动取值,0,0)</font>;获取滚动条1的滑动块当前所在位置<br>
<font color="#0000FF">发送消息(滚动条1,滚动限定,0,100)</font>;设置滚动条1的最小到最大滚动范围<br>
<font color="#0000FF">发送消息(滚动条1,滚动取限,@最小,@最大)</font>;获取滚动条1的最小到最大滚动范围<br>
<font color="#0000FF">发送消息(滚动条1,滚动箭头,2,0)</font>;设置滚动条1的右边(垂直滚动为下边)箭头禁止使用<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>绘制滚条</td><td>$0137</td><td>WM_CTLCOLORSCROLLBAR</td><td>绘制滚动条的背景色③参数:设备;④数据:控件</td></tr>
<tr><td>水平滚动</td><td>$0114</td><td>WM_HSCROLL</td><td>当窗口的标准水平滚动条产生一个滚动事件时,发送本消息给该窗口。③参数:低位=0点左键,1点右/下键,2点滑块左,3点滑块右,4按住滑块,<br>5拖动滑块,6按home,7按END,8释放按键;高位=按住拖动位置;④数据:控件</td></tr>
<tr><td>垂直滚动</td><td>$0115</td><td>WM_VSCROLL</td><td>当窗口的标准垂直滚动条产生一个滚动事件时,发送本消息给该窗口。③参数:低位=0点上键,1点下键,2点滑块上方,3点滑块下方,4按住滑块,<br>5拖动滑块,6按home,7按END,8释放按键;高位=按住拖动位置;④数据:控件</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>滚动位置</td><td>$E0</td><td>SBM_SETPOS</td><td>设置滚动框的位置 ,并根据需要重绘滚动条来反映新位置;③参数:位置;④数据:是否重绘;</td></tr>
<tr><td>滚动取值</td><td>$E1</td><td>SBM_GETPOS</td><td>检索滚动条控件的滚动框的当前位置;③参数:0;④数据:0;</td></tr>
<tr><td>滚动限定</td><td>$E2</td><td>SBM_SETRANGE</td><td>设置滚动条控件的最小和最大位置值。③参数:最小值;④数据:最大值;</td></tr>
<tr><td>滚动取限</td><td>$E3</td><td>SBM_GETRANGE</td><td>获取滚动条控件的最小和最大位置值。③参数:@最小值;④数据:@最大值;</td></tr>
<tr><td>滚动箭头</td><td>$E4</td><td>SBM_ENABLE_ARROWS</td><td>启用或禁用滚动条控件的一个或两个箭头。③参数:0都启用,1禁左/上,2禁右/下,3都禁用;④数据:0;</td></tr>
<tr><td>滚动范围</td><td>$E6</td><td>SBM_SETRANGEREDRAW</td><td>设置滚动条最小和最大位置并重绘控件。③参数:最小值;④数据:最大值;</td></tr>
<tr><td>滚动设置</td><td>$E9</td><td>SBM_SETSCROLLINFO</td><td>设置滚动条的位置范围等参数。③参数:是否重绘;④数据:<a href="#滚动信息类">滚动信息类</a>;</td></tr>
<tr><td>滚动参数</td><td>$EA</td><td>SBM_GETSCROLLINFO</td><td>获取滚动条控件的位置范围等参数。③参数:0;④数据:<a href="#滚动信息类">滚动信息类</a>;</td></tr>
<tr><td>滚动信息</td><td>$EB</td><td>SBM_GETSCROLLBARINFO</td><td>获取滚动条控件的位置范围等信息。③参数:0;④数据:<a href="#滚动条类">滚动条类</a>;</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="滚动信息类">滚动信息类</a></td><td>SCROLLINFO</td><td>28</td><td>用来储存滚动条信息</td></tr>
<tr><th colspan=4>滚动信息类——成员表</th></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>结构长度字节数，该值在设置和查询参数时都必须填写。</td></tr>
<tr><td>标志</td><td>fMask</td><td>整数</td><td>指定结构中的哪些成员是有效，0x17全部有效，8禁止滚动</td></tr>
<tr><td>最小</td><td>nMin</td><td>整数</td><td>滚动范围最小值;标志:1</td></tr>
<tr><td>最大</td><td>nMax</td><td>整数</td><td>滚动范围最大值;标志:1</td></tr>
<tr><td>页码</td><td>nPage</td><td>整数</td><td>页尺寸，用来确定比例滚动框的大小;标志:2</td></tr>
<tr><td>位置</td><td>nPos</td><td>整数</td><td>滚动框的位置;标志:4</td></tr>
<tr><td>跟踪</td><td>nTrackPos</td><td>整数</td><td>拖动时滚动框的位置，标志:$10</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="滚动条类">滚动条类</a></td><td>SCROLLBARINFO</td><td>40</td><td>定义了包含滚动条信息</td></tr>
<tr><th colspan=4>滚动条类——成员表</th></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>结构长度字节数，该值在设置和查询参数时都必须填写。</td></tr>
<tr><td>左</td><td>rcScrollBar.left</td><td>整数</td><td>滚动条的左边位置</td></tr>
<tr><td>顶</td><td>rcScrollBar.top</td><td>整数</td><td>滚动条的顶部位置</td></tr>
<tr><td>宽</td><td>rcScrollBar.right</td><td>整数</td><td>滚动条的宽度</td></tr>
<tr><td>高</td><td>rcScrollBar.bottom</td><td>整数</td><td>滚动条的高度</td></tr>
<tr><td>宽高</td><td>dxyLineButton</td><td>整数</td><td>滑块的高度或宽度。</td></tr>
<tr><td>左上</td><td>xyThumbTop</td><td>整数</td><td>滑块顶部或左侧的位置。</td></tr>
<tr><td>右下</td><td>xyThumbBottom</td><td>整数</td><td>拇指底部或右侧的位置。</td></tr>
<tr><td>保留</td><td>reserved</td><td>整数</td><td>保留。</td></tr>
<tr><td>元素</td><td>rgstate</td><td>整数</td><td>元素的数组。每个元素都指示滚动条组件的状态。</td></tr>
</table><p><font size="6"><a name="网页框">网页框</a>——对象使用</font></p>
<font color="#0000FF">对象 浏览=浏览器对象</font>;&emsp;申请一个浏览器对象的变量<br>
<font color="#0000FF">程序段 窗体启动</font>;&emsp;在程序段内控制网页框对象<br>
<font color="#0000FF">&emsp;&emsp;浏览=控件对象 网页框1</font>;&emsp;获取网页框的浏览器对象<br>
<font color="#0000FF">&emsp;&emsp;浏览.改静默(1)</font>;&emsp;控制网页框的浏览器对象不显示对话提示<br>
<font color="#0000FF">&emsp;&emsp;浏览.连接("`https://www.baidu.com/",0,0,0,0)</font>;&emsp;控制网页框的浏览器对象访问一个网址<br>
<font color="#0000FF">&emsp;&emsp;浏览.主页</font>;&emsp;控制网页框的浏览器对象显示默认主页<br>
<font color="#0000FF">&emsp;&emsp;浏览.后退</font>;&emsp;控制网页框的浏览器对象返回之前打开的页面<br>
<font color="#0000FF">&emsp;&emsp;浏览.命令(17,0,0,0)</font>;&emsp;控制网页框的页面全部选中<br>
<font color="#0000FF">&emsp;&emsp;浏览.命令(12,0,0,0)</font>;&emsp;控制网页框的页面复制选中内容<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IWebBrowser2</td><td>浏览器对象</td><td>公开用于操作WebBrowser控件的方法。文字均为宽字符</td></tr>
<tr><th colspan=3>浏览器对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetTypeInfoCount</td><td>接口数(@是否)</td><td>检索对象是否提供的类型信息接口数（0不提供 1提供）。</td></tr>
<tr><td>GetTypeInfo</td><td>类信息(类型,区域,对象)</td><td>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</td></tr>
<tr><td>GetIDsOfNames</td><td>映射(IID_NULL,名称,名数,区域,@标号)</td><td>将单个成员和一组可选的参数名称映射到一组相应的数组指针.区域:1033美国;2052中国;2048系统默认;</td></tr>
<tr><td>Invoke</td><td>调用(标号,IID_NULL,区域,标志,参数,结果,0,0)</td><td>提供对对象公开的属性和方法的访问。标志:1方法;2属性读;3属性写;4参照赋值</td></tr>
<tr><td>GoBack</td><td>后退</td><td>使你在当前历史列表中后退一项</td></tr>
<tr><td>GoForward</td><td>前进</td><td>递使你在当前历史列表中前进一项。</td></tr>
<tr><td>GoHome</td><td>主页</td><td>连接用户默认的主页。</td></tr>
<tr><td>GoSearch</td><td>搜索</td><td>连接用户默认的搜索页面。</td></tr>
<tr><td>Navigate</td><td>连接(网址,标志,方式,参数,标头)</td><td>连接到指定的URL网址。标志:1新窗口;2不加历史记录;16自动搜索;32导航栏;方式:_blank;_parent;_self;_top;</td></tr>
<tr><td>Refresh</td><td>刷新</td><td>重新加载当前网页。</td></tr>
<tr><td>Refresh2</td><td>重载(级别)</td><td>重新加载当前网页。0简单刷新;1过期刷新;3请求头</td></tr>
<tr><td>Stop</td><td>停止</td><td>停止当前页面及其内容的载入。</td></tr>
<tr><td>get_Application</td><td>取控件(@控件)</td><td>获取掌管WebBrowser控件的应用程序实现的自动化对象(IDispatch)。</td></tr>
<tr><td>get_Parent</td><td>取父级(@控件)</td><td>获取WebBrowser控件的父自动化对象，通常是一个容器，例如是宿主或IE窗口。</td></tr>
<tr><td>get_Container</td><td>取容器(@控件)</td><td>获取WebBrowser控件容器的自动化对象。通常该值与Parent属性返回的值相同。</td></tr>
<tr><td>get_Document</td><td>取文档(@控件)</td><td>获取活动文档的自动化对象。提供对DHTML Object Model的访问途径。</td></tr>
<tr><td>get_TopLevelContainer</td><td>顶层(@是否)</td><td>获取一个布尔值，表明IE是否是WebBrowser控件顶层容器，是就返回true</td></tr>
<tr><td>get_Type</td><td>取类型(内容)</td><td>获取已被WebBrowser控件加载的对象的类型。例如.doc文件是Microsoft Word Document</td></tr>
<tr><td>get_Left</td><td>取左边(@数值)</td><td>获取WebBrowser控件窗口的内部左边与容器窗口左边的距离。</td></tr>
<tr><td>put_Left</td><td>改左边(数值)</td><td>设置WebBrowser控件窗口的内部左边与容器窗口左边的距离。</td></tr>
<tr><td>get_Top</td><td>取上边(@数值)</td><td>获取WebBrowser控件窗口的内部左边与容器窗口顶边的距离</td></tr>
<tr><td>put_Top</td><td>改上边(数值)</td><td>设置WebBrowser控件窗口的内部左边与容器窗口顶边的距离。</td></tr>
<tr><td>get_Width</td><td>取宽度(@数值)</td><td>获取WebBrowser窗口的宽度，以像素为单位。</td></tr>
<tr><td>put_Width</td><td>改宽度(数值)</td><td>设置WebBrowser窗口的宽度，以像素为单位。</td></tr>
<tr><td>get_Height</td><td>取高度(@数值)</td><td>获取WebBrowser窗口的高度，以像素为单位。</td></tr>
<tr><td>put_Height</td><td>改高度(数值)</td><td>设置WebBrowser窗口的高度，以像素为单位。</td></tr>
<tr><td>get_LocationName</td><td>取标题(内容)</td><td>获取一个字符串，该字符串包含着WebBrowser当前显示资源的路径或标题。</td></tr>
<tr><td>get_LocationURL</td><td>取网址(内容)</td><td>获取WebBrowser当前正在显示的资源的URL。</td></tr>
<tr><td>get_Busy</td><td>载入中(@真假)</td><td>获取一个布尔值，说明WebBrowser当前是否正在加载URL。</td></tr>
<tr><td>Quit</td><td>关闭</td><td>关闭WebBrowser当前页面。</td></tr>
<tr><td>ClientToWindow</td><td>取坐标(@左,@上)</td><td>获取显示页面客户区与容器窗口的左边和顶边距离。</td></tr>
<tr><td>PutProperty</td><td>改属性(名称,参数)</td><td>设置WebBrowser指定名称的属性。参数为VARIANT变量结构数组</td></tr>
<tr><td>GetProperty</td><td>取属性(名称,参数)</td><td>获取WebBrowser指定名称的属性。参数为VARIANT变量结构数组。</td></tr>
<tr><td>get_Name</td><td>取名称(内容)</td><td>获取WebBrowser控件窗口的名称。</td></tr>
<tr><td>get_HWND</td><td>取窗口(@窗口)</td><td>获取WebBrowser控件窗口的句柄。</td></tr>
<tr><td>get_FullName</td><td>取全名(内容)</td><td>获取WebBrowser控件窗口的全名。</td></tr>
<tr><td>get_Path</td><td>取路径(路径)</td><td>检索 Windows Internet Explorer 可执行文件的系统文件夹。</td></tr>
<tr><td>get_Visible</td><td>取可见(@是否)</td><td>获取WebBrowser控件窗口是否可见。</td></tr>
<tr><td>put_Visible</td><td>改可见(是否)</td><td>设置WebBrowser控件窗口是否可见。</td></tr>
<tr><td>get_StatusBar</td><td>取状态栏(@是否)</td><td>获取WebBrowser控件的状态栏是否可见。</td></tr>
<tr><td>put_StatusBar</td><td>改状态栏(是否)</td><td>设置WebBrowser控件的状态栏是否可见。</td></tr>
<tr><td>get_StatusText</td><td>取状态字(内容)</td><td>获取WebBrowser控件的指示状态的文字。</td></tr>
<tr><td>put_StatusText</td><td>改状态字(内容)</td><td>设置WebBrowser控件的指示状态的文字。</td></tr>
<tr><td>get_ToolBar</td><td>取工具栏(@是否)</td><td>获取WebBrowser控件的工具栏是否可见。</td></tr>
<tr><td>put_ToolBar</td><td>改工具栏(是否)</td><td>设置WebBrowser控件的工具栏是否可见。</td></tr>
<tr><td>get_MenuBar</td><td>取菜单栏(@是否)</td><td>获取WebBrowser控件的菜单栏是否可见。</td></tr>
<tr><td>put_MenuBar</td><td>改菜单栏(是否)</td><td>设置WebBrowser控件的菜单栏是否可见。</td></tr>
<tr><td>get_FullScreen</td><td>取全屏(@是否)</td><td>获取WebBrowser控件的窗口是否全屏。</td></tr>
<tr><td>put_FullScreen</td><td>改全屏(是否)</td><td>设置WebBrowser控件的窗口是否全屏。</td></tr>
<tr><td>Navigate2</td><td>转到(网址,标志,方式,参数,标头)</td><td>连接到指定的URL网址(宽字符)。参数为POST提交数据(ANSI),标头为HTTP协议头</td></tr>
<tr><td>QueryStatusWB</td><td>查状态(命令,@状态)</td><td>查询控件对象以获取命令的状态。1可用;2已启用;4开关打开;8保留;16隐藏;32隐藏上下文</td></tr>
<tr><td>ExecWB</td><td>命令(命令,选项,参数,数据)</td><td>执行命令并返回命令执行的状态。选项:0缺省;1提示;2不提示;3显示帮助;参数数据为Variant结构的指针,可选写0</td></tr>
<tr><td>ShowBrowserBar</td><td>显浏览栏(类,显示,大小)</td><td>显示浏览器栏。参数均为Variant结构的指针</td></tr>
<tr><td>get_ReadyState</td><td>就绪状态(@状态)</td><td>获取WebBrowser控件的就绪状态。0初始状态;1正在加载;2加载完成;3交互模式;4接收完成</td></tr>
<tr><td>get_Offline</td><td>取脱机(@是否)</td><td>获取WebBrowser控件对象是否在脱机模式下运行。</td></tr>
<tr><td>put_Offline</td><td>改脱机(是否)</td><td>设置WebBrowser控件对象是否在脱机模式下运行。</td></tr>
<tr><td>get_Silent</td><td>取静默(@是否)</td><td>获取WebBrowser控件的对象是否可以显示对话框。</td></tr>
<tr><td>put_Silent</td><td>改静默(是否)</td><td>设置WebBrowser控件的对象是否可以显示对话框。</td></tr>
<tr><td>get_RegisterAsBrowser</td><td>取顶级(@是否)</td><td>获取WebBrowser控件的窗口是否注册为顶级浏览器窗口。</td></tr>
<tr><td>put_RegisterAsBrowser</td><td>改顶级(是否)</td><td>设置WebBrowser控件的窗口是否注册为顶级浏览器窗口。</td></tr>
<tr><td>get_RegisterAsDropTarget</td><td>取拖曳(@是否)</td><td>获取WebBrowser控件的对象是否注册为导航的放置目标。</td></tr>
<tr><td>put_RegisterAsDropTarget</td><td>改拖曳(是否)</td><td>设置WebBrowser控件的对象是否注册为导航的放置目标。</td></tr>
<tr><td>get_TheaterMode</td><td>取影院(@是否)</td><td>获取WebBrowser控件的对象是否处于影院模式。主窗口将填满整个屏幕</td></tr>
<tr><td>put_TheaterMode</td><td>改影院(是否)</td><td>设置WebBrowser控件的对象是否处于影院模式。主窗口将填满整个屏幕</td></tr>
<tr><td>get_AddressBar</td><td>取地址栏(是否)</td><td>设置WebBrowser控件对象的地址栏是否可见。</td></tr>
<tr><td>put_AddressBar</td><td>改地址栏(是否)</td><td>设置WebBrowser控件对象的地址栏是否可见。</td></tr>
<tr><td>get_Resizable</td><td>取调整(是否)</td><td>设置WebBrowser控件的窗口是否可以调整对象的大小。</td></tr>
<tr><td>put_Resizable</td><td>改调整(是否)</td><td>设置WebBrowser控件的窗口是否可以调整对象的大小。</td></tr>
</table>
<font size="6">浏览对象可执行命令表：</font><br>
使用不同数值,执行相应功能的命令
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>英文</td><td>数值</td><td>功能</td></tr>
<tr><td>OLECMDID_OPEN</td><td>1</td><td>打开地址</td></tr>
<tr><td>OLECMDID_NEW</td><td>2</td><td>新建页面</td></tr>
<tr><td>OLECMDID_SAVE</td><td>3</td><td>保存</td></tr>
<tr><td>OLECMDID_SAVEAS</td><td>4</td><td>另存为</td></tr>
<tr><td>OLECMDID_SAVECOPYAS</td><td>5</td><td>另存复制内容</td></tr>
<tr><td>OLECMDID_PRINT</td><td>6</td><td>打印页面</td></tr>
<tr><td>OLECMDID_PRINTPREVIEW</td><td>7</td><td>打印预览</td></tr>
<tr><td>OLECMDID_PAGESETUP</td><td>8</td><td>页面设置</td></tr>
<tr><td>OLECMDID_SPELL</td><td>9</td><td>拼写</td></tr>
<tr><td>OLECMDID_PROPERTIES</td><td>10</td><td>查看页面属性</td></tr>
<tr><td>OLECMDID_CUT</td><td>11</td><td>剪切</td></tr>
<tr><td>OLECMDID_COPY</td><td>12</td><td>复制</td></tr>
<tr><td>OLECMDID_PASTE</td><td>13</td><td>粘贴</td></tr>
<tr><td>OLECMDID_PASTESPECIAL</td><td>14</td><td>粘贴特殊</td></tr>
<tr><td>OLECMDID_UNDO</td><td>15</td><td>撤消</td></tr>
<tr><td>OLECMDID_REDO</td><td>16</td><td>重做</td></tr>
<tr><td>OLECMDID_SELECTALL</td><td>17</td><td>全选</td></tr>
<tr><td>OLECMDID_CLEARSELECTION</td><td>18</td><td>清除选择</td></tr>
<tr><td>OLECMDID_ZOOM</td><td>19</td><td>缩放</td></tr>
<tr><td>OLECMDID_GETZOOMRANGE</td><td>20</td><td>获取的缩放范围</td></tr>
<tr><td>OLECMDID_UPDATECOMMANDS</td><td>21</td><td>更新命令</td></tr>
<tr><td>OLECMDID_REFRESH</td><td>22</td><td>刷新</td></tr>
<tr><td>OLECMDID_STOP</td><td>23</td><td>停止</td></tr>
<tr><td>OLECMDID_HIDETOOLBARS</td><td>24</td><td>隐藏工具栏</td></tr>
<tr><td>OLECMDID_SETPROGRESSMAX</td><td>25</td><td>设置进度条最大值</td></tr>
<tr><td>OLECMDID_SETPROGRESSPOS</td><td>26</td><td>设置进度条位置</td></tr>
<tr><td>OLECMDID_SETPROGRESSTEXT</td><td>27</td><td>设置进度条文本</td></tr>
<tr><td>OLECMDID_SETTITLE</td><td>28</td><td>设置标题</td></tr>
<tr><td>OLECMDID_SETDOWNLOADSTATE</td><td>29</td><td>设置下载状态</td></tr>
<tr><td>OLECMDID_STOPDOWNLOAD</td><td>30</td><td>停止下载</td></tr>
<tr><td>OLECMDID_ONTOOLBARACTIVATED</td><td>31</td><td>激活工具栏</td></tr>
<tr><td>OLECMDID_FIND</td><td>32</td><td>查找</td></tr>
<tr><td>OLECMDID_DELETE</td><td>33</td><td>删除</td></tr>
<tr><td>OLECMDID_HTTPEQUIV</td><td>34</td><td>http信息头</td></tr>
<tr><td>OLECMDID_HTTPEQUIV_DONE</td><td>35</td><td>http信息头结束</td></tr>
<tr><td>OLECMDID_ENABLE_INTERACTION</td><td>36</td><td>允许相互协作</td></tr>
<tr><td>OLECMDID_ONUNLOAD</td><td>37</td><td>激活卸载</td></tr>
<tr><td>OLECMDID_PROPERTYBAG2</td><td>38</td><td>连续数据对象</td></tr>
<tr><td>OLECMDID_PREREFRESH</td><td>39</td><td>预刷新</td></tr>
<tr><td>OLECMDID_SHOWSCRIPTERROR</td><td>40</td><td>显示脚本错误</td></tr>
<tr><td>OLECMDID_SHOWMESSAGE</td><td>41</td><td>显示消息</td></tr>
<tr><td>OLECMDID_SHOWFIND</td><td>42</td><td>显示查找</td></tr>
<tr><td>OLECMDID_SHOWPAGESETUP</td><td>43</td><td>显示页面设置</td></tr>
<tr><td>OLECMDID_SHOWPRINT</td><td>44</td><td>显示打印</td></tr>
<tr><td>OLECMDID_CLOSE</td><td>45</td><td>关闭窗体</td></tr>
<tr><td>OLECMDID_ALLOWUILESSSAVEAS</td><td>46</td><td>另存为</td></tr>
<tr><td>OLECMDID_DONTDOWNLOADCSS</td><td>47</td><td>不加载CSS</td></tr>
<tr><td>OLECMDID_UPDATEPAGESTATUS</td><td>48</td><td>更新页面状态</td></tr>
<tr><td>OLECMDID_PRINT2</td><td>49</td><td>打印2</td></tr>
<tr><td>OLECMDID_PRINTPREVIEW2</td><td>50</td><td>打印预览2</td></tr>
<tr><td>OLECMDID_SETPRINTTEMPLATE</td><td>51</td><td>设置打印模板</td></tr>
<tr><td>OLECMDID_GETPRINTTEMPLATE</td><td>52</td><td>获取打印模板</td></tr>
<tr><td>OLECMDID_PAGEACTIONBLOCKED</td><td>55</td><td>页面动作锁定</td></tr>
<tr><td>OLECMDID_PAGEACTIONUIQUERY</td><td>56</td><td>页面操作界面查询</td></tr>
<tr><td>OLECMDID_FOCUSVIEWCONTROLS</td><td>57</td><td>焦点视图控件</td></tr>
<tr><td>OLECMDID_FOCUSVIEWCONTROLSQUERY</td><td>58</td><td>焦点视图控件查询</td></tr>
<tr><td>OLECMDID_SHOWPAGEACTIONMENU</td><td>59</td><td>显示页面操作菜单</td></tr>
<tr><td>OLECMDID_ADDTRAVELENTRY</td><td>60</td><td>增加入口</td></tr>
<tr><td>OLECMDID_UPDATETRAVELENTRY</td><td>61</td><td>更新入口</td></tr>
<tr><td>OLECMDID_UPDATEBACKFORWARDSTATE</td><td>62</td><td>更新放进后退状态</td></tr>
<tr><td>OLECMDID_OPTICAL_ZOOM</td><td>63</td><td>视窗缩放</td></tr>
<tr><td>OLECMDID_OPTICAL_GETZOOMRANGE</td><td>64</td><td>视角缩放范围</td></tr>
<tr><td>OLECMDID_WINDOWSTATECHANGED</td><td>65</td><td>窗口状态改变</td></tr>
<tr><td>OLECMDID_ACTIVEXINSTALLSCOPE</td><td>66</td><td>安装ActiveX控件</td></tr>
<tr><td>OLECMDID_UPDATETRAVELENTRY_DATARECOVERY</td><td>67</td><td>更新恢复数据</td></tr>
<tr><td>OLECMDID_SHOWTASKDLG</td><td>68</td><td>显示任务对话</td></tr>
</table><br>
<p><font size="6"><a name="进度条">进度条</a>——控件消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/pb-newstyle.png"><br>
<font color="#0000FF">发送消息(进度条1,进度限定,0,300)</font>;设置进度条1上下限范围是0-300<br>
<font color="#0000FF">发送消息(进度条1,进度位置,50,0)</font>;设置进度条1的当前位置到50<br>
<font color="#0000FF">发送消息(进度条1,进度步长,20,0)</font>;设置进度条1每次步进的值为20<br>
<font color="#0000FF">发送消息(进度条1,进度步进,0,0)</font>;控制进度条1位置增加指定的步长<br>
<font color="#0000FF">位置=发送消息(进度条1,进度取值,0,0)</font>;获取进度条1的当前位置<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>进度范围</td><td>$401</td><td>PBM_SETRANGE</td><td>设置进度条控件范围的上下限,并重绘进度条来反映新范围;③参数:0;④数据:低位最小值,高位最大值;默认0-100</td></tr>
<tr><td>进度位置</td><td>$402</td><td>PBM_SETPOS</td><td>以指定位置来设置进度条的当前位置,并重绘进度条来反映新位置;③参数:位置;④数据:0</td></tr>
<tr><td>进度增量</td><td>$403</td><td>PBM_DELTAPOS</td><td>以指定的增量来增加进度条控件的当前位置;③参数:增量;④数据:0</td></tr>
<tr><td>进度步长</td><td>$404</td><td>PBM_SETSTEP</td><td>为进度条控件指定步长(缺省为10);③参数:步长;④数据:0</td></tr>
<tr><td>进度步进</td><td>$405</td><td>PBM_STEPIT</td><td>用步进值来增加一个进度条控件的当前位置;③参数:0;④数据:0</td></tr>
<tr><td>进度限定</td><td>$406</td><td>PBM_SETRANGE32</td><td>为进度条设置32位的上下限范围;③参数:最小值;④数据:最大值</td></tr>
<tr><td>进度取限</td><td>$407</td><td>PBM_GETRANGE</td><td>获取当前进度条控件的上下限范围;③参数:真=低限,假=高限;④数据:<a href="#双数类">双数类</a>或者0</td></tr>
<tr><td>进度取值</td><td>$408</td><td>PBM_GETPOS</td><td>检取进度条的当前位置;③参数:0;④数据:0;返回当前位置</td></tr>
<tr><td>进度块色</td><td>$409</td><td>PBM_SETBARCOLOR</td><td>设置进度条控件上滑块的颜色(COLORREF值);③参数:0;④数据:颜色;返回之前颜色</td></tr>
<tr><td>进度动画</td><td>$40A</td><td>PBM_SETMARQUEE</td><td>将进度栏设置为选框模式(多彩流动)。③参数:打开/关闭;④数据:动画时间,0=30毫秒;</td></tr>
<tr><td>进度步增</td><td>$40D</td><td>PBM_GETSTEP</td><td>从进度栏中检索步骤增量。③参数:0;④数据:0</td></tr>
<tr><td>进度取背</td><td>$40E</td><td>PBM_GETBKCOLOR</td><td>获取进度栏的背景色。③参数:0;④数据:0</td></tr>
<tr><td>进度取色</td><td>$40F</td><td>PBM_GETBARCOLOR</td><td>获取进度栏的颜色。③参数:0;④数据:0</td></tr>
<tr><td>进度变态</td><td>$410</td><td>PBM_SETSTATE</td><td>设置进度栏的状态。③参数:1正常,2错误,3暂停;④数据:0</td></tr>
<tr><td>进度状态</td><td>$411</td><td>PBM_GETSTATE</td><td>获取进度栏的状态。③参数:0;④数据:0;返回:1正常,2错误,3暂停</td></tr>
<tr><td>进度背色</td><td>$2001</td><td>PBM_SETBKCOLOR</td><td>设置进度条控件的背景色;③参数:0;④数据:新颜色;返回之前颜色</td></tr>
</table><font size="6"><a name="双数类">双数类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>双数类</td><td>PBRANGE</td><td>8</td><td>包含有关进度栏控件的高低限制的信息。</td></tr>
<tr><th colspan=4>双数类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>低</td><td>iLow</td><td>整数</td><td>进度栏控件的低限制。</td></tr>
<tr><td>高</td><td>iHigh</td><td>整数</td><td>进度栏控件的高限制。</td></tr>
</table><p><font size="6"><a name="表格框">表格框</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/lv-tileview.png"><br>
1.可以在模块列表里选中表格模块，使用图标的话还需要选中图像列表<br>
<font color="#0000FF">整数 大图=图像列表(100,32,0)</font> //创建100个32*32的图像列表，最后参数0是bmp格式图片<br>
<font color="#0000FF">整数 小图=图像列表(17,16,1)</font> //创建17个16*16的图像列表，最后参数1是ico格式图标<br>
<font color="#0000FF">整数 序号=0,行数=0;文本 内容[16]</font> //申请三个变量用来循环添加表项<br>
<font color="#0000FF">表格图像(表格1,1,小图)</font> //指定表格1的图像列表为“小图”，参数1是小图模式;表格1为表格视图<br>
<font color="#0000FF">表格扩展(表格1,$23)</font> //指定表格1的扩展样式是：$20选择整行+2子项带图+1显表格线<br>
<font color="#0000FF">循环{内容="测试列"+序号</font> //循环增加序号,把它转换成文本进行拼接<br>
<font color="#0000FF">表头添加(表格1,内容,序号,70)</font> //添加表格头,这里序号是第几列,最后70是列宽度<br>
<font color="#0000FF">序号++}(序号=5)</font> //序号从0增加到5为止,也就是添加5列<br>
<font color="#0000FF">循环(行数<10){序号=0</font> //新的循环指定行数小于0,每次让序号归零<br>
<font color="#0000FF">循环{内容="行"+行数"列"+序号</font> //第二层循环,拼接每行每列内容的文字<br>
<font color="#0000FF">表格添加(表格1,内容,行数,序号,行数)</font> //添加表格项,指定内容和行数,序号是列数,最后行数是指定小图片编号<br>
<font color="#0000FF">序号++}(序号=5)</font> //序号从0增加到5为止,给每一行都添加5列<br>
<font color="#0000FF">行数++}</font> //内层循环完,行数递增,总共循环10次,至此完成10行5列的两层循环<br>
2.上面的表格1是用表格视图,小图标模式,下面的表格2使用大图模式,不需要添加表头和指定列数<br>
<font color="#0000FF">表格图像(表格2,0,大图)</font> //指定表格2的图像列表为“大图”，参数0是大图模式<br>
<font color="#0000FF">序号=0;循环{内容="大图"+序号</font> //先让序号归零,再循环增加序号,把它转换成文本进行拼接<br>
<font color="#0000FF">表格添加(表格2,内容,序号,0,序号)</font> //添加表格项,指定内容,序号是第几个,最后序号是指定大图片编号<br>
<font color="#0000FF">序号++}(序号=85)</font> //序号从0增加到85为止,总共添加85个大图片<br>
3.表格框的键盘鼠标事件<br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,项=.&12,子项=.&16;<br>
判断(事件)为 表项已被改变{项就是行号减1,子项是列数减1}<br>
为 表项插入新项{有个新项目被插入了}<br>
处理窗口(窗口,控件事件,参数,数据)
结束</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键</td></tr>
<tr><td>控件双击左键</td><td>-3</td><td>NM_DBLCLK</td><td>用户在控件上双击了鼠标左键</td></tr>
<tr><td>控件按下回车</td><td>-4</td><td>NM_RETURN</td><td>控件获得键盘焦点并按下回车键</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键</td></tr>
<tr><td>控件双击右键</td><td>-6</td><td>NM_RDBLCLK</td><td>用户在控件上双击了鼠标右键</td></tr>
<tr><td>控件得到焦点</td><td>-7</td><td>NM_SETFOCUS</td><td>控件收到输入焦点</td></tr>
<tr><td>控件失去焦点</td><td>-8</td><td>NM_KILLFOCUS</td><td>用户失去输入焦点</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>控件鼠标掠过</td><td>-13</td><td>NM_HOVER</td><td>用户的鼠标掠过控件</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>表项正在改变</td><td>-100</td><td>LVN_ITEMCHANGING</td><td>有个项目正被改变</td></tr>
<tr><td>表项已被改变</td><td>-101</td><td>LVN_ITEMCHANGED</td><td>有个项目已经被改变</td></tr>
<tr><td>表项插入新项</td><td>-101</td><td>LVN_INSERTITEM</td><td>有个新项目被插入了</td></tr>
<tr><td>表项删除单项</td><td>-103</td><td>LVN_DELETEITEM</td><td>有个项目要被删除</td></tr>
<tr><td>表项删除全项</td><td>-104</td><td>LVN_DELETEALLITEMS</td><td>所有项目要被删除</td></tr>
<tr><td>表项编辑起点</td><td>-105</td><td>LVN_BEGINLABELEDITA</td><td>一个项目的文本标签编辑的起点</td></tr>
<tr><td>表项编辑终点</td><td>-106</td><td>LVN_ENDLABELEDITA</td><td>一个项目的文本标签编辑的终点</td></tr>
<tr><td>表项列被点击</td><td>-108</td><td>LVN_COLUMNCLICK</td><td>一个列被点击了</td></tr>
<tr><td>表项左键拖放</td><td>-109</td><td>LVN_BEGINDRAG</td><td>鼠标左键的拖放操作开始了</td></tr>
<tr><td>表项右键拖放</td><td>-111</td><td>LVN_BEGINRDRAG</td><td>鼠标右键的拖放操作开始了</td></tr>
<tr><td>表项内容改变</td><td>-113</td><td>LVN_ODCACHEHINT</td><td>由虚列表控件在其可视区域的内容被改变时发送</td></tr>
<tr><td>表项用户激活</td><td>-114</td><td>LVN_ITEMACTIVATE</td><td>由虚列表控件在用户激活了某个项目时发送</td></tr>
<tr><td>表项状态改变</td><td>-115</td><td>LVN_ODSTATECHANGED</td><td>由虚列表控件在一个项目的状态或排列已被改变时发送</td></tr>
<tr><td>表项鼠标掠过</td><td>-121</td><td>LVN_HOTTRACK</td><td>由虚列表控件在用户的鼠标掠过某个项目时发送</td></tr>
<tr><td>表项请求显示</td><td>-150</td><td>LVN_GETDISPINFOA</td><td>请求父窗提供显示项目或对某个项目排序所需的信息</td></tr>
<tr><td>表项更新显示</td><td>-151</td><td>LVN_SETDISPINFOA</td><td>需要更新某个项目的信息</td></tr>
<tr><td>表项查找回调</td><td>-152</td><td>LVN_ODFINDITEMA</td><td>由虚列表控件在需要其所有者查找特定的回调项目时发送</td></tr>
<tr><td>表项键盘按下</td><td>-155</td><td>LVN_KEYDOWN</td><td>通知列表视图控件的父窗口已按下某键。</td></tr>
<tr><td>表项选择边框</td><td>-156</td><td>LVN_MARQUEEBEGIN</td><td>某个边框选择已开始</td></tr>
<tr><td>表项附加文本</td><td>-157</td><td>LVN_GETINFOTIPA</td><td>请求附加的文本信息(显示于工具提示控件中)时发送</td></tr>
<tr><td>表项附加提示</td><td>-158</td><td>LVN_GETINFOTIPW</td><td>请求附加的文本信息(显示于工具提示控件中)时发送</td></tr>
<tr><td>表项增量搜索</td><td>-162</td><td>LVN_INCREMENTALSEARCHA</td><td>通知列表视图控件的父窗口，增量搜索已开始。</td></tr>
<tr><td>表项增量检索</td><td>-163</td><td>LVN_INCREMENTALSEARCHW</td><td>通知列表视图控件的父窗口，增量搜索已开始。</td></tr>
<tr><td>表项开始滚动</td><td>-180</td><td>LVN_BEGINSCROLL</td><td>滚动操作启动时，通知列表视图控件的父窗口。</td></tr>
<tr><td>表项结束滚动</td><td>-181</td><td>LVN_ENDSCROLL</td><td>滚动操作结束时，通知列表视图控件的父窗口。</td></tr>
<tr><td>表项点击链接</td><td>-184</td><td>LVN_LINKCLICK</td><td>通知列表视图控件的父窗口已单击链接。</td></tr>
<tr><td>表项标记文本</td><td>-187</td><td>LVN_GETEMPTYMARKUP</td><td>当控件没有项时，为列表视图控件提供标记文本。NMLVEMPTYMARKUP 结构</td></tr>
<tr><th colspan=4>表格模块——函数表</th></tr>
<tr><td>中文名字</td><td>英文名称</td><td>用法</td><td>释义</td></tr>
<tr><td>表背景色</td><td>ListView_BkColor</td><td>表背景色(控件,颜色)</td><td>获取或设置表格的背景颜色</td></tr>
<tr><td>表格图像</td><td>ListViewImage</td><td>表格图像(控件,格式,图列)</td><td>获取或设置表格控件的图像列表，格式：0大图，1小图标，2状态</td></tr>
<tr><td>表格项数</td><td>ListView_ItemCount</td><td>表格项数(控件,数量)</td><td>获取或设置表格的所有项数,包括子项</td></tr>
<tr><td>表格读取</td><td>ListView_GetItem</td><td>表格读取(控件,项,子项,内容,长度)</td><td>读取表格指定项和子项内的文字内容;点击表项时,数据偏移12为项(行),16为子项(列);</td></tr>
<tr><td>表格添加</td><td>ListView_AddItem</td><td>表格添加(控件,内容,行,列,图)</td><td>向表格添加或修改子项内容,指定行列和图像</td></tr>
<tr><td>表格删除</td><td>ListView_DeleteItem</td><td>表格删除(控件,项)</td><td>删除表格控件的指定项</td></tr>
<tr><td>表格清除</td><td>ListView_DeleteAllItems</td><td>表格清除(控件)</td><td>清除表格控件的所有项</td></tr>
<tr><td>表格回调</td><td>ListView_Callback</td><td>掩码=表格回调(控件)</td><td>获取或设置表格控件的回调掩码</td></tr>
<tr><td>表格查找</td><td>ListView_FindItem</td><td>表格查找(控件,内容,起始)</td><td>返回查到的项序号,从头查找起始值要写负1</td></tr>
<tr><td>表头添加</td><td>ListView_InsertItem</td><td>表头添加(控件,列名,序号,宽度)</td><td>向表格控件添加表头;宽度-1是自动调整列宽,-2是适应标题内容</td></tr>
<tr><td>表头删除</td><td>ListView_DeleteColumn</td><td>表头删除(控件,序号)</td><td>删除表格已添加的表头</td></tr>
<tr><td>表头宽度</td><td>ListView_ColumnWidth</td><td>表头宽度(控件,序号,宽度)</td><td>获取或设置指定表头的宽度</td></tr>
<tr><td>表格字色</td><td>ListView_TextColor</td><td>表格字色(控件,颜色)</td><td>获取或设置表格的文字颜色</td></tr>
<tr><td>表字背色</td><td>ListView_TextBkColor</td><td>表字背色(控件,颜色)</td><td>获取或设置表格的文字背景颜色</td></tr>
<tr><td>表格顶项</td><td>ListView_GetTopIndex</td><td>表格顶项(控件)</td><td>获取列表或报表视图中最顶部可见项的索引。</td></tr>
<tr><td>表格行数</td><td>ListView_GetCountPerPage</td><td>表格行数(控件)</td><td>计算可以垂直容纳在列表视图控件的可见区域中的项数。</td></tr>
<tr><td>表格原点</td><td>ListView_GetOrigin</td><td>表格原点(控件,原点)</td><td>获取列表视图控件的当前坐标视图原点。</td></tr>
<tr><td>表格更新</td><td>ListView_Update</td><td>表格更新(控件,项)</td><td>汇报更新列表视图项。 </td></tr>
<tr><td>表格状态</td><td>ListView_SetItemState</td><td>表格状态(控件,项,掩码,状态)</td><td>获取或更改列表视图控件中项的状态。 </td></tr>
<tr><td>表格选中</td><td>ListView_GetCheckState</td><td>表格选中(控件,项)</td><td>确定是否选择了列表视图控件中的项。</td></tr>
<tr><td>表格文字</td><td>ListView_ItemText</td><td>表格文字(控件,项,子项,内容)</td><td>读取或设置表格视图控件指定项和子顶的文字内容;点击表项时,数据偏移12为项(行),16为子项(列);</td></tr>
<tr><td>表格排序</td><td>ListView_SortItems</td><td>表格排序(控件,函数,参数)</td><td>使用应用程序定义的比较函数对列表视图控件的项进行排序。可指定参数传递给比较函数的第三个参数</td></tr>
<tr><td>表项移动</td><td>ListView_SetItemPosition32</td><td>表项移动(控件,项,左,项)</td><td>将项移动到列表视图控件中的指定位置， (图标视图或小图标视图) 。</td></tr>
<tr><td>表格选数</td><td>ListView_GetSelectedCount</td><td>表格选数(控件)</td><td>获取表格列表视图控件中所选项的数目。 </td></tr>
<tr><td>表格间距</td><td>ListView_GetItemSpacing</td><td>表格间距(控件,小图)</td><td>获取列表视图控件中项之间的间距。 小图标模式为真,大图模式为假</td></tr>
<tr><td>表格搜索</td><td>ListView_GetISearchString</td><td>表格搜索(控件,内容)</td><td>在列表视图中键入字符,将字符追加到搜索内容缓冲区</td></tr>
<tr><td>表格图距</td><td>ListView_SetIconSpacing</td><td>表格图距(控件,宽,高)</td><td>将列表视图控件中图标之间的间距设置为图标视图样式。</td></tr>
<tr><td>表格扩展</td><td>ListViewExtStyle</td><td>样式=表格扩展(控件)</td><td>获取或设置表格扩展样式：1显表格线,2子项带图,4显复选框,8热点选择,$10拖放列头,$20选择整行,$40单击激活,$80双击激活,$100平面滚条</td></tr>
<tr><td>表格提示</td><td>ListView_ToolTips</td><td>表格提示(控件,项,子项,内容)</td><td>设置获取表格提示内容,文字为宽字符编码</td></tr>
</table><p><font size="6"><a name="标头框">标头框</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/header.png"><br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,项=.&12,方向=.&16;<br>
判断(事件)为 标头已被改变{项就是从零开始的索引}<br>
为 标头单击项目{方向:0向左,1向右,2中间}<br>
处理窗口(窗口,控件事件,参数,数据)
结束</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>标头正在改变</td><td>-300</td><td>HDN_ITEMCHANGINGA</td><td>有个项目正被改变</td></tr>
<tr><td>标头已被改变</td><td>-301</td><td>HDN_ITEMCHANGEDA</td><td>有个项目已经被改变</td></tr>
<tr><td>标头单击项目</td><td>-302</td><td>HDN_ITEMCLICKA</td><td>用户单击项目</td></tr>
<tr><td>标头双击项目</td><td>-303</td><td>HDN_ITEMDBLCLICKA</td><td>用户双击项目</td></tr>
<tr><td>标头双击分割</td><td>-305</td><td>HDN_DIVIDERDBLCLICKA</td><td>用户双击控件的分隔线区域。</td></tr>
<tr><td>标头拖起分割</td><td>-306</td><td>HDN_BEGINTRACKA</td><td>用户已开始拖动控件中的分隔符</td></tr>
<tr><td>标头拖完分割</td><td>-307</td><td>HDN_ENDTRACKA</td><td>用户已完成拖动分隔符。</td></tr>
<tr><td>标头拖动分割</td><td>-308</td><td>HDN_TRACKA</td><td>用户正在拖动标题控件中的分隔符</td></tr>
<tr><td>标头显示回调</td><td>-309</td><td>HDN_GETDISPINFOA</td><td>有关回调标头项的信息</td></tr>
<tr><td>标头开始拖动</td><td>-310</td><td>HDN_BEGINDRAG</td><td>对其某个项开始拖动操作</td></tr>
<tr><td>标头结束拖动</td><td>-311</td><td>HDN_ENDDRAG</td><td>拖动操作对其某个项结束</td></tr>
<tr><td>标头筛选更改</td><td>-312</td><td>HDN_FILTERCHANGE</td><td>通知标头控件的父窗口正在更改或编辑标头控件筛选器的属性。</td></tr>
<tr><td>标头筛选点击</td><td>-313</td><td>HDN_FILTERBTNCLICK</td><td>单击筛选器按钮或响应 HDM_SETITEM 消息</td></tr>
<tr><td>标头编辑筛选</td><td>-314</td><td>HDN_BEGINFILTEREDIT</td><td>通知标头控件的父窗口，筛选器编辑已开始。</td></tr>
<tr><td>标头改完筛选</td><td>-315</td><td>HDN_ENDFILTEREDIT</td><td>通知标头控件的父窗口筛选器编辑已结束。</td></tr>
<tr><td>标头单击图标</td><td>-316</td><td>HDN_ITEMSTATEICONCLICK</td><td>通知标头控件的父窗口用户单击了项的状态图标。</td></tr>
<tr><td>标头选中项目</td><td>-317</td><td>HDN_ITEMKEYDOWN</td><td>通知标头控件的父窗口，已按下某个键并选中某个项。</td></tr>
<tr><td>标头单击箭头</td><td>-318</td><td>HDN_DROPDOWN</td><td>单击标题控件上的下拉箭头时，由标头控件发送到其父控件。</td></tr>
<tr><td>标头单击溢出</td><td>-319</td><td>HDN_OVERFLOWCLICK</td><td>单击标头的溢出按钮时，由标头控件发送到其父级。</td></tr>
<tr><td>标头正在变更</td><td>-320</td><td>HDN_ITEMCHANGINGW</td><td>有个项目正被改变</td></tr>
<tr><td>标头已被变更</td><td>-321</td><td>HDN_ITEMCHANGEDW</td><td>有个项目已经被改变</td></tr>
<tr><td>标头项目单击</td><td>-322</td><td>HDN_ITEMCLICKW</td><td>用户单击项目</td></tr>
<tr><td>标头项目双击</td><td>-323</td><td>HDN_ITEMDBLCLICKW</td><td>用户双击项目</td></tr>
<tr><td>标头分割双击</td><td>-325</td><td>HDN_DIVIDERDBLCLICKW</td><td>用户双击控件的分隔线区域。</td></tr>
<tr><td>标头分割拖起</td><td>-326</td><td>HDN_BEGINTRACKW</td><td>用户已开始拖动控件中的分隔符</td></tr>
<tr><td>标头分割拖完</td><td>-327</td><td>HDN_ENDTRACKW</td><td>用户已完成拖动分隔符。</td></tr>
<tr><td>标头分割拖动</td><td>-328</td><td>HDN_TRACKW</td><td>用户正在拖动标题控件中的分隔符</td></tr>
<tr><td>标头回调显示</td><td>-329</td><td>HDN_GETDISPINFOW</td><td>有关回调标头项的信息</td></tr>
</table><p><font size="6">标头框——发送消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>标头获取项数</td><td>HDM_GETITEMCOUNT</td><td>0x1200</td><td>获取标头控件中项的计数。③参数:0;④数据:0</td></tr>
<tr><td>标头插入新项</td><td>HDM_INSERTITEMA</td><td>0x1201</td><td>将新项插入标题控件。③参数:序号;④数据:HDITEM 结构</td></tr>
<tr><td>标头插入项目</td><td>HDM_INSERTITEMW</td><td>0x120A</td><td>将新项插入标题控件。③参数:序号;④数据:HDITEM 结构</td></tr>
<tr><td>标头删除项目</td><td>HDM_DELETEITEM</td><td>0x1202</td><td>从标题控件中删除项。③参数:序号;④数据:0</td></tr>
<tr><td>标头项目信息</td><td>HDM_GETITEMA</td><td>0x1203</td><td>获取有关标头控件中的项的信息。③参数:序号;④数据:HDITEM 结构</td></tr>
<tr><td>标头取项信息</td><td>HDM_GETITEMW</td><td>0x120B</td><td>获取有关标头控件中的项的信息。③参数:序号;④数据:HDITEM 结构</td></tr>
<tr><td>标头修改项目</td><td>HDM_SETITEMA</td><td>0x1204</td><td>设置有关标头控件中的项的信息。③参数:序号;④数据:HDITEM 结构</td></tr>
<tr><td>标头改项信息</td><td>HDM_SETITEMW</td><td>0x120C</td><td>设置有关标头控件中的项的信息。③参数:序号;④数据:HDITEM 结构</td></tr>
<tr><td>标头布局信息</td><td>HDM_LAYOUT</td><td>0x1205</td><td>检索用于设置父窗口目标矩形内标题控件的大小和位置的信息。③参数:0;④数据: HDLAYOUT 结构</td></tr>
<tr><td>标头点项测试</td><td>HDM_HITTEST</td><td>0x1206</td><td>测试点以确定哪个标头项位于指定点。③参数:0;④数据: HDHITTESTINFO 结构</td></tr>
<tr><td>标头项目边框</td><td>HDM_GETITEMRECT</td><td>0x1207</td><td>获取标题控件中给定项的边框。③参数:序号;④数据: 矩形类</td></tr>
<tr><td>标头分配图表</td><td>HDM_SETIMAGELIST</td><td>0x1208</td><td>将图像列表分配给现有标头控件。 ③参数:0普通，1状态图;④数据: 图像列表</td></tr>
<tr><td>标头获取图表</td><td>HDM_GETIMAGELIST</td><td>0x1209</td><td>获取为现有标头控件设置的图像列表的句柄。 ③参数:0普通，1状态图;④数据:0</td></tr>
<tr><td>标头获取序号</td><td>HDM_ORDERTOINDEX</td><td>0x120F</td><td>根据项在标头控件中（从0递增）的顺序检索项的索引值。 ③参数:顺序;④数据:0</td></tr>
<tr><td>标头创建拖图</td><td>HDM_CREATEDRAGIMAGE</td><td>0x1210</td><td>创建项图像的半透明版本，用作拖动图像。 ③参数:序号;④数据:0</td></tr>
<tr><td>标头获取顺序</td><td>HDM_GETORDERARRAY</td><td>0x1211</td><td>获取标题控件中项的当前从左到右的顺序。 ③参数:项数;④数据:数组</td></tr>
<tr><td>标头设置顺序</td><td>HDM_SETORDERARRAY</td><td>0x1212</td><td>设置标题控件中项的当前从左到右的顺序。 ③参数:项数;④数据:数组</td></tr>
<tr><td>标头拖放热点</td><td>HDM_SETHOTDIVIDER</td><td>0x1213</td><td>更改标题项之间的分隔线的颜色，以指示外部拖放操作的目标。 ③参数:真=坐标，假=索引;④数据:坐标、分隔线索引</td></tr>
<tr><td>标头设置图宽</td><td>HDM_SETBITMAPMARGIN</td><td>0x1214</td><td>设置现有标头控件中位图的边距的宽度（以像素为单位）。 ③参数:宽度;④数据:0</td></tr>
<tr><td>标头获取图宽</td><td>HDM_GETBITMAPMARGIN</td><td>0x1215</td><td>获取标题控件的位图边距的宽度。 ③参数:0;④数据:0</td></tr>
<tr><td>标头筛选间隔</td><td>HDM_SETFILTERCHANGETIMEOUT</td><td>0x1216</td><td>设置筛选器属性发生更改与发布 标头筛选更改 通知之间的超时间隔。 ③参数:0;④数据:毫秒</td></tr>
<tr><td>标头编辑焦点</td><td>HDM_EDITFILTER</td><td>0x1217</td><td>当筛选器按钮具有焦点时，将输入焦点移动到编辑框。 ③参数:编辑的列;④数据:真=放弃，假=接受</td></tr>
<tr><td>标头清筛选器</td><td>HDM_CLEARFILTER</td><td>0x1218</td><td>清除给定标头控件的筛选器。 ③参数:筛选器列;④数据:0</td></tr>
<tr><td>标头分按钮框</td><td>HDM_GETITEMDROPDOWNRECT</td><td>0x1219</td><td>获取具有样式HDF_SPLITBUTTON的标题项的拆分按钮 的边框。 ③参数:序号;④数据:矩形类</td></tr>
<tr><td>标头溢按钮框</td><td>HDM_GETOVERFLOWRECT</td><td>0x121A</td><td>获取在标头控件上设置 自绘事件 样式且溢出按钮可见时溢出按钮的边框。 ③参数:0;④数据:矩形类</td></tr>
<tr><td>标头获取选项</td><td>HDM_GETFOCUSEDITEM</td><td>0x121B</td><td>获取具有焦点的标头控件中的项。 ③参数:0;④数据:0</td></tr>
<tr><td>标头设置选项</td><td>HDM_SETFOCUSEDITEM</td><td>0x121C</td><td>获取在标头控件上设置 自绘事件 样式且溢出按钮可见时溢出按钮的边框。 ③参数:0;④数据:0</td></tr>
<tr><td>控件设置宽字</td><td>0x2005</td><td>CCM_SETUNICODEFORMAT</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>0x2006</td><td>CCM_GETUNICODEFORMAT</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
</table><p><font size="6">标头框——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>按钮样式</td><td>HDS_BUTTONS</td><td>2</td><td>控件中的每个项看起来和行为都类似于一个按钮。 当用户单击标头控件中的项时，应用程序执行任务时，此样式非常有用。 例如，应用程序可以根据用户单击的项以不同的方式对列中的信息进行排序。</td></tr>
<tr><td>拖放调整</td><td>HDS_DRAGDROP</td><td0x40</td><td>允许对标题项进行拖放重新排序。</td></tr>
<tr><td>筛选器栏</td><td>HDS_FILTERBAR</td><td>0x100</td><td>将筛选器栏作为标准标头控件的一部分。 此栏允许用户方便地将筛选器应用于显示。 调用 HDM_LAYOUT 将生成控件的新大小，并导致列表视图更新。</td></tr>
<tr><td>平面样式</td><td>HDS_FLAT</td><td>0x200</td><td>版本 6.0 及更高版本。 当操作系统在经典模式下运行时，使标头控件绘制平整。</td></tr>
<tr><td>拖动显列</td><td>HDS_FULLDRAG</td><td>0x80</td><td>使标题控件显示列内容，即使用户调整列的大小。</td></tr>
<tr><td>高度为零</td><td>HDS_HIDDEN</td><td>8</td><td>指示要隐藏的标头控件。 此样式不会隐藏控件。 相反，当你将HDM_LAYOUT消息发送到具有HDS_HIDDEN样式的标头控件时，该控件在 WINDOWPOS 结构的 cy 成员中返回零。 然后，通过将控件的高度设置为零来隐藏控件。 如果要将控件用作信息容器而不是可视控件，这非常有用。</td></tr>
<tr><td>水平显示</td><td>HDS_HORZ</td><td>0</td><td>创建具有水平方向的标题控件。</td></tr>
<tr><td>允许热点</td><td>HDS_HOTTRACK</td><td>4</td><td>启用热跟踪。</td></tr>
<tr><td>放复选框</td><td>HDS_CHECKBOXES</td><td>0x400</td><td>版本 6.00 及更高版本。 允许在标题项上放置复选框。 有关详细信息，请参阅 HDITEM 的 fmt 成员。</td></tr>
<tr><td>禁拖分割</td><td>HDS_NOSIZING</td><td>0x800</td><td>版本 6.00 及更高版本。 用户无法拖动标题控件上的分隔符。</td></tr>
<tr><td>自绘事件</td><td>HDS_OVERFLOW</td><td>0x1000</td><td>版本 6.00 及更高版本。 当并非所有项都可以显示在标题控件的矩形中时，将显示按钮。 单击后，此按钮将发送 HDN_OVERFLOWCLICK 通知。</td></tr>
</table><p><font size="6"><a name="树表框">树表框</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tv-haslines.png"><br>
1.可以在模块列表里选中树表模块，使用图标的话还需要选中图像列表<br>
<font color="#0000FF">整数 小图=图像列表(17,16,1)</font> //创建17个16*16的图像列表，最后参数1是ico格式图标<br>
<font color="#0000FF">整数 序号=0,项目;文本 内容[16]</font> //申请三个变量用来循环添加表项<br>
<font color="#0000FF">树表图像(树表1,0,小图)</font> //指定树表1的图像列表为“小图”，参数0是普通图像;树表只能用小图标<br>
<font color="#0000FF">项目=树表添加(树表1,"好友",0,16,0)</font> //添加一个根节点,名称后面写0;然后是图标指定16,最后关联可以存储一个数值<br>
<font color="#0000FF">循环{内容="测试"+序号</font> //循环增加序号,把它转换成文本进行拼接<br>
<font color="#0000FF">树表添加(树表1,内容,项目,序号,序号)</font> //内容后面是项目,在刚才的根节点中插入子节点,图标是递增的序号,最后序号是关联值<br>
<font color="#0000FF">序号++}(序号=15)</font> //序号从0增加到15为止,也就是添加15个子节点<br>
2.添加的关联值可以在点击子项目的时候得到这个数值,树表的项是对象的内存地址,通过它可以获取项目内容等信息<br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,项=.&60,关联=.&92;<br>
判断(事件)为 树项选择正改{树控件项目的选择将改变}<br>
为 树项选择已改{内容=树表文字(窗口,项)}//获取当前选中项的文字,关联是该项定义的数值,如QQ号<br>
处理窗口(窗口,控件事件,参数,数据)
结束</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键</td></tr>
<tr><td>控件双击左键</td><td>-3</td><td>NM_DBLCLK</td><td>用户在控件上双击了鼠标左键</td></tr>
<tr><td>控件按下回车</td><td>-4</td><td>NM_RETURN</td><td>控件获得键盘焦点并按下回车键</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键</td></tr>
<tr><td>控件双击右键</td><td>-6</td><td>NM_RDBLCLK</td><td>用户在控件上双击了鼠标右键</td></tr>
<tr><td>控件得到焦点</td><td>-7</td><td>NM_SETFOCUS</td><td>控件收到输入焦点</td></tr>
<tr><td>控件失去焦点</td><td>-8</td><td>NM_KILLFOCUS</td><td>用户失去输入焦点</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>控件设置光标</td><td>-17</td><td>NM_SETCURSOR</td><td>控件响应消息要设置光标</td></tr>
<tr><td>树表图像更改</td><td>-24</td><td>NM_TVSTATEIMAGECHANGING</td><td>由树视图控件发送到其状态图像正在更改的父窗口。④数据:NMTVSTATEIMAGECHANGING 结构</td></tr>
<tr><td>树项选择正改</td><td>-401</td><td>TVN_SELCHANGINGA</td><td>用户对树控件项目的选择将改变</td></tr>
<tr><td>树项选择已改</td><td>-402</td><td>TVN_SELCHANGEDA</td><td>用户已改变树控件项目的选择</td></tr>
<tr><td>树项单击项目</td><td>-403</td><td>TVN_GETDISPINFOA</td><td>需要得到树控件的某结点信息</td></tr>
<tr><td>树项双击项目</td><td>-404</td><td>TVN_SETDISPINFOA</td><td>通知更新树控件项目的信息</td></tr>
<tr><td>树项即将开合</td><td>-405</td><td>TVN_ITEMEXPANDINGA</td><td>树控件某结点将被展开或收缩</td></tr>
<tr><td>树项已经开合</td><td>-406</td><td>TVN_ITEMEXPANDEDA</td><td>树控件某结点已被展开或收缩</td></tr>
<tr><td>树项左键拖起</td><td>-407</td><td>TVN_BEGINDRAGA</td><td>树控件中鼠标左键拖放开始</td></tr>
<tr><td>树项右键拖起</td><td>-408</td><td>TVN_BEGINRDRAGA</td><td>树控件中鼠标右键拖放开始</td></tr>
<tr><td>树项删除项目</td><td>-409</td><td>TVN_DELETEITEMA</td><td>删除树控件中的项目</td></tr>
<tr><td>树项修改标签</td><td>-410</td><td>TVN_BEGINLABELEDITA</td><td>开始编辑项目的标签</td></tr>
<tr><td>树项改完标签</td><td>-411</td><td>TVN_ENDLABELEDITA</td><td>用户完成编辑项目的标签</td></tr>
<tr><td>树项键盘按下</td><td>-412</td><td>TVN_KEYDOWN</td><td>用户在树控件中按下了某键盘按键</td></tr>
<tr><td>树项显示文字</td><td>-413</td><td>TVN_GETINFOTIPA</td><td>请求显示结点信息或提示文字</td></tr>
<tr><td>树项请求显示</td><td>-414</td><td>TVN_GETINFOTIPW</td><td>请求显示结点信息或提示文字</td></tr>
<tr><td>树项单击开合</td><td>-415</td><td>TVN_SINGLEEXPAND</td><td>用户使用鼠标单击打开或关闭树控件项目</td></tr>
<tr><td>树项属性正改</td><td>-416</td><td>TVN_ITEMCHANGINGA</td><td>通知树视图控件的父窗口项属性即将更改。</td></tr>
<tr><td>树项属性将改</td><td>-417</td><td>TVN_ITEMCHANGINGW</td><td>通知树视图控件的父窗口项属性即将更改。</td></tr>
<tr><td>树项属性已改</td><td>-418</td><td>TVN_ITEMCHANGEDA</td><td>通知树视图控件的父窗口项属性已更改。</td></tr>
<tr><td>树项属性改变</td><td>-419</td><td>TVN_ITEMCHANGEDW</td><td>通知树视图控件的父窗口项属性已更改。</td></tr>
<tr><td>树项选择将改</td><td>-450</td><td>TVN_SELCHANGINGW</td><td>用户对树控件项目的选择将改变</td></tr>
<tr><td>树项选择改变</td><td>-451</td><td>TVN_SELCHANGEDW</td><td>用户已改变树控件项目的选择</td></tr>
<tr><td>树项项目单击</td><td>-452</td><td>TVN_GETDISPINFOW</td><td>需要得到树控件的某结点信息</td></tr>
<tr><td>树项项目双击</td><td>-453</td><td>TVN_SETDISPINFOW</td><td>通知更新树控件项目的信息</td></tr>
<tr><td>树项准备开合</td><td>-454</td><td>TVN_ITEMEXPANDINGW</td><td>树控件某结点将被展开或收缩</td></tr>
<tr><td>树项完成开合</td><td>-455</td><td>TVN_ITEMEXPANDEDW</td><td>树控件某结点已被展开或收缩</td></tr>
<tr><td>树项拖起左键</td><td>-456</td><td>TVN_BEGINDRAGW</td><td>树控件中鼠标左键拖放开始</td></tr>
<tr><td>树项拖起右键</td><td>-457</td><td>TVN_BEGINRDRAGW</td><td>树控件中鼠标右键拖放开始</td></tr>
<tr><td>树项条目删除</td><td>-458</td><td>TVN_DELETEITEMW</td><td>删除树控件中的项目</td></tr>
<tr><td>树项标签修改</td><td>-459</td><td>TVN_BEGINLABELEDITW</td><td>开始编辑项目的标签</td></tr>
<tr><td>树项标签改完</td><td>-460</td><td>TVN_ENDLABELEDITW</td><td>用户完成编辑项目的标签</td></tr>
<tr><th colspan=4>树表模块——函数表</th></tr>
<tr><td>中文名字</td><td>英文名称</td><td>用法</td><td>释义</td></tr>
<tr><td>树表添加</td><td>TreeView_InsertItem</td><td>树表添加(控件,内容,项目,图标,关联)</td><td>给树表添加项,根节点数值写0</td></tr>
<tr><td>树表删除</td><td>TreeView_DeleteItem</td><td>树表删除(控件,项目)</td><td>从树视图控件中删除项及其所有子项。</td></tr>
<tr><td>树表清除</td><td>TreeView_DeleteAllItems</td><td>树表清除(控件,项目)</td><td>从树视图控件中删除所有项。</td></tr>
<tr><td>树表展开</td><td>TreeView_Expand</td><td>树表展开(控件,项目,方式)</td><td>方式:1折叠;2展开;3开合切换;0x4000部分展开;0x8000折叠并删除子项;</td></tr>
<tr><td>树表数量</td><td>TreeView_GetCount</td><td>树表数量(控件)</td><td>检索树视图控件中的项计数。</td></tr>
<tr><td>树表缩进</td><td>TreeView_Indent</td><td>像素=树表缩进(控件)</td><td>获取或设置子项相对于其父项缩进的数量（以像素为单位）。</td></tr>
<tr><td>树表图像</td><td>TreeView_ImageList</td><td>树表图像(控件,方式,图像列表)</td><td>获取或设置树表视图控件的图像列表,方式:0普通图像;2状态图像</td></tr>
<tr><td>树表关系</td><td>TreeView_GetNextItem</td><td>树表关系(控件,关系,项目)</td><td>获取与指定项承载关系的树视图项。关系:0根节点;1下一项;2前一项;3父项;4项的首个子项;5可见首项;<br>6下个可见项;7项的可见首项;8拖放目标项;9选中项;10最后可见项</td></tr>
<tr><td>树表选中</td><td>TreeView_Select</td><td>树表选中(控件,关系,项目)</td><td>选中与指定项承载关系的树视图项。关系同树表关系</td></tr>
<tr><td>树表文字</td><td>TreeView_GetItem</td><td>内容=树表文字(控件,项目)</td><td>获取或设置树表文字内容;获取时返回关联值,内容可选;树项改变时,数据偏移60为项目,92为关联,20为旧项目,52为旧关联;</td></tr>
<tr><td>树表拖图</td><td>TreeView_CreateDragImage</td><td>树表拖图(控件,项目)</td><td>为树视图控件中的指定项创建拖动位图的图像列表。</td></tr>
<tr><td>树表升序</td><td>TreeView_SortChildren</td><td>树表升序(控件,递归,项目)</td><td>对树表子项文字进行升序排列;递归为真对所有子项排序,为假只为直属子项排序</td></tr>
<tr><td>树表可见</td><td>TreeView_EnsureVisible</td><td>树表可见(控件,项目)</td><td>确保树视图项可见，如有必要，请展开父项或滚动树视图控件。</td></tr>
<tr><td>树表排序</td><td>TreeView_SortChildrenCB</td><td>树表排序(控件,项目,回调,参数)</td><td>用程序定义的回调函数进行排序</td></tr>
<tr><td>树表停改</td><td>TreeView_EndEditLabelNow</td><td>树表停改(控件,取消)</td><td>结束对树视图项标签的编辑。取消为真不保存,为假保存修改</td></tr>
<tr><td>树表搜索</td><td>TreeView_GetISearchString</td><td>树表搜索(控件,内容)</td><td>在树表视图中键入字符,将字符追加到搜索内容缓冲区</td></tr>
<tr><td>树表提示</td><td>TreeView_SetToolTips</td><td>提示=树表提示(控件)</td><td>获取或设置树视图控件的子工具提示控件。</td></tr>
<tr><td>树表标记</td><td>TreeView_SetInsertMark</td><td>树表标记(控件,项目,前后)</td><td>设置树视图控件中的插入标记。前后非零插入项目之后,为零在项目之前</td></tr>
<tr><td>树表高度</td><td>TreeView_SetItemHeight</td><td>高度=树表高度(控件)</td><td>获取或设置树视图项的高度。以像素为单位</td></tr>
<tr><td>树表背色</td><td>TreeView_SetBkColor</td><td>颜色=树表背色(控件)</td><td>获取或设置树视图项的背景颜色。</td></tr>
<tr><td>树表字色</td><td>TreeView_SetTextColor</td><td>颜色=树表字色(控件)</td><td>获取或设置树视图项的文字颜色。</td></tr>
<tr><td>树表记色</td><td>TreeView_SetInsertMarkColor</td><td>颜色=树表记色(控件)</td><td>获取或设置树视图插入标记的颜色。</td></tr>
</table><p><font size="6"><a name="工具提示">工具提示</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tt-balloon.png"><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>提示显示信息</td><td>-520</td><td>TTN_GETDISPINFOA</td><td>检索显示工具提示窗口所需的信息</td></tr>
<tr><td>提示即将显示</td><td>-521</td><td>TTN_SHOW</td><td>即将显示工具提示控件</td></tr>
<tr><td>提示即将隐藏</td><td>-522</td><td>TTN_POP</td><td>工具提示即将隐藏。</td></tr>
<tr><td>提示点击链接</td><td>-523</td><td>TTN_LINKCLICK</td><td>单击批注框工具提示中的文本链接时发送。</td></tr>
<tr><td>提示取得信息</td><td>-530</td><td>TTN_GETDISPINFOW</td><td>检索显示工具提示窗口所需的信息</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>提示激活控件</td><td>0x401</td><td>TTM_ACTIVATE</td><td>激活或停用工具提示控件。③参数:真=激活,假=停用;④数据:0</td></tr>
<tr><td>提示设置延时</td><td>0x403</td><td>TTM_SETDELAYTIME</td><td>设置初始等待时间3、弹出持续时间2和重新显示持续时间1。③参数:0默认,1间隔,2保持,3初始;④数据:毫秒</td></tr>
<tr><td>提示添加信息</td><td>0x404</td><td>TTM_ADDTOOLA</td><td>向工具提示控件注册工具。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示删除信息</td><td>0x405</td><td>TTM_DELTOOLA</td><td>从工具提示控件中删除工具。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示设置边界</td><td>0x406</td><td>TTM_NEWTOOLRECTA</td><td>设置工具的新边界矩形。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示鼠标事件</td><td>0x407</td><td>TTM_RELAYEVENT</td><td>将鼠标消息传递给工具提示控件进行处理。③参数:0;④数据:<a href="#消息类">消息类</a></td></tr>
<tr><td>提示获取信息</td><td>0x408</td><td>TTM_GETTOOLINFOA</td><td>检索为工具维护的相关信息。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示设置信息</td><td>0x409</td><td>TTM_SETTOOLINFOA</td><td>设置为工具维护的相关信息。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示点框信息</td><td>0x40A</td><td>TTM_HITTESTA</td><td>测试点在指定矩形内的信息。③参数:0;④数据:<a href="#提示点框类">提示点框类</a></td></tr>
<tr><td>提示获取文本</td><td>0x40B</td><td>TTM_GETTEXTA</td><td>检索为工具维护的相关信息。③参数:字数;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示设置文本</td><td>0x40C</td><td>TTM_UPDATETIPTEXTA</td><td>设置工具提示文本。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示获取计数</td><td>0x40D</td><td>TTM_GETTOOLCOUNT</td><td>检索维护的工具计数。③参数:0;④数据:0</td></tr>
<tr><td>提示当前显示</td><td>0x40E</td><td>TTM_ENUMTOOLSA</td><td>获取当前显示文本的工具。③参数:序号;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示当前信息</td><td>0x40F</td><td>TTM_GETCURRENTTOOLA</td><td>检索当前工具的信息。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示点外窗口</td><td>0x410</td><td>TTM_WINDOWFROMPOINT</td><td>允许光标下方窗口以外的提示。③参数:0;④数据:<a href="#坐标类">坐标类</a></td></tr>
<tr><td>提示激活跟踪</td><td>0x411</td><td>TTM_TRACKACTIVATE</td><td>激活或停用跟踪工具提示。③参数:真=激活,假=停用;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示跟踪位置</td><td>0x412</td><td>TTM_TRACKPOSITION</td><td>设置跟踪工具提示的位置。③参数:0;④数据:x/y</td></tr>
<tr><td>提示改背景色</td><td>0x413</td><td>TTM_SETTIPBKCOLOR</td><td>设置提示窗口的背景色。③参数:颜色;④数据:0</td></tr>
<tr><td>提示改文字色</td><td>0x414</td><td>TTM_SETTIPTEXTCOLOR</td><td>设置提示窗口的文本颜色。③参数:颜色;④数据:0</td></tr>
<tr><td>提示获取延时</td><td>0x415</td><td>TTM_GETDELAYTIME</td><td>设置初始等待时间3、弹出持续时间2和重新显示持续时间1。③参数:0默认,1间隔,2保持,3初始;④数据:0</td></tr>
<tr><td>提示取背景色</td><td>0x416</td><td>TTM_GETTIPBKCOLOR</td><td>检索窗口的背景颜色。③参数:0;④数据:0</td></tr>
<tr><td>提示取文字色</td><td>0x417</td><td>TTM_GETTIPTEXTCOLOR</td><td>检索窗口的文本颜色。③参数:0;④数据:0</td></tr>
<tr><td>提示设置宽度</td><td>0x418</td><td>TTM_SETMAXTIPWIDTH</td><td>设置窗口的最大宽度。③参数:0;④数据:宽度,-1不限</td></tr>
<tr><td>提示获取宽度</td><td>0x419</td><td>TTM_GETMAXTIPWIDTH</td><td>获取窗口的最大宽度。③参数:0;④数据:0</td></tr>
<tr><td>提示设置边距</td><td>0x41A</td><td>TTM_SETMARGIN</td><td>设置窗口与文本的边框距离。③参数:0;④数据:矩形类</td></tr>
<tr><td>提示获取边距</td><td>0x41B</td><td>TTM_GETMARGIN</td><td>设置窗口与文本的边框距离。③参数:0;④数据:矩形类</td></tr>
<tr><td>提示移除显示</td><td>0x41C</td><td>TTM_POP</td><td>从视图中移除显示的工具提示窗口。③参数:0;④数据:0</td></tr>
<tr><td>提示更新显示</td><td>0x41D</td><td>TTM_UPDATE</td><td>强制重绘当前工具提示。③参数:0;④数据:0</td></tr>
<tr><td>提示控件大小</td><td>0x41E</td><td>TTM_GETBUBBLESIZE</td><td>返回控件的宽度和高度。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示计算矩形</td><td>0x41F</td><td>TTM_ADJUSTRECT</td><td>从窗口或文本矩形中计算其文本显示矩形。③参数:真=文本,假=窗口;④数据:矩形类</td></tr>
<tr><td>提示标题图标</td><td>0x420</td><td>TTM_SETTITLEA</td><td>向工具提示添加标准图标和标题字符串。③参数:图标;④数据:标题;0无图标,1信息,2警告,3错误,4大信息,5大警告,6大错误</td></tr>
<tr><td>提示图标标题</td><td>0x421</td><td>TTM_SETTITLEW</td><td>向工具提示添加标准图标和标题字符串。③参数:图标;④数据:标题;0无图标,1信息,2警告,3错误,4大信息,5大警告,6大错误</td></tr>
<tr><td>提示鼠标显示</td><td>0x422</td><td>TTM_POPUP</td><td>显示在最后一条鼠标消息的坐标处。③参数:0;④数据:0</td></tr>
<tr><td>提示获取标题</td><td>0x423</td><td>TTM_GETTITLE</td><td>检索有关工具提示控件标题的信息。③参数:0;④数据:<a href="#提示标题类">提示标题类</a></td></tr>
<tr><td>提示添加数据</td><td>0x432</td><td>TTM_ADDTOOLW</td><td>向工具提示控件注册工具。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示删除数据</td><td>0x433</td><td>TTM_DELTOOLW</td><td>从工具提示控件中删除工具。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示设置边框</td><td>0x434</td><td>TTM_NEWTOOLRECTW</td><td>设置工具的新边界矩形。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示获得信息</td><td>0x435</td><td>TTM_GETTOOLINFOW</td><td>检索为工具维护的相关信息。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示修改信息</td><td>0x436</td><td>TTM_SETTOOLINFOW</td><td>设置为工具维护的相关信息。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示点内信息</td><td>0x437</td><td>TTM_HITTESTW</td><td>测试点在指定矩形内的信息。③参数:0;④数据:<a href="#提示点框类">提示点框类</a></td></tr>
<tr><td>提示获取文字</td><td>0x438</td><td>TTM_GETTEXTW</td><td>检索为工具维护的相关信息。③参数:字数;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示设置文字</td><td>0x439</td><td>TTM_UPDATETIPTEXTW</td><td>设置工具提示文本。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示当前内容</td><td>0x43A</td><td>TTM_ENUMTOOLSW</td><td>获取当前显示文本的工具。③参数:序号;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
<tr><td>提示现在信息</td><td>0x43B</td><td>TTM_GETCURRENTTOOLW</td><td>检索当前工具的信息。③参数:0;④数据:<a href="#提示信息类">提示信息类</a></td></tr>
</table><font size="6"><a name="提示信息类">提示信息类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>提示信息类</td><td>TTTOOLINFOA</td><td>48</td><td>包含有关工具提示控件中的工具的信息。</td></tr>
<tr><th colspan=4>提示信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>uFlags</td><td>整数</td><td>控制工具提示显示的标志。1标识为控件窗口;2提示窗口居中(控件下方);4文本反向显示;0x10截获子类窗口消息;<br>0x20定位到控件旁边(跟踪位置);0x80定位到跟踪位置的绝对坐标;0x100将鼠标事件消息转发到父窗口;0x1000分析文本中的链接</td></tr>
<tr><td>窗口</td><td>hwnd</td><td>整数</td><td>包含该工具的窗口的句柄。</td></tr>
<tr><td>标识</td><td>uId</td><td>整数</td><td>工具的应用程序定义的标识符(控件编号)。</td></tr>
<tr><td>左</td><td>rect.left</td><td>整数</td><td>工具的边框坐标。相对于窗口工作区的左上角。</td></tr>
<tr><td>顶</td><td>rect.top</td><td>整数</td><td>工具的边框坐标。相对于窗口工作区的左上角。</td></tr>
<tr><td>宽</td><td>rect.right</td><td>整数</td><td>工具的边框坐标。相对于窗口工作区的左上角。</td></tr>
<tr><td>高</td><td>rect.bottom</td><td>整数</td><td>工具的边框坐标。相对于窗口工作区的左上角。</td></tr>
<tr><td>实例</td><td>hinst</td><td>整数</td><td>包含工具字符串资源的实例的句柄。</td></tr>
<tr><td>文字</td><td>lpszText</td><td>整数</td><td>指向包含工具文本的缓冲区的指针，或包含文本的字符串资源的标识符。</td></tr>
<tr><td>定义</td><td>lParam</td><td>整数</td><td>版本4.70及更高版本。与工具关联的32位应用程序定义值。</td></tr>
<tr><td>预留</td><td>lpReserved</td><td>整数</td><td>保留。必须设置为0。</td></tr>
</table><font size="6"><a name="提示点框类">提示点框类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>提示点框类</td><td>TTHITTESTINFOA</td><td>60</td><td>包含用于确定某个点是否位于指定工具的边框中的信息。如果在，则结构将接收有关该工具的信息。</td></tr>
<tr><th colspan=4>提示点框类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hwnd</td><td>整数</td><td>使用指定工具的工具或窗口的句柄。</td></tr>
<tr><td>左边</td><td>pt.x</td><td>整数</td><td>要测试的点的客户端坐标的水平位置。</td></tr>
<tr><td>顶边</td><td>pt.y</td><td>整数</td><td>要测试的点的客户端坐标的垂直位置。</td></tr>
<tr><td>提示</td><td>ti</td><td>提示信息类</td><td>如果指定的点位于指定窗口的工具中，则此结构接收有关该工具的信息。</td></tr>
</table><font size="6"><a name="提示标题类">提示标题类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>提示标题类</td><td>TTGETTITLE</td><td>16</td><td>提供有关工具提示控件标题的信息。</td></tr>
<tr><th colspan=4>提示标题类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>图标</td><td>uTitleBitmap</td><td>整数</td><td>指定工具提示图标的序号</td></tr>
<tr><td>字数</td><td>cch</td><td>整数</td><td>指定标题中的字符数的大小</td></tr>
<tr><td>标题</td><td>pszTitle</td><td>整数</td><td>指向包含标题的宽字符串的指针。</td></tr>
</table><p><font size="6"><a name="选项卡">选项卡</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tab-simple.png"><br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,标识=.&12,数值=.&16,左边=.&20,顶边=.&24;<br>
判断(事件)为 控件单击左键{标题是特定于控件的项标识符}<br>
为 控件双击左键{数值是特定于控件的项数据}<br>
为 控件单击右键{左边和顶边是鼠标位置}<br>
处理窗口(窗口,控件事件,参数,数据)<br>
结束</font><br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,键码=.&12,扫码=.&16;<br>
判断(事件)为 选卡键盘按下{键码是虚拟密钥代码}<br>
为 选卡键盘按下{扫码是扫描代码、扩展键标志、上下文代码}<br>
处理窗口(窗口,控件事件,参数,数据)<br>
结束</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键</td></tr>
<tr><td>控件双击左键</td><td>-3</td><td>NM_DBLCLK</td><td>用户在控件上双击了鼠标左键</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键</td></tr>
<tr><td>控件双击右键</td><td>-6</td><td>NM_RDBLCLK</td><td>用户在控件上双击了鼠标右键</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>选卡键盘按下</td><td>-550</td><td>TCN_KEYDOWN</td><td>用户已按下某键</td></tr>
<tr><td>选卡已被改变</td><td>-551</td><td>TCN_SELCHANGE</td><td>选项卡的当前选择已被改变</td></tr>
<tr><td>选卡将要改变</td><td>-552</td><td>TCN_SELCHANGING</td><td>选项卡的当前选择将要改变</td></tr>
<tr><td>选卡放置目标</td><td>-553</td><td>TCN_GETOBJECT</td><td>请求放置目标对象</td></tr>
<tr><td>选卡焦点更改</td><td>-554</td><td>TCN_FOCUSCHANGE</td><td>按钮焦点已更改。</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>选卡获取图表</td><td>0x1302</td><td>TCM_GETIMAGELIST</td><td>检索与选项卡控件关联的图像列表。③参数:0;④数据:0</td></tr>
<tr><td>选卡设置图表</td><td>0x1303</td><td>TCM_SETIMAGELIST</td><td>将图像列表分配给选项卡控件。③参数:0;④数据:图表</td></tr>
<tr><td>选卡获取数量</td><td>0x1304</td><td>TCM_GETITEMCOUNT</td><td>检索选项卡控件中选项卡的数目。③参数:0;④数据:0</td></tr>
<tr><td>选卡获取项目</td><td>0x1305</td><td>TCM_GETITEMA</td><td>检索选项卡的属性信息。③参数:序号;④数据:<a href="#选卡项目类">选卡项目类</a></td></tr>
<tr><td>选卡设置项目</td><td>0x1306</td><td>TCM_SETITEMA</td><td>设置选项卡的部分或全部属性。③参数:序号;④数据:<a href="#选卡项目类">选卡项目类</a></td></tr>
<tr><td>选卡插入项目</td><td>0x1307</td><td>TCM_INSERTITEMA</td><td>在选项卡控件中插入新选项卡。③参数:序号;④数据:<a href="#选卡项目类">选卡项目类</a></td></tr>
<tr><td>选卡删除项目</td><td>0x1308</td><td>TCM_DELETEITEM</td><td>从选项卡控件中移除项。③参数:序号;④数据:0</td></tr>
<tr><td>选卡清除项目</td><td>0x1309</td><td>TCM_DELETEALLITEMS</td><td>从选项卡控件中移除所有项。③参数:0;④数据:0</td></tr>
<tr><td>选卡获取边框</td><td>0x130A</td><td>TCM_GETITEMRECT</td><td>检检索选项卡控件中选项卡的边框。③参数:序号;④数据:矩形类</td></tr>
<tr><td>选卡获取选项</td><td>0x130B</td><td>TCM_GETCURSEL</td><td>确定选项卡控件中当前选定的选项卡。③参数:0;④数据:0</td></tr>
<tr><td>选卡设置选项</td><td>0x130C</td><td>TCM_SETCURSEL</td><td>在选项卡控件中选择一个选项卡。③参数:序号;④数据:0</td></tr>
<tr><td>选卡获取点位</td><td>0x130D</td><td>TCM_HITTEST</td><td>确定哪个选项卡位于指定的屏幕位置。③参数:0;④数据:<a name="选卡点框类">选卡点框类</a></td></tr>
<tr><td>选卡定义长度</td><td>0x130E</td><td>TCM_SETITEMEXTRA</td><td>设置每个选项卡定义数据保留的字节数(默认4)。③参数:数值;④数据:0</td></tr>
<tr><td>选卡计算边框</td><td>0x1328</td><td>TCM_ADJUSTRECT</td><td>计算选项卡控件的显示区域或窗口矩形。③参数:真=窗口,假=区域;④数据:矩形类</td></tr>
<tr><td>选卡设置大小</td><td>0x1329</td><td>TCM_SETITEMSIZE</td><td>设置选项卡的宽度和高度。③参数:0;④数据:宽/高</td></tr>
<tr><td>选卡移除图像</td><td>0x132A</td><td>TCM_REMOVEIMAGE</td><td>从选项卡控件的图像列表中移除图像。③参数:序号;④数据:0</td></tr>
<tr><td>选卡设置边距</td><td>0x132B</td><td>TCM_SETPADDING</td><td>设置每个选项卡图标和标签周围的空间大小。③参数:0;④数据:宽/高</td></tr>
<tr><td>选卡获取行数</td><td>0x132C</td><td>TCM_GETROWCOUNT</td><td>检索选项卡控件中选项卡的当前行数。③参数:0;④数据:0</td></tr>
<tr><td>选卡获取控件</td><td>0x132D</td><td>TCM_GETTOOLTIPS</td><td>检索与选项卡控件关联的工具提示控件的句柄。③参数:0;④数据:0</td></tr>
<tr><td>选卡设置控件</td><td>0x132E</td><td>TCM_SETTOOLTIPS</td><td>将工具提示控件分配给选项卡控件。③参数:控件;④数据:0</td></tr>
<tr><td>选卡获取焦点</td><td>0x132F</td><td>TCM_GETCURFOCUS</td><td>返回选项卡控件中具有焦点的项的索引。③参数:0;④数据:0</td></tr>
<tr><td>选卡设置焦点</td><td>0x1330</td><td>TCM_SETCURFOCUS</td><td>将焦点设置为选项卡控件中的指定选项卡。③参数:序号;④数据:0</td></tr>
<tr><td>选卡最小宽度</td><td>0x1331</td><td>TCM_SETMINTABWIDTH</td><td>设置选项卡控件中项的最小宽度。③参数:0;④数据:宽度,-1默认</td></tr>
<tr><td>选卡重置项目</td><td>0x1332</td><td>TCM_DESELECTALL</td><td>重置选项卡控件中的项。③参数:真=选中除外,假=全部;④数据:0</td></tr>
<tr><td>选卡突出项目</td><td>0x1333</td><td>TCM_HIGHLIGHTITEM</td><td>设置选项卡项的突出显示状态。③参数:序号;④数据:真=突出,假=不突出</td></tr>
<tr><td>选卡设置扩展</td><td>0x1334</td><td>TCM_SETEXTENDEDSTYLE</td><td>设置选项卡控件将使用的扩展样式。③参数:选项0=全改;④数据:样式,1绘制分隔符,2支持拖放</td></tr>
<tr><td>选卡获取扩展</td><td>0x1335</td><td>TCM_GETEXTENDEDSTYLE</td><td>检索当前用于选项卡控件的扩展样式。③参数:0;④数据:0</td></tr>
<tr><td>选卡读取项目</td><td>0x133C</td><td>TCM_GETITEMW</td><td>检索选项卡的属性信息。③参数:序号;④数据:<a href="#选卡项目类">选卡项目类</a></td></tr>
<tr><td>选卡修改项目</td><td>0x133D</td><td>TCM_SETITEMW</td><td>设置选项卡的部分或全部属性。③参数:序号;④数据:<a href="#选卡项目类">选卡项目类</a></td></tr>
<tr><td>选卡穿插项目</td><td>0x133E</td><td>TCM_INSERTITEMW</td><td>在选项卡控件中插入新选项卡。③参数:序号;④数据:<a href="#选卡项目类">选卡项目类</a></td></tr>
<tr><td>控件设置宽字</td><td>0x2005</td><td>CCM_SETUNICODEFORMAT</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>0x2006</td><td>CCM_GETUNICODEFORMAT</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
</table><font size="6"><a name="选卡项目类">选卡项目类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>选卡项目类</td><td>TCITEMA</td><td>28</td><td>指定或接收选项卡项的属性。</td></tr>
<tr><th colspan=4>选卡项目类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>掩码</td><td>mask</td><td>整数</td><td>指定要检索或设置的成员的值。8=反向显示文本</td></tr>
<tr><td>状态</td><td>dwState</td><td>整数</td><td> 指定项的当前状态。掩码:0x10</td></tr>
<tr><td>状态掩码</td><td>dwStateMask</td><td>整数</td><td>指定状态成员的有效信息。1=项已选定,2项已突出显示</td></tr>
<tr><td>文字</td><td>pszText</td><td>整数</td><td>设置或接收选项卡的文本缓冲区。掩码:1</td></tr>
<tr><td>字长</td><td>cchTextMax</td><td>整数</td><td>指向的缓冲区的大小（以字节为单位）。</td></tr>
<tr><td>图像</td><td>iImage</td><td>整数</td><td>选项卡控件的图像列表中的索引;没有则为-1。掩码:2</td></tr>
<tr><td>定义</td><td>lParam</td><td>整数</td><td>与选项卡控件项关联的应用程序定义数据。掩码:8</td></tr>
</table><font size="6"><a name="选卡点框类">选卡点框类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>选卡点框类</td><td>TCHITTESTINFO</td><td>12</td><td>包含有关命中测试的信息。</td></tr>
<tr><th colspan=4>选卡点框类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>左边</td><td>pt.x</td><td>整数</td><td>要测试的点的客户端坐标的水平位置。</td></tr>
<tr><td>顶边</td><td>pt.y</td><td>整数</td><td>要测试的点的客户端坐标的垂直位置。</td></tr>
<tr><td>标志</td><td>flags</td><td>整数</td><td>接收命中测试结果的变量。1=位置不在选项卡上,2在图标上,4在文本上,6在选项卡非图标非文本上</td></tr>
</table><p><font size="6"><a name="对话框">对话框</a>——示例代码：</font></p>
1.显示消息框
最简单的模式对话框形式是消息框。 使用 信息框 或 消息框 函数创建消息框，指定要显示的消息以及按钮的数量和类型。<br>
系统将创建一个模式对话框，用户关闭消息框后，信息框 或 消息框 将返回一个值，该值标识用户选择用于关闭消息框的按钮。<br>
<font color="#0000FF">整数 编号=信息框(0,"中国","你好",[是否取消 + 问号图标])</font>;//弹出一个信息框上面有是、否、取消三个按钮和问号图标<br>
<font color="#0000FF">如果(编号=选了是)退出程序</font>判断返回的数值:编号，如果等于选了是，也就是点击了是这个按钮，就退出程序<br>
<font color="#0000FF">消息框类 信息(风格=用户图标,实例=$400000,图标=1)</font>消息框类的风格跟信息框的图标样式相同，用户自定义图标要指定实例<br>
32位exe程序的实例可以使用0x400000这个固定的数值，内置模块有一个“程序.实例”，是一个全局整数变量，可以在其它程序段里使用<br>
消息框类也是一个全局变量，初始化赋值只能使用已知数值或者常量，不能使用变量<br>
<font color="#0000FF">信息.标题="标题文字"</font>;//在程序段内指定消息框显示的标题文字<br>
<font color="#0000FF">信息.内容="内容文字"</font>;//在程序段内指定消息框显示的内容文字<br>
<font color="#0000FF">整数 编号=消息框(信息)</font>弹出消息框,并返回关闭消息框时点击了哪个按钮<br>
延时框是弹出一个消息框,如果用户没有点击,会在指定时间关闭消息框<br>
<font color="#0000FF">整数 编号=延时框(0,"中国","你好",[弹出是否 + 惊叹图标],0,5000)</font>;//弹出一个延时消息框上面有是、否两个按钮和惊叹图标<br>
最后一个参数指定5000毫秒,就会在5秒之后自动关闭消息框<br>
2.模式对话框<br>
<font color="#0000FF">整数 编号=资源模态($400000,1,窗体,@对话消息,0)</font>;//加载资源里的1号对话框,指定对话消息这个程序段来接收消息<br>
对话消息跟窗体消息的处理过程十分相似,结束模态对话之后,返回值就会赋值给编号的变量,跟弹出信息框一样,只有关闭对话,才会得到返回值,执行后面的代码<br>
<font color="#0000FF">程序段 对话消息(窗口,消息,参数,数据)<br>
	判断(消息)为 窗口关闭{结束模态(窗口,0)返回(真)}<br>
	为 单击左键{如果(参数=选了确定)<br>
	内容=取控件字(窗口,1)<br>
	如果(参数=选了取消){<br>
	结束模态(窗口,真)返回(真)}}<br>
	否则 处理对话(窗口,消息,参数,数据)<br>
结束</font><br>
3.无模式对话框<br>
<font color="#0000FF">整数 对话=资源对话($400000,1,窗体,@对话框消息,0)</font>;//加载资源里的1号对话框,指定对话框消息这个程序段来接收消息<br>
<font color="#0000FF">桌面.左=对话;</font>//桌面.左是内置模块里用来处理框体消息的全局变量,它可以指定为某个窗口或对话框<br>
窗口程序在创建完窗口和控件后会执行下面这段程序,循环读取系统发来的消息;其中框体消息的第一个参数是"桌面.左"<br>
<font color="#0000FF">程序段 读取消息<br>
循环{如果(获取消息(系统,0,0,0)<>0 而且 框体消息(桌面.左,系统)=0)<br>
{翻译消息(系统)分派消息(系统)}}(系统.消息=消息结束)<br>
结束</font><br>
无模式对话框跟创建窗口一样,执行资源对话函数创建一个对话框,不再等待对话框关闭时得到返回值,直接执行后面的代码<br>
<font color="#0000FF">程序段 对话框消息(窗口,消息,参数,数据)<br>
	判断(消息)为 窗口关闭{销毁窗口(窗口,0)}<br>
	为 单击左键{如果(参数=选了确定)<br>
	数值=取控件数(窗口,1)<br>
	如果(参数=选了取消)<br>
	销毁窗口(窗口)}<br>
	否则 处理对话(窗口,消息,参数,数据)<br>
结束</font><br>
4.在内存中创建模板对话框
应用程序有时会根据正在处理的数据的当前状态来调整或修改对话框的内容。那就需要在内存中动态生成模板来创建对话框。<br>
在以下示例中，应用程序在内存中为模式对话框创建一个模板，其中包含一条消息以及 “确定” 和“ 帮助” 按钮。<br>
在对话模板中，所有字符串（如对话框和按钮标题）都必须是宽字符串。<br>
<font color="#0000FF">整数 模板=申请内存(1024)</font>//申请1K内存用来存储模板数据<br>
<font color="#0000FF">模板&=0x80C80080</font>//对话框样式为:弹出窗口+细线边框+标题栏+系统菜单+模式对话<br>
<font color="#0000FF">.&4=0x80</font>//扩展样式为矮小标题栏<br>
<font color="#0000FF">.%8=3</font>//指定控件为三个<br>
<font color="#0000FF">.%10=10;.%12=10</font>//指定对话框左边和顶边距为10<br>
<font color="#0000FF">.%14=100;.%16=100</font>//指定对话框宽度和高度为100<br>
<font color="#0000FF">.&18=0;.&22=?</font>//菜单和类名为空<br>
<font color="#0000FF">到宽字符(936,0,"窗口标题",-1,#@26,12)</font>//把ANSI转成宽字符<br>
<font color="#0000FF">.&40=0x50000001;.&44=0</font>//按钮风格为子窗口+可见+默认按钮;扩展样式为0<br>
<font color="#0000FF">.%48=10;.%50=70</font>//指定对话框左边距为10;顶边距为70<br>
<font color="#0000FF">.%52=80;.%54=20</font>//指定对话框宽度为80,高度为20<br>
<font color="#0000FF">.&56=1</font>//指定按钮为确定按钮<br>
<font color="#0000FF">.&58=0xFFFF</font>//指定为附加元素,控件为系统定义的类<br>
<font color="#0000FF">.&62=0x0080</font>//系统定义的按钮类<br>
<font color="#0000FF">传送内存(#@66,"`确定",6)</font>//复制宽字符文字<br>
<font color="#0000FF">.&72=0</font>//没有创建数据<br>
<font color="#0000FF">.&76=0x50000000;.&80=0</font>//按钮风格为子窗口+可见;扩展样式为0<br>
<font color="#0000FF">.%84=55;.%86=10</font>//指定对话框左边距为55;顶边距为10<br>
<font color="#0000FF">.%88=40;.%90=20</font>//指定对话框宽度为40,高度为20<br>
<font color="#0000FF">.&92=150</font>//指定按钮为帮助按钮标识符<br>
<font color="#0000FF">.&94=0xFFFF</font>//指定为附加元素,控件为系统定义的类<br>
<font color="#0000FF">.&98=0x0080</font>//系统定义的按钮类<br>
<font color="#0000FF">传送内存(#@102,"`帮助",6)</font>//复制宽字符文字<br>
<font color="#0000FF">.&108=0</font>//没有创建数据<br>
<font color="#0000FF">.&112=0x50000000;.&116=0</font>//按钮风格为子窗口+可见;扩展样式为0<br>
<font color="#0000FF">.%120=55;.%122=10</font>//指定对话框左边距为55;顶边距为10<br>
<font color="#0000FF">.%124=40;.%126=20</font>//指定对话框宽度为40,高度为20<br>
<font color="#0000FF">.&128=200</font>//指定按钮为静态文本标识符<br>
<font color="#0000FF">.&130=0xFFFF</font>//指定为附加元素,控件为系统定义的类<br>
<font color="#0000FF">.&134=0x0082</font>//系统定义的静态类<br>
<font color="#0000FF">传送内存(#@138,"`显示文字",10)</font>//复制宽字符文字<br>
<font color="#0000FF">.&148=0</font>//没有创建数据<br>
<font color="#0000FF">模态对话($400000,模板,窗口,@对话框消息,0)	</font>//创建模式对话框<br>
<font color="#0000FF">释放内存(模板)</font>//没有创建数据<br>
<p><font size="6" color="#0000FF">模式对话框-user32库函数</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>资源对话</td><td>CreateDialogParamA</td><td>资源对话(实例,模板,窗口,@回调,数据)</td><td>从对话框模板资源创建一个无模式对话框。</td></tr>
<tr><td>创建对话</td><td>CreateDialogIndirectParamA</td><td>创建对话(实例,模板,窗口,@回调,数据)</td><td>从对话框模板创建一个无模式对话框。</td></tr>
<tr><td>资源模态</td><td>DialogBoxParamA</td><td>资源模态(实例,模板,窗口,@回调,数据)</td><td>从对话框模板资源创建一个模态对话框。</td></tr>
<tr><td>模态对话</td><td>DialogBoxIndirectParamA</td><td>模态对话(实例,模板,窗口,@回调,数据)</td><td>从对话框模板创建一个模态对话框。</td></tr>
<tr><td>处理对话</td><td>DefDlgProcA</td><td>处理对话(对话,消息,参数,数据)</td><td>为程序定义的对话框类的窗口过程提供缺省的消息处理</td></tr>
<tr><td>结束模态</td><td>EndDialog</td><td>结束模态(窗口,真)</td><td>结束模态对话框</td></tr>
<tr><td>字符宽高</td><td>GetDialogBaseUnits</td><td>宽高=字符宽高</td><td>检索系统的对话框基本单位，即系统字体中字符的平均宽度和高度。</td></tr>
<tr><td>控件标识</td><td>GetDlgCtrlID</td><td>标识=控件标识(控件)</td><td>返回指定控件的标识符。</td></tr>
<tr><td>获取控件</td><td>GetDlgItem</td><td>控件=获取控件(窗口,标识)</td><td>通过标识获取窗体上的子窗控件</td></tr>
<tr><td>取控件数</td><td>GetDlgItemInt</td><td>数=取控件数(窗口,标识,@成功,符号)</td><td>获取对话框控件的标题文本,并转换为数字,符号为真包含负数</td></tr>
<tr><td>改控件数</td><td>SetDlgItemInt</td><td>改控件数(窗口,标识,数值,符号)</td><td>用指定数值修改对话框控件的标题文本(数字自动转文本),符号为假不检查"-"符号</td></tr>
<tr><td>取控件字</td><td>GetDlgItemTextA</td><td>取控件字(窗口,标识,内容,长度)</td><td>获取对话框控件的文本和标题</td></tr>
<tr><td>改控件字</td><td>SetDlgItemTextA</td><td>改控件字(窗口,标识,内容)</td><td>修改对话框控件的文本和标题</td></tr>
<tr><td>前后控件</td><td>GetNextDlgGroupItem</td><td>前后控件(窗口,起始,向前)</td><td>检索对话框中指定起始控件之前或后一个控件的句柄。向前为假是向后</td></tr>
<tr><td>前后切换</td><td>GetNextDlgTabItem</td><td>前后切换(窗口,起始,向前)</td><td>检索对话框中指定起始控件之前或后一个具有WS_TABSTOP样式控件的句柄。向前为假是向后</td></tr>
<tr><td>框体消息</td><td>IsDialogMessageA</td><td>框体消息(窗口,消息)</td><td>确定消息是否针对指定的对话框，如果是，则处理消息。</td></tr>
<tr><td>转换像素</td><td>MapDialogRect</td><td>转换像素(窗口,矩形)</td><td>将指定的对话框单位转换为屏幕单位（像素）。将指定矩形中的坐标替换为转换后的屏幕单位</td></tr>
<tr><td>按钮字符</td><td>MB_GetString</td><td>按钮字符(标识)</td><td>返回标准消息框按钮的字符串。</td></tr>
<tr><td>信息框</td><td>MessageBoxA</td><td>信息框(窗口,内容,标题,样式)</td><td>弹出一个消息框,样式通过数字控制</td></tr>
<tr><td>消息框</td><td>MessageBoxIndirectA</td><td>消息框(<a href="#消息框类">消息框类</a>)</td><td>弹出一个消息框,样式通过消息类结构控制</td></tr>
<tr><td>延时框</td><td>MessageBoxTimeoutA</td><td>延时框(0,内容,标题,样式,0,毫秒)</td><td>弹出一个消息框,超过设定时间未点击则自动关闭</td></tr>
<tr><td>控件消息</td><td>SendDlgItemMessageA</td><td>控件消息(窗口,控件,消息,参数,数据)</td><td>在对话框中向指定的控件发送消息。</td></tr>
</table>模式对话框——回调函数</a><br>
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>对话回调</td><td>Dlgproc</td><td>对话回调(窗口,消息,参数,数据)</td><td>处理发送到模式或无模式对话框的消息。</td></tr>
<tr><td>消息回调</td><td>Msgboxcallback</td><td>消息回调(<a href="#帮助类">帮助类</a>)</td><td>处理发送到模式或无模式对话框的消息。</td></tr>
<table border="1" cellspacing="0" cellpadding="0">
</table>模式对话框——通知消息</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>作用解释</td></tr>
<tr><td>切换焦点</td><td>$0028</td><td>WM_NEXTDLGCTL</td><td>发送本消息给一个对话框程序窗口过程,以便在各控件间设置键盘焦点位置。③参数:0下个控件，非0上个控件;④数据:0参数为方向，非0参数为控件对象</td></tr>
<tr><td>切换控件</td><td>$0087</td><td>WM_GETDLGCODE</td><td>发送本消息给某个与对话框程序关联的控件,系统控制方位键和TAB键使输入进入该控件。③参数:键码;④数据:消息类</td></tr>
<tr><td>窗口初始</td><td>$0110</td><td>WM_INITDIALOG</td><td>在某对话框程序被显示前发送本消息给该对话框程序,通常用本消息对控件进行一些初始化工作和执行其它任务。③参数:控件;④数据:其它</td></tr>
<tr><td>模框空载</td><td>$0121</td><td>WM_ENTERIDLE</td><td>当一个模态对话框或菜单进入空闲状态时,发送本消息给它的所有者,就是在处理完先前的消息后,消息队列为空时。③参数:0对话框,2菜单;④数据:窗口对象</td></tr>
<tr><td>绘制对话</td><td>$0136</td><td>WM_CTLCOLORDLG</td><td>绘制对话框的背景色③参数:设备;④数据:控件</td></tr>
</table>模式对话框——发送消息</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>作用解释</td></tr>
<tr><td>对话取号</td><td>0x400</td><td>DM_GETDEFID</td><td>检索对话框的默认按钮控件的标识符。③参数:0;④数据:0</td></tr>
<tr><td>对话改号</td><td>0x401</td><td>DM_SETDEFID</td><td>更改对话框的默认按钮的标识符。③参数:标识符;④数据:0</td></tr>
<tr><td>对话定位</td><td>0x402</td><td>DM_GETDEFID</td><td>重新定位顶级对话框，使其适合桌面区域。③参数:0;④数据:0</td></tr>
</table><a name="消息框类">消息框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>消息框类</td><td>MSGBOXPARAMS</td><td>40</td><td>包含有显示一个消息（对话框信息）的数据结构。</td></tr>
<tr><th colspan=4>消息框类——成员表</th></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>这个结构的大小，以字节计算。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>对话框所有者窗口的句柄。</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>对话框所有者实例的句柄</td></tr>
<tr><td>内容</td><td>lpszText</td><td>整数</td><td>包含着消息要显示的内容。</td></tr>
<tr><td>标题</td><td>lpszCaption</td><td>整数</td><td>包含着消息的标题，默认用“错误”作为标题。</td></tr>
<tr><td>风格</td><td>dwStyle</td><td>整数</td><td>设置对话框的内容和行为。</td></tr>
<tr><td>图标</td><td>lpszIcon</td><td>整数</td><td>图标资源的ID。字符串或数字</td></tr>
<tr><td>帮助</td><td>dwContextHelpId</td><td>整数</td><td>帮助内容的ID。如果一个Help事件发生，这个值在消息框发送到所有者窗口或回调函数</td></tr>
<tr><td>回调</td><td>lpfnMsgBoxCallback</td><td>整数</td><td>一个处理消息框帮助信息的回调函数的指针。</td></tr>
<tr><td>语言</td><td>dwLanguageId</td><td>整数</td><td>包含在原先定义的按钮中的文本的语言。中文4，英文9。默认是根据系统的语言</td></tr>
</table><a name="对话框类">对话框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>对话框类</td><td>DLGTEMPLATE</td><td>18</td><td>定义对话框的尺寸和样式。始终是对话框的标准模板中的第一个结构，还指定对话框中的控件数</td></tr>
<tr><th colspan=4>对话框类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>风格</td><td>style</td><td>整数</td><td>对话框的样式。是窗口样式值和对话框样式值的组合</td></tr>
<tr><td>扩展</td><td>dwExtendedStyle</td><td>整数</td><td>窗口的扩展样式。不用于创建对话框，而用它来创建其他类型的窗口。</td></tr>
<tr><td>项目</td><td>cdit</td><td>整形</td><td>对话框中的项数。</td></tr>
<tr><td>左</td><td>x</td><td>整形</td><td>对话框左上角的 x 坐标</td></tr>
<tr><td>顶</td><td>y</td><td>整形</td><td>对话框左上角的 y 坐标</td></tr>
<tr><td>宽</td><td>cx</td><td>整形</td><td>对话框的宽度。</td></tr>
<tr><td>高</td><td>cy</td><td>整形</td><td>对话框的高度</td></tr>
</table><a name="对话项类">对话项类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>对话项类</td><td>DLGITEMTEMPLATE</td><td>18</td><td>定义对话框中控件的尺寸和样式。一个或多个结构与对话框类组合在一起，形成对话框的标准模板。</td></tr>
<tr><th colspan=4>对话项类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>风格</td><td>style</td><td>整数</td><td>对话框的样式。是窗口样式值和对话框样式值的组合</td></tr>
<tr><td>扩展</td><td>dwExtendedStyle</td><td>整数</td><td>窗口的扩展样式。不用于创建对话框，而用它来创建其他类型的窗口。</td></tr>
<tr><td>左</td><td>x</td><td>整形</td><td>对话框左上角的 x 坐标</td></tr>
<tr><td>顶</td><td>y</td><td>整形</td><td>对话框左上角的 y 坐标</td></tr>
<tr><td>宽</td><td>cx</td><td>整形</td><td>对话框的宽度。</td></tr>
<tr><td>高</td><td>cy</td><td>整形</td><td>对话框的高度</td></tr>
<tr><td>标识</td><td>id</td><td>整形</td><td>控件标识符编号。</td></tr>
</table><a name="对话框样式">对话框样式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>绝对坐标</td><td>DS_ABSALIGN</td><td>1</td><td>指示对话框的坐标是屏幕坐标。 如果未指定此样式，则坐标为客户端坐标。</td></tr>
<tr><td>对话置顶</td><td>DS_SYSMODAL</td><td>2</td><td>此样式已过时。创建具有 WS_EX_TOPMOST样式的 对话框。 此样式不会阻止用户访问桌面上的其他窗口。</td></tr>
<tr><td>三维外观</td><td>DS_3DLOOK</td><td>4</td><td>已过时。 系统会自动将三维外观应用于应用程序创建的对话框。</td></tr>
<tr><td>兼容字体</td><td>DS_FIXEDSYS</td><td>8</td><td>使对话框使用16位DOS系统兼容的单空间字体。Windows3.0 以下。</td></tr>
<tr><td>忽略错误</td><td>DS_NOFAILCREATE</td><td>0x10</td><td>创建对话框，即使发生错误，例如，如果无法创建子窗口或系统无法为编辑控件创建特殊数据段。</td></tr>
<tr><td>数据内存</td><td>DS_LOCALEDIT</td><td>0x20</td><td>用于16位程序。对话框中的编辑控件从应用程序的数据段分配内存。</td></tr>
<tr><td>对话字体</td><td>DS_SETFONT</td><td>0x40</td><td>指示对话框模板的标题和控件中的文本的字体数据。</td></tr>
<tr><td>系统字体</td><td>DS_SHELLFONT</td><td>0x48</td><td>指示对话框应使用系统字体。扩展对话框模板的 字样 成员必须设置为 MS Shell Dlg。</td></tr>
<tr><td>模式对话</td><td>DS_MODALFRAME</td><td>0x80</td><td>使用模式对话框框架创建一个对话框，该框可通过指定标题栏和窗口菜单结合使用。</td></tr>
<tr><td>不显空载</td><td>DS_NOIDLEMSG</td><td>0x100</td><td>禁止显示 模框空载 消息，否则系统将在显示对话框时发送给对话框所有者的消息。</td></tr>
<tr><td>对话前台</td><td>DS_SETFOREGROUND</td><td>0x200</td><td>将对话框引入前台。无论所有者窗口是否为前台窗口，此样式都是前台的模式对话框。</td></tr>
<tr><td>制表控制</td><td>DS_CONTROL</td><td>0x0400</td><td>允许用户在子对话框的控件窗口中按 Tab 键、使用其快捷键等。</td></tr>
<tr><td>显示居中</td><td>DS_CENTER</td><td>0x0800</td><td>将对话框在包含所有者窗口的监视器工作区中居中。</td></tr>
<tr><td>光标居中</td><td>DS_CENTERMOUSE</td><td>0x1000</td><td>鼠标光标上的对话框居中。</td></tr>
<tr><td>问号标题</td><td>DS_CONTEXTHELP</td><td>0x2000</td><td>在对话框的标题栏中包括问号。单击时光标变成问号。随后单击对话框中的控件将收到帮助消息。</td></tr>
</table><a name="帮助类">帮助类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>帮助类</td><td>HELPINFO</td><td>18</td><td>包含有关已为其请求上下文相关帮助的项的信息。</td></tr>
<tr><th colspan=4>帮助类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>分类</td><td>iContextType</td><td>整数</td><td>请求帮助的上下文类型。1窗口，2菜单</td></tr>
<tr><td>标识</td><td>iCtrlId</td><td>整数</td><td>窗口控件或菜单项的标识符。</td></tr>
<tr><td>子项</td><td>hItemHandle</td><td>整数</td><td>子窗口控件或关联菜单的标识符。</td></tr>
<tr><td>编号</td><td>dwContextId</td><td>整数</td><td>窗口或控件的帮助上下文标识符。</td></tr>
<tr><td>左边</td><td>MousePos.x</td><td>整数</td><td>包含鼠标光标的屏幕坐标的左边位置。</td></tr>
<tr><td>顶边</td><td>MousePos.y</td><td>整数</td><td>包含鼠标光标的屏幕坐标的顶边位置。</td></tr>
</table><p><font size="6"><a name="工具栏">工具栏</a>——通知消息：</font></p><pre>
工具栏是包含一个或多个按钮的控件。用户单击每个按钮时，都会向父窗口发送一条命令消息。
通常，工具栏中的按钮对应于应用程序菜单项，为用户另外提供了一种更直接的方式来访问应用程序命令。

以下屏幕截图显示了一个窗口，其中包含用于文件操作的简单工具栏。 应用程序已启用视觉样式。
“保存”按钮是“热”的，因为拍摄屏幕截图时光标悬停在它上方。 控件的实际外观因操作系统和用户选择的主题而异。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tb-withstyles.png">
<b>指定工具栏大小和位置</b>
如果使用 建工具栏 创建工具栏，则使用 函数可以指定工具栏的高度和宽度（以像素为单位）。
不建议使用 建工具栏 ，因为它不支持工具栏的新功能，包括图像列表。 
创建窗口 函数没有用于指定工具栏大小的参数。 工具栏窗口过程会自动设置工具栏窗口的大小和位置。 高度基于工具栏中按钮的高度。宽度与父窗口工作区的宽度一样。
若要更改自动大小设置，请发送 工具按钮大小 消息。顶部和底部常见控件样式确定工具栏是沿工作区的顶部还是底部放置。 默认情况下，工具栏具有 顶部左侧 样式。

此外，工具栏窗口过程会在收到 窗口缩放 或 工具自动调整 消息时自动调整工具栏的大小。 每当父窗口的大小发生更改或发送需要调整工具栏大小的消息
例如， 工具按钮大小 消息）后，应用程序应发送其中任一消息。可以通过设置 禁止缩放 和 自由位置 常用控件样式
来关闭工具栏默认大小调整和定位行为。 伸缩条 控件承载的工具栏控件必须设置这些样式，因为 伸缩条 控件会调整工具栏的大小和位置。

<b>透明工具栏</b>
工具栏控件支持透明外观，允许工具栏下的工作区显示。 有两种类型的透明工具栏，一种是带有平面按钮，一种是带有三维按钮。
如果希望应用程序与 Windows 界面匹配，请使用平面透明样式工具栏。以下屏幕截图显示了两种透明工具栏，不使用视觉样式。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/toolbartrans.jpg">
若要创建透明工具栏，在设计工具栏控件时只需将 平面效果 或 背景透明 勾选上。 如果不希望显示指示工具栏底部的线条，请不要使用 细线边框 窗口样式。
<b>列表样式工具栏</b>
使用工具栏按钮可以同时显示文本和位图。 使用 文本置右 样式创建的工具栏上的按钮将文本放置在位图的右侧而不是位图下方。
以下屏幕截图显示了具有列表样式的工具栏。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tb-liststyle.png" >
可以将 文本置右 工具栏样式与 平面效果 样式结合使用，以创建带有平面按钮的工具栏。

<b>定义按钮图像</b>
有两种方法可以指定按钮的图像 - 按位图或按图像列表。 应用程序必须选择要使用的方法。想要使用图像列表方法的应用程序必须使用 创建窗口 函数来创建工具栏控件。

<b>使用位图定义按钮图像</b>
工具栏中的每个按钮都可以包含位图图像。 工具栏使用内部列表来存储绘制图像所需的信息。设计的工具栏控件图像的大小为 16 x 15 像素的默认尺寸。
可以使用 工具图像大小 消息更改位图图像的尺寸，但必须在将任何图像添加到内部列表之前执行此操作。 

每个图像都有一个从零开始的索引。 添加到内部列表的第一个图像的索引为 0，第二个图像的索引为 1，依依此。 工具添加图像 将图像添加到列表末尾，
并返回它添加的第一个新图像的索引。 若要将图像与按钮相关联，必须在向内部图像列表添加位图后发送 工具添加按钮 消息并指定图像的索引。

<b>使用图像列表定义按钮图像</b>
还可以将按钮图像存储在一组 图像列表中。 图像列表是大小相同的图像的集合，每个图像都可以通过其索引来引用。 图像列表用于管理大型图标或位图集。
最多可以使用三个不同的图像列表来显示处于不同状态的按钮，如下表所示。</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>状态</td><td>数值</td><td>释义</td></tr>
<tr><td>普通</td><td>0</td><td>处于默认状态的按钮。</td></tr>
<tr><td>热项</td><td>1</td><td>指针下或按下的按钮。 热项仅在具有 平面效果 样式的工具栏控件中受支持。</td></tr>
<tr><td>已禁用</td><td>2</td><td>已禁用的按钮。</td></tr>
</table><pre>
销毁工具栏后，应用程序必须释放其创建的任何图像列表。

<b>定义按钮的文本</b>
除了图像之外，每个按钮还可以显示字符串，也可以显示而不是图像。 工具栏维护一个内部列表，其中包含可用于工具栏按钮的所有字符串。 使用 工具添加字符 
消息将字符串添加到内部列表，并指定包含要添加的字符串的缓冲区的地址。 每个字符串必须以 0 结尾，最后一个字符串必须以两个 0 字符结尾。

每个字符串都有一个从零开始的索引。 添加到内部字符串列表中的第一个字符串的索引为 0，第二个字符串的索引为 1，依次类推。 
工具添加字符 将字符串添加到列表末尾，并返回第一个新字符串的索引。 使用字符串的索引将字符串与按钮相关联。

使用 工具添加字符 不是将字符串添加到工具栏的唯一方法。 通过在传递给 工具添加按钮 的 <a href="#工具按钮类">工具按钮类</a> 结构的 文字 成员中传递字符串指针，
可以在按钮中显示字符串。此外，还可以使用 工具修改信息 将文本分配给工具栏按钮。

<b>添加工具栏按钮</b>
如果使用 CreateToolbarEx 函数创建工具栏，可以通过填充 <a href="#工具按钮类">工具按钮类</a> 结构的数组并在函数调用中指定数组的地址，将按钮添加到工具栏。 
但是设计工具栏控件不能指定 <a href="#工具按钮类">工具按钮类</a> 结构。可以通过发送 工具添加按钮 消息并指定 工具按钮类 结构的地址，创建一个空工具栏。

创建工具栏后，可以通过发送 工具插入按钮 或 工具添加按钮 消息来添加按钮。 每个按钮由 <a href="#工具按钮类">工具按钮类</a> 结构描述，
该结构定义按钮的属性，包括其字符串和位图的索引，以及其样式、状态、命令标识符和应用程序定义的 32 位值。
如果使用界面设计器创建工具栏，则必须在添加任何按钮之前发送 工具结构大小 消息。 消息将 <a href="#工具按钮类">工具按钮类</a> 结构的大小传递到工具栏。

<b>工具栏按钮样式</b>
按钮的样式决定了按钮的显示方式以及按钮对用户输入的响应方式。 例如， 标准按钮 样式会创建一个行为类似于标准按下按钮的工具栏按钮。
具有 复选按钮 样式的按钮类似于标准按钮，不同之处在于每次用户单击按钮时，它都会在按下状态和非按下状态之间切换。

可以使用 分组单选 或加上 复选按钮 样式创建类似于单选按钮的工具栏按钮组。 这会导致按钮保持按下状态，直到用户选择组中的另一个按钮。
组定义为按钮的连续集合，全部采用这种样式。是分隔条样式在按钮之间创建一个小间隙，或在平面工具栏上的按钮之间绘制刻字。按钮不会接收用户输入。

<b>工具栏按钮状态</b>
工具栏中的每个按钮都有一个 状态。 工具栏更新按钮的状态以反映用户操作，例如单击按钮。 状态指示按钮当前是按下还是未按下、启用或禁用、隐藏或可见。
尽管应用程序在将按钮添加到工具栏时设置按钮的初始状态，但它可以通过向工具栏发送 工具获取状态	 和 工具设置状态 消息来更改和检索状态。<a href="#工具状态">工具栏状态</a>

<b>命令标识符</b>
每个按钮都有一个与之关联的应用程序定义的命令标识符。 按钮标识符通常在应用程序头文件中定义。 例如，“粘贴”按钮可以定义为：常量 粘贴=100
当用户选择按钮时，工具栏会向父窗口发送包含按钮命令标识符的 命令事件 或 控件事件 消息。 父窗口检查命令标识符并执行与按钮关联的命令。 

<b>按钮大小和位置</b>
工具栏通过为每个按钮分配位置索引来跟踪其按钮。 索引从零开始;也就是说，最左侧的按钮的索引为 0，右侧的下一个按钮的索引为 1，依此而行。
应用程序必须在发送消息时指定按钮的索引，以检索有关按钮的信息或设置按钮的属性。工具栏在插入和删除按钮时更新位置索引。
应用程序可以使用 工具按钮序号 消息检索按钮的当前位置索引。 消息指定按钮的命令标识符，工具栏窗口使用该标识符查找按钮并返回其位置索引。

工具栏中的所有按钮大小均相同。设计的工具栏控件，初始大小设置为 24 x 22 像素的默认尺寸。 可以使用 工具按钮大小 消息更改按钮大小，
但必须在将任何按钮添加到工具栏之前执行此操作。工具按钮边框 消息检索按钮的当前尺寸。

添加的字符串比工具栏中当前任何字符串都长时，工具栏会自动重置其按钮的宽度。 宽度设置为容纳工具栏中最长的字符串。

<b>启用自定义</b>
工具栏具有内置自定义功能，你可以通过为工具栏提供 拖动调整 通用控件样式来向用户提供这些功能。 用户可以通过自定义功能将按钮拖动到新位置，
或通过将按钮拖出工具栏删除该按钮。 此外，用户可以双击工具栏以显示“自定义工具栏”对话框，以便添加、删除和重排工具栏按钮。
若要显示对话框，请使用 工具自定义框 消息。 应用程序确定自定义功能是否对用户可用，并控制用户可自定义工具栏的程度。

作为自定义过程的一部分，应用程序通常需要保存和还原工具栏的状态。 例如，许多应用程序在用户开始自定义工具栏之前存储工具栏状态，
以防用户以后想要将工具栏还原到其原始状态。 工具栏控件不会自动保留其预自定义状态的记录。 应用程序必须保存工具栏状态才能还原它。

<b>启用热跟踪</b>
热跟踪意味着当指针移到某个项上时，按钮的外观会更改。 启用视觉样式后，工具栏默认支持热跟踪。 否则，只有使用 平面效果 样式。
可以将其他窗口样式与 平面效果 结合使用，以生成启用热跟踪但具有与平面工具栏不同的外观的工具栏。
如何创建工具栏
使用界面设计器生成的工具栏最初不包含任何按钮。 使用 工具添加按钮 或 工具插入按钮 消息将按钮添加到工具栏。
必须将所有项和字符串插入控件后发送 工具自动调整 消息，使工具栏根据其内容重新计算其大小。
以下示例代码使用标准系统图标创建图中显示的工具栏。设计时勾选多行按钮样式 。
<font color="#0000FF">
程序段 窗体启动
	整数 图列=图表创建(16,16,[图像16位 | 图像掩码],3,0)
	文本 数组[60];
	发送消息(工具栏1,工具设置图表,0,图列)
	发送消息(工具栏1,工具加载图表,0,-1)
	工具按钮类 数组[3]={
	{6,1,4,0x10,0,0,"新建"},
	{7,1,4,0x10,0,0,"打开"},
	{8,1,4,0x10,0,0,"保存"}}
	发送消息(工具栏1,工具结构大小,20,0)
	发送消息(工具栏1,工具按钮添加,3,数组)
	发送消息(工具栏1,工具自动调整,0,0)
结束</font>
最初禁用“ 保存 ”按钮。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tb-codesample1.png">
以下示例以大致相同的方式创建相同的工具栏，但在本例中，字符串是从资源读取的。
<font color="#0000FF">
程序段 窗体启动
	整数 图列=图表创建(16,16,[图像16位 | 图像掩码],3,0)
	发送消息(工具栏1,工具设置图表,0,图列)
	发送消息(工具栏1,工具加载图表,0,-1)
	整数 新字=发送消息(工具栏1,工具添加字符,0x400000,1)
	文本 数组[60];
	数组&=6;.&4=1;.&8=0x1004;.&12=0;.&16=新字;
	.&20=7;.&24=2;.&28=0x1004;.&32=0;.&16=新字+1;
	.&40=8;.&44=3;.&48=0x1000;.&52=0;.&16=新字+2;
	发送消息(工具栏1,工具结构大小,20,0)
	发送消息(工具栏1,工具按钮添加,3,数组)
	发送消息(工具栏1,工具自动调整,0,0)
结束</font>
<b>创建垂直工具栏</b>
创建垂直工具栏的关键是在窗口样式中勾选 垂直显示 ，并为每个按钮设置 0x20按钮换行 样式。
以下示例代码创建如下图所示的垂直工具栏。
<font color="#0000FF">
程序段 窗体启动
	整数 图列=图表创建(24,24,[图像16位 | 图像掩码],3,0)
	发送消息(工具栏1,工具设置图表,0,图列)
	发送消息(工具栏1,工具加载图表,0,-1)
	工具按钮类 数组[3]={
	{6,1,0x24,0,0,0,0},
	{7,2,0x24,0,0,0,0},
	{8,3,0x24,0,0,0,0}}
	发送消息(工具栏1,工具结构大小,20,0)
	发送消息(工具栏1,工具按钮添加,3,数组)
结束</font>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tb-vertical.png">
<b>动态标记工具栏按钮</b>
以下示例演示如何将前面示例中第三个按钮的文本从 “保存” 更改为 “另存为”。假定保存按钮的标识为102
<font color="#0000FF">
工具信息类 改信息(大小=20,掩码=2)
程序段 更改按钮
	改信息.文字="另存为"
	发送消息(工具栏1,工具修改信息,102,改信息)
结束</font>
如何显示按钮的工具提示
指定 提示文本 样式时，工具栏将创建和管理工具提示控件。当用户将指针移到工具栏按钮上并留在那里大约一秒钟时才会显示。

应用程序可以通过以下任一方式向工具提示控件提供文本：
将工具提示文本设置为每个按钮的 <a href="#工具按钮类">工具按钮类</a> 结构的 文字 成员。 还必须发送 工具限最多行 消息，
	并将最大文本行设置为 0，以便文本不显示为按钮标签而不是工具提示。
使用 文本置右 样式创建工具栏，然后设置 8 扩展样式。 标签仅显示具有 显示文本 样式的按钮。否则将显示包含按钮文本的工具提示。
响应 提示显示信息 通知代码。
响应 工具提示信息 通知代码。

需要将消息直接发送到工具提示控件的应用程序可以使用 工具获取提示 消息检索控件的句柄。
应用程序可以使用 工具设置提示 消息将工具栏的工具提示控件替换为另一个工具提示控件。

提供工具提示文本的最灵活方法是响应工具栏控件以控件事件消息的形式发送给其父级的提示显示信息或工具提示信息通知代码。
对于 提示显示信息， ④数据 参数包含指向 <a href="#提示显示类">提示显示类</a> 结构的指针，该结构指定需要帮助文本的按钮的命令标识符。
此标识符位于 通知.标识 成员中。 应用程序可以将帮助文本复制到结构、指定包含帮助文本的字符串的地址，或指定字符串资源的实例句柄和资源标识符。
以下示例代码通过提供资源标识符中的文本来处理 提示显示信息 工具提示通知代码。这里把提示指定为标识符对应的数值1 2 3
<font color="#0000FF">
程序段 公共事件(数据)
	整数 窗口=数据&,标识=.&4,事件=.&8,提示=.&12;
	判断(事件)为 提示显示信息{.&12=标识}
结束</font></pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键</td></tr>
<tr><td>控件双击左键</td><td>-3</td><td>NM_DBLCLK</td><td>用户在控件上双击了鼠标左键</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键</td></tr>
<tr><td>控件双击右键</td><td>-6</td><td>NM_RDBLCLK</td><td>用户在控件上双击了鼠标右键</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>控件按下键盘</td><td>-15</td><td>NM_KEYDOWN</td><td>控件获得键盘焦点并按下某键</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>控件键入字符</td><td>-18</td><td>NM_CHAR</td><td>字符键被处理后由控件发送</td></tr>
<tr><td>控件工具提示</td><td>-19</td><td>NM_TOOLTIPSCREATED</td><td>通知控件的父窗口控件已创建工具提示控件。④数据:NMTOOLTIPSCREATED 结构</td></tr>
<tr><td>控件鼠标左键</td><td>-20</td><td>NM_LDOWN</td><td>通知控件的父窗口已按下鼠标左键。</td></tr>
<tr><td>工具按钮信息</td><td>-700</td><td>TBN_GETBUTTONINFOA</td><td>获取工具栏的自定义信息</td></tr>
<tr><td>工具拖起按钮</td><td>-701</td><td>TBN_BEGINDRAG</td><td>用户已开始拖动工具栏的某个按钮</td></tr>
<tr><td>工具拖放按钮</td><td>-702</td><td>TBN_ENDDRAG</td><td>用户已停止拖动工具栏的某个按钮</td></tr>
<tr><td>工具开始定义</td><td>-703</td><td>TBN_BEGINADJUST</td><td>用户已开始自定义一个工具栏</td></tr>
<tr><td>工具结束定义</td><td>-704</td><td>TBN_ENDADJUST</td><td>用户已停止自定义一个工具栏</td></tr>
<tr><td>工具已经重置</td><td>-705</td><td>TBN_RESET</td><td>用户在自定义工具栏对话框中已经对工具栏进行重置了</td></tr>
<tr><td>工具可插左侧</td><td>-706</td><td>TBN_QUERYINSERT</td><td>按钮是否可被插入到指定按钮的左侧</td></tr>
<tr><td>工具可被删除</td><td>-707</td><td>TBN_QUERYDELETE</td><td>用户自定义工具栏时一个按钮是否可被删除</td></tr>
<tr><td>工具已被改变</td><td>-708</td><td>TBN_TOOLBARCHANGE</td><td>用户已经定制完一个工具栏</td></tr>
<tr><td>工具选择帮助</td><td>-709</td><td>TBN_CUSTHELP</td><td>用户已经选择了自定义工具栏对话框上的帮助按钮</td></tr>
<tr><td>工具单击下拉</td><td>-710</td><td>TBN_DROPDOWN</td><td>当用户单击下拉按钮时，工具栏控件发送。</td></tr>
<tr><td>工具放置目标</td><td>-712</td><td>TBN_GETOBJECT</td><td>请求放置目标对象。</td></tr>
<tr><td>工具热项更改</td><td>-713</td><td>TBN_HOTITEMCHANGE</td><td>突出显示的热 () 项更改</td></tr>
<tr><td>工具拖出按钮</td><td>-714</td><td>TBN_DRAGOUT</td><td>用户单击按钮，然后将光标移出按钮</td></tr>
<tr><td>工具按钮删除</td><td>-715</td><td>TBN_DELETINGBUTTON</td><td>按钮即将被删除</td></tr>
<tr><td>工具显示信息</td><td>-716</td><td>TBN_GETDISPINFOA</td><td>检索工具栏项的显示信息</td></tr>
<tr><td>工具信息显示</td><td>-717</td><td>TBN_GETDISPINFOW</td><td>检索工具栏项的显示信息</td></tr>
<tr><td>工具提示信息</td><td>-718</td><td>TBN_GETINFOTIPA</td><td>检索工具栏项的信息提示信息。</td></tr>
<tr><td>工具信息提示</td><td>-719</td><td>TBN_GETINFOTIPW</td><td>检索工具栏项的信息提示信息。</td></tr>
<tr><td>工具按钮定义</td><td>-720</td><td>TBN_GETBUTTONINFOW</td><td>获取工具栏的自定义信息</td></tr>
<tr><td>工具正在还原</td><td>-721</td><td>TBN_RESTORE</td><td>通知工具栏的父窗口正在还原工具栏。</td></tr>
<tr><td>工具正在保存</td><td>-722</td><td>TBN_SAVE</td><td>通知工具栏的父窗口正在保存工具栏。 </td></tr>
<tr><td>工具定义开始</td><td>-723</td><td>TBN_INITCUSTOMIZE</td><td>通知工具栏的父窗口自定义已开始。</td></tr>
<tr><td>工具热项要改</td><td>-724</td><td>TBN_WRAPHOTITEM</td><td>使用两个或多个工具栏通知应用程序热项即将更改。</td></tr>
<tr><td>工具查快捷键</td><td>-725</td><td>TBN_DUPACCELERATOR</td><td>确定加速键是否可以在两个或多个活动工具栏上使用。</td></tr>
<tr><td>工具快捷序号</td><td>-726</td><td>TBN_WRAPACCELERATORA</td><td>请求与指定快捷键字符对应的一个或多个工具栏中的按钮索引。</td></tr>
<tr><td>工具拖动显示</td><td>-727</td><td>TBN_DRAGOVER</td><td>确定是否应为拖动的按钮发送突出显示消息。</td></tr>
<tr><td>工具快捷索引</td><td>-728</td><td>TBN_MAPACCELERATORW</td><td>请求工具栏中对应于指定快捷键字符的按钮的索引。</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>工具启用按钮</td><td>0x401</td><td>TB_ENABLEBUTTON</td><td>启用或禁用工具栏中的指定按钮。③参数:标识;④数据:假=禁用,真=启用</td></tr>
<tr><td>工具选择按钮</td><td>0x402</td><td>TB_CHECKBUTTON</td><td>选中或取消选中工具栏中的给定按钮。③参数:标识;④数据:假=不检查,真=检查</td></tr>
<tr><td>工具按下按钮</td><td>0x403</td><td>TB_PRESSBUTTON</td><td>按下或释放工具栏中的指定按钮。③参数:标识;④数据:假=释放,真=按下</td></tr>
<tr><td>工具隐藏按钮</td><td>0x404</td><td>TB_HIDEBUTTON</td><td>隐藏或显示工具栏中的指定按钮。③参数:标识;④数据:假=显示,真=隐藏</td></tr>
<tr><td>工具不明按钮</td><td>0x405</td><td>TB_INDETERMINATE</td><td>设置或清除工具栏中指定按钮的不确定状态。③参数:标识;④数据:假=清除,真=不确定(暗灰)</td></tr>
<tr><td>工具突出按钮</td><td>0x406</td><td>TB_MARKBUTTON</td><td>设置工具栏控件中给定按钮的突出显示状态。③参数:标识;④数据:假=平常,真=突出</td></tr>
<tr><td>工具按钮可用</td><td>0x409</td><td>TB_ISBUTTONENABLED</td><td>确定工具栏中的指定按钮是否已启用。③参数:标识;④数据:0</td></tr>
<tr><td>工具按钮已选</td><td>0x40A</td><td>TB_ISBUTTONCHECKED</td><td>确定是否选中工具栏中的指定按钮。③参数:标识;④数据:0</td></tr>
<tr><td>工具按钮按下</td><td>0x40B</td><td>TB_ISBUTTONPRESSED</td><td>确定是否按下工具栏中的指定按钮。③参数:标识;④数据:0</td></tr>
<tr><td>工具按钮隐藏</td><td>0x40C</td><td>TB_ISBUTTONHIDDEN</td><td>确定是否隐藏工具栏中的指定按钮。③参数:标识;④数据:0</td></tr>
<tr><td>工具按钮不明</td><td>0x40D</td><td>TB_ISBUTTONINDETERMINATE</td><td>确定工具栏中的指定按钮是否不确定。③参数:标识;④数据:0</td></tr>
<tr><td>工具按钮突出</td><td>0x40E</td><td>TB_ISBUTTONHIGHLIGHTED</td><td>检查工具栏按钮的突出显示状态。③参数:标识;④数据:0</td></tr>
<tr><td>工具设置状态</td><td>0x411</td><td>TB_SETSTATE</td><td>设置工具栏中指定按钮的状态。③参数:标识;④数据:1选中,2按下,4可用,8隐藏,16灰显,32换行,64省略号,128标记</td></tr>
<tr><td>工具获取状态</td><td>0x412</td><td>TB_GETSTATE</td><td>检索有关工具栏中指定按钮是启用、按下还是选中。③参数:标识;④数据:0</td></tr>
<tr><td>工具添加图像</td><td>0x413</td><td>TB_ADDBITMAP</td><td>将一个或多个图像添加到按钮图像列表中。③参数:数量;④数据:<a href="#工具图像类">工具图像类</a></td></tr>
<tr><td>工具添加按钮</td><td>0x414</td><td>TB_ADDBUTTONSA</td><td>将一个或多个按钮添加到工具栏。③参数:数量;④数据:<a href="#工具按钮类">工具按钮类</a></td></tr>
<tr><td>工具插入按钮</td><td>0x415</td><td>TB_INSERTBUTTONA</td><td>在工具栏中插入按钮。③参数:序号;④数据:<a href="#工具按钮类">工具按钮类</a></td></tr>
<tr><td>工具删除按钮</td><td>0x416</td><td>TB_DELETEBUTTON</td><td>从工具栏中删除按钮。③参数:序号;④数据:0</td></tr>
<tr><td>工具获取按钮</td><td>0x417</td><td>TB_GETBUTTON</td><td>检索有关工具栏中指定按钮的信息。③参数:序号;④数据:<a href="#工具按钮类">工具按钮类</a></td></tr>
<tr><td>工具按钮数量</td><td>0x418</td><td>TB_BUTTONCOUNT</td><td>检索工具栏中当前按钮的计数。③参数:0;④数据:0</td></tr>
<tr><td>工具按钮序号</td><td>0x419</td><td>TB_COMMANDTOINDEX</td><td>检索与指定命令标识符关联的按钮的序号。③参数:标识;④数据:0</td></tr>
<tr><td>工具保存状态</td><td>0x41A</td><td>TB_SAVERESTOREA</td><td>启动保存或还原工具栏状态。③参数:真=保存,假=还原;④数据:<a href="#工具保存类">工具保存类</a></td></tr>
<tr><td>工具自定义框</td><td>0x41B</td><td>TB_CUSTOMIZE</td><td>显示“自定义工具栏”对话框。③参数:0;④数据:0</td></tr>
<tr><td>工具添加字符</td><td>0x41C</td><td>TB_ADDSTRINGA</td><td>将新字符串添加到工具栏的字符串池。③参数:0=字符串,实例=资源;④数据:资源标识或字符数组</td></tr>
<tr><td>工具按钮边框</td><td>0x41D</td><td>TB_GETITEMRECT</td><td>检索工具栏中按钮的边框。③参数:序号;④数据:矩形类</td></tr>
<tr><td>工具结构大小</td><td>0x41E</td><td>TB_BUTTONSTRUCTSIZE</td><td>指定 <a href="#工具按钮类">工具按钮类</a>的大小。③参数:大小;④数据:0</td></tr>
<tr><td>工具按钮大小</td><td>0x41F</td><td>TB_SETBUTTONSIZE</td><td>设置工具栏上按钮的大小。③参数:0;④数据:宽高各16位</td></tr>
<tr><td>工具图像大小</td><td>0x420</td><td>TB_SETBITMAPSIZE</td><td>设置要添加到工具栏的位图图像的大小。③参数:0;④数据:宽高各16位</td></tr>
<tr><td>工具自动调整</td><td>0x421</td><td>TB_AUTOSIZE</td><td>导致调整工具栏的大小。③参数:0;④数据:0</td></tr>
<tr><td>工具获取提示</td><td>0x423</td><td>TB_GETTOOLTIPS</td><td>检索与工具栏关联的工具提示控件的句柄。③参数:0;④数据:0</td></tr>
<tr><td>工具设置提示</td><td>0x424</td><td>TB_SETTOOLTIPS</td><td>将工具提示控件与工具栏相关联。③参数:控件;④数据:0</td></tr>
<tr><td>工具设置父窗</td><td>0x425</td><td>TB_SETPARENT</td><td>设置工具栏控件向其发送通知消息的窗口。③参数:窗口;④数据:0</td></tr>
<tr><td>工具设置行数</td><td>0x427</td><td>TB_SETROWS</td><td>设置工具栏中按钮的行数。③参数:低16位行数,高位真=可超行;④数据:矩形(改后边框)</td></tr>
<tr><td>工具获取行数</td><td>0x428</td><td>TB_GETROWS</td><td>获取工具栏中按钮的行数。③参数:0;④数据:0</td></tr>
<tr><td>工具设置标识</td><td>0x42A</td><td>TB_SETCMDID</td><td>设置工具栏按钮的命令标识符。③参数:序号;④数据:标识</td></tr>
<tr><td>工具更换图像</td><td>0x42B</td><td>TB_CHANGEBITMAP</td><td>更改工具栏中按钮的位图。③参数:标识;④数据:图像序号</td></tr>
<tr><td>工具图像序号</td><td>0x42C</td><td>TB_GETBITMAP</td><td>检索与工具栏中的按钮关联的位图的索引。③参数:标识;④数据:0</td></tr>
<tr><td>工具按钮文本</td><td>0x42D</td><td>TB_GETBUTTONTEXTA</td><td>检索工具栏上按钮的显示文本。③参数:标识;④数据:内容</td></tr>
<tr><td>工具替换图像</td><td>0x42E</td><td>TB_REPLACEBITMAP</td><td>将现有位图替换为新位图。③参数:0;④数据:<a href="#工具替换类">工具替换类</a></td></tr>
<tr><td>工具设置缩进</td><td>0x42F</td><td>TB_SETINDENT</td><td>设置工具栏控件中第一个按钮的缩进。③参数:像素值;④数据:0</td></tr>
<tr><td>工具设置图表</td><td>0x430</td><td>TB_SETIMAGELIST</td><td>设置工具栏按钮的图像列表。③参数:0序号;④数据:图像列表</td></tr>
<tr><td>工具获取图表</td><td>0x431</td><td>TB_GETIMAGELIST</td><td>获取工具栏按钮的图像列表。③参数:0;④数据:0</td></tr>
<tr><td>工具加载图表</td><td>0x432</td><td>TB_LOADIMAGES</td><td>加载系统定义的图像列表。③参数:0标准小图,1标准大图,<a href="#系统图表">系统图像列表</a>;④数据:-1;</td></tr>
<tr><td>工具获取边框</td><td>0x433</td><td>TB_GETRECT</td><td>检索指定工具栏按钮的边框。③参数:标识;④数据:矩形</td></tr>
<tr><td>工具设置热图</td><td>0x434</td><td>TB_SETHOTIMAGELIST</td><td>设置工具栏显示热按钮的图像列表。③参数:0;④数据:图像列表</td></tr>
<tr><td>工具获取热图</td><td>0x435</td><td>TB_GETHOTIMAGELIST</td><td>获取工具栏显示热按钮的图像列表。③参数:0;④数据:0</td></tr>
<tr><td>工具设置禁图</td><td>0x436</td><td>TB_SETDISABLEDIMAGELIST</td><td>设置工具栏显示禁用按钮的图像列表。③参数:0;④数据:图表</td></tr>
<tr><td>工具获取禁图</td><td>0x437</td><td>TB_GETDISABLEDIMAGELIST</td><td>检索工具栏显示非活动按钮的图像列表。③参数:0;④数据:0</td></tr>
<tr><td>工具设置样式</td><td>0x438</td><td>TB_SETSTYLE</td><td>设置工具栏控件的样式。③参数:0;④数据:样式</td></tr>
<tr><td>工具获取样式</td><td>0x439</td><td>TB_GETSTYLE</td><td>获取工具栏控件的样式。③参数:0;④数据:0</td></tr>
<tr><td>工具按钮宽高</td><td>0x43A</td><td>TB_GETBUTTONSIZE</td><td>检索工具栏按钮当前的大小。③参数:0;④数据:0</td></tr>
<tr><td>工具按钮宽度</td><td>0x43B</td><td>TB_SETBUTTONWIDTH</td><td>设置工具栏控件中的最小和最大按钮宽度。③参数:0;④数据:最小/最大</td></tr>
<tr><td>工具限最多行</td><td>0x43C</td><td>TB_SETMAXTEXTROWS</td><td>设置工具栏按钮上显示的文本行的最大数量。③参数:行数;④数据:0</td></tr>
<tr><td>工具取最多行</td><td>0x43D</td><td>TB_GETTEXTROWS</td><td>检索工具栏按钮上可显示的最大文本行数。③参数:0;④数据:0</td></tr>
<tr><td>工具获取对象</td><td>0x43E</td><td>TB_GETOBJECT</td><td>检索工具栏控件的<a name="拖放目标对象">拖放目标对象</a>。③参数:拖放标识;④数据:@接口</td></tr>
<tr><td>工具获取信息</td><td>0x43F</td><td>TB_GETBUTTONINFOW</td><td>检索工具栏中的现有按钮的信息。③参数:标识;④数据:<a href="#工具信息类">工具信息类</a></td></tr>
<tr><td>工具设置信息</td><td>0x440</td><td>TB_SETBUTTONINFOW</td><td>设置工具栏中的现有按钮的信息。③参数:标识;④数据:<a href="#工具信息类">工具信息类</a></td></tr>
<tr><td>工具读取信息</td><td>0x441</td><td>TB_GETBUTTONINFOA</td><td>检索工具栏中的现有按钮的信息。③参数:标识;④数据:<a href="#工具信息类">工具信息类</a></td></tr>
<tr><td>工具修改信息</td><td>0x442</td><td>TB_SETBUTTONINFOA</td><td>设置工具栏中的现有按钮的信息。③参数:标识;④数据:<a href="#工具信息类">工具信息类</a></td></tr>
<tr><td>工具按钮插入</td><td>0x443</td><td>TB_INSERTBUTTONW</td><td>在工具栏中插入按钮。③参数:序号;④数据:<a href="#工具按钮类">工具按钮类</a></td></tr>
<tr><td>工具按钮添加</td><td>0x444</td><td>TB_ADDBUTTONSA</td><td>将一个或多个按钮添加到工具栏。③参数:数量;④数据:<a href="#工具按钮类">工具按钮类</a></td></tr>
<tr><td>工具获取点位</td><td>0x445</td><td>TB_HITTEST</td><td>确定某个点在工具栏控件中的位置。③参数:0;④数据:坐标类;返回负数不在按钮内,否则是按钮索引</td></tr>
<tr><td>工具绘制标志</td><td>0x446</td><td>TB_SETDRAWTEXTFLAGS</td><td>设置工具栏的文本绘制标志。③参数:DT_位标志;④数据:DT_方式标志</td></tr>
<tr><td>工具获取热项</td><td>0x447</td><td>TB_GETHOTITEM</td><td>检索工具栏中热项的索引。③参数:0;④数据:0</td></tr>
<tr><td>工具设置热项</td><td>0x448</td><td>TB_SETHOTITEM</td><td>设置工具栏中的热项。③参数:序号,-1取消;④数据:0</td></tr>
<tr><td>工具设置突出</td><td>0x449</td><td>TB_SETANCHORHIGHLIGHT</td><td>设置工具栏的定位点突出显示设置。③参数:真=启用,假=禁用;④数据:0</td></tr>
<tr><td>工具获取突出</td><td>0x44A</td><td>TB_GETANCHORHIGHLIGHT</td><td>检索工具栏的定位点突出显示设置。③参数:0;④数据:0</td></tr>
<tr><td>工具按钮文字</td><td>0x44B</td><td>TB_GETBUTTONTEXTW</td><td>检索工具栏上按钮的显示文本。③参数:标识;④数据:内容</td></tr>
<tr><td>工具保存还原</td><td>0x44C</td><td>TB_SAVERESTOREW</td><td>启动保存或还原工具栏状态。③参数:真=保存,假=还原;④数据:<a href="#工具保存类">工具保存类</a></td></tr>
<tr><td>工具添加字组</td><td>0x44D</td><td>TB_ADDSTRINGW</td><td>将新字符串添加到工具栏的字符串池。③参数:0=字符串,实例=资源;④数据:资源标识或字符数组</td></tr>
<tr><td>工具快捷键号</td><td>0x44E</td><td>TB_MAPACCELERATORA</td><td>确定对应于指定加速键字符的按钮的编号。③参数:快捷键;④数据:@编号</td></tr>
<tr><td>工具获取标记</td><td>0x44F</td><td>TB_GETINSERTMARK</td><td>检索工具栏的当前插入标记。③参数:0;④数据:<a href="#工具标记类">工具标记类</a></td></tr>
<tr><td>工具设置标记</td><td>0x450</td><td>TB_SETINSERTMARK</td><td>设置工具栏的当前插入标记。③参数:0;④数据:<a href="#工具标记类">工具标记类</a></td></tr>
<tr><td>工具取点标记</td><td>0x451</td><td>TB_INSERTMARKHITTEST</td><td>检索工具栏中点的插入标记信息。③参数:坐标类;④数据:<a href="#工具标记类">工具标记类</a></td></tr>
<tr><td>工具移动按钮</td><td>0x452</td><td>TB_MOVEBUTTON</td><td>将按钮从一个索引移到另一个索引。③参数:原序号;④数据:新序号</td></tr>
<tr><td>工具总体大小</td><td>0x453</td><td>TB_GETMAXSIZE</td><td>检索工具栏中所有可见的按钮和分隔符的总大小。③参数:0;④数据:尺寸类</td></tr>
<tr><td>工具设置扩展</td><td>0x454</td><td>TB_SETEXTENDEDSTYLE</td><td>设置工具栏控件的扩展样式。③参数:0;④数据:<a href="#工具扩展">扩展样式</a></td></tr>
<tr><td>工具获取扩展</td><td>0x455</td><td>TB_GETEXTENDEDSTYLE</td><td>获取工具栏控件的扩展样式。③参数:0;④数据:0</td></tr>
<tr><td>工具获取填充</td><td>0x456</td><td>TB_GETPADDING</td><td>获取工具栏有自动大小样式的填充区域大小。③参数:0;④数据:0</td></tr>
<tr><td>工具设置填充</td><td>0x457</td><td>TB_SETPADDING</td><td>设置工具栏有自动大小样式的填充区域大小。③参数:0;④数据:宽/高</td></tr>
<tr><td>工具改标记色</td><td>0x458</td><td>TB_SETINSERTMARKCOLOR</td><td>设置用于绘制工具栏的插入标记的颜色。③参数:0;④数据:颜色</td></tr>
<tr><td>工具取标记色</td><td>0x459</td><td>TB_GETINSERTMARKCOLOR</td><td>检索用于绘制工具栏的插入标记的颜色。③参数:0;④数据:0</td></tr>
<tr><td>工具快捷编号</td><td>0x45A</td><td>TB_MAPACCELERATORW</td><td>确定对应于指定加速键字符的按钮的编号。③参数:快捷键;④数据:@编号</td></tr>
<tr><td>工具获取文本</td><td>0x45B</td><td>TB_GETSTRINGW</td><td>从工具栏的字符串池中检索字符串。③参数:长度/序号;④数据:内容</td></tr>
<tr><td>工具获取文字</td><td>0x45C</td><td>TB_GETSTRINGA</td><td>从工具栏的字符串池中检索字符串。③参数:长度/序号;④数据:内容</td></tr>
<tr><td>工具多列边界</td><td>0x45D</td><td>TB_SETBOUNDINGSIZE</td><td>设置多列工具栏控件的边界大小。③参数:0;④数据:尺寸类(忽略宽度)</td></tr>
<tr><td>工具修改热项</td><td>0x45E</td><td>TB_SETHOTITEM2</td><td>设置工具栏中的热项。③参数:序号,-1取消;④数据:<a href="#工具热改">热项修改标志</a></td></tr>
<tr><td>工具快捷计数</td><td>0x45F</td><td>TB_HASACCELERATOR</td><td>检索具有指定快捷键字符的工具栏按钮计数。③参数:键字;④数据:@计数</td></tr>
<tr><td>工具设置间距</td><td>0x460</td><td>TB_SETLISTGAP</td><td>设置特定工具栏上的工具栏按钮之间的距离。③参数:像素值;④数据:0</td></tr>
<tr><td>工具取图表数</td><td>0x462</td><td>TB_GETIMAGELISTCOUNT</td><td>获取与工具栏关联的图像列表数。③参数:0;④数据:0</td></tr>
<tr><td>工具理想大小</td><td>0x463</td><td>TB_GETIDEALSIZE</td><td>获取工具栏的理想大小。③参数:真=高度,假=宽度;④数据:尺寸类</td></tr>
<tr><td>工具获取指标</td><td>0x465</td><td>TB_GETMETRICS</td><td>检索工具栏控件的指标。③参数:0;④数据:<a href="#工具指标类">工具指标类</a></td></tr>
<tr><td>工具设置指标</td><td>0x466</td><td>TB_SETMETRICS</td><td>设置工具栏控件的指标。③参数:0;④数据:<a href="#工具指标类">工具指标类</a></td></tr>
<tr><td>工具下拉边框</td><td>0x467</td><td>TB_GETITEMDROPDOWNRECT</td><td>获取具有下拉样式的工具栏项的下拉窗口边框。③参数:序号;④数据:边框</td></tr>
<tr><td>工具设置按图</td><td>0x468</td><td>TB_SETPRESSEDIMAGELIST</td><td>设置工具栏按下状态的按钮的图像列表。③参数:0;④数据:图表</td></tr>
<tr><td>工具获取按图</td><td>0x469</td><td>TB_GETPRESSEDIMAGELIST</td><td>获取工具栏按下状态的按钮的图像列表。③参数:0;④数据:0</td></tr>
<tr><td>控件设置配色</td><td>0x2002</td><td>CCM_SETCOLORSCHEME</td><td>此消息用于设置控件的颜色配置。③参数:0;④数据:COLORSCHEME;</td></tr>
<tr><td>控件获取配色</td><td>0x2003</td><td>CCM_GETCOLORSCHEME</td><td>此消息用于获取控件的颜色配置。③参数:0;④数据:COLORSCHEME;</td></tr>
<tr><td>控件设置宽字</td><td>0x2005</td><td>CCM_SETUNICODEFORMAT</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>0x2006</td><td>CCM_GETUNICODEFORMAT</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
<tr><td>控件设置样式</td><td>0x200B</td><td>CCM_SETWINDOWTHEME</td><td>此消息用于设置控件的视觉样式。③参数:0;④数据:样式（宽字符）;</td></tr>
<tr><td>控件启用缩放</td><td>0x200C</td><td>CCM_DPISCALE</td><td>树表、表格、强组合框、标题、按钮、工具栏、动画启用dpi缩放。③参数:真;④数据:0;</td></tr>
</table><p><font size="6">工具栏——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>顶部左侧</td><td>CCS_TOP</td><td>1</td><td>使控件自身位于父窗口工作区的顶部，并将宽度设置为与父窗口的宽度相同。 默认情况下，工具栏具有此样式。</td></tr>
<tr><td>缩放调整</td><td>CCS_NOMOVEY</td><td>2</td><td>导致控件在响应 WM_SIZE 消息时水平（而不是垂直）调整大小并移动自身。 如果使用CCS_NORESIZE，则此样式不适用。 默认情况下，标题窗口具有此样式。</td></tr>
<tr><td>底部右侧</td><td>CCS_BOTTOM</td><td>3</td><td>使控件将自身定位在父窗口工作区的底部，并将宽度设置为与父窗口的宽度相同。 默认情况下，状态窗口具有此样式。</td></tr>
<tr><td>禁止缩放</td><td>CCS_NORESIZE</td><td>4</td><td>防止控件在设置其初始大小或新大小时使用默认宽度和高度。 相反，控件使用在创建或调整大小的请求中指定的宽度和高度。</td></tr>
<tr><td>自由位置</td><td>CCS_NOPARENTALIGN</td><td>8</td><td>防止控件自动移动到父窗口的顶部或底部。 相反，控件会将其位置保留在父窗口中，尽管更改了父窗口的大小。<br> 如果还使用了CCS_TOP或CCS_BOTTOM，则会将高度调整为默认值，但位置和宽度保持不变。</td></tr>
<tr><td>拖动调整</td><td>CCS_ADJUSTABLE</td><td>0x20</td><td>启用工具栏的内置自定义功能，使用户能够将按钮拖动到新位置，或通过将按钮从工具栏上拖动来删除按钮。<br>此外，用户可以双击工具栏以显示“ 自定义工具栏 ”对话框，使用户能够添加、删除和重新排列工具栏按钮。</td></tr>
<tr><td>禁止突显</td><td>CCS_NODIVIDER</td><td>0x40</td><td>防止在控件顶部绘制双像素的突出显示。</td></tr>
<tr><td>垂直显示</td><td>CCS_VERT</td><td>0x80</td><td>版本 4.70。 使控件垂直显示。</td></tr>
<tr><td>垂直左侧</td><td>CCS_LEFT</td><td>0x81</td><td>版本 4.70。 使控件垂直显示在父窗口的左侧。</td></tr>
<tr><td>垂直缩放</td><td>CCS_NOMOVEX</td><td>0x82</td><td>版本 4.70。 导致控件调整大小并垂直移动自身，而不是水平移动，以响应 WM_SIZE 消息。 如果使用CCS_NORESIZE，则此样式不适用。</td></tr>
<tr><td>垂直右侧</td><td>CCS_RIGHT</td><td>0x83</td><td>版本 4.70。 使控件垂直显示在父窗口的右侧。</td></tr>
<tr><td>提示文本</td><td>TBSTYLE_TOOLTIPS</td><td>0x100</td><td>创建一个工具提示控件，应用程序可以使用该控件显示工具栏中按钮的描述性文本。</td></tr>
<tr><td>多行按钮</td><td>TBSTYLE_WRAPABLE</td><td>0x200</td><td>创建可以包含多行按钮的工具栏。</td></tr>
<tr><td>Alt拖动</td><td>TBSTYLE_ALTDRAG</td><td>0x400</td><td>按住 Alt 键的同时拖动工具栏按钮来更改工具栏按钮的位置。否则拖动按钮时按住 Shift 键。</td></tr>
<tr><td>平面效果</td><td>TBSTYLE_FLAT</td><td>0x800</td><td>创建平面工具栏。在平面工具栏中，工具栏和按钮都是透明的，并且已启用热跟踪。</td></tr>
<tr><td>文本置右</td><td>TBSTYLE_LIST</td><td>0x1000</td><td>创建一个平面工具栏，其按钮文本在位图右侧。</td></tr>
<tr><td>自绘通知</td><td>TBSTYLE_CUSTOMERASE</td><td>0x2000</td><td>当工具栏处理 擦除背景 消息时，生成 自绘控件 通知代码。</td></tr>
<tr><td>支持拖放</td><td>TBSTYLE_REGISTERDROP</td><td>0x4000</td><td>生成 获取对象 通知代码，以在光标经过工具栏按钮时请求放置目标对象。</td></tr>
<tr><td>背景透明</td><td>TBSTYLE_TRANSPARENT</td><td>0x8000</td><td> 创建透明工具栏。在透明工具栏中，工具栏是透明的，但按钮不是。</td></tr>
</table><p><font size="6"><a name="系统图表">工具栏</a>——系统定义的按钮图像列表：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>IDB_STD_SMALL_COLOR</td><td>0</td><td>小的彩色标准位图。</td></tr>
<tr><td>IDB_STD_LARGE_COLOR</td><td>1</td><td>大型彩色标准位图。</td></tr>
<tr><td>IDB_VIEW_SMALL_COLOR</td><td>4</td><td>小的颜色视图位图。</td></tr>
<tr><td>IDB_VIEW_LARGE_COLOR</td><td>5</td><td>大的颜色视图位图。</td></tr>
<tr><td>IDB_HIST_SMALL_COLOR</td><td>8</td><td>小尺寸的 Windows 资源管理器位图。</td></tr>
<tr><td>IDB_HIST_LARGE_COLOR</td><td>9</td><td>大尺寸的 Windows 资源管理器位图。</td></tr>
<tr><td>IDB_HIST_NORMAL</td><td>12</td><td>处于正常状态的 Windows 资源管理器旅行按钮和收藏夹位图。</td></tr>
<tr><td>IDB_HIST_HOT</td><td>13</td><td>处于热状态的 Windows 资源管理器旅行按钮和收藏夹位图。</td></tr>
<tr><td>IDB_HIST_DISABLED</td><td>14</td><td>处于禁用状态的 Windows 资源管理器旅行按钮和收藏夹位图。</td></tr>
<tr><td>IDB_HIST_PRESSED</td><td>15</td><td>处于按下状态的 Windows 资源管理器旅行按钮和收藏夹位图。</td></tr>
</table><p><font size="6"><a name="标准图片">工具栏</a>——标准小图和标准大图：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>STD_CUT</td><td>0</td><td>剪切操作。</td></tr>
<tr><td>STD_COPY</td><td>1</td><td>复制操作。</td></tr>
<tr><td>STD_PASTE</td><td>2</td><td>粘贴操作。</td></tr>
<tr><td>STD_UNDO</td><td>3</td><td>撤消操作。</td></tr>
<tr><td>STD_REDOW</td><td>4</td><td>恢复操作。</td></tr>
<tr><td>STD_DELETE</td><td>5</td><td>删除操作。</td></tr>
<tr><td>STD_FILENEW</td><td>6</td><td>新建文件操作。</td></tr>
<tr><td>STD_FILEOPEN</td><td>7</td><td>打开文件操作。</td></tr>
<tr><td>STD_FILESAVE</td><td>8</td><td>保存文件操作。</td></tr>
<tr><td>STD_PRINTPRE</td><td>9</td><td>打印预览操作。</td></tr>
<tr><td>STD_PROPERTIES</td><td>10</td><td>属性操作。</td></tr>
<tr><td>STD_HELP</td><td>11</td><td>帮助操作。</td></tr>
<tr><td>STD_FIND</td><td>12</td><td>查找操作。</td></tr>
<tr><td>STD_REPLACE</td><td>13</td><td>替换操作。</td></tr>
<tr><td>STD_PRINT</td><td>14</td><td>打印操作。</td></tr>
</table><p><font size="6"><a name="视窗图片">工具栏</a>——视窗小图和视窗大图：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>VIEW_LARGEICONS</td><td>0</td><td>大图标视图。</td></tr>
<tr><td>VIEW_SMALLICONS</td><td>1</td><td>小图标视图。</td></tr>
<tr><td>VIEW_LIST</td><td>2</td><td>列表视图。</td></tr>
<tr><td>VIEW_DETAILS</td><td>3</td><td>详细信息视图。</td></tr>
<tr><td>VIEW_SORTNAME</td><td>4</td><td>按名称排序。</td></tr>
<tr><td>VIEW_SORTSIZE</td><td>5</td><td>按大小排序。</td></tr>
<tr><td>VIEW_SORTDATE</td><td>6</td><td>按日期排序。</td></tr>
<tr><td>VIEW_SORTTYPE</td><td>7</td><td按类型排序。</td></tr>
<tr><td>VIEW_PARENTFOLDER</td><td>8</td><td>转到父文件夹。</td></tr>
<tr><td>VIEW_NETCONNECT</td><td>9</td><td>连接到网络驱动器。</td></tr>
<tr><td>VIEW_NETDISCONNECT</td><td>10</td><td>断开与网络驱动器的连接。</td></tr>
<tr><td>VIEW_NEWFOLDER</td><td>11</td><td>新建文件夹。</td></tr>
<tr><td>VIEW_VIEWMENU</td><td>12</td><td>菜单视图</td></tr>
</table><p><font size="6"><a name="文件图片">工具栏</a>——文件资源管理器小图和资源管理器大图：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>HIST_BACK</td><td>0</td><td>退后。</td></tr>
<tr><td>HIST_FORWARD</td><td>1</td><td>前进。</td></tr>
<tr><td>HIST_FAVORITES</td><td>2</td><td>打开收藏夹文件夹。</td></tr>
<tr><td>HIST_ADDTOFAVORITES</td><td>3</td><td>释义</td></tr>
<tr><td>HIST_VIEWTREE</td><td>4</td><td>视图树。</td></tr>
</table><p><font size="6"><a name="工具扩展">工具栏</a>——扩展样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>TBSTYLE_EX_DRAWDDARROWS</td><td>1</td><td>允许按钮具有单独的下拉箭头。指定"下拉按钮"样式</td></tr>
<tr><td>TBSTYLE_EX_MULTICOLUMN</td><td>2</td><td>为工具栏提供垂直方向，并将工具栏按钮组织成列。</td></tr>
<tr><td>TBSTYLE_EX_VERTICAL</td><td>4</td><td>为工具栏提供垂直方向。 工具栏按钮从上到下流动，而不是水平排列。</td></tr>
<tr><td>TBSTYLE_EX_MIXEDBUTTONS</td><td>8</td><td>允许你为所有按钮设置文本，未显示在按钮上的文本将自动用作按钮的工具提示文本。</td></tr>
<tr><td>TBSTYLE_EX_HIDECLIPPEDBUTTONS</td><td>0x10</td><td>隐藏部分剪辑的按钮。 如果相邻的带区覆盖按钮的一部分，则不会显示该按钮。 </td></tr>
<tr><td>TBSTYLE_EX_DOUBLEBUFFER</td><td>0x80</td><td>对工具栏进行双重缓冲。 双重缓冲是一种检测工具栏何时更改的机制。</td></tr>
</table><p><font size="6"><a name="工具热改">工具栏</a>——热项修改原因标志：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>HICF_OTHER</td><td>0</td><td>热项中的更改是由于无法确定的事件导致的。 </td></tr>
<tr><td>HICF_MOUSE</td><td>1</td><td>热项中的更改由鼠标事件导致。</td></tr>
<tr><td>HICF_ARROWKEYS</td><td>2</td><td>热项中的更改是由箭头键引起的。</td></tr>
<tr><td>HICF_ACCELERATOR</td><td>4</td><td>热项中的更改是由快捷键引起的。</td></tr>
<tr><td>HICF_DUPACCEL</td><td>8</td><td>多个项具有相同的快捷键字符。</td></tr>
<tr><td>HICF_ENTERING</td><td>0x10</td><td>设置了此标志，则不存在以前的热项</td></tr>
<tr><td>HICF_LEAVING</td><td>0x20</td><td>设置了此标志，则不存在新的热项</td></tr>
<tr><td>HICF_RESELECT</td><td>0x40</td><td>热项中的更改是由于用户输入已热项的快捷键导致的。</td></tr>
<tr><td>HICF_LMOUSE</td><td>0x80</td><td>热项中的更改是左键单击鼠标事件导致的。</td></tr>
<tr><td>HICF_TOGGLEDROPDOWN</td><td>0x100</td><td>版本 5.80。使按钮切换状态。</td></tr>
</table><p><font size="6"><a name="工具样式">工具栏</a>——按钮样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>标准按钮</td><td>TBSTYLE_BUTTON</td><td>0</td><td>创建标准按钮。</td></tr>
<tr><td>是分隔条</td><td>TBSTYLE_SEP</td><td>1</td><td>创建一个分隔符，在按钮组之间提供小间隔。</td></tr>
<tr><td>复选按钮</td><td>TBSTYLE_CHECK</td><td>2</td><td>创建一个双状态推送按钮，该按钮在用户每次单击时在按下状态和非按下状态之间切换。</td></tr>
<tr><td>分组单选</td><td>TBSTYLE_GROUP</td><td>4</td><td>创建一个保持按下状态的按钮，直到按下组中的另一个按钮。</td></tr>
<tr><td>下拉按钮</td><td>TBSTYLE_DROPDOWN</td><td>8</td><td>创建可在单击按钮时显示列表的下拉样式按钮。</td></tr>
<tr><td>自动适应</td><td>TBSTYLE_AUTOSIZE</td><td>0x10</td><td>指定工具栏控件不应为按钮分配标准宽度。 相反，按钮的宽度将基于文本宽度加上按钮的图像计算。</td></tr>
<tr><td>不处理&符</td><td>TBSTYLE_NOPREFIX</td><td>0x20</td><td>指定按钮文本将不具有与之关联的加速键前缀。</td></tr>
<tr><td>标准按钮</td><td>BTNS_BUTTON</td><td>0</td><td>版本 5.80。创建标准按钮。此标志定义为 0，应用于表示未设置其他标志。</td></tr>
<tr><td>是分隔条</td><td>BTNS_SEP</td><td>1</td><td>版本 5.80。 创建一个分隔符，在按钮组之间提供小间隔。 具有此样式的按钮不接收用户输入。</td></tr>
<tr><td>复选按钮</td><td>BTNS_CHECK</td><td>2</td><td>版本 5.80。 创建一个双状态推送按钮，该按钮在用户每次单击时在按下状态和非按下状态之间切换。 按钮处于按下状态时具有不同的背景色。</td></tr>
<tr><td>分组单选</td><td>BTNS_GROUP</td><td>4</td><td>版本 5.80。 与 BTNS_CHECK 结合使用时，创建一个保持按下状态的按钮，直到按下组中的另一个按钮。</td></tr>
<tr><td>分组复选</td><td>BTNS_CHECKGROUP</td><td>6</td><td>版本 5.80。 创建一个在按下组中另一个按钮之前保持按下状态的按钮，类似于选项按钮 (也称为单选按钮) 。</td></tr>
<tr><td>下拉按钮</td><td>BTNS_DROPDOWN</td><td>8</td><td>版本 5.80。 创建可在单击按钮时显示列表的下拉样式按钮。 下拉按钮发送TBN_DROPDOWN通知代码，而不是用于普通按钮的 WM_COMMAND 消息。可以让通知处理程序显示选项列表。</td></tr>
<tr><td>自动适应</td><td>BTNS_AUTOSIZE</td><td>0x10</td><td>版本 5.80。指定工具栏控件不应为按钮分配标准宽度。 相反，按钮的宽度将基于文本宽度加上按钮的图像计算。</td></tr>
<tr><td>不处理&符</td><td>BTNS_NOPREFIX</td><td>0x20</td><td>版本 5.80。 指定按钮文本将不具有与之关联的加速键前缀。</td></tr>
<tr><td>显示文本</td><td>BTNS_SHOWTEXT</td><td>0x40</td><td>版本 5.80。指定应显示按钮文本。否则当光标悬停在按钮上时，工具栏控件将自动将其显示为工具提示。</td></tr>
<tr><td>下拉箭头</td><td>BTNS_WHOLEDROPDOWN</td><td>0x80</td><td>版本 5.80。指定按钮将具有下拉箭头，但不能作为单独的部分。</td></tr>
<tr><td>标准按钮</td><td>TBSTYLE_BUTTON</td><td>0</td><td>等效于 BTNS_BUTTON。 对 版本 4.72 及更早版本使用 TBSTYLE_BUTTON。</td></tr>
<tr><td>是分隔条</td><td>TBSTYLE_SEP</td><td>1</td><td>等效于 BTNS_SEP。 对 版本 4.72 及更早版本使用 TBSTYLE_SEP。</td></tr>
<tr><td>复选按钮</td><td>TBSTYLE_CHECK</td><td>2</td><td>等效于 BTNS_CHECK。 对 版本 4.72 及更早版本使用 TBSTYLE_CHECK。</td></tr>
<tr><td>分组单选</td><td>TBSTYLE_GROUP</td><td>4</td><td>等效于 BTNS_GROUP。 对 版本 4.72 及更早版本使用 TBSTYLE_GROUP。</td></tr>
<tr><td>分组复选</td><td>TBSTYLE_CHECKGROUP</td><td>6</td><td>等效于 BTNS_CHECKGROUP。 对 版本 4.72 及更早版本使用 TBSTYLE_CHECKGROUP。</td></tr>
<tr><td>下拉按钮</td><td>TBSTYLE_DROPDOWN</td><td>8</td><td>等效于 BTNS_DROPDOWN。 对 版本 4.72 及更早版本使用 TBSTYLE_DROPDOWN。</td></tr>
<tr><td>自动适应</td><td>TBSTYLE_AUTOSIZE</td><td>0x10</td><td>等效于 BTNS_AUTOSIZE。 对 版本 4.72 及更早版本使用 TBSTYLE_AUTOSIZE。</td></tr>
<tr><td>不处理&符</td><td>TBSTYLE_NOPREFIX</td><td>0x20</td><td>等效于 BTNS_NOPREFIX。 对 版本 4.72 及更早版本使用 TBSTYLE_NOPREFIX。</td></tr>
</table><p><font size="6"><a name="工具状态">工具栏</a>——按钮状态：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>释义</td></tr>
<tr><td>TBSTATE_CHECKED</td><td>1</td><td>选中状态</td></tr>
<tr><td>TBSTATE_PRESSED</td><td>2</td><td>按下状态</td></tr>
<tr><td>TBSTATE_ENABLED</td><td>4</td><td>可用状态</td></tr>
<tr><td>TBSTATE_HIDDEN</td><td>8</td><td>隐藏状态</td></tr>
<tr><td>TBSTATE_INDETERMINATE</td><td>0x10</td><td>灰暗状态</td></tr>
<tr><td>TBSTATE_WRAP</td><td>0x20</td><td>按钮后跟换行符。</td></tr>
<tr><td>TBSTATE_ELLIPSES</td><td>0x40</td><td>按钮的文本被截断，并显示省略号。</td></tr>
<tr><td>TBSTATE_MARKED</td><td>0x80</td><td>已标记按钮。标记项的解释取决于应用程序。</td></tr>
</table><font size="6"><a name="工具按钮类">工具按钮类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具按钮类</td><td>TBBUTTON</td><td>20</td><td>包含有关工具栏中的按钮的信息。</td></tr>
<tr><th colspan=4>工具按钮类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>图像</td><td>iBitmap</td><td>整数</td><td>按钮图像的从零开始的索引。</td></tr>
<tr><td>标识</td><td>idCommand</td><td>整数</td><td>与按钮关联的命令标识符。用于 WM_COMMAND 消息中。</td></tr>
<tr><td>状态</td><td>fsState</td><td>字节</td><td>按钮状态标志。<a href="#工具状态">工具栏按钮状态</a>列出的值的组合。</td></tr>
<tr><td>风格</td><td>fsStyle</td><td>字节</td><td>按钮样式标志。<a href="#工具样式">工具栏按钮样式</a>列出的值的组合。</td></tr>
<tr><td>预留</td><td>bReserved</td><td>整形</td><td>预留。</td></tr>
<tr><td>数据</td><td>dwData</td><td>整数</td><td>应用程序定义的值。</td></tr>
<tr><td>文字</td><td>iString</td><td>整数</td><td>按钮字符串的从零开始的索引，或指向包含按钮文本的字符串缓冲区的指针。</td></tr>
</table><font size="6"><a name="工具信息类">工具信息类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具信息类</td><td>TBBUTTONINFO</td><td>20</td><td>包含或接收工具栏中特定按钮的信息。</td></tr>
<tr><th colspan=4>工具信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构的大小。</td></tr>
<tr><td>掩码</td><td>dwMask</td><td>整数</td><td>指示哪些成员包含有效信息的标志集。</td></tr>
<tr><td>标识</td><td>idCommand</td><td>整数</td><td>按钮的命令标识符。掩码:0x20</td></tr>
<tr><td>图像</td><td>iBitmap</td><td>整数</td><td>按钮图像的从零开始的索引。掩码:1</td></tr>
<tr><td>状态</td><td>fsState</td><td>字节</td><td>按钮状态标志。掩码:4;<a href="#工具状态">工具栏按钮状态</a>列出的值的组合。</td></tr>
<tr><td>风格</td><td>fsStyle</td><td>字节</td><td>按钮样式标志。掩码:8;<a href="#工具样式">工具栏按钮样式</a>列出的值的组合。</td></tr>
<tr><td>宽度</td><td>cx</td><td>整形</td><td>按钮的宽度（以像素为单位）。掩码:0x40</td></tr>
<tr><td>数据</td><td>lParam</td><td>整数</td><td>与按钮关联的应用程序定义值。掩码:0x10</td></tr>
<tr><td>文字</td><td>pszText</td><td>整数</td><td>包含或接收按钮文本的字符缓冲区的地址。掩码:2</td></tr>
<tr><td>长度</td><td>cchText</td><td>整数</td><td>接收按钮文本缓冲区的大小。掩码:2</td></tr>
</table><font size="6"><a name="工具保存类">工具保存类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具保存类</td><td>TBSAVEPARAMS</td><td>12</td><td>指定注册表中 保存还原 消息存储和检索工具栏状态信息的位置。</td></tr>
<tr><th colspan=4>工具保存类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>表项</td><td>hkr</td><td>整数</td><td>注册表项的句柄。</td></tr>
<tr><td>子项</td><td>pszSubKey</td><td>整数</td><td>子项名称。</td></tr>
<tr><td>值名</td><td>pszValueName</td><td>整数</td><td>值名称。</td></tr>
</table><font size="6"><a name="工具指标类">工具指标类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具指标类</td><td>TBMETRICS</td><td>32</td><td>定义用于收缩或展开工具栏项的工具栏的指标。</td></tr>
<tr><th colspan=4>工具指标类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构的大小。</td></tr>
<tr><td>掩码</td><td>dwMask</td><td>整数</td><td>获取指标的掩码。1取填充宽高,2取工具条宽高,4取间距宽高</td></tr>
<tr><td>填充宽</td><td>cxPad</td><td>整数</td><td>按钮内填充的宽度，介于内容和按钮边缘之间。</td></tr>
<tr><td>填充高</td><td>cyPad</td><td>整数</td><td>按钮内填充的高度，介于内容和按钮边缘之间。</td></tr>
<tr><td>宽度</td><td>cxBarPad</td><td>整数</td><td>工具栏的宽度。未使用。</td></tr>
<tr><td>高度</td><td>cyBarPad</td><td>整数</td><td>工具栏的高度。未使用。</td></tr>
<tr><td>间宽</td><td>cxButtonSpacing</td><td>整数</td><td>工具栏按钮之间间距的宽度。</td></tr>
<tr><td>间高</td><td>cyButtonSpacing</td><td>整数</td><td>工具栏按钮之间间距的高度。</td></tr>
</table><font size="6"><a name="工具标记类">工具标记类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具标记类</td><td>TBINSERTMARK</td><td>8</td><td>包含有关工具栏控件中插入标记的信息。</td></tr>
<tr><th colspan=4>工具标记类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>序号</td><td>iButton</td><td>整数</td><td>插入标记的从零开始的索引。如果此成员为-1，则没有插入标记。</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>定义插入标记相对于指定按钮的位置。0左侧,1右侧,2背景(仅限取点标记)</td></tr>
</table><font size="6"><a name="工具图像类">工具图像类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具图像类</td><td>TBADDBITMAP</td><td>8</td><td>将包含按钮图像的位图添加到工具栏。</td></tr>
<tr><th colspan=4>工具图像类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>实例</td><td>hInst</td><td>整数</td><td>包含包含位图资源的可执行文件的模块实例的句柄。非资源写0</td></tr>
<tr><td>标识</td><td>nID</td><td>整数</td><td>位图句柄或图像资源标识</td></tr>
</table><font size="6"><a name="工具替换类">工具替换类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具替换类</td><td>TBREPLACEBITMAP</td><td>32</td><td>将一个工具栏位图替换为另一个。</td></tr>
<tr><th colspan=4>工具替换类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>原例</td><td>hInstOld</td><td>整数</td><td>要替换的位图资源的模块实例句柄。0位图柄</td></tr>
<tr><td>原图</td><td>nIDOld</td><td>整数</td><td>要替换的位图的位图柄或资源标识。</td></tr>
<tr><td>新例</td><td>hInstNew</td><td>整数</td><td>包含新位图资源的模块实例句柄。0位图柄</td></tr>
<tr><td>新图</td><td>nIDNew</td><td>整数</td><td>新位图的位图柄或资源标识。</td></tr>
<tr><td>数量</td><td>nButtons</td><td>整数</td><td>新位图中包含的按钮图像数。 新映像的数量应与替换的图像数相同。</td></tr>
</table><font size="6"><a name="工具提示类">工具提示类</a>——结构体定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>工具提示类</td><td>NMTTDISPINFOA</td><td>108</td><td>包含用于处理 工具显示信息 通知代码的信息。</td></tr>
<tr><th colspan=4>工具替换类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>包含有关通知的其他信息的 通知类 结构。</td></tr>
<tr><td>提示</td><td>lpszText</td><td>整数</td><td>指向以 0 结尾的字符串的指针，该字符串将显示为工具提示文本。 如果 hinst 指定了实例句柄，则此成员必须是字符串资源的标识符。</td></tr>
<tr><td>内容</td><td>szText[80]</td><td>文本</td><td>接收工具提示文本的缓冲区。 应用程序可以将文本复制到此缓冲区，而不是指定字符串地址或字符串资源。</td></tr>
<tr><td>实例</td><td>hinst</td><td>整数</td><td>包含要用作工具提示文本的字符串资源的实例的句柄。 如果 提示 是工具提示文本字符串的地址，则此成员必须为 0。</td></tr>
<tr><td>标志</td><td>uFlags</td><td>整数</td><td>指示如何解释包含的 通知类 结构的 标识 成员的标志。0=标识符,1=工具的句柄,4=从右到左阅读,0x8000保留提供的信息</td></tr>
<tr><td>附加</td><td>lParam</td><td>整数</td><td>版本 4.70。 与工具关联的应用程序定义数据。</td></tr>
</table><p><font size="6"><a name="调节框">调节框</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/updown.jpg"><br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,位置=.&12,方向=.&16;<br>
判断(事件)为 控件释放鼠标{控件要释放鼠标捕捉}<br>
为 调节位置更改{位置是当前位置,向上-1,向下为1}<br>
处理窗口(窗口,控件事件,参数,数据)<br>
结束</font><br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>调节位置更改</td><td>-722</td><td>UDN_DELTAPOS</td><td>调节器控件的位置即将更改。④数据:NMUPDOWN 结构</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>调节设置范围</td><td>0x465</td><td>UDM_SETRANGE</td><td>设置上下控件范围的最小和最大位置。③参数:0;④数据:最大/最小</td></tr>
<tr><td>调节获取范围</td><td>0x466</td><td>UDM_GETRANGE</td><td>获取上下控件范围的最小和最大位置。③参数:0;④数据:0</td></tr>
<tr><td>调节设置位置</td><td>0x467</td><td>UDM_SETPOS</td><td>设置上下控件16位精度的当前位置。③参数:0;④数据:新位置</td></tr>
<tr><td>调节获取位置</td><td>0x468</td><td>UDM_GETPOS</td><td>获取上下控件16位精度的当前位置。③参数:0;④数据:0</td></tr>
<tr><td>调节设置窗口</td><td>0x469</td><td>UDM_SETBUDDY</td><td>设置上下控件的伙伴窗口。③参数:窗口;④数据:0</td></tr>
<tr><td>调节获取窗口</td><td>0x46A</td><td>UDM_GETBUDDY</td><td>获取上下控件的伙伴窗口。③参数:0;④数据:0</td></tr>
<tr><td>调节设置加速</td><td>0x46B</td><td>UDM_SETACCEL</td><td>设置上下控件的加速。③参数:数目;④数据:UDACCEL 结构的数组</td></tr>
<tr><td>调节获取加速</td><td>0x46C</td><td>UDM_GETACCEL</td><td>获取上下控件的加速。③参数:数目;④数据:UDACCEL 结构的数组</td></tr>
<tr><td>调节设置基数</td><td>0x46D</td><td>UDM_SETBASE</td><td>设置上下控件的基数。③参数:10十进制,16十六进制;④数据:0</td></tr>
<tr><td>调节获取基数</td><td>0x46E</td><td>UDM_GETBASE</td><td>获取上下控件的基数。③参数:0;④数据:0</td></tr>
<tr><td>调节设置限定</td><td>0x46F</td><td>UDM_SETRANGE32</td><td>设置上下控件的32 位范围。③参数:下限;④数据:上限</td></tr>
<tr><td>调节获取限定</td><td>0x470</td><td>UDM_GETRANGE32</td><td>获取上下控件的32 位范围。③参数:@下限;④数据:@上限;为0不获取</td></tr>
<tr><td>调节设置定位</td><td>0x471</td><td>UDM_SETPOS32</td><td>设置上下控件32位精度的当前位置。③参数:0;④数据:新位置</td></tr>
<tr><td>调节获取定位</td><td>0x472</td><td>UDM_GETPOS32</td><td>获取上下控件32位精度的当前位置。③参数:0;④数据:0</td></tr>
<tr><td>控件设置宽字</td><td>0x2005</td><td>CCM_SETUNICODEFORMAT</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>0x2006</td><td>CCM_GETUNICODEFORMAT</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
</table><p><font size="6"><a name="月历框">月历框</a>——通知消息：</font></p>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/mc-simple.png"><br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,年=.%12,月=.%14,星期=.%16,<br>
日=.%18,时=.%20,分=.%22,秒=.%24,毫秒=.%26;<br>
判断(事件)为 月历显示风格{12到28是开始日期;.&28 是数组总数;.&32 是日期状态数组地址}<br>
为 月历选择日期{12到28是选择范围中第一天的日期}<br>
为 月历选项改变{28到44是选择范围中最后一天的日期}<br>
处理窗口(窗口,控件事件,参数,数据)<br>
结束</font><br>
<font color="#FF0000">
程序段 公共事件(数据)<br>
整数 窗口=数据&,参数=.&4,事件=.&8,旧图=.&12,新图=.&16;<br>
判断(事件)为 月历视图改变{旧视图:0每月,1年度,2十年,3世纪}<br>
为 月历视图改变{新视图:0每月,1年度,2十年,3世纪}<br>
处理窗口(窗口,控件事件,参数,数据)<br>
结束</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>月历显示风格</td><td>-743</td><td>MCN_GETDAYSTATE</td><td>获取月历控件的日期显示风格。NMDAYSTATE 结构</td></tr>
<tr><td>月历选择日期</td><td>-746</td><td>MCN_SELECT</td><td>在月历控件中选择一个日期。 NMSELCHANGE 结构</td></tr>
<tr><td>月历选项改变</td><td>-749</td><td>MCN_SELCHANGE</td><td>当前选择项已被改变。NMSELCHANGE 结构</td></tr>
<tr><td>月历视图改变</td><td>-750</td><td>MCN_VIEWCHANGE</td><td>当前视图发生更改。NMVIEWCHANGE 结构</td></tr>
</table><p><font size="6"><a name="日期框">日期框</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件得到焦点</td><td>-7</td><td>NM_SETFOCUS</td><td>控件收到输入焦点</td></tr>
<tr><td>控件失去焦点</td><td>-8</td><td>NM_KILLFOCUS</td><td>用户失去输入焦点</td></tr>
<tr><td>日历内容改变</td><td>-759</td><td>DTN_DATETIMECHANGE</td><td>DTP控件中的内容已发生改变</td></tr>
<tr><td>日历完成编辑</td><td>-758</td><td>DTN_USERSTRINGA</td><td>用户已完成DTP控件的编辑</td></tr>
<tr><td>日历单击回调</td><td>-757</td><td>DTN_WMKEYDOWNA</td><td>用户单击了DTP控件的回调域</td></tr>
<tr><td>日历显示回调</td><td>-756</td><td>DTN_FORMATA</td><td>DTP控件中的文本需要显示在回调域中</td></tr>
<tr><td>日历显示尺寸</td><td>-755</td><td>DTN_FORMATQUERYA</td><td>DTP控件中的文本显示所需最大尺寸</td></tr>
<tr><td>日历显示月历</td><td>-754</td><td>DTN_DROPDOWN</td><td>DTP控件中的月历控件将要显示</td></tr>
<tr><td>日历关闭月历</td><td>-753</td><td>DTN_CLOSEUP</td><td>DTP控件中的月历控件将要关闭</td></tr>
</table><p><font size="6"><a name="超组合框">超组合框</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>控件设置光标</td><td>NM_SETCURSOR</td><td>-17</td><td>控件响应消息要设置光标</td></tr>
<tr><td>组框显示信息</td><td>CBEN_GETDISPINFOA</td><td>-800</td><td>获取组框控件的回调条目的显示信息</td></tr>
<tr><td>组框插入条目</td><td>CBEN_INSERTITEM</td><td>-801</td><td>一个新条目已插入到组框控件</td></tr>
<tr><td>组框删除条目</td><td>CBEN_DELETEITEM</td><td>-802</td><td>组框控件的某条目已被删除</td></tr>
<tr><td>组框激活编辑</td><td>CBEN_BEGINEDIT</td><td>-804</td><td>用户激活下拉列表或点击组框控件的编辑框</td></tr>
<tr><td>组框结束编辑</td><td>CBEN_ENDEDITA</td><td>-805</td><td>用户已结束对组框控件的编辑框的操作或选择了下拉列表</td></tr>
<tr><td>组框完成编辑</td><td>CBEN_ENDEDITW</td><td>-806</td><td>用户已结束对组框控件的编辑框的操作或选择了下拉列表</td></tr>
<tr><td>组框信息显示</td><td>CBEN_GETDISPINFOW</td><td>-807</td><td>获取组框控件的回调条目的显示信息</td></tr>
<tr><td>组框拖起图像</td><td>CBEN_DRAGBEGINA</td><td>-808</td><td>用户开始拖动组框控件的编辑框中的条目图像</td></tr>
<tr><td>组框拖起条目</td><td>CBEN_DRAGBEGINW</td><td>-809</td><td>用户开始拖动组框控件的编辑框中的条目图像</td></tr>
<tr><th colspan=4>超组合框——发送消息</th></tr>
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>组框添加项目</td><td>CBEM_INSERTITEMA</td><td>0x401</td><td>高级组合框添加项目。③参数:0;④数据:COMBOBOXEXITEM 结构</td></tr>
<tr><td>组框设置图表</td><td>CBEM_SETIMAGELIST</td><td>0x402</td><td>设置高级组合框控件的图像列表。③参数:0;④数据:图像列表</td></tr>
<tr><td>组框获取图表</td><td>CBEM_GETIMAGELIST</td><td>0x403</td><td>获取高级组合框控件的图像列表。③参数:0;④数据:0</td></tr>
<tr><td>组合删除</td><td>CBEM_DELETEITEM</td><td>0x144</td><td>高级组合框删除指定项目。③参数:索引;④数据:0</td></tr>
<tr><td>组框取项信息</td><td>CBEM_GETITEMA</td><td>0x404</td><td>获取高级组合框的指定项目的信息。③参数:0;④数据:COMBOBOXEXITEM 结构</td></tr>
<tr><td>组框改项信息</td><td>CBEM_SETITEMA</td><td>0x405</td><td>修改高级组合框的指定项目的信息。③参数:0;④数据:COMBOBOXEXITEM 结构</td></tr>
<tr><td>组框子项对象</td><td>CBEM_GETCOMBOCONTROL</td><td>0x406</td><td>获取子组合框控件的句柄。③参数:0;④数据:0</td></tr>
<tr><td>组框编辑对象</td><td>CBEM_GETEDITCONTROL</td><td>0x407</td><td>获取组合框控件的编辑控件部分句柄。③参数:0;④数据:0</td></tr>
<tr><td>组框设置样式</td><td>CBEM_SETEXSTYLE</td><td>0x408</td><td>修改组合框风格样式。③参数:0;④数据:样式</td></tr>
<tr><td>组框扩展样式</td><td>CBEM_GETEXTENDEDSTYLE</td><td>0x409</td><td>获取组合框扩展样式。③参数:0;④数据:0</td></tr>
<tr><td>组框修改扩展</td><td>CBEM_SETEXTENDEDSTYLE</td><td>0x40E</td><td>修改组合框扩展样式。③参数:0所有,掩码;④数据:1不显图像;2不显缩进;4单词分割/.\;8允许剪裁;$10搜索分大小写</td></tr>
<tr><td>组框是否更改</td><td>CBEM_HASEDITCHANGED</td><td>0x40A</td><td>确定用户是否已更改高级组合框编辑控件的文本。③参数:0;④数据:0返回真表示已更改</td></tr>
<tr><td>组框增加项目</td><td>CBEM_INSERTITEMW</td><td>0x40B</td><td>高级组合框添加项目。③参数:0;④数据:COMBOBOXEXITEM 结构</td></tr>
<tr><td>组框取项数据</td><td>CBEM_GETITEMW</td><td>0x40C</td><td>获取高级组合框的指定项目的信息。③参数:0;④数据:COMBOBOXEXITEM 结构</td></tr>
<tr><td>组框改项数据</td><td>CBEM_SETITEMW</td><td>0x40D</td><td>修改高级组合框的指定项目的信息。③参数:0;④数据:COMBOBOXEXITEM 结构</td></tr>
<tr><th colspan=4>组框模块——函数表</th></tr>
<tr><td>中文名字</td><td>英文名称</td><td>用法</td><td>释义</td></tr>
<tr><td>组框添加</td><td>CBEM_INSERTITEMA</td><td>组框添加(控件,内容,图标,选中,缩进)</td><td>高级组合框添加项目,可指定图标和选中图标,每个缩进等于10像素。</td></tr>
<tr><td>组框删除</td><td>CBEM_DELETEITEM</td><td>组框添加(控件,序号)</td><td>高级组合框删除指定项目</td></tr>
<tr><td>组框文字</td><td>CBEM_SETITEMA</td><td>内容=组框文字(控件,序号)</td><td>获取或修改高级组合框的指定项目的文字</td></tr>
<tr><td>组框扩展</td><td>CBEM_GETEXSTYLE</td><td>样式=组框扩展(控件)</td><td>获取或修改组合框扩展样式:1不显图像;2不显缩进;4单词分割/.\;8允许剪裁;$10搜索分大小写</td></tr>
<tr><td>组框更改</td><td>CBEM_HASEDITCHANGED</td><td>组框更改(控件)</td><td>确定用户是否已更改高级组合框编辑控件的文本。返回真表示已更改</td></tr>
</table><p><font size="6"><a name="伸缩条">伸缩条</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>控件命中测试</td><td>-14</td><td>NM_NCHITTEST</td><td>当控件收到消息时，由 伸缩条 控件发送。④数据:NMMOUSE 结构</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>伸缩高度改变</td><td>-831</td><td>RBN_HEIGHTCHANGE</td><td>高度已被更改</td></tr>
<tr><td>伸缩放置目标</td><td>-832</td><td>RBN_GETOBJECT</td><td>对象被拖动到此控件中的带区上</td></tr>
<tr><td>伸缩更改布局</td><td>-833</td><td>RBN_LAYOUTCHANGED</td><td>用户更改此控件的带区布局</td></tr>
<tr><td>伸缩自动调整</td><td>-834</td><td>RBN_AUTOSIZE</td><td>控件自己自动调整大小</td></tr>
<tr><td>伸缩开始拖动</td><td>-835</td><td>RBN_BEGINDRAG</td><td>用户开始拖动带区</td></tr>
<tr><td>伸缩结束拖动</td><td>-836</td><td>RBN_ENDDRAG</td><td>用户停止拖动带区</td></tr>
<tr><td>伸缩将被删除</td><td>-837</td><td>RBN_DELETINGBAND</td><td>带区即将被删除</td></tr>
<tr><td>伸缩已被删除</td><td>-838</td><td>RBN_DELETEDBAND</td><td>带区已被删除</td></tr>
<tr><td>伸缩调整子窗</td><td>-839</td><td>RBN_CHILDSIZE</td><td>调整带区的子窗口大小</td></tr>
</table><p><font size="6">伸缩条——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>顶部左侧</td><td>CCS_TOP</td><td>1</td><td>使控件自身位于父窗口工作区的顶部，并将宽度设置为与父窗口的宽度相同。 默认情况下，工具栏具有此样式。</td></tr>
<tr><td>缩放调整</td><td>CCS_NOMOVEY</td><td>2</td><td>导致控件在响应 WM_SIZE 消息时水平（而不是垂直）调整大小并移动自身。 如果使用CCS_NORESIZE，则此样式不适用。 默认情况下，标题窗口具有此样式。</td></tr>
<tr><td>底部右侧</td><td>CCS_BOTTOM</td><td>3</td><td>使控件将自身定位在父窗口工作区的底部，并将宽度设置为与父窗口的宽度相同。 默认情况下，状态窗口具有此样式。</td></tr>
<tr><td>禁止缩放</td><td>CCS_NORESIZE</td><td>4</td><td>防止控件在设置其初始大小或新大小时使用默认宽度和高度。 相反，控件使用在创建或调整大小的请求中指定的宽度和高度。</td></tr>
<tr><td>自由位置</td><td>CCS_NOPARENTALIGN</td><td>8</td><td>防止控件自动移动到父窗口的顶部或底部。 相反，控件会将其位置保留在父窗口中，尽管更改了父窗口的大小。<br> 如果还使用了CCS_TOP或CCS_BOTTOM，则会将高度调整为默认值，但位置和宽度保持不变。</td></tr>
<tr><td>拖动调整</td><td>CCS_ADJUSTABLE</td><td>0x20</td><td>启用工具栏的内置自定义功能，使用户能够将按钮拖动到新位置，或通过将按钮从工具栏上拖动来删除按钮。<br>此外，用户可以双击工具栏以显示“ 自定义工具栏 ”对话框，使用户能够添加、删除和重新排列工具栏按钮。</td></tr>
<tr><td>禁止突显</td><td>CCS_NODIVIDER</td><td>0x40</td><td>防止在控件顶部绘制双像素的突出显示。</td></tr>
<tr><td>垂直显示</td><td>CCS_VERT</td><td>0x80</td><td>版本 4.70。 使控件垂直显示。</td></tr>
<tr><td>垂直左侧</td><td>CCS_LEFT</td><td>0x81</td><td>版本 4.70。 使控件垂直显示在父窗口的左侧。</td></tr>
<tr><td>垂直缩放</td><td>CCS_NOMOVEX</td><td>0x82</td><td>版本 4.70。 导致控件调整大小并垂直移动自身，而不是水平移动，以响应 WM_SIZE 消息。 如果使用CCS_NORESIZE，则此样式不适用。</td></tr>
<tr><td>垂直右侧</td><td>CCS_RIGHT</td><td>0x83</td><td>版本 4.70。 使控件垂直显示在父窗口的右侧。</td></tr>
<tr><td>调整大小</td><td>SBARS_SIZEGRIP</td><td>0x100</td><td>状态栏控件将包括状态栏右端的大小调整手柄。 大小调整手柄类似于大小调整边框；它是用户可以通过单击和拖动来重设父窗口大小的矩形区域。</td></tr>
<tr><td>适应大小</td><td>RBS_AUTOSIZE</td><td>0x2000</td><td>版本 4.71。 当控件的大小或位置发生更改时，rebar 控件将自动更改带的布局。 发生这种情况时，将发送 RBN_AUTOSIZE 通知。</td></tr>
<tr><td>窄线分隔</td><td>RBS_BANDBORDERS</td><td>0x400</td><td>版本 4.71。 rebar 控件显示窄线以分隔相邻带。</td></tr>
<tr><td>双击大小</td><td>RBS_DBLCLKTOGGLE</td><td>0x8000</td><td>版本 4.71。 当用户双击带区时，rebar 带将切换其最大化或最小化状态。 如果没有此样式，当用户单击带区时，将切换最大化或最小化状态。</td></tr>
<tr><td>顺序显示</td><td>RBS_FIXEDORDER</td><td>0x800</td><td>版本 4.70。 rebar 控件始终按相同的顺序显示带区。 可以将带区移动到不同的行，但带区顺序是静态的。</td></tr>
<tr><td>拖放通知</td><td>RBS_REGISTERDROP</td><td>0x1000</td><td>版本 4.71。 当对象拖动到控件中的带区上时，rebar 控件将生成 RBN_GETOBJECT 通知代码。 若要接收RBN_GETOBJECT通知，请使用调用 OleInitialize 或 CoInitialize 初始化 OLE。</td></tr>
<tr><td>工具提示</td><td>RBS_TOOLTIPS</td><td>0x100</td><td>版本 4.71。 尚不支持。</td></tr>
<tr><td>最小高度</td><td>RBS_VARHEIGHT</td><td>0x200</td><td>版本 4.71。 rebar 控件尽可能以所需的最小高度显示带区。 如果没有此样式，rebar 控件将使用最高可见带的高度来确定其他带的高度，以相同的高度显示所有带。</td></tr>
<tr><td>垂直把手</td><td>RBS_VERTICALGRIPPER</td><td>0x4000</td><td>版本 4.71。 大小手柄将垂直显示，而不是在垂直 rebar 控件中水平显示。 对于没有 CCS_VERT 样式的 rebar 控件，将忽略此样式。</td></tr>
</table><p><font size="6"><a name="IP框">IP控件</a>——使用说明：</font></p><pre>
IP框允许用户以易于理解的格式输入 IP 地址。 此控件还允许应用程序以数字形式而不是文本形式获取地址。<br>
这是一种类似于编辑控件的新控件，允许用户在 Internet 协议中输入数字地址 (IP) 格式。
此格式由四个三位数字段组成。 每个字段单独处理;字段编号从零开始，从左到右继续，如下图所示。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/ipa-scrn.png"><br>
控件只允许在每个字段中输入数字文本。 在给定字段中输入三位数字后，键盘焦点会自动移动到下一个字段。
如果应用程序不需要填写整个字段，则用户可以输入少于三位数。 例如，如果字段应仅包含数字 21，则键入“21”并按 键会将用户带到下一个字段。

每个字段的默认范围为 0 到 255，但应用程序可以使用 IP框设置范围 消息将范围设置为这些限制之间的任何值。</pre>
<h2>IP控件——通知消息：</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>IP框内容改变</td><td>-860</td><td>IPN_FIELDCHANGED</td><td>更改控件中的字段或从一个字段移动到另一个字段</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>IP框清除内容</td><td>$464</td><td>IPM_CLEARADDRESS</td><td>清除 IP 地址控件的内容。③参数:0;④数据:0</td></tr>
<tr><td>IP框设置地址</td><td>$465</td><td>IPM_SETADDRESS</td><td>设置 IP 地址控件中所有四个字段的地址值。 ③参数:0;④数据:32位IP地址</td></tr>
<tr><td>IP框获取地址</td><td>$466</td><td>IPM_GETADDRESS</td><td>获取 IP 地址控件中所有四个字段的地址值。 ③参数:0;④数据:@地址</td></tr>
<tr><td>IP框设置范围</td><td>$467</td><td>IPM_SETRANGE</td><td>设置 IP 地址控件中指定字段的有效范围。③参数:0-3字段;④数据:低/高(各1字节)</td></tr>
<tr><td>IP框设置焦点</td><td>$468</td><td>IPM_SETFOCUS</td><td>将键盘焦点选中为控件中的指定字段。 ③参数:0-3字段;④数据:0</td></tr>
<tr><td>IP框是否为空</td><td>$469</td><td>IPM_ISBLANK</td><td>确定控件中的所有字段是否为空。③参数:0;④数据:0</td></tr>
</table><p><font size="6"><a name="IP框改变类">IP框改变类</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>IP框改变类</td><td>NMIPADDRESS</td><td>20</td><td>包含 IP框内容改变 通知代码的信息。</td></tr>
<tr><th colspan=4>IP框改变类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>包含有关通知的信息的类结构。</td></tr>
<tr><td>字段</td><td>iField</td><td>整数</td><td>已更改的字段的从零开始的编号。</td></tr>
<tr><td>新值</td><td>iValue</td><td>整数</td><td>字段 成员中指定的字段的新值。 处理 IP框内容改变 通知时，可以将此成员设置为字段范围内的任何值，控件会将此新值置于字段中。</td></tr>
</table><p><font size="6"><a name="状态栏">状态栏</a>——使用说明：</font></p><pre>
状态栏是父窗口底部的水平窗口，应用程序可在其中显示各种状态信息。 状态栏可以分为多个部分以显示多种类型的信息。
<b>类型和样式</b>
状态栏的默认位置位于父窗口底部，但你可以指定 顶部 样式，使其显示在父窗口工作区的顶部。
可以指定 调整大小 样式，以在状态栏的右端包含大小调整手柄。
不建议结合使用 顶部 和 调整大小 样式，因为生成的大小调整手柄不起作用。

<b>大小和高度</b>
状态栏的窗口过程会自动设置窗口的初始大小和位置，忽略 创建窗口 函数中指定的值。 宽度与父窗口工作区的一样。
高度基于当前在状态栏的设备上下文中选择的字体的指标，以及窗口边框的宽度。
每当收到 窗口缩放 消息时，窗口过程都会自动调整状态栏的大小。 通常，当父窗口的大小更改时，父窗口会向状态栏发送 窗口缩放 消息。

应用程序可以通过向窗口发送 状态最小高度 消息（指定最小高度（以像素为单位）来设置状态栏绘图区的最小高度。 绘图区不包括窗口边框。
最小高度对于在所有者绘制的状态栏中绘图很有用。 有关详细信息，请参阅本章后面的 所有者绘制状态栏 。

通过向窗口发送 状态获取边框 消息来检索状态栏边框的宽度。 该消息包含接收宽度的三元素数组的地址。

<b>多部件状态栏</b>
状态栏可以具有许多不同的部分，每个部分显示不同的文本行。 通过向窗口发送 状态设置部件 消息，指定要创建的部件数和整数数组的地址，
将状态栏划分为多个部分。 数组包含每个部件的一个元素，每个元素指定部件右边缘的客户端坐标。一个状态栏最多可以有 256 个部分，
尽管应用程序通常使用的部件要少得多。 通过向窗口发送 状态获取部件消息， 检索状态栏中各部分的计数以及每个部件右边缘的坐标。

<b>状态栏文本操作</b>
可以通过发送 状态设置文本 消息、指定部件的从零开始的索引、在部件中绘制的字符串地址以及绘制字符串的技术来设置状态栏的任何部分的文本。
绘制技术确定文本是否具有边框，如果具有边框，则确定边框的样式。 它还确定父窗口是否负责绘制文本。 有关详细信息，请参阅所有者绘制状态栏。

默认情况下，文本在状态栏的指定部分中左对齐。可以在文本中嵌入制表符，使其居中或右对齐。 单个制表符右侧的文本居中，第二个制表符右侧的文本右对齐。
若要从状态栏中检索文本，请使用 状态获取长度 和 状态获取文本 消息。如果应用程序使用只有一个部分的状态栏，
则可以使用 设置文本、获取文本和 文本长度 消息来执行文本操作。 这些消息仅处理索引为零的部分，使你可以将状态栏视为静态文本控件。

若要在不创建状态栏的情况下显示状态行，请使用 状态栏字 函数。 函数使用与状态栏的窗口过程相同的技术来绘制状态，但它不会自动设置状态信息的大小和位置。 
调用函数时，必须指定状态信息的大小和位置，以及要在其中绘制它的窗口的设备上下文。
<b>简单模式状态栏</b>
通过向状态栏发送 状态简单样式 消息，将状态栏置于“简单模式”。简单模式状态栏仅显示一个部分。设置窗口的文本后，窗口将失效，但在下一窗口重绘之前不会重绘。
等待消息可最大程度地减少重绘窗口的次数，从而减少屏幕闪烁。 简单模式状态栏可用于在用户滚动浏览菜单时显示菜单项的帮助文本。

状态栏在简单模式下显示的字符串与在非简单模式下显示的字符串分开维护。 这意味着你可以将窗口置于简单模式，设置其文本，并切换回非简单模式，
而不会更改非简单模式文本。设置简单模式状态栏的文本时，可以指定除 父窗绘制 之外的任何绘图技术。 简单模式状态栏不支持所有者绘图。
状态设置文本——参数样式</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>常量数值</td><td>释义</td></tr>
<tr><td>凹陷边框</td><td>0</td><td>0</td><td>文本带有边框，显示位置低于窗口平面。</td></tr>
<tr><td>不带边框</td><td>SBT_NOBORDERS</td><td>0x100</td><td>文本不带边框。</td></tr>
<tr><td>父窗绘制</td><td>SBT_OWNERDRAW</td><td>0x1000</td><td>文本由父窗口绘制。注意：简单模式状态栏不支持所有者绘图。</td></tr>
<tr><td>凸起边框</td><td>SBT_POPOUT</td><td>0x200</td><td>文本带有边框，显示位置高于窗口平面。</td></tr>
<tr><td>反向显示</td><td>SBT_RTLREADING</td><td>0x400</td><td>系统将以与父窗口中文本相反的方向显示文本。</td></tr>
<tr><td>忽略制表</td><td>SBT_NOTABPARSING</td><td>0x800</td><td>将忽略 Tab 字符。</td></tr>
</table>
<b>默认状态栏消息处理</b><br>
本部分介绍由预定义类的窗口过程处理的消息。</br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>窗口创建</td><td>WM_CREATE</td><td>1</td><td>初始化状态栏。</td></tr>
<tr><td>程序关闭</td><td>WM_DESTROY</td><td>2</td><td>释放为状态栏分配的资源。</td></tr>
<tr><td>获取字体</td><td>WM_GETFONT</td><td>0x31</td><td>返回状态栏用于绘制其文本的当前字体的句柄。</td></tr>
<tr><td>获取文本</td><td>WM_GETTEXT</td><td>13</td><td>将文本从状态栏的第一部分复制到缓冲区。 它返回一个 32 位值，该值指定文本的长度（以字符为单位）以及用于绘制文本的技术。</td></tr>
<tr><td>文本长度</td><td>WM_GETTEXTLENGTH</td><td>14</td><td>返回一个 32 位值，该值指定状态栏第一部分中文本的长度（以字符为单位），以及用于绘制文本的技术。</td></tr>
<tr><td>区外鼠标</td><td>WM_NCHITTEST</td><td>0x84</td><td>如果鼠标光标位于大小调整手柄中，导致系统显示大小调整光标，则返回 HTBOTTOMRIGHT 值。 如果鼠标光标不在大小调整手柄中，状态栏会将此消息传递给 DefWindowProc 函数。</td></tr>
<tr><td>窗口重绘</td><td>WM_PAINT</td><td>15</td><td>绘制状态栏的无效区域。 如果 wParam 参数为非 NULL，则控件假定该值是 HDC 并使用该设备上下文进行绘制。</td></tr>
<tr><td>指定字体</td><td>WM_SETFONT</td><td>0x30</td><td>在状态栏的设备上下文中选择字体句柄。</td></tr>
<tr><td>设置文本</td><td>WM_SETTEXT</td><td>12</td><td>使用默认绘制操作将指定文本复制到状态栏的第一部分， (指定为零) 。 如果成功，则返回 TRUE ，否则返回 FALSE 。</td></tr>
<tr><td>窗口缩放</td><td>WM_SIZE</td><td>5</td><td>根据父窗口工作区的当前宽度和状态栏当前字体的高度调整状态栏的大小。</td></tr>
</table><p><font size="6">状态栏——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键。④数据:NMMOUSE 结构</td></tr>
<tr><td>控件双击左键</td><td>-3</td><td>NM_DBLCLK</td><td>用户在控件上双击了鼠标左键。④数据:NMMOUSE 结构</td></tr>
<tr><td>控件单击右键</td><td>-5</td><td>NM_RCLICK</td><td>用户在控件上点击了鼠标右键。④数据:NMMOUSE 结构</td></tr>
<tr><td>控件双击右键</td><td>-6</td><td>NM_RDBLCLK</td><td>用户在控件上双击了鼠标右键。④数据:NMMOUSE 结构</td></tr>
<tr><td>状态模式改变</td><td>-880</td><td>SBN_SIMPLEMODECHANGE</td><td>状态栏简单模式发生改变</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>状态设置文本</td><td>0x401</td><td>SB_SETTEXTA</td><td>设置状态窗口的指定部分中的文本。③参数:序号/样式(各1字节);④数据:内容文本;<br>
序号=255单窗口;样式=0凹陷边框,0x100无边框,0x200凸起边框,0x400反向显示,0x800忽略制表,0x1000父窗口绘制</td></tr>
<tr><td>状态获取文本</td><td>0x402</td><td>SB_GETTEXTA</td><td>从状态窗口的指定部分检索文本。③参数:序号;④数据:文本;</td></tr>
<tr><td>状态获取长度</td><td>0x403</td><td>SB_GETTEXTLENGTHA</td><td>从状态窗口的指定部分检索文本的字数。③参数:序号;④数据:0;返回值:低字=字数,高字=样式</td></tr>
<tr><td>状态设置部件</td><td>0x404</td><td>SB_SETPARTS</td><td>设置状态窗口中的部件数以及每个部件右边缘的坐标。③参数:数量;④数据:整数数组;</td></tr>
<tr><td>状态获取部件</td><td>0x406</td><td>SB_GETPARTS</td><td>获取状态窗口中的部件数以及每个部件右边缘的坐标。③参数:数量;④数据:整数数组;返回部件数</td></tr>
<tr><td>状态获取边框</td><td>0x407</td><td>SB_GETBORDERS</td><td>获取状态窗口的水平边框和垂直边框的当前宽度。③参数:0;④数据:3整数=0宽度,1高度,2边框宽;</td></tr>
<tr><td>状态最小高度</td><td>0x408</td><td>SB_SETMINHEIGHT</td><td>设置状态窗口绘图区域的最小高度。③参数:高度;④数据:0;</td></tr>
<tr><td>状态简单样式</td><td>0x409</td><td>SB_SIMPLE</td><td>指定状态窗口是显示简单文本还是上一个设置部件。③参数:是否简单;④数据:0;</td></tr>
<tr><td>状态边框矩形</td><td>0x40A</td><td>SB_GETRECT</td><td>检索状态窗口中部件的边框。③参数:序号;④数据:矩形;</td></tr>
<tr><td>状态设置文字</td><td>0x40B</td><td>SB_SETTEXTW</td><td>设置状态窗口的指定部分中的文本。③参数:序号/样式(各1字节);④数据:内容文本;</td></tr>
<tr><td>状态获取字数</td><td>0x40C</td><td>SB_GETTEXTLENGTHW</td><td>从状态窗口的指定部分检索文本的字数。③参数:序号;④数据:0;返回值:低字=字数,高字=样式</td></tr>
<tr><td>状态获取文字</td><td>0x40D</td><td>SB_GETTEXTW</td><td>从状态窗口的指定部分检索文本。③参数:序号;④数据:文本;</td></tr>
<tr><td>状态是否简单</td><td>0x40E</td><td>SB_ISSIMPLE</td><td>检查状态栏控件以确定它是否处于简单模式。③参数:0;④数据:0;</td></tr>
<tr><td>状态设置图标</td><td>0x40F</td><td>SB_SETICON</td><td>设置状态栏中部件的图标。③参数:序号;④数据:图标;</td></tr>
<tr><td>状态设置提示</td><td>0x410</td><td>SB_SETTIPTEXTA</td><td>设置状态栏中部件的工具提示文本。③参数:序号;④数据:文本;</td></tr>
<tr><td>状态修改提示</td><td>0x411</td><td>SB_SETTIPTEXTW</td><td>设置状态栏中部件的工具提示文本。③参数:序号;④数据:文本;</td></tr>
<tr><td>状态获取提示</td><td>0x412</td><td>SB_GETTIPTEXTA</td><td>检索状态栏中部件的工具提示文本。③参数:序号/大小;④数据:文本;</td></tr>
<tr><td>状态获得提示</td><td>0x413</td><td>SB_GETTIPTEXTW</td><td>检索状态栏中部件的工具提示文本。③参数:序号/大小;④数据:文本;</td></tr>
<tr><td>状态获取图标</td><td>0x414</td><td>SB_GETICON</td><td>检索状态栏中部件的图标。③参数:序号;④数据:0;</td></tr>
<tr><td>控件设置宽字</td><td>0x2005</td><td>CCM_SETUNICODEFORMAT</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>0x2006</td><td>CCM_GETUNICODEFORMAT</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
</table><p><font size="6">状态栏——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>顶部左侧</td><td>CCS_TOP</td><td>1</td><td>使控件自身位于父窗口工作区的顶部，并将宽度设置为与父窗口的宽度相同。 默认情况下，工具栏具有此样式。</td></tr>
<tr><td>缩放调整</td><td>CCS_NOMOVEY</td><td>2</td><td>导致控件在响应 WM_SIZE 消息时水平（而不是垂直）调整大小并移动自身。 如果使用CCS_NORESIZE，则此样式不适用。 默认情况下，标题窗口具有此样式。</td></tr>
<tr><td>底部右侧</td><td>CCS_BOTTOM</td><td>3</td><td>使控件将自身定位在父窗口工作区的底部，并将宽度设置为与父窗口的宽度相同。 默认情况下，状态窗口具有此样式。</td></tr>
<tr><td>禁止缩放</td><td>CCS_NORESIZE</td><td>4</td><td>防止控件在设置其初始大小或新大小时使用默认宽度和高度。 相反，控件使用在创建或调整大小的请求中指定的宽度和高度。</td></tr>
<tr><td>自由位置</td><td>CCS_NOPARENTALIGN</td><td>8</td><td>防止控件自动移动到父窗口的顶部或底部。 相反，控件会将其位置保留在父窗口中，尽管更改了父窗口的大小。<br> 如果还使用了CCS_TOP或CCS_BOTTOM，则会将高度调整为默认值，但位置和宽度保持不变。</td></tr>
<tr><td>拖动调整</td><td>CCS_ADJUSTABLE</td><td>0x20</td><td>启用工具栏的内置自定义功能，使用户能够将按钮拖动到新位置，或通过将按钮从工具栏上拖动来删除按钮。<br> 此外，用户可以双击工具栏以显示“ 自定义工具栏 ”对话框，使用户能够添加、删除和重新排列工具栏按钮。</td></tr>
<tr><td>禁止突显</td><td>CCS_NODIVIDER</td><td>0x40</td><td>防止在控件顶部绘制双像素的突出显示。</td></tr>
<tr><td>垂直显示</td><td>CCS_VERT</td><td>0x80</td><td>版本 4.70。 使控件垂直显示。</td></tr>
<tr><td>垂直左侧</td><td>CCS_LEFT</td><td>0x81</td><td>版本 4.70。 使控件垂直显示在父窗口的左侧。</td></tr>
<tr><td>垂直缩放</td><td>CCS_NOMOVEX</td><td>0x82</td><td>版本 4.70。 导致控件调整大小并垂直移动自身，而不是水平移动，以响应 WM_SIZE 消息。 如果使用CCS_NORESIZE，则此样式不适用。</td></tr>
<tr><td>垂直右侧</td><td>CCS_RIGHT</td><td>0x83</td><td>版本 4.70。 使控件垂直显示在父窗口的右侧。</td></tr>
<tr><td>调整大小</td><td>SBARS_SIZEGRIP</td><td>0x100</td><td>状态栏控件将包括状态栏右端的大小调整手柄。 大小调整手柄类似于大小调整边框；它是用户可以通过单击和拖动来重设父窗口大小的矩形区域。</td></tr>
<tr><td>工具提示</td><td>SBT_TOOLTIPS</td><td>0x800</td><td>版本 4.71。使用此样式启用工具提示。</td></tr>
<tr><td>工具提示</td><td>SBARS_TOOLTIPS</td><td>0x800</td><td>版本 5.80。与SBT_TOOLTIPS相同。 将此标志用于版本 5.00 或更高版本。</td></tr>
</table><p><font size="6"><a name="分页框">分页导航</a>——使用说明：</font></p>
分页控件是一个窗口容器，与没有足够的显示区域来显示其所有内容的窗口一起使用。 寻呼控件允许用户滚动到当前不在视图中的窗口区域。<br>
当窗口没有足够的区域显示子窗口时，此控件非常有用。 例如，如果应用程序的工具栏不够宽，无法显示其所有项，则可以将工具栏分配给寻呼控件，<br>
用户将能够向左或向右滚动以访问所有项。 还可以创建垂直滚动的寻呼控件。分配给寻呼程序控件的窗口称为 包含的窗口。<br>
以下屏幕截图显示了页码控件中包含的工具栏。 寻呼控件以红色显示，以显示控件的哪些区域可见。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/pager.jpg"><br>
创建寻呼控件后，很可能想要为其分配包含的窗口。 如果包含的窗口是子窗口，则应使子窗口成为寻呼控件的子窗口，以便正确计算大小和位置。<br>
然后发送 分页设置窗口 消息将窗口分配给分页控件。 请注意，此消息实际上不会更改包含窗口的父窗口;它只是分配包含的窗口。<br>
如果包含的窗口是公共控件之一，它必须具有 禁止缩放 样式，以防止控件尝试将自身大小调整为页码页控件的大小。<br>
<h2></h2>进程寻呼控件通知</h2>
至少需要处理 分页滚动尺寸 通知。 如果不处理此通知并输入宽度或高度的值，则不会显示寻呼控件中的滚动箭头。这是因为寻呼控件使用分页滚动尺寸通知中提供的宽度或高度来确定包含窗口的“理想”大小。<br>

以下示例演示如何处理 分页滚动尺寸 通知案例。 在此示例中，包含的窗口是一个工具栏控件，其中包含未知数量的按钮，大小未知。 该示例演示如何使用 工具总体大小 消息来确定工具栏中所有项的大小。<br>
然后，该示例将所有项的宽度放入传递到通知的 <a href="#分页滚区类">分页滚区类</a> 结构的 宽度 成员中。<pre>
判断(消息)<font color="#0000FF"> 为 控件事件 公共事件(数据) </font>//调用公共事件这段程序代码,④数据:包含多项事件信息的数据
<font color="#0000FF">程序段 公共事件(数据)
	整数 窗口=数据&,参数=.&4,事件=.&8,方向=.&30
	判断(方向)为 1,2,4,8 //向上向下向左向右
	.&42 =20;//修改默认滚动增量为20
	处理窗口(窗口,控件事件,参数,数据)
结束</font></pre>
<h2>分页导航——通知消息：</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>控件要释放鼠标捕捉</td></tr>
<tr><td>分页开始滚动</td><td>-901</td><td>PGN_SCROLL</td><td>所包含窗口即将被滚动。④数据:<a href="#分页滚向类">分页滚向类</a> 结构</td></tr>
<tr><td>分页滚动尺寸</td><td>-902</td><td>PGN_CALCSIZE</td><td>获得所包含窗口的可滚动尺寸。④数据:<a href="#分页滚区类">分页滚区类</a> 结构</td></tr>
<tr><td>分页热项更改</td><td>-903</td><td>PGN_HOTITEMCHANGE</td><td>通知父窗口突出显示的热项已更改。④数据:<a href="#分页热项类">分页热项类</a> 结构</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>分页设置窗口</td><td>0x1401</td><td>PGM_SETCHILD</td><td>设置页码控件的包含窗口。③参数:0;④数据:窗口</td></tr>
<tr><td>分页重算大小</td><td>0x1402</td><td>PGM_RECALCSIZE</td><td>强制控件重新计算包含窗口的大小。③参数:0;④数据:0</td></tr>
<tr><td>分页鼠标转发</td><td>0x1403</td><td>PGM_FORWARDMOUSE</td><td>为页码控件启用或禁用鼠标转发。③参数:是否转发;④数据:0</td></tr>
<tr><td>分页设置背景</td><td>0x1404</td><td>PGM_SETBKCOLOR</td><td>设置页码控件的当前背景色。③参数:0;④数据:颜色</td></tr>
<tr><td>分页获取背景</td><td>0x1405</td><td>PGM_GETBKCOLOR</td><td>获取页码控件的当前背景色。③参数:0;④数据:0</td></tr>
<tr><td>分页设置边框</td><td>0x1406</td><td>PGM_SETBORDER</td><td>设置页码控件的当前边框大小。③参数:0;④数据:像素</td></tr>
<tr><td>分页获取边框</td><td>0x1407</td><td>PGM_GETBORDER</td><td>获取页码控件的当前边框大小。③参数:0;④数据:0</td></tr>
<tr><td>分页设置位置</td><td>0x1408</td><td>PGM_SETPOS</td><td>设置页码控件的当前滚动位置。③参数:0;④数据:位置</td></tr>
<tr><td>分页获取位置</td><td>0x1409</td><td>PGM_GETPOS</td><td>获取页码控件的当前滚动位置。③参数:0;④数据:0</td></tr>
<tr><td>分页设置按钮</td><td>0x140A</td><td>PGM_SETBUTTONSIZE</td><td>设置页码控件的当前按钮大小。③参数:0;④数据:像素</td></tr>
<tr><td>分页获取按钮</td><td>0x140B</td><td>PGM_GETBUTTONSIZE</td><td>获取页码控件的当前按钮大小。③参数:0;④数据:0</td></tr>
<tr><td>分页按钮状态</td><td>0x140C</td><td>PGM_GETBUTTONSTATE</td><td>设置页码控件指定按钮的状态。③参数:0;④数据:像素</td></tr>
<tr><td>分页超时行数</td><td>0x140D</td><td>PGM_SETSCROLLINFO</td><td>设置超时值、每超时行数和每行像素。③参数:超时数;④数据:超时行数/每行像素(各2字节)</td></tr>
<tr><td>控件拖放接口</td><td>0x2004</td><td>PGM_GETDROPTARGET</td><td>获取页码控件的 <a href="#拖放目标对象">拖放目标对象</a> 接口指针。③参数:0;④数据:@接口</td></tr>
</table><p><font size="6">分页框——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>垂直滚动</td><td>PGS_VERT</td><td>0</td><td>创建可垂直滚动的寻呼控件。 如果未指定方向样式，则这是默认方向。 此样式和 PGS_HORZ 样式是互斥的，不能组合使用。</td></tr>
<tr><td>水平滚动</td><td>PGS_HORZ</td><td>1</td><td>创建可水平滚动的寻呼控件。 此样式和 PGS_VERT 样式是互斥的，不能组合使用。</td></tr>
<tr><td>悬停滚动</td><td>PGS_AUTOSCROLL</td><td>2</td><td>当用户将鼠标悬停在其中一个滚动按钮上时，页导航控件将滚动。</td></tr>
<tr><td>支持拖放</td><td>PGS_DRAGNDROP</td><td>4</td><td>包含的窗口可以是拖放目标。 如果某个项从寻呼器外部拖动到其中一个滚动按钮上，则页导航控件将自动滚动。</td></tr>
</table><p><font size="6"><a name="分页滚向类">分页滚向类</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>分页滚向类</td><td>NMPGSCROLL</td><td>46</td><td>包含并接收页导航控件在滚动包含的窗口时使用的信息。</td></tr>
<tr><th colspan=4>分页滚向类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>包含有关通知的信息的类结构。</td></tr>
<tr><td>闭键</td><td>fwKeys</td><td>整形</td><td>发生滚动时关闭的修改键。0 所有修改键均未关闭。1 按下了 Shift 键。2 CONTROL 键已关闭。4 ALT键已关闭。</td></tr>
<tr><td>外框</td><td>rcParent</td><td>矩形类</td><td>包含分页控件的客户端矩形。</td></tr>
<tr><td>方向</td><td>iDir</td><td>整数</td><td>指示滚动的发生方向的值。1向上滚动。2向下滚动。4向左滚动。8向右滚动。</td></tr>
<tr><td>水平</td><td>iXpos</td><td>整数</td><td>包含滚动操作之前包含窗口的水平滚动位置（以像素为单位）。</td></tr>
<tr><td>垂直</td><td>iYpos</td><td>整数</td><td>包含滚动操作之前包含窗口的垂直滚动位置（以像素为单位）。</td></tr>
<tr><td>增量</td><td>iScroll</td><td>整数</td><td>输入时，包含默认滚动增量（以像素为单位）。可以修改此成员以包含不同的滚动增量（正数值）。</td></tr>
</table><p><font size="6"><a name="分页滚区类">分页滚区类</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>分页滚区类</td><td>NMPGCALCSIZE</td><td>24</td><td>包含并接收分页控件用于计算包含窗口的可滚动区域的信息。</td></tr>
<tr><th colspan=4>分页滚区类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>包含有关通知的信息的类结构。</td></tr>
<tr><td>标志</td><td>dwFlag</td><td>整数</td><td>指示所请求的维度的值。1=正在请求可滚动区域的宽度。2=请求可滚动区域的高度。</td></tr>
<tr><td>宽度</td><td>iWidth</td><td>整数</td><td>接收可滚动区域所需的宽度（以像素为单位）。</td></tr>
<tr><td>高度</td><td>iHeight</td><td>整数</td><td>接收可滚动区域所需的高度（以像素为单位）。</td></tr>
</table><p><font size="6"><a name="分页热项类">分页热项类</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>分页热项类</td><td>NMPGHOTITEM</td><td>24</td><td>包含与 分页热项更改 通知代码一起使用的信息。</td></tr>
<tr><th colspan=4>分页热项类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>包含有关通知的信息的类结构。</td></tr>
<tr><td>旧项</td><td>idOld</td><td>整数</td><td>指定前面突出显示的项的命令标识符。</td></tr>
<tr><td>新项</td><td>idNew</td><td>整数</td><td>指定突出显示项的命令标识符。</td></tr>
<tr><td>原因</td><td>dwFlags</td><td>整数</td><td>包含指示热项更改原因的标志。0x10没有以前的热项。0x20没有新的热项</td></tr>
</table><p><font size="6"><a name="链接框">链接框</a>——使用简介：</font></p>
<pre>
链接框 控件是一个窗口，用于呈现标记文本，并在用户单击其嵌入的超链接时通知应用程序。 此控件提供了使用 “命令链接”按钮的便捷替代方法。
每个 链接框 控件都可以支持多个超链接，并且可以通过从零开始的索引访问每个超链接。 链接框 控件需要一个清单或指令，指定应使用版本 6 的 DLL。
<b>链接标记</b>
链接框 控件支持定位标记 (<>) 以及属性 HREF 和 ID。 HREF 可以是任何协议，例如 http、ftp 和 mailto。 ID 是可选名称，在 链接框 控件中是唯一的，
它与单个链接相关联。 还会根据链接在字符串中的位置为其分配从零开始的索引。 此索引用于访问链接。

<b>链接属性</b>
可以在每个链接的定位标记中设置每个链接的属性，也可以通过发送 链接修改属性 消息来设置。 通过在初始化字符串中指定属性来设置它只是初始化值。
可以通过后续使用 链接修改属性 消息来更改属性的值。

<b>链接状态</b>
链接项可以处于三种状态中的任何一种，由下表中的标志表示。</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>LIS_FOCUSED</td><td>1</td><td>链接具有键盘焦点，按 Enter 可激活它。</td></tr>
<tr><td>LIS_ENABLED</td><td>2</td><td>链接已启用。</td></tr>
<tr><td>LIS_VISITED</td><td>4</td><td>用户已访问链接表示的 URL。</td></tr>
</table><pre>
<b>双向文本显示的限制</b>
某些语言（如阿拉伯语或希伯来语）在 RTL) (从右到左书写;英语采用从左到右 (LTR) 。 将 RTL 与 LTR 组合称为双向文本。 使用 链接框 控件时，
混合使用资源字符串中的 LTR 和 RTL 宽字 或 HTML 定向标记构造（作为用于控制字符串流的双向流标记）可能不会产生预期结果。 
在所有情况下，链接框控件都不支持双向显示。 仅当知道简单的 LTR 或 RTL 布局足够时，才使用 链接框 控件。 否则，请考虑使用更先进的技术。
使用 链接框 通知
以下示例代码演示如何处理当用户单击 上一示例中的两个链接之一时生成的 链接框 通知。 当用户单击 网址 时，关联的网页将在默认浏览器中打开。
当用户单击应用程序定义的超链接时，将显示一个消息框。
判断(消息) 为 控件事件 公共事件(数据) //调用公共事件这段程序代码,④数据:包含多项事件信息的数据
<font color="#0000FF">
程序段 公共事件(数据)
	整数 窗口=数据&,参数=.&4,事件=.&8,标识=.$28,链接=.$124
	判断(事件)为 -2,-4 //控件单击左键 控件按下回车
	信息框(0,链接,标识,信息图标)
结束</font></pre>
<p><font size="6">链接框——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件单击左键</td><td>-2</td><td>NM_CLICK</td><td>用户在控件上点击了鼠标左键。④数据:<a href="#链接通知类">链接通知类</a></td></tr>
<tr><td>控件按下回车</td><td>-4</td><td>NM_RETURN</td><td>控件获得键盘焦点并按下回车键</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>链接是否点击</td><td>0x700</td><td>LM_HITTEST</td><td>确定用户是否单击了指定链接。③参数:0;④数据:<a href="#链接点类">链接点类</a></td></tr>
<tr><td>链接首选高度</td><td>0x701</td><td>LM_GETIDEALHEIGHT</td><td>检索控件当前宽度的链接的首选高度。③参数:0;④数据:0</td></tr>
<tr><td>链接修改属性</td><td>0x702</td><td>LM_SETITEM</td><td>设置项的状态和属性。③参数:0;④数据:<a href="#链接项类">链接项类</a></td></tr>
<tr><td>链接获取属性</td><td>0x703</td><td>LM_GETITEM</td><td>检索项的状态和属性。③参数:0;④数据:<a href="#链接项类">链接项类</a></td></tr>
</table><p><font size="6">链接框——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>背景透明</td><td>LWS_TRANSPARENT</td><td>1</td><td>背景混合模式是透明的。</td></tr>
<tr><td>忽略回车</td><td>LWS_IGNORERETURN</td><td>2</td><td>当链接具有键盘焦点且用户按 Enter 时，控件将忽略击键并将其传递给主机对话框。</td></tr>
<tr><td>显示&字符</td><td>LWS_NOPREFIX</td><td>4</td><td>Windows Vista。 如果文本包含与号，则会将其视为文本字符，而不是快捷键的前缀。</td></tr>
<tr><td>当前样式</td><td>LWS_USEVISUALSTYLE</td><td>8</td><td>Windows Vista。 链接以当前视觉样式显示。</td></tr>
<tr><td>绘制通知</td><td>LWS_USECUSTOMTEXT</td><td>16</td><td>Windows Vista。 绘制控件时会发送 NM_CUSTOMTEXT 通知，以便应用程序可以动态提供文本。</td></tr>
<tr><td>向右对齐</td><td>LWS_RIGHT</td><td>32</td><td>Windows Vista。 文本右对齐。</td></tr>
</table><p><font size="6"><a name="链接项类">链接项类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>链接项类</td><td>LITEM</td><td>4280</td><td>用于设置和检索有关链接项的信息。</td></tr>
<tr><th colspan=4>链接项类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>掩码</td><td>mask</td><td>整数</td><td>标志的组合</td></tr>
<tr><td>序号</td><td>iLink</td><td>整数</td><td>控件链接的索引。掩码:1</td></tr>
<tr><td>状态</td><td>state</td><td>整数</td><td>1有键盘焦点,2启用链接,4已点击,8悬停突出,16定义颜色</td></tr>
<tr><td>标志</td><td>stateMask</td><td>整数</td><td>状态项的标志组合。与状态相同。掩码:2。</td></tr>
<tr><td>标识</td><td>szID[96]</td><td>文本</td><td>包含标识名称的宽字符串。掩码:4</td></tr>
<tr><td>链接</td><td>szUrl[4168]</td><td>文本</td><td>包含链接表示的URL的宽字符串。掩码:8</td></tr>
</table><p><font size="6"><a name="链接通知类">链接通知类</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>链接通知类</td><td>NMLINK</td><td>4292</td><td>包含链接通知信息。</td></tr>
<tr><th colspan=4>链接通知类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>包含有关通知的信息的类结构。</td></tr>
<tr><td>项目</td><td>item</td><td>链接项类</td><td>有关链接项的信息的类结构</td></tr>
</table><p><font size="6"><a name="链接点类">链接点类</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>链接点类</td><td>LHITTESTINFO</td><td>4288</td><td>用于获取与给定位置对应的链接的相关信息。</td></tr>
<tr><th colspan=4>链接点类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>左</td><td>pt.x</td><td>整数</td><td>有关链接项的信息的类结构</td></tr>
<tr><td>顶</td><td>pt.y</td><td>整数</td><td>命中测试的位置，以客户端坐标 (而不是屏幕坐标) 。</td></tr>
<tr><td>项目</td><td>item</td><td>链接项类</td><td>有关链接项的信息的类结构</td></tr>
</table><p><font size="6"><a name="热键框">热键框</a>——使用说明：</font></p>
热键控件是一个窗口，允许用户输入要用作热键的击键组合。 热键是用户可按以快速执行操作的组合键。例如用户需要定义一个热键，用于激活指定窗口。<br>
热键控件显示用户的选择并确保用户选择有效的组合键。 以下屏幕截图显示了用户按下 Alt 键后热键控件在对话框中的显示方式。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/hotkey.png"><br>
<h2>使用热键控件</h2><pre>
当用户输入要用作热键的组合键时，键的名称将显示在热键控件中。 组合键可以包含一个修饰键(如CTRL、Alt或SHIFT)和一个随附的键(如字符键、箭头键、功能键等) 。

用户选择组合键后，应用程序将从热键控件检索组合键，并使用它在系统中设置热键。 从热键控件检索的信息包括一个标志，指示修饰键和随附密钥的虚拟密钥代码。

应用程序可以使用热键控件提供的信息来设置全局热键或特定于线程的热键。 全局热键与特定窗口相关联;它允许用户从系统的任何部分激活窗口。
应用程序使用 设置热键 消息设置全局热键。 每当用户按下全局热键时， 设置热键 中指定的窗口都会收到指定 0xF150 值的 系统命令 消息。
此消息会激活接收它的窗口。 在调用 设置热键 的应用程序退出之前，热键将保持有效。

特定于线程的热键会生成 热键消息 消息，该消息将发布到特定线程的开头，以便消息循环的下一次迭代将其删除。 应用程序使用 注册热键 函数设置线程特定的热密钥。

<h2>热键控制消息</h2>
创建热键控件后，应用程序使用三条消息与之交互：热键设置组合、 热键设置按键和 热键获取按键。

应用程序可以发送 热键设置组合 消息，以指定一组被视为无效热键的 CTRL、ALT 和 SHIFT 组合键。 如果应用程序指定了无效的组合键，则它还应指定用户选择无效组合时
要使用的默认修饰符组合。 当用户输入无效组合时，系统会对无效组合和默认组合执行逻辑 OR 操作。 结果被视为有效组合;它转换为字符串并显示在 控件中。

热键设置按键消息允许应用程序为热键控件设置热键组合。 创建热键控件时也会使用此消息。程序使用 热键获取按键 消息检索用户选择的热键的虚拟密钥代码和修饰符标志。

<h2>热键控制通知</h2>
热键控件不会通过 控件事件 消息发送任何通知代码。 但是，当用户更改 控件 的内容时，它将通过命令事件消息发送 编辑内容更改 通知。

<h2>默认热键消息处理</h2>
本部分介绍与热键控件一起使用的窗口过程处理的窗口消息。</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>键入字符</td><td>WM_CHAR</td><td>0x102</td><td>检索虚拟密钥代码。</td></tr>
<tr><td>窗口创建</td><td>WM_CREATE</td><td>1</td><td>初始化热键控件，清除任何热键规则，并使用系统字体。</td></tr>
<tr><td>擦除背景</td><td>WM_ERASEBKGND</td><td>0x14</td><td>隐藏插入点，调用 处理窗口 函数，然后再次显示插入符号。</td></tr>
<tr><td>切换控件</td><td>WM_GETDLGCODE</td><td>0x87</td><td>返回 DLGC_WANTCHARS 和 DLGC_WANTARROWS 值的组合。</td></tr>
<tr><td>中文</td><td>WM_GETFONT</td><td>4</td><td>检索字体。</td></tr>
<tr><td>键盘按下</td><td>WM_KEYDOWN</td><td>0x100</td><td>如果键为 ENTER、TAB、空格键、DEL、ESC 或 BACKSPACE，则调用 处理窗口 函数。 如果键为 SHIFT、CTRL 或 Alt，它会检查组合是否有效，如果有效，则使用组合设置热键。 所有其他密钥都设置为热键，而无需先检查其有效性。</td></tr>
<tr><td>键盘松开</td><td>WM_KEYUP</td><td>0x101</td><td>检索虚拟密钥代码。</td></tr>
<tr><td>失去焦点</td><td>WM_KILLFOCUS</td><td>8</td><td>销毁插入点。</td></tr>
<tr><td>按下左键</td><td>WM_LBUTTONDOWN</td><td>0x201</td><td>将焦点设置为窗口。</td></tr>
<tr><td>首创窗口</td><td>WM_NCCREATE</td><td>0x81</td><td>设置 WS_EX_CLIENTEDGE 窗口样式。</td></tr>
<tr><td>窗口重绘</td><td>WM_PAINT</td><td>15</td><td>绘制热键控件。</td></tr>
<tr><td>获得焦点</td><td>WM_SETFOCUS</td><td>7</td><td>创建并显示插入点。</td></tr>
<tr><td>指定字体</td><td>WM_SETFONT</td><td>0x30</td><td>设置字体。</td></tr>
<tr><td>ALT键字符</td><td>WM_SYSCHAR</td><td>0x107</td><td>检索虚拟密钥代码。</td></tr>
<tr><td>ALT键按下</td><td>WM_SYSKEYDOWN</td><td>0x104</td><td>如果键为 ENTER、TAB、空格键、DEL、ESC 或 BACKSPACE，则调用 处理窗口 函数。 如果键为 SHIFT、CTRL 或 Alt，它会检查组合是否有效，如果有效，则使用组合设置热键。 所有其他密钥都设置为热键，而无需先检查其有效性。</td></tr>
<tr><td>ALT键松开</td><td>WM_SYSKEYUP</td><td>0x105</td><td>检索虚拟密钥代码。</td></tr>
</table>
<h2>如何检索和设置热键</h2>
本主题演示如何检索或设置热键控件的组合键。热键设置按键消息允许应用程序设置热键控件的热键组合。 应用程序使用 热键获取按键 消息检索用户选择的热键的虚拟密钥代码和修饰符标志。<br>
使用热键框可以显示用户按下的组合键，使用 热键获取按键 消息从热键控件中检索组合键，然后使用 设置热键 消息设置全局热键。<br>
<font color="#0000FF">程序段 按钮1_点击<br>
&emsp;&emsp;整数 键值=发送消息(热键框1, 热键获取按键, 0, 0)<br>
&emsp;&emsp;发送消息(窗体, 设置热键, 键值, 0)<br>
结束</font><br>
<p><font size="6">热键框——发送消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>热键设置按键</td><td>0x401</td><td>HKM_SETHOTKEY</td><td>设置热键控件的热键组合。③参数:键码/修饰符(各1字节);④数据:0</td></tr>
<tr><td>热键获取按键</td><td>0x402</td><td>HKM_GETHOTKEY</td><td>获取热键控件的键码和修饰符标志。③参数:0;④数据:0;返回值1SHIFT,2CTRL,4ALT,8扩展</td></tr>
<tr><td>热键设置组合</td><td>0x403</td><td>HKM_SETRULES</td><td>定义热键控件的无效组合和默认修饰符组合。③参数:标志,1无,2SHIFT,4CTRL,8ALT,16S+C,32S+A,64C+A,128SCA;④数据:组合1SHIFT,2CTRL,4ALT,8扩展;</td></tr>
</table><p><font size="6"><a name="富编辑">富编辑</a>——使用说明</font></p>
<font color="#FF0000">只写 ④数据 为控件事件;同时写 ③参数④数据 或不写时为单击左键</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><th colspan=4>富编辑框——通知消息：</th></tr>
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>编辑内容更改</td><td>0x300</td><td>EN_CHANGE</td><td>通知无窗口富编辑控件的主机窗口发生了更改。④数据:CHANGENOTIFY 结构</td></tr>
<tr><td>编辑更新重绘</td><td>0x400</td><td>EN_UPDATE</td><td>在编辑控件即将重绘自身时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑内存不足</td><td>0x500</td><td>EN_ERRSPACE</td><td>当编辑控件无法分配足够的内存时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑字数超出</td><td>0x501</td><td>EN_MAXTEXT</td><td>当前文本插入超过编辑控件的指定字符数时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑水平滚动</td><td>0x601</td><td>EN_HSCROLL</td><td>当用户单击编辑控件的水平滚动条时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑垂直滚动</td><td>0x602</td><td>EN_VSCROLL</td><td>单击垂直滚动条或滚动鼠标滚轮时发送。③参数:控件号/通知码;④数据:编辑框</td></tr>
<tr><td>编辑键盘鼠标</td><td>0x0700</td><td>EN_MSGFILTER</td><td>通知富编辑控件的父窗口，该控件中的键盘或鼠标事件。④数据:MSGFILTER 结构</td></tr>
<tr><td>编辑超出大小</td><td>0x0701</td><td>EN_REQUESTRESIZE</td><td>通知富编辑控件的父窗口，控件的内容小于或大于控件的窗口大小。④数据:REQRESIZE 结构</td></tr>
<tr><td>编辑选字更改</td><td>0x0702</td><td>EN_SELCHANGE</td><td>通知富编辑控件的父窗口当前所选内容已更改。④数据:SELCHANGE 结构</td></tr>
<tr><td>编辑文件拖放</td><td>0x0703</td><td>EN_DROPFILES</td><td>通知富编辑控件父窗口，用户正在尝试将文件拖放到控件中。④数据:ENDROPFILES 结构</td></tr>
<tr><td>编辑保护文本</td><td>0x0704</td><td>EN_PROTECTED</td><td>通知富编辑控件的父窗口，用户正在执行的操作将更改受保护的文本范围。④数据:ENPROTECTED 结构</td></tr>
<tr><td>编辑校正手势</td><td>0x0705</td><td>EN_CORRECTTEXT</td><td>通知富编辑控件父窗口发生了SYV_CORRECT手势，使父窗口有机会取消更正文本。④数据:ENCORRECTTEXT 结构</td></tr>
<tr><td>编辑撤销不足</td><td>0x0706</td><td>EN_STOPNOUNDO</td><td>通知富编辑控件的父窗口该控件无法为其分配足够的内存来维持撤消状态。④数据:<a href="#通知类">通知类</a></td></tr>
<tr><td>编辑换输入法</td><td>0x0707</td><td>EN_IMECHANGE</td><td>通知富编辑控件的父级 IME 转换状态已更改。③参数:标识/代码;④数据:控件</td></tr>
<tr><td>编辑存剪切板</td><td>0x0708</td><td>EN_SAVECLIPBOARD</td><td>通知富编辑控件的父窗口控件正在关闭，并且剪贴板包含信息。④数据:ENSAVECLIPBOARD 结构</td></tr>
<tr><td>编辑对象失败</td><td>0x0709</td><td>EN_OLEOPFAILED</td><td>通知富编辑控件的父窗口，用户对组件对象模型(COM)对象的操作失败。④数据:ENOLEOPFAILED 结构</td></tr>
<tr><td>编辑对象读取</td><td>0x070A</td><td>EN_OBJECTPOSITIONS</td><td>当控件在对象中读取时，通知富编辑控件的父窗口。④数据:OBJECTPOSITIONS 结构</td></tr>
<tr><td>编辑链接通知</td><td>0x070B</td><td>EN_LINK</td><td>控件在收到各种消息时发送EN_LINK通知代码。④数据:ENLINK 结构</td></tr>
<tr><td>编辑拖放完成</td><td>0x070C</td><td>EN_DRAGDROPDONE</td><td>通知富编辑控件的父窗口拖放操作已完成。④数据:<a href="#通知类">通知类</a></td></tr>
<tr><td>编辑展开大纲</td><td>0x070D</td><td>EN_PARAGRAPHEXPANDED</td><td>通知富编辑控件的父级已展开大纲。④数据:<a href="#通知类">通知类</a></td></tr>
<tr><td>编辑页面更改</td><td>0x070E</td><td>EN_PAGECHANGE</td><td>通知富编辑控件的父窗口页面已更改。</td></tr>
<tr><td>编辑无效字符</td><td>0x070F</td><td>EN_LOWFIRTF</td><td>通知控件的父窗口收到不支持的RTF格式关键字。④数据:ENLOWFIRTF 结构</td></tr>
<tr><td>编辑从左到右</td><td>0x0710</td><td>EN_ALIGNLTR</td><td>通知富编辑控件的父窗口段落方向已更改为从左到右。③参数:标识/代码;④数据:控件</td></tr>
<tr><td>编辑从右到左</td><td>0x0711</td><td>EN_ALIGNRTL</td><td>通知富编辑控件的父窗口段落方向更改为从右到左。③参数:标识/代码;④数据:控件</td></tr>
<tr><td>编辑特定格式</td><td>0x0712</td><td>EN_CLIPFORMAT</td><td>通知富编辑控件的父窗口，特定剪贴板格式发生粘贴。④数据:CLIPBOARDFORMAT 结构</td></tr>
<tr><td>编辑输入服务</td><td>0x0713</td><td>EN_STARTCOMPOSITION</td><td>通知用户开始使用IME或文本服务框架键入的丰富编辑控件父窗口。④数据:<a href="#通知类">通知类</a></td></tr>
<tr><td>编辑完成输入</td><td>0x0714</td><td>EN_ENDCOMPOSITION</td><td>用户已输入新数据或已完成使用IME或文本服务框架的输入数据。④数据:ENDCOMPOSITIONNOTIFY 结构</td></tr>
<tr><th colspan=4>富编辑框——发送消息：</th></tr>
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>编辑获取字限</td><td>0x425</td><td>EM_GETLIMITTEXT</td><td>获取编辑控件的当前文本限制。③参数:0;④数据:0;返回限制字数</td></tr>
<tr><td>编辑获取坐标</td><td>0x426</td><td>EM_POSFROMCHAR</td><td>检索编辑控件中指定字符的工作区坐标。③参数:字符索引;④数据:0;返回低位是左，高位是顶</td></tr>
<tr><td>编辑坐标点位</td><td>0x427</td><td>EM_CHARFROMPOS</td><td>获取编辑控件最靠近指定点的字符的信息。③参数:0;④数据:坐标类;返回字符索引</td></tr>
<tr><td>编辑光标可视</td><td>0x431</td><td>EM_SCROLLCARET</td><td>将插入点滚动到编辑控件的视图中。③参数:0;④数据:0;</td></tr>
<tr><td>编辑粘贴格式</td><td>0x432</td><td>EM_CANPASTE</td><td>确定富编辑控件是否可以粘贴指定的<a href="#剪切板格式">剪贴板格式</a>。③参数:格式;④数据:0;返回非零可以粘贴</td></tr>
<tr><td>编辑显示区域</td><td>0x433</td><td>EM_DISPLAYBAND</td><td>显示丰富编辑控件的一部分内容。 ③参数:0;④数据:矩形;</td></tr>
<tr><td>编辑选中范围</td><td>0x434</td><td>EM_EXGETSEL</td><td>检索丰富编辑控件中所选内容的起始和结束字符位置。 ③参数:0;④数据:<a href="#范围类">范围类</a>;</td></tr>
<tr><td>编辑最大粘贴</td><td>0x435</td><td>EM_EXLIMITTEXT</td><td>设置用户可键入或粘贴到富编辑控件的文本量的上限。 ③参数:0;④数据:数量(默认64K);</td></tr>
<tr><td>编辑字符行号</td><td>0x436</td><td>EM_EXLINEFROMCHAR</td><td>确定哪个行包含富编辑控件中的指定字符。 ③参数:0;④数据:字符索引;返回行号索引</td></tr>
<tr><td>编辑设置选中</td><td>0x437</td><td>EM_EXSETSEL</td><td>选择控件中的一系列字符或组件对象模型。 ③参数:0;④数据:<a href="#范围类">范围类</a>;</td></tr>
<tr><td>编辑查找文本</td><td>0x438</td><td>EM_FINDTEXT</td><td>在富编辑控件中查找文本。<a href="#查找方式">查找方式</a> ③参数:方式1向下,2全字匹配,4分大小写;④数据:<a href="#文字类">文字类</a>;</td></tr>
<tr><td>编辑格式范围</td><td>0x439</td><td>EM_FORMATRANGE</td><td>在特定设备的 Rich Edit 控件中格式化文本范围。 ③参数:是否呈现文本;④数据:<a href="#格式范围类">格式范围类</a>;</td></tr>
<tr><td>编辑取字格式</td><td>0x43A</td><td>EM_GETCHARFORMAT</td><td>确定富编辑控件中的字符格式。 ③参数:0默认,1所选字符;④数据:<a href="#字符格式类">字符格式类</a>;</td></tr>
<tr><td>编辑获取事件</td><td>0x43B</td><td>EM_GETEVENTMASK</td><td>检索富编辑控件的事件掩码。事件掩码指定控件发送到其父窗口的通知代码。 ③参数:0;④数据:0;返回:<a href="#编辑事件掩码">事件掩码</a></td></tr>
<tr><td>编辑对象接口</td><td>0x43C</td><td>EM_GETOLEINTERFACE</td><td>获取丰富编辑控件的组件对象模型接口。 ③参数:0;④数据:@接口:<a href="#富编辑对象">富编辑对象</a>;</td></tr>
<tr><td>编辑取段格式</td><td>0x43D</td><td>EM_GETPARAFORMAT</td><td>检索丰富编辑控件中当前所选内容的段落格式。 ③参数:0;④数据:<a href="#段落格式类">段落格式类</a>;</td></tr>
<tr><td>编辑取选中字</td><td>0x43E</td><td>EM_GETSELTEXT</td><td>检索格式编辑控件中当前选择的文本。 ③参数:0;④数据:缓冲区;</td></tr>
<tr><td>编辑隐藏选中</td><td>0x43F</td><td>EM_HIDESELECTION</td><td>隐藏或显示富编辑控件中的选定内容。 ③参数:真=隐藏,假=显示;④数据:0;</td></tr>
<tr><td>编辑特殊粘贴</td><td>0x440</td><td>EM_PASTESPECIAL</td><td>将特定<a href="#剪切板格式">剪贴板格式</a>粘贴到富编辑控件中。 ③参数:格式;④数据:<a name="特殊粘贴类">特殊粘贴类</a>;</td></tr>
<tr><td>编辑超出通知</td><td>0x441</td><td>EM_REQUESTRESIZE</td><td>强制富编辑控件将 编辑超出大小 通知代码发送到其父窗口。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑选中类型</td><td>0x442</td><td>EM_SELECTIONTYPE</td><td>确定富编辑控件的选择内容的类型。 ③参数:0;④数据:0;返回:0为空,1文本,2对象,4多个字符,8多个对象</td></tr>
<tr><td>编辑背景颜色</td><td>0x443</td><td>EM_SETBKGNDCOLOR</td><td>设置丰富编辑控件的背景色。 ③参数:真=系统颜色,假=指定颜色;④数据:颜色值;返回原始背景色。</td></tr>
<tr><td>编辑改字格式</td><td>0x444</td><td>EM_SETCHARFORMAT</td><td>在富编辑控件中设置字符格式。 ③参数:<a href="#字符格式">字符格式</a>;④数据:<a href="#字符格式类">字符格式类</a>;</td></tr>
<tr><td>编辑设置事件</td><td>0x445</td><td>EM_SETEVENTMASK</td><td>设置丰富编辑控件的事件掩码。事件掩码指定控件发送到其父窗口的通知代码。 ③参数:0;④数据:<a href="#编辑事件掩码">事件掩码</a>;</td></tr>
<tr><td>编辑回调对象</td><td>0x446</td><td>EM_SETOLECALLBACK</td><td>为丰富编辑控件提供<a href="#富编辑回调对象">富编辑回调对象</a>，控件使用该对象从客户端获取与 OLE 相关的资源和信息。 ③参数:0;④数据:对象;</td></tr>
<tr><td>编辑改段格式</td><td>0x447</td><td>EM_SETPARAFORMAT</td><td>在富编辑控件中设置当前选定内容的段落格式。 ③参数:0;④数据:<a href="#段落格式类">段落格式类</a>;</td></tr>
<tr><td>编辑设备行宽</td><td>0x448</td><td>EM_SETTARGETDEVICE</td><td>设置用于“所见即所得”的目标设备和行宽， (WYSIWYG) 丰富编辑控件中的格式设置。 ③参数:设备;④数据:线条宽度;</td></tr>
<tr><td>编辑传数据流</td><td>0x449</td><td>EM_STREAMIN</td><td>将富编辑控件的内容替换为由应用程序定义的<a href="#编辑流回调">编辑流回调</a>函数提供的数据流。 ③参数:选项;④数据:<a href="#编辑流类">编辑流类</a>;选项:1文本,2RTF;控件字 \objattph 后跟空格表示对象位置。<br>选项组合标志:0x10宽字符文本,0x20其他代码页(0xFDE90021高位65001是CP_UTF8),0x4000仅流式传输所有语言通用的关键字,0x8000数据流将替换当前所选内容</td></tr>
<tr><td>编辑取数据流</td><td>0x44A</td><td>EM_STREAMOUT</td><td>将富编辑控件的内容传递给由应用程序定义的<a href="#编辑流回调">编辑流回调</a>函数。 ③参数:选项;④数据:<a href="#编辑流类">编辑流类</a>;选项:1文本,2RTF,3空格代替对象的RTF,4对象文本;<br>选项组合标志:0x10宽字符文本,0x20其他代码页(0xFDE90021高位65001是CP_UTF8),0x4000仅流式传输所有语言通用的关键字,0x8000数据流将替换当前所选内容</td></tr>
<tr><td>编辑字符范围</td><td>0x44B</td><td>EM_GETTEXTRANGE</td><td>从丰富编辑控件中检索指定的字符范围。 ③参数:0;④数据:<a href="#文字类">文字类</a>;</td></tr>
<tr><td>编辑前后断字</td><td>0x44C</td><td>EM_FINDWORDBREAK</td><td>查找指定字符位置之前或之后的下一个断字符，或检索有关该位置的字符的信息。 ③参数:操作;④数据:位置;<br>操作:0=查找以单词开头的指定位置之前最近的字符。
1=查找在指定位置后开始单词的下一个字符。2=如果指定位置处的字符是分隔符，则返回真，否则返回假。<br>
3=返回字符在指定位置的字符类和断字符标志。4=查找在指定位置之前开始单词的下一个字符。 此值在 CTRL+向左键处理期间使用。<br>
5=查找在指定位置后开始单词的下一个字符。 此值在 CTRL+向右键处理期间使用。6=在指定位置之前查找下一个单词结尾。7=查找指定位置后的下一个词尾分隔符。</td></tr>
<tr><td>编辑设置选项</td><td>0x44D</td><td>EM_SETOPTIONS</td><td>设置富编辑控件的选项。 ③参数:1指定选项,2增加选项,3保留新项,4异或选项;④数据:1双击时自动选择单词,<br>
0x40向上滚动,0x80水平滚动,0x100选中反显,0x800只读,0x1000允许多行,0x8000保留所选,0x01000000选择整行,0x00400000竖向文字;<br></td></tr>
<tr><td>编辑获取选项</td><td>0x44E</td><td>EM_GETOPTIONS</td><td>检索富编辑控件选项。 ③参数:0;④数据:0;返回当前选项标志值的组合。</td></tr>
<tr><td>编辑搜索文本</td><td>0x44F</td><td>EM_FINDTEXTEX</td><td>查找格式编辑控件中的文本。<a href="#查找方式">查找方式</a> ③参数:0;④数据:1向下,2全字匹配,4分大小写;④数据:<a href="#查找文字类">查找文字类</a>;</td></tr>
<tr><td>编辑分词函数</td><td>0x450</td><td>EM_GETWORDBREAKPROCEX</td><td>检索当前注册的扩充编辑控件的扩展分词过程的地址。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置分词</td><td>0x451</td><td>EM_SETWORDBREAKPROCEX</td><td>设置丰富编辑控件的扩展分词过程。 ③参数:0;④数据:<a href="#编辑分词回调">编辑分词回调</a>;</td></tr>
<tr><td>编辑撤销次数</td><td>0x452</td><td>EM_SETUNDOLIMIT</td><td>设置可存储在丰富编辑控件的撤消队列中的最大操作数。 ③参数:数值;④数据:0;</td></tr>
<tr><td>编辑重复操作</td><td>0x454</td><td>EM_REDO</td><td>向丰富编辑控件发送重做消息，以重复控件重做队列中的下一个操作。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑能否重复</td><td>0x455</td><td>EM_CANREDO</td><td>确定控制重做队列中是否有任何操作。 ③参数:0;④数据:0;返回0无队列,否则可重做</td></tr>
<tr><td>编辑撤销类型</td><td>0x456</td><td>EM_GETUNDONAME</td><td>检索下一个撤消操作的类型。 ③参数:0;④数据:0;返回:0未知,1键入操作。2删除操作。3拖放操作。4剪切操作。5粘贴操作。6自动表格插入</td></tr>
<tr><td>编辑重做类型</td><td>0x457</td><td>EM_GETREDONAME</td><td>检索重做队列中下一个操作的类型。③参数:0;④数据:0;返回:0未知,1键入操作。2删除操作。3拖放操作。4剪切操作。5粘贴操作。6自动表格插入</td></tr>
<tr><td>编辑阻止撤销</td><td>0x458</td><td>EM_STOPGROUPTYPING</td><td>阻止控件将其他键入操作收集到当前撤消操作中。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑文本模式</td><td>0x459</td><td>EM_SETTEXTMODE</td><td>设置富编辑控件的文本模式或撤消级别。 如果控件包含任何文本，则消息失败。 ③参数:<a href="#编辑文本模式">模式</a>;④数据:0;</td></tr>
<tr><td>编辑获取模式</td><td>0x45A</td><td>EM_GETTEXTMODE</td><td>获取丰富的编辑控件的当前文本模式和撤消级别。 ③参数:0;④数据:0;返回:<a href="#编辑文本模式">文本模式</a></td></tr>
<tr><td>编辑链接检测</td><td>0x45B</td><td>EM_AUTOURLDETECT</td><td>启用或禁用富编辑控件对超链接的自动检测。③参数:0禁用检测,1识别路径域名,2识别邮件,4识别电话,8识别东亚域名,<br>16识别盘符路径,32禁止拉丁文、希腊语和西里尔文的域名;④数据:0默认名字,或者news:http:ftp:telnet:等等</td></tr>
</td></tr>
<tr><td>编辑是否检测</td><td>0x45C</td><td>EM_GETAUTOURLDETECT</td><td>指示是否在富编辑控件中启用自动 URL 检测。 ③参数:0;④数据:0;返回1活动检测，0非活动</td></tr>
<tr><td>编辑改调色板</td><td>0x45D</td><td>EM_SETPALETTE</td><td>更改富编辑控件用于其显示窗口的调色板。 ③参数:调色板;④数据:0;</td></tr>
<tr><td>编辑获取文本</td><td>0x45E</td><td>EM_GETTEXTEX</td><td>获取富编辑控件中的文本。 ③参数:<a href="#取文字类">取文字类</a>;④数据:文本缓冲区;</td></tr>
<tr><td>编辑文本长度</td><td>0x45F</td><td>EM_GETTEXTLENGTHEX</td><td>以各种方式计算文本长度。 ③参数:<a href="#文字长度类">文字长度类</a>;④数据:0;返回字数</td></tr>
<tr><td>编辑显滚动条</td><td>0x460</td><td>EM_SHOWSCROLLBAR</td><td>显示或隐藏丰富编辑控件的主机窗口中的滚动条之一。 ③参数:0水平,1垂直;④数据:真=显示,假=隐藏;</td></tr>
<tr><td>编辑设置文本</td><td>0x461</td><td>EM_SETTEXTEX</td><td>插入替换文本，可使用代码页和格式文本。 ③参数:<a href="#改文字类">改文字类</a>;④数据:文字内容;开头使用“{\rtf”或“{urtf”序列，则使用 RTF 读取器读取文本。</td></tr>
<tr><td>编辑设置标点</td><td>0x464</td><td>EM_SETPUNCTUATION</td><td>设置富编辑控件的标点符号。 ③参数:1以下标点,2前导符号,3溢出,4分隔符;④数据:<a href="#标点类">标点类</a>;</td></tr>
<tr><td>编辑获取标点</td><td>0x465</td><td>EM_GETPUNCTUATION</td><td>获取富编辑控件的当前标点符号。 ③参数:1以下标点,2前导符号,3溢出,4分隔符;④数据:<a href="#标点类">标点类</a>;</td></tr>
<tr><td>编辑设置换行</td><td>0x466</td><td>EM_SETWORDWRAPMODE</td><td>设置丰富编辑控件的自动换行和断字选项。 ③参数:0x010自动换行,0x020中日韩英断字,0x040识别溢出,0x080设为级别1,0x100级别2,0x200自定义符号;④数据:0;</td></tr>
<tr><td>编辑获取换行</td><td>0x467</td><td>EM_GETWORDWRAPMODE</td><td>获取丰富编辑控件的当前换行和分词选项。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑改合成色</td><td>0x468</td><td>EM_SETIMECOLOR</td><td>为丰富编辑控件设置输入法编辑器合成颜色。 ③参数:0;④数据:<a href="#合成色类">合成色类</a>;</td></tr>
<tr><td>编辑取合成色</td><td>0x469</td><td>EM_GETIMECOLOR</td><td>检索输入法编辑器合成颜色。 ③参数:0;④数据:<a href="#合成色类">合成色类</a>;</td></tr>
<tr><td>编辑改输入项</td><td>0x46A</td><td>EM_SETIMEOPTIONS</td><td>设置输入法编辑器选项。 ③参数:1指定选项,2组合添加,3保留指定,4独占异或;④数据:1禁用IME,2输入焦点时启用IME,4输入焦点时禁用IME,<br>
8输入焦点时关闭IME状态窗口,0x20使用的注释,0x40输入焦点时激活IME,0x80输入焦点时停用IME,0x100输入焦点时还原IME,0x400单独的组合字符串编辑器;</td></tr>
<tr><td>编辑取输入项</td><td>0x46B</td><td>EM_GETIMEOPTIONS</td><td>获取输入法编辑器选项。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑转换坐标</td><td>0x46C</td><td>EM_CONVPOSITION</td><td>此消息未实现。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑改语言项</td><td>0x478</td><td>EM_SETLANGOPTIONS</td><td>在丰富编辑控件中设置输入法编辑器和亚洲语言支持的<a href="#输入法语言选项">选项</a>。 ③参数:0;④数据:选项;</td></tr>
<tr><td>编辑取语言项</td><td>0x479</td><td>EM_GETLANGOPTIONS</td><td>获取输入法编辑器的丰富编辑控件选项设置和亚洲语言支持。 ③参数:0;④数据:0;返回:<a href="#输入法语言选项">语言选项</a></td></tr>
<tr><td>编辑输入模式</td><td>0x47A</td><td>EM_GETIMECOMPMODE</td><td>检索丰富编辑控件的当前输入法编辑器模式。 ③参数:0;④数据:0;返回:0未打开。1真内联模式。2级别2。3级别2.5。4特殊界面</td></tr>
<tr><td>编辑查找文字</td><td>0x47B</td><td>EM_FINDTEXTW</td><td>在富编辑控件中查找宽文本。<a href="#查找方式">查找方式</a> ③参数:方式1向下,2全字匹配,4分大小写;④数据:<a href="#文字类">文字类</a>;</td></tr>
<tr><td>编辑搜索文字</td><td>0x47C</td><td>EM_FINDTEXTEXW</td><td>查找格式编辑控件中的宽文本。<a href="#查找方式">查找方式</a> ③参数:0;④数据:1向下,2全字匹配,4分大小写;④数据:<a href="#查找文字类">查找文字类</a>;</td></tr>
<tr><td>编辑转换输入</td><td>0x47D</td><td>EM_RECONVERSION</td><td>重新转换对话框调用输入法编辑器。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置偏差</td><td>0x47E</td><td>EM_SETIMEMODEBIAS</td><td>为丰富编辑控件设置输入法编辑器模式偏差。 ③参数:1名字偏差,2没有偏差;④数据:与参数相同;</td></tr>
<tr><td>编辑获取偏差</td><td>0x47F</td><td>EM_GETIMEMODEBIAS</td><td>检索富编辑控件的输入法编辑器模式偏差。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置双向</td><td>0x4C8</td><td>EM_SETBIDIOPTIONS</td><td>设置富编辑控件中双向选项的当前状态。 ③参数:0;④数据:<a href="#双向信息类">双向信息类</a>;</td></tr>
<tr><td>编辑获取双向</td><td>0x4C9</td><td>EM_GETBIDIOPTIONS</td><td>获取富编辑控件中双向选项的当前状态。 ③参数:0;④数据:<a href="#双向信息类">双向信息类</a>;</td></tr>
<tr><td>编辑设置版式</td><td>0x4CA</td><td>EM_SETTYPOGRAPHYOPTIONS</td><td>设置丰富编辑控件的版式选项的当前状态。 ③参数:1高级换行格式,2简单换行;④数据:与参数相同;</td></tr>
<tr><td>编辑获取版式</td><td>0x4CB</td><td>EM_GETTYPOGRAPHYOPTIONS</td><td>返回丰富编辑控件的版式选项的当前状态。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置样式</td><td>0x4CC</td><td>EM_SETEDITSTYLE</td><td>设置格式编辑控件的当前<a href="#编辑样式">编辑样式标志</a>。 ③参数:样式;④数据:与参数相同;</td></tr>
<tr><td>编辑获取样式</td><td>0x4CD</td><td>EM_GETEDITSTYLE</td><td>检索当前<a href="#编辑样式">编辑样式标志</a>。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑轮廓外形</td><td>0x4DC</td><td>EM_OUTLINE</td><td>未实现。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑取滚动点</td><td>0x4DD</td><td>EM_GETSCROLLPOS</td><td>获取编辑控件的当前滚动位置。 ③参数:0;④数据:<a href="#坐标类">坐标类</a>;</td></tr>
<tr><td>编辑改滚动点</td><td>0x4DE</td><td>EM_SETSCROLLPOS</td><td>将富编辑控件的内容滚动到指定点。 ③参数:0;④数据:<a href="#坐标类">坐标类</a>;</td></tr>
<tr><td>编辑设置字号</td><td>0x4DF</td><td>EM_SETFONTSIZE</td><td>设置富编辑控件中所选文本的字号。 ③参数:-1637 到 1638磅;④数据:0;</td></tr>
<tr><td>编辑获取缩放</td><td>0x4E0</td><td>EM_GETZOOM</td><td>获取多行编辑控件或丰富编辑控件的当前缩放比例。缩放比例始终在 1/64 和 64 之间。 ③参数:分子;④数据:分母;</td></tr>
<tr><td>编辑设置缩放</td><td>0x4E1</td><td>EM_SETZOOM</td><td>设置获取多行编辑控件或丰富编辑控件的当前缩放比例。缩放比例始终在 1/64 和 64 之间。③参数:分子;④数据:分母;</td></tr>
<tr><td>编辑获取视图</td><td>0x4E2</td><td>EM_GETVIEWKIND</td><td>未使用。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置视图</td><td>0x4E3</td><td>EM_SETVIEWKIND</td><td>未使用。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑获取页面</td><td>0x4E4</td><td>EM_GETPAGE</td><td>未使用。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置页面</td><td>0x4E5</td><td>EM_SETPAGE</td><td>未使用。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑获取连字</td><td>0x4E6</td><td>EM_GETHYPHENATEINFO</td><td>检索有关富编辑控件的连字的信息。 ③参数:<a href="#连字类">连字类</a>;④数据:0;</td></tr>
<tr><td>编辑设置连字</td><td>0x4E7</td><td>EM_SETHYPHENATEINFO</td><td>设置富编辑控件执行断字的方式。 ③参数:<a href="#连字类">连字类</a>;④数据:0;</td></tr>
<tr><td>编辑获取布局</td><td>0x4EB</td><td>EM_GETPAGEROTATE</td><td>获取富编辑控件中的文本布局。 ③参数:0;④数据:0;返回布局相当于旋转角度：0=0度,1=270度，2=180度，3=90度，5蒙古文</td></tr>
<tr><td>编辑设置布局</td><td>0x4EC</td><td>EM_SETPAGEROTATE</td><td>设置富编辑控件中的文本布局。 ③参数:0左右/上下,1上下-右左，2右左-下上，3下上-左右，5上下-左右;④数据:0;</td></tr>
<tr><td>编辑取字偏差</td><td>0x4ED</td><td>EM_GETCTFMODEBIAS</td><td>获取富编辑控件中文本服务框架<a href="#框架模式偏差">模式偏差</a>值。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑改字偏差</td><td>0x4EE</td><td>EM_SETCTFMODEBIAS</td><td>设置富编辑控件中文本服务框架 (TSF) <a href="#框架模式偏差">模式偏差</a>。 ③参数:0无,1文件名,2名称,3阅读,4日期<br>,5对话,6数字,7平假名,8片假名,9朝鲜文,10半角片假,11全角字母,12半角字母;④数据:0;</td></tr>
<tr><td>编辑获取键盘</td><td>0x4F0</td><td>EM_GETCTFOPENSTATUS</td><td>确定文本服务框架 (TSF) 键盘是打开还是关闭。 ③参数:0;④数据:0;返回:真=打开,假=关闭</td></tr>
<tr><td>编辑设置键盘</td><td>0x4F1</td><td>EM_SETCTFOPENSTATUS</td><td>打开或关闭文本服务框架 (TSF) 键盘。 ③参数:真=打开,假=关闭;④数据:0;</td></tr>
<tr><td>编辑合成文本</td><td>0x4F2</td><td>EM_GETIMECOMPTEXT</td><td>检索输入法编辑器合成文本。 ③参数:<a href="#合成字类">合成字类</a>;④数据:缓冲区;</td></tr>
<tr><td>编辑东亚区域</td><td>0x4F3</td><td>EM_ISIME</td><td>使用丰富编辑控件的当前输入区域设置确定是东亚区域设置。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑输入功能</td><td>0x4F4</td><td>EM_GETIMEPROPERTY</td><td>检索与当前输入区域设置关联的输入法编辑器的<a href="#输入法属性">属性和功能</a>。 ③参数:功能属性;④数据:0;</td></tr>
<tr><td>编辑获取对象</td><td>0x50D</td><td>EM_GETQUERYRTFOBJ</td><td>未实现。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置对象</td><td>0x50E</td><td>EM_SETQUERYRTFOBJ</td><td>未实现。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑获取纠错</td><td>0x4E9</td><td>EM_GETAUTOCORRECTPROC</td><td>获取指向应用程序定义的 <a href="#编辑纠错回调">编辑纠错回调</a> 函数的 指针。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置纠错</td><td>0x4EA</td><td>EM_SETAUTOCORRECTPROC</td><td>定义当前自动更正回调过程。 ③参数:<a href="#编辑纠错回调">编辑纠错回调</a>;④数据:0;</td></tr>
<tr><td>编辑调用纠错</td><td>0x4FF</td><td>EM_CALLAUTOCORRECTPROC</td><td>调用设置的自动更正回调函数，前提是插入点前面的文本是自动更正的候选项。 ③参数:宽字符;④数据:0;</td></tr>
<tr><td>编辑获取表格</td><td>0x509</td><td>EM_GETTABLEPARMS</td><td>检索表行的表参数和指定数量的单元格参数。 ③参数:<a href="#表行类">表行类</a>;④数据:<a href="#表列类">表列类</a>;</td></tr>
<tr><td>编辑设置表格</td><td>0x533</td><td>EM_SETTABLEPARMS</td><td>更改表中行的参数。 ③参数:<a href="#表行类">表行类</a>;④数据:<a href="#表列类">表列类</a>;</td></tr>
<tr><td>编辑设置扩展</td><td>0x513</td><td>EM_SETEDITSTYLEEX</td><td>设置当前的<a href="#扩展编辑样式">扩展编辑样式标志</a>。 ③参数:样式;④数据:同参数;</td></tr>
<tr><td>编辑获取扩展</td><td>0x514</td><td>EM_GETEDITSTYLEEX</td><td>检索当前的<a href="#扩展编辑样式">扩展编辑样式标志</a>。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑获取故事</td><td>0x522</td><td>EM_GETSTORYTYPE</td><td>获取<a href="#文章故事类型">故事类型</a>。 ③参数:0;④数据:0;</td></tr>
<tr><td>编辑设置故事</td><td>0x523</td><td>EM_SETSTORYTYPE</td><td>设置<a href="#文章故事类型">故事类型</a>。 ③参数:索引;④数据:类型;</td></tr>
<tr><td>编辑获取省略</td><td>0x531</td><td>EM_GETELLIPSISMODE</td><td>检索当前省略号模式。 ③参数:0;④数据:@模式;0不使用省略号。1末尾的省略号 (强行中断) 。3结尾的省略号 (分词) 。</td></tr>
<tr><td>编辑设置省略</td><td>0x532</td><td>EM_SETELLIPSISMODE</td><td>设置当前省略号模式。 ③参数:0;④数据:0不使用省略号,1末尾的省略号 (强行中断) 。3结尾的省略号 (分词) ;</td></tr>
<tr><td>编辑获取触摸</td><td>0x536</td><td>EM_GETTOUCHOPTIONS</td><td>检索与丰富编辑控件关联的触摸选项。 ③参数:1触摸手柄是否可见,2未实现;④数据:0;</td></tr>
<tr><td>编辑设置触摸</td><td>0x537</td><td>EM_SETTOUCHOPTIONS</td><td>设置与丰富编辑控件关联的触摸选项。 ③参数:1显示或隐藏触摸手柄,2启用或禁用触摸手柄;④数据:真/假;</td></tr>
<tr><td>编辑插入图像</td><td>0x53A</td><td>EM_INSERTIMAGE</td><td>将所选内容替换为显示图像的数据。 ③参数:0;④数据:<a href="#编辑图像类">编辑图像类</a>;</td></tr>
<tr><td>编辑自动化名</td><td>0x540</td><td>EM_SETUIANAME</td><td>设置 UI 自动化 (UIA) 的丰富编辑控件的名称。 ③参数:0;④数据:名称;</td></tr>
<tr><td>编辑省略状态</td><td>0x542</td><td>EM_GETELLIPSISSTATE</td><td>检索当前省略号状态。 ③参数:0;④数据:0;显示省略号则返回真，否则返回假。</td></tr>
</table><p><font size="6"><a name="编辑纠错回调">编辑纠错回调</a>——函数结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>编辑纠错回调</td><td>Autocorrectproc</td><td>5</td><td>为输入到丰富编辑控件中的文本提供应用程序定义的自动错误更正。</td></tr>
<tr><th colspan=4>编辑纠错回调——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>语言</td><td>langid</td><td>整数</td><td>标识要用于自动更正的自动更正文件的语言 ID。</td></tr>
<tr><td>候选</td><td>pszBefore</td><td>整数</td><td>自动更正候选字符串。</td></tr>
<tr><td>更正</td><td>pszAfter</td><td>整数</td><td>生成的自动更正字符串（如果未 ATP_NOCHANGE返回值）。</td></tr>
<tr><td>字数</td><td>cchAfter</td><td>整数</td><td>自动更正字符串的字符计数。</td></tr>
<tr><td>尾字</td><td>pcchReplaced</td><td>整数</td><td>候选字符串要替换为自动更正字符串的尾随字符计数。</td></tr>
</table><p><font size="6">编辑纠错回调——返回值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ATP_NOCHANGE</td><td>0</td><td>无更改。</td></tr>
<tr><td>ATP_CHANGE</td><td>1</td><td>更改但不替换大多数分隔符，并且不要替换未更改的尾随字符范围， (保留其格式) 。</td></tr>
<tr><td>ATP_NODELIMITER</td><td>2</td><td>更改但不替换未更改的尾随字符范围。</td></tr>
<tr><td>ATP_REPLACEALLTEXT</td><td>4</td><td>替换尾随字符，即使它们未更改， (对整个替换字符串) 使用相同的格式。</td></tr>
</table><p><font size="6"><a name="编辑分词回调">编辑分词回调</a>——函数结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>编辑分词回调</td><td>Editwordbreakprocex</td><td>4</td><td>确定指定文本中字符的断字符索引或字符类和分词标志。</td></tr>
<tr><th colspan=4>编辑分词回调——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>文字</td><td>pchText</td><td>整数</td><td>指向当前位置的文本的指针。</td></tr>
<tr><td>长度</td><td>cchText</td><td>整数</td><td>缓冲区 中代码指定方向的字符数。</td></tr>
<tr><td>字集</td><td>bCharSet</td><td>整数</td><td>文本的字符集。</td></tr>
<tr><td>功能</td><td>action</td><td>整数</td><td>指向变量的指针，回调函数将该变量设置为实际读取或写入的字节数。</td></tr>
</table><p><font size="6"><a name="编辑流回调">编辑流回调</a>——函数结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>编辑流回调</td><td>Editstreamcallback</td><td>4</td><td>用于将数据流传入或传出丰富的编辑控件。</td></tr>
<tr><th colspan=4>编辑流回调——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标识</td><td>dwCookie</td><td>整数</td><td>编辑流类 结构的 标识 成员指定的值。</td></tr>
<tr><td>指针</td><td>pbBuff</td><td>整数</td><td>指向要从中读取或写入的缓冲区的指针。</td></tr>
<tr><td>长度</td><td>cb</td><td>整数</td><td>要读取或写入的字节数。</td></tr>
<tr><td>实长</td><td>pcb</td><td>整数</td><td>指向变量的指针，回调函数将该变量设置为实际读取或写入的字节数。</td></tr>
</table><p><font size="6"><a name="编辑连字回调">编辑连字回调</a>——函数结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>编辑连字回调</td><td>HyphenateProc</td><td>4</td><td>它确定如何在丰富编辑控件中执行断字。</td></tr>
<tr><th colspan=4>编辑连字回调——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标识</td><td>pszWord</td><td>整数</td><td>指向用于连字符的单词的指针。</td></tr>
<tr><td>指针</td><td>langid</td><td>整数</td><td>控件的当前语言 ID。</td></tr>
<tr><td>长度</td><td>ichExceed</td><td>整数</td><td>传递的字符串中超出行宽的字符的索引。</td></tr>
<tr><td>实长</td><td>phyphresult</td><td>整数</td><td>指向断字结果填充的 <a href="#断字类">断字类</a> 结构的指针。</td></tr>
</table><p><font size="6"><a name="断字类">断字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>断字类</td><td>HYPHRESULT</td><td>12</td><td>包含有关丰富编辑控件中断字结果的信息。</td></tr>
<tr><th colspan=4>断字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>种类</td><td>khyph</td><td>整数</td><td>断字的<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/richedit/ne-richedit-khyph" target="_blank">类型</a>。</td></tr>
<tr><td>位置</td><td>ichHyph</td><td>整数</td><td>发生断字符的传递字符串中 宽字符 的索引。</a></td></tr>
<tr><td>换字</td><td>chHyph</td><td>整数</td><td>断字需要替换、添加或更改时使用的字符。如果不需要新字符，则值为零。</td></tr>
</table><p><font size="6"><a name="连字类">连字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>连字类</td><td>HYPHENATEINFO</td><td>8</td><td>包含有关丰富编辑控件的连字信息。</td></tr>
<tr><th colspan=4>连字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整形</td><td>指定结构的大小（以字节为单位）。</td></tr>
<tr><td>区域</td><td>dxHyphenateZone</td><td>整形</td><td>缇大小 (1/1440 英寸) ，其边距附近不包括连字。如果空格字符比此值更接近边距，请不要将以下单词连字符。</a></td></tr>
<tr><td>回调</td><td>pfnHyphenate</td><td>整数</td><td>客户端定义的 <a href="#编辑连字回调">编辑连字回调</a> 回调函数。</td></tr>
</table><p><font size="6"><a name="编辑图像类">编辑图像类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>编辑图像类</td><td>RICHEDIT_IMAGE_PARAMETERS</td><td>24</td><td>定义要由 编辑插入图像 消息插入的图像的属性。</td></tr>
<tr><th colspan=4>编辑图像类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>宽度</td><td>xWidth</td><td>整数</td><td>图像的宽度（以 像素 为单位） (0.01 毫米) 。</td></tr>
<tr><td>高度</td><td>yHeight</td><td>整数</td><td>图像的宽度（以 像素 为单位） (0.01 毫米) 。</a></td></tr>
<tr><td>上升</td><td>Ascent</td><td>整数</td><td>如果是基线对齐，则此参数是图像顶部超出文本基线的距离（以 像素 为单位）。 如果是基线对齐且上升为零，则图像底部位于文本基线处。</td></tr>
<tr><td>对齐</td><td>Type</td><td>整数</td><td>图像的垂直对齐方式。0顶部对齐,1底部对齐,2文本基线对齐</td></tr>
<tr><td>备注</td><td>pwszAlternateText</td><td>整数</td><td>图像的备用文本。</td></tr>
<tr><td>图像</td><td>pIStream</td><td>整数</td><td>包含图像数据的流。</td></tr>
</table><p><font size="6"><a name="双向信息类">双向信息类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>双向信息类</td><td>BIDIOPTIONS</td><td>8</td><td>包含有关丰富编辑控件的双向信息。</td></tr>
<tr><th colspan=4>双向信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>指定结构的大小（以字节为单位）。</td></tr>
<tr><td>掩码</td><td>wMask</td><td>整形</td><td>指定效果的标志,跟效果值相同。<a href="#双向掩码效果">掩码效果标志对照</a></td></tr>
<tr><td>效果</td><td>wEffects</td><td>整形</td><td>指示效果或当前状态。1默认段落方向。2纯文本布局。4 !"#&'()*+,-./:;<=> 被视为强 LTR 字符。8上下文段落方向性处于活动状态。<br>,$10上下文段落对齐方式处于活动状态。$20重新计算双向信息并重绘。0x40加减号没有隐式方向斜杠字符为通用分隔符。0x80宽字符双向算法 (UBA) 。</td></tr>
</table><p><font size="6"><a name="双向掩码效果">双向信息掩码和效果标志</a>——对照表：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>掩码名字</td><td>掩码值</td><td>作用</td><td>效果名称</td></td><td>效果值</td><td>作用</td></tr>
<tr><td>BOM_CONTEXTALIGNMENT</td><td>0x10</td><td>BOE_CONTEXTALIGNMENT值有效。</td><td>BOE_CONTEXTALIGNMENT<td>0x10</td><td>
如果此标志为 1，则上下文段落对齐方式处于活动状态。 此功能仅用于纯文本控件。 活动时，如果第一个强方向字符为 LTR，则段落对齐方式设置为PFA_LEFT;如果第一个强方向字符为 RTL，则PFA_RIGHT。 如果控件没有强方向字符，则当控件重新获得焦点时，将根据键盘语言的方向性选择对齐方式 (默认值：0) 。</td></tr>
<tr><td>BOM_CONTEXTREADING</td><td>8</td><td>BOE_CONTEXTREADING值有效。</td><td>BOE_CONTEXTREADING<td>8</td><td>
如果此标志为 1，则上下文段落方向性处于活动状态。 此功能仅用于纯文本控件。 活动时，如果第一个强方向字符为 LTR，则PFE_RTLPARA段落方向性效果设置为 0;如果第一个强方向字符为 RTL，则为 1。 如果控件没有强方向字符，则根据 的方向性选择方向。控件重新获得焦点时的键盘语言 (默认值：0) 。</td></tr>
<tr><td>BOM_FORCERECALC</td><td>0x20</td><td>BOE_FORCERECALC有效</td><td>BOE_FORCERECALC<td>0x20</td><td>Windows 8：强制富编辑控件重新计算双向信息，然后重绘控件。</td></tr>
<tr><td>BOM_LEGACYBIDICLASS</td><td>0x40</td><td>BOE_LEGACYBIDICLASS值有效。</td><td>BOE_LEGACYBIDICLASS<td>0x40</td><td>
导致加号和减号字符被视为没有隐式方向的中性字符。 还会导致斜杠字符被视为通用分隔符。</td></tr>
<tr><td>BOM_NEUTRALOVERRIDE</td><td>4</td><td>BOE_NEUTRALOVERRIDE值有效。</td><td>BOE_NEUTRALOVERRIDE<td>4</td><td>
如果此标志为 1，则为字符 ！”#&' () *+,-./：;<=> 被视为强 LTR 字符 (默认值：0) 。</td></tr>
<tr><td>BOM_PLAINTEXT</td><td>2</td><td>BOE_PLAINTEXT值有效。</td><td>BOE_PLAINTEXT<td>2</td><td>使用纯文本布局 (过时) 。</td></tr>
<tr><td>BOM_DEFPARADIR</td><td>1</td><td>BOE_RTLDIR值有效。</td><td>BOE_RTLDIR<td>1</td><td>默认段落方向 - 表示对齐方式 (过时) 。</td></tr>
<tr><td>BOM_UNICODEBIDI</td><td>0x80</td><td>BOE_UNICODEBIDI值有效。</td><td>BOE_UNICODEBIDI<td>0x80</td><td>
如果此标志为 1，则 Unicode 双向算法 (UBA) 用于富文本控件。 UBA 始终用于纯文本控件 (默认值：0) 。</td></tr>
</table><p><font size="6"><a name="范围类">范围类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>范围类</td><td>CHARRANGE</td><td>8</td><td>指定编辑控件中的字符范围。</td></tr>
<tr><th colspan=4>范围类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>首</td><td>cpMin</td><td>整数</td><td>紧邻范围中第一个字符的字符位置索引。</td></tr>
<tr><td>尾</td><td>cpMax</td><td>整数</td><td>紧跟在范围中最后一个字符之后的字符位置。</td></tr>
</table><p><font size="6"><a name="查找文字类">查找文字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>查找文字类</td><td>FINDTEXTEXA</td><td>20</td><td>包含有关富编辑控件中的搜索操作的信息。</td></tr>
<tr><th colspan=4>查找文字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>首</td><td>chrg.cpMin</td><td>整数</td><td>要搜索的第一个字符的字符位置索引。</td></tr>
<tr><td>尾</td><td>chrg.cpMax</td><td>整数</td><td>要搜索的最后一个字符之后的字符位置。-1是整个范围</td></tr>
<tr><td>文字</td><td>lpstrText</td><td>整数</td><td>查找操作中使用的以 0 结尾的字符串。</td></tr>
<tr><td>始</td><td>chrgText.cpMin</td><td>整数</td><td>在其中找到文本的第一个字符的字符位置索引。</td></tr>
<tr><td>末</td><td>chrgText.cpMax</td><td>整数</td><td>在其中找到文本的最后一个字符之后的字符位置。</td></tr>
</table><p><font size="6"><a name="格式范围类">格式范围类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>格式范围类</td><td>FORMATRANGE</td><td>32</td><td>丰富编辑控件用于为特定设备设置其输出格式的信息。</td></tr>
<tr><th colspan=4>格式范围类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>设备</td><td>hdc</td><td>整数</td><td>如果正在使用 编辑格式范围 将输出发送到设备，则为设备呈现的 HDC。</td></tr>
<tr><td>目标</td><td>hdcTarget</td><td>整数</td><td>要格式化的目标设备的 HDC。</td></tr>
<tr><td>区域</td><td>rc</td><td>矩形类</td><td>要呈现到 的 全区 矩形中的区域。 单位以缇为单位。</td></tr>
<tr><td>全区</td><td>rcPage</td><td>矩形类</td><td>呈现设备上页面的整个区域。 单位以缇为单位。</td></tr>
<tr><td>首</td><td>chrg.cpMin</td><td>整数</td><td>紧邻范围中第一个字符的字符位置索引。</td></tr>
<tr><td>尾</td><td>chrg.cpMax</td><td>整数</td><td>紧跟在范围中最后一个字符之后的字符位置。</td></tr>
</table><p><font size="6"><a name="字符格式类">字符格式类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字符格式类</td><td>CHARFORMATA</td><td>64</td><td>包含有关富编辑控件中的字符格式的信息。</td></tr>
<tr><th colspan=4>字符格式类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>指定结构的大小（以字节为单位）。</td></tr>
<tr><td>掩码</td><td>dwMask</td><td>整数</td><td>要格式化的目标设备的 HDC。</td></tr>
<tr><td>效果</td><td>dwEffects</td><td>整数</td><td>1粗体,2斜体,4下划线,8删除线,$10受保护,$20链接,0x40000000窗口文本色;掩码:与效果值相同</td></tr>
<tr><td>高度</td><td>yHeight</td><td>整数</td><td>字符高度，以缇为单位 (1/1440 英寸或打印机点 的 1/20)。掩码:0x80000000</td></tr>
<tr><td>偏移</td><td>yOffset</td><td>整数</td><td>与基线之间的字符偏移量（以缇为单位）。负数为下标。掩码:0x10000000</td></tr>
<tr><td>字色</td><td>crTextColor</td><td>整数</td><td>文本颜色。 如果指定了窗口文本颜色效果，则忽略此成员。掩码:0x40000000</td></tr>
<tr><td>字集</td><td>bCharSet</td><td>整数</td><td>字符集值。以是为 逻辑字体类 结构的 <a href="#字符集">字符集</a> 成员指定的值之一。掩码:0x08000000</td></tr>
<tr><td>间距</td><td>bPitchAndFamily</td><td>整数</td><td>字体系列和间距。与 逻辑字体类 结构的 间距 成员相同。</td></tr>
<tr><td>字体</td><td>szFaceName[32]</td><td>文本</td><td>以 0 结尾的字符数组，用于指定字体名称。掩码:0x20000000</td></tr>
</table><p><font size="6"><a name="合成色类">合成色类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>合成色类</td><td>COMPCOLOR</td><td>12</td><td>包含合成字符串的颜色设置。</td></tr>
<tr><th colspan=4>标点类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>文字</td><td>crText</td><td>整数</td><td>文本的颜色。</td></tr>
<tr><td>背景</td><td>crBackground</td><td>整数</td><td>背景颜色。</td></tr>
<tr><td>效果</td><td>dwEffects</td><td>整数</td><td>字符效果值，1粗体,2斜体,4下划线,8删除线,$10受保护,$20链接,0x40000000窗口文本色。</td></tr>
</table><p><font size="6"><a name="合成字类">合成字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>合成字类</td><td>IMECOMPTEXT</td><td>8</td><td>包含有关输入法编辑器 (IME) 在富编辑控件中的合成文本的信息。</td></tr>
<tr><th colspan=4>合成字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>指定结构的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>flags</td><td>整数</td><td>组合字符串的类型。1最终组合的字符串。</td></tr>
</table><p><font size="6"><a name="标点类">标点类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>标点类</td><td>PUNCTUATION</td><td>8</td><td>包含有关在富编辑控件中使用的标点的信息。</td></tr>
<tr><th colspan=4>标点类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>iSize</td><td>整数</td><td>标点字符缓冲区大小（以字节为单位）。</td></tr>
<tr><td>文字</td><td>szPunctuation</td><td>整数</td><td>包含标点字符的缓冲区。</td></tr>
</table><p><font size="6"><a name="改文字类">改文字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>改文字类</td><td>SETTEXTEX</td><td>8</td><td>包含用于向富编辑控件写入文本的信息。</td></tr>
<tr><th colspan=4>改文字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标志</td><td>flags</td><td>整数</td><td>指定文本操作的值。0=删除撤消堆栈和文本格式，替换所有文本。1保留撤消堆栈。2替换选定内容并保留格式文本。4输入新字符。8宽字符文本</td></tr>
<tr><td>码页</td><td>codepage</td><td>整数</td><td>翻译中使用的代码页。0=ANSI,1200=Unicode</td></tr>
</table><p><font size="6"><a name="文字长度类">文字长度类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文字长度类</td><td>GETTEXTLENGTHEX</td><td>8</td><td>含有关如何计算富编辑控件的文本长度的信息。</td></tr>
<tr><th colspan=4>文字长度类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标志</td><td>flags</td><td>整数</td><td>指定文本操作的值。0字符数,1行数,2精确答案,4近似答案,8字符数,16字节数</td></tr>
<tr><td>码页</td><td>codepage</td><td>整数</td><td>翻译中使用的代码页。0=ANSI,1200=Unicode</td></tr>
</table><p><font size="6"><a name="取文字类">取文字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>取文字类</td><td>GETTEXTEX</td><td>20</td><td>包含用于从富编辑控件获取文本的信息。</td></tr>
<tr><th colspan=4>取文字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cb</td><td>整数</td><td>用于存储检索到的文本的缓冲区的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>flags</td><td>整数</td><td>指定文本操作的值。0默认所有文本,1回车转换行回车,2所选文本,4带结构特殊字符,8不含隐藏文本</td></tr>
<tr><td>码页</td><td>codepage</td><td>整数</td><td>翻译中使用的代码页。0=ANSI,1200=Unicode</td></tr>
<tr><td>默字</td><td>lpDefaultChar</td><td>整数</td><td>如果无法在指定的代码页中表示宽字符，则使用的字符。0=系统默认字符;</td></tr>
<tr><td>默认</td><td>lpUsedDefChar</td><td>整数</td><td>指示是否使用了默认字符。如果宽字符不能在指定的代码页中表示，则为真</td></tr>
</table><p><font size="6"><a name="编辑流类">编辑流类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>编辑流类</td><td>EDITSTREAM</td><td>12</td><td>丰富编辑控件使用信息将数据流传入或传出控件。</td></tr>
<tr><th colspan=4>编辑流类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标识</td><td>dwCookie</td><td>整数</td><td>指定富编辑控件传递给回调函数的应用程序定义值。</td></tr>
<tr><td>结果</td><td>dwError</td><td>整数</td><td>指示流式传入 (读取) 或流出 (写入) 操作的结果。 值为零表示没有错误。</td></tr>
<tr><td>回调</td><td>pfnCallback</td><td>整数</td><td>指向回调函数的指针。控件重复调用回调函数，每次调用时传输一部分数据。</td></tr>
</table><p><font size="6"><a name="文字类">文字类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文字类</td><td>TEXTRANGEA/FINDTEXTA</td><td>12</td><td>富编辑控件的文本范围和搜索操作的信息。</td></tr>
<tr><th colspan=4>文字类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>首</td><td>chrg.cpMin</td><td>整数</td><td>紧邻范围中第一个字符的字符位置索引。</td></tr>
<tr><td>尾</td><td>chrg.cpMax</td><td>整数</td><td>紧跟在范围中最后一个字符之后的字符位置。</td></tr>
<tr><td>文字</td><td>lpstrText</td><td>整数</td><td>查找操作中使用的以 0 结尾的字符串。</td></tr>
</table><p><font size="6"><a name="特殊粘贴类">特殊粘贴类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>特殊粘贴类</td><td>REPASTESPECIAL</td><td>8</td><td>包含标识粘贴对象的显示方面是否应基于对象的内容或表示对象的图标的信息。</td></tr>
<tr><th colspan=4>特殊粘贴类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>方面</td><td>dwAspect</td><td>整数</td><td>显示方面。1内容,4图标</td></tr>
<tr><td>数据</td><td>dwParam</td><td>整数</td><td>方面数据。方面为图标则包含具有对象的图标视图的图元文件的句柄。</td></tr>
</table><p><font size="6"><a name="表行类">表行类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>表行类</td><td>TABLEROWPARMS</td><td>26</td><td>定义表中行的属性。 定义包括 RTF规范中定义的相应 RTF 格式。</td></tr>
<tr><th colspan=4>表行类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbRow</td><td>字节</td><td>此结构中的字节计数。</td></tr>
<tr><td>长度</td><td>cbCell</td><td>字节</td><td><a href="#表列类">表列类</a>中的字节计数。</td></tr>
<tr><td>格数</td><td>cCell</td><td>字节</td><td>行中单元格的计数，最大为63。</td></tr>
<tr><td>行数</td><td>cRow</td><td>字节</td><td>行计数。</td></tr>
<tr><td>左距</td><td>dxCellMargin</td><td>整数</td><td>单元格中左右边距的大小(\trgaph)。</td></tr>
<tr><td>左缩</td><td>dxIndent</td><td>整数</td><td>左缩进量，如果 fRTL 成员为 TRUE ，则为右缩进量， (类似于 \trleft) 。</td></tr>
<tr><td>高度</td><td>dyHeight</td><td>整数</td><td>行的高度 (\trrh) 。</td></tr>
<tr><td>对齐</td><td>nAlignment<br>fRTL<br>fKeep<br>fKeepFollow<br>fWrap<br>fIdentCells</td><td>整数</td><td>对齐方式<br>右对齐<br>保持<br>保持跟随<br>换行<br>识别单元格</td></tr>
<tr><td>位置</td><td>cpStartRow</td><td>整数</td><td>指示插入表格的位置的字符位置。 值 –1 指示所选内容的字符位置。</td></tr>
<tr><td>级别</td><td>bTableLevel</td><td>字节</td><td>表嵌套级别 (仅 EM_GETTABLEPARMS) 。</td></tr>
<tr><td>索引</td><td>iCell</td><td>字节</td><td>要插入或删除单元格的索引 (仅 EM_SETTABLEPARMS)  。</td></tr>
</table><p><font size="6"><a name="表列类">表列类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>表列类</td><td>TABLECELLPARMS</td><td>40</td><td>定义表格行中单元格的属性。 定义包括 RTF规范中定义的相应 RTF 格式。</td></tr>
<tr><th colspan=4>表列类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>宽度</td><td>dxWidth</td><td>整数</td><td>单元格 (\cellx) 的宽度。</td></tr>
<tr><td>对齐</td><td>nVertAlign<br>fMergeTop<br>fMergePrev<br>fVertical<br>fMergeStart<br>fMergeCont</td><td>整形</td><td>垂直对齐<br>位于顶部<br>置前<br>垂直<br>置于起始<br>居中</td></tr>
<tr><td>着色</td><td>wShading</td><td>整形</td><td>0.01% (\clshdng) 。 这将控制用于创建单元格背景色 (crForePat) 和图案背景色 (crBackPat) 的图案前景色的数量。<br>如果 wShading 为 0，则单元格背景为 crBackPat。 如果是 10000，则单元格背景为 crForePat。 中间的 wShading 值是两种图案颜色的混合。</td></tr>
<tr><td>左宽</td><td>dxBrdrLeft</td><td>整形</td><td>左边框宽度，以缇为单位 (\clbrdrl\brdrwN) 。</td></tr>
<tr><td>上宽</td><td>dyBrdrTop</td><td>整形</td><td>上边框宽度 (\clbrdrt\brdrwN) 。</td></tr>
<tr><td>右宽</td><td>dxBrdrRight</td><td>整形</td><td>右边框宽度 (\clbrdrr\brdrwN) 。</td></tr>
<tr><td>下宽</td><td>dyBrdrBottom</td><td>整形</td><td>底边框宽度 (\clbrdrb\brdrwN) 。</td></tr>
<tr><td>左边</td><td>crBrdrLeft</td><td>整数</td><td>左边框颜色 (\clbrdrl\brdrcf) 。</td></tr>
<tr><td>上边</td><td>crBrdrTop</td><td>整数</td><td>上边框颜色 (\clbrdrt\brdrcf) 。</td></tr>
<tr><td>右边</td><td>crBrdrRight</td><td>整数</td><td>右边框颜色 (\clbrdrr\brdrcf) 。</td></tr>
<tr><td>下边</td><td>crBrdrBottom</td><td>整数</td><td>底边框颜色 (\clbrdrb\brdrcf) 。</td></tr>
<tr><td>背景</td><td>crBackPat</td><td>整数</td><td>背景色 (\clcbpat) 。</td></tr>
<tr><td>前景</td><td>crForePat</td><td>整数</td><td>前景色 (\clcfpat) 。</td></tr>
</table><p><font size="6"><a name="编辑文本模式">富编辑控件文本模式</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><th colspan=3>设置文本模式参数</th></tr>
<tr><td>TM_PLAINTEXT</td><td>1</td><td>指示纯文本模式，其中控件类似于标准编辑控件。</td></tr>
<tr><td>TM_RICHTEXT</td><td>2</td><td>指示富文本模式，在该模式下，控件具有标准的丰富编辑功能。 格式文本模式是默认设置。</td></tr>
<tr><th colspan=3>设置撤消级别参数</th></tr>
<tr><td>TM_SINGLELEVELUNDO</td><td>4</td><td>控件允许用户仅撤消撤消队列中的最后一个操作。</td></tr>
<tr><td>TM_MULTILEVELUNDO</td><td>8</td><td>控件支持多个撤消操作。 这是默认设置。 使用 编辑撤销次数 消息设置撤消操作的最大数目。</td></tr>
<tr><th colspan=3>设置代码页参数</th></tr>
<tr><td>TM_SINGLECODEPAGE</td><td>16</td><td>控件仅允许英语键盘和对应于默认字符集的键盘。可以使用希腊语和英语。<br>这会阻止 Unicode 文本进入控件。如果控件必须限制为 ANSI 文本，请使用此值。</td></tr>
<tr><td>TM_MULTICODEPAGE</td><td>32</td><td>控件允许多个代码页和 Unicode 文本进入 控件。 这是默认设置。</td></tr>
</table><p><font size="6"><a name="文章故事类型">富编辑控件文章故事类型</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>tomFontStyleUpright</td><td>0</td><td>表示正常的直立字体样式。</td></tr>
<tr><td>tomFontStyleOblique</td><td>1</td><td>表示倾斜字体样式。</td></tr>
<tr><td>tomFontStyleItalic</td><td>2</td><td>表示斜体字体样式。</td></tr>
<tr><td>tomFontStretchDefault</td><td>0</td><td>没有定义的字体拉伸。</td></tr>
<tr><td>tomFontStretchUltraCondensed</td><td>1</td><td>超浓缩字体拉伸 (正常) 的 50%。</td></tr>
<tr><td>tomFontStretchExtraCondensed</td><td>2</td><td>额外压缩字体拉伸 (正常) 的 62.5%。</td></tr>
<tr><td>tomFontStretchCondensed</td><td>3</td><td>压缩字体拉伸 (正常) 的 75%。</td></tr>
<tr><td>tomFontStretchSemiCondensed</td><td>4</td><td>半浓缩字体拉伸 (正常) 的 87.5%。</td></tr>
<tr><td>tomFontStretchNormal</td><td>5</td><td>所有其他字体拉伸值相关的正常字体拉伸 (100%) 。</td></tr>
<tr><td>tomFontStretchSemiExpanded</td><td>6</td><td>半展开字体 (正常) 的 112.5%。</td></tr>
<tr><td>tomFontStretchExpanded</td><td>7</td><td>展开的字体拉伸 (正常) 的 125%。</td></tr>
<tr><td>tomFontStretchExtraExpanded</td><td>8</td><td>额外展开的字体拉伸 (正常) 的 150%。</td></tr>
<tr><td>tomFontStretchUltraExpanded</td><td>9</td><td>超扩展字体 (正常) 的 200%。</td></tr>
<tr><td>tomFontWeightDefault</td><td>0</td><td>默认字体粗细。</td></tr>
<tr><td>tomFontWeightThin</td><td>100</td><td>较细的字体粗细。</td></tr>
<tr><td>tomFontWeightExtraLight</td><td>200</td><td>额外轻量字体粗细。</td></tr>
<tr><td>tomFontWeightLight</td><td>300</td><td>浅色字体粗细。</td></tr>
<tr><td>tomFontWeightNormal</td><td>400</td><td>正常字体粗细。</td></tr>
<tr><td>tomFontWeightRegular</td><td>400</td><td>与 tomFontWeightNormal 相同。</td></tr>
<tr><td>tomFontWeightMedium</td><td>500</td><td>中等字体粗细。</td></tr>
<tr><td>tomFontWeightSemiBold</td><td>600</td><td>半粗体字体粗细。</td></tr>
<tr><td>tomFontWeightBold</td><td>700</td><td>粗体字体粗细。</td></tr>
<tr><td>tomFontWeightExtraBold</td><td>800</td><td>加粗字体粗细。</td></tr>
<tr><td>tomFontWeightBlack</td><td>900</td><td>字体粗细。</td></tr>
<tr><td>tomFontWeightHeavy</td><td>900</td><td>与 tomFontWeightBlack 相同。</td></tr>
<tr><td>tomFontWeightExtraBlack</td><td>950</td><td>额外的重字体粗细。</td></tr>
<tr><td>tomParaPropMathAlign</td><td>0x437</td><td>数学段落的对齐属性。</td></tr>
<tr><td>tomDocMathBuild</td><td>0x80</td><td>与 ITextDocument2：：SetProperty 方法一起使用，可设置 tomMathAutoCorrect、 tomTeX 或 tomMathAlphabetics 的任意组合。</td></tr>
<tr><td>tomMathLMargin</td><td>0x81</td><td>显示数学的左边距。</td></tr>
<tr><td>tomMathRMargin</td><td>0x82</td><td>显示数学运算的右边距。</td></tr>
<tr><td>tomMathWrapIndent</td><td>0x83</td><td>用于显示数学的公式换行缩进。</td></tr>
<tr><td>tomMathWrapRight</td><td>0x84</td><td>公式右换行缩进，用于在从左到右 (LTR) 数学区域) 中显示数学 (。</td></tr>
<tr><td>tomMathPostSpace</td><td>0x86</td><td>显示数学公式后的空格。</td></tr>
<tr><td>tomMathPreSpace</td><td>0x85</td><td>显示数学公式前的空格。</td></tr>
<tr><td>tomMathInterSpace</td><td>0x87</td><td>数学段落中公式之间的间距。</td></tr>
<tr><td>tomMathIntraSpace</td><td>0x88</td><td>显示数学公式中的行之间的间距。</td></tr>
<tr><td>tomCanCopy</td><td>0x89</td><td>指示是否可以将数据复制到剪贴板。</td></tr>
<tr><td>tomCanRedo</td><td>0x8a</td><td>指示是否存在一个或多个重做操作。</td></tr>
<tr><td>tomCanUndo</td><td>0x8b</td><td>指示是否存在一个或多个撤消操作。</td></tr>
<tr><td>tomUndoLimit</td><td>0x8c</td><td>撤消堆栈计数限制。</td></tr>
<tr><td>tomDocAutoLink</td><td>0x8d</td><td>文档自动链接。</td></tr>
<tr><td>tomEllipsisMode</td><td>0x8e</td><td>省略号模式。</td></tr>
<tr><td>tomEllipsisState</td><td>0x8f</td><td>省略号状态。</td></tr>
<tr><td>tomEllipsisNone</td><td>0</td><td>省略号已禁用。</td></tr>
<tr><td>tomEllipsisEnd</td><td>1</td><td>省略号强制在行中的任何位置中断。</td></tr>
<tr><td>tomEllipsisWord</td><td>3</td><td>省略号强制在单词之间休息。</td></tr>
<tr><td>tomEllipsisPresent</td><td>1</td><td>省略号存在。</td></tr>
<tr><td>tomVTopCell</td><td>1</td><td>垂直合并单元格集中的顶部单元格。</td></tr>
<tr><td>tomVLowCell</td><td>2</td><td>垂直合并单元格集中除顶部单元格以外的任何单元格。</td></tr>
<tr><td>tomHStartCell</td><td>4</td><td>在水平合并的单元格集中启动单元格。</td></tr>
<tr><td>tomHContCell</td><td>8</td><td>水平合并单元格集中除开头之外的任何单元格。</td></tr>
<tr><td>tomRowUpdate</td><td>1</td><td>更新行，使表格行的属性由关联的文本范围标识。</td></tr>
<tr><td>tomRowApplyDefault</td><td>0</td><td>表行应用程序默认值</td></tr>
<tr><td>tomCellStructureChangeOnly</td><td>1</td><td>更改单元格宽度 () 或单元格计数 (更改列宽度和插入/删除列而不更改单元格边框属性，等等。)</td></tr>
<tr><td>tomRowHeightActual</td><td>0x80b</td><td>表行的实际高度。</td></tr>
</table><p><font size="6"><a name="编辑事件掩码">富编辑控件事件掩码</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ENM_NONE</td><td>0x00000000</td><td>不发送通知</td></tr>
<tr><td>ENM_CHANGE</td><td>0x00000001</td><td>发送 编辑窗口更改 通知</td></tr>
<tr><td>ENM_UPDATE</td><td>0x00000002</td><td>发送 编辑更新重绘 通知</td></tr>
<tr><td>ENM_SCROLL</td><td>0x00000004</td><td>发送 编辑水平滚动和编辑垂直滚动 通知</td></tr>
<tr><td>ENM_SCROLLEVENTS</td><td>0x00000008</td><td>发送 编辑键盘鼠标 滚轮通知</td></tr>
<tr><td>ENM_DRAGDROPDONE</td><td>0x00000010</td><td>发送 编辑拖放完成 通知</td></tr>
<tr><td>ENM_PARAGRAPHEXPANDED</td><td>0x00000020</td><td>发送 编辑展开大纲 通知</td></tr>
<tr><td>ENM_PAGECHANGE</td><td>0x00000040</td><td>发送 编辑页面更改 通知</td></tr>
<tr><td>ENM_CLIPFORMAT</td><td>0x00000080</td><td>发送 编辑特定格式 通知</td></tr>
<tr><td>ENM_KEYEVENTS</td><td>0x00010000</td><td>发送 编辑键盘鼠标 键盘通知</td></tr>
<tr><td>ENM_MOUSEEVENTS</td><td>0x00020000</td><td>发送 编辑键盘鼠标 鼠标通知</td></tr>
<tr><td>ENM_REQUESTRESIZE</td><td>0x00040000</td><td>发送 编辑超出大小 通知</td></tr>
<tr><td>ENM_SELCHANGE</td><td>0x00080000</td><td>发送 编辑选字更改 通知</td></tr>
<tr><td>ENM_DROPFILES</td><td>0x00100000</td><td>发送 编辑文件拖放 通知</td></tr>
<tr><td>ENM_PROTECTED</td><td>0x00200000</td><td>发送 编辑保护文本 通知</td></tr>
<tr><td>ENM_CORRECTTEXT</td><td>0x00400000</td><td>发送 编辑校正手势 通知</td></tr>
<tr><td>ENM_IMECHANGE</td><td>0x00800000</td><td>发送 编辑换输入法 通知</td></tr>
<tr><td>ENM_LANGCHANGE</td><td>0x01000000</td><td>发送 语言更改 通知</td></tr>
<tr><td>ENM_OBJECTPOSITIONS</td><td>0x02000000</td><td>发送 编辑对象读取 通知</td></tr>
<tr><td>ENM_LINK</td><td>0x04000000</td><td>发送 编辑链接通知 通知</td></tr>
<tr><td>ENM_LOWFIRTF</td><td>0x08000000</td><td>发送 编辑无效字符 通知</td></tr>
<tr><td>ENM_STARTCOMPOSITION</td><td>0x10000000</td><td>发送 编辑输入服务 通知</td></tr>
<tr><td>ENM_ENDCOMPOSITION</td><td>0x20000000</td><td>发送 编辑完成输入 通知</td></tr>
<tr><td>ENM_GROUPTYPINGCHANGE</td><td>0x40000000</td><td>发送 分组打字更改 通知</td></tr>
<tr><td>ENM_HIDELINKTOOLTIP</td><td>0x80000000</td><td>发送 隐藏链接工具提示 通知</td></tr>
</table><p><font size="6"><a name="编辑样式">富编辑控件编辑样式标志</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SES_BEEPONMAXTEXT</td><td>2</td><td>如果用户尝试输入超过最大字符数，Rich Edit 将调用系统蜂鸣器。</td></tr>
<tr><td>SES_BIDI</td><td>0x1000</td><td>启用双向处理。 如果以下任一窗口样式处于活动状态，Rich Edit 会自动启用此功能： WS_EX_RIGHT、 WS_EX_RTLREADINGWS_EX_LEFTSCROLLBAR。 但是，在使用 ITextHost 的自定义实现时，此设置对于处理这些窗口样式很有用， (默认值：0) 。</td></tr>
<tr><td>SES_CTFALLOWEMBED</td><td>0x00200000</td><td>带 SP1 的 Windows XP：允许使用 TSF 插入嵌入对象 (默认值：0) 。</td></tr>
<tr><td>SES_CTFALLOWPROOFING</td><td>0x00800000</td><td>带 SP1 的 Windows XP：允许 TSF 校对提示 (默认值：0) 。</td></tr>
<tr><td>SES_CTFALLOWSMARTTAG</td><td>0x00400000</td><td>带 SP1 的 Windows XP：允许 TSF SmartTag 提示 (默认值：0) 。</td></tr>
<tr><td>SES_CTFNOLOCK</td><td>0x10000000</td><td>Windows 8：不允许 TSF 锁读取/写入访问。 这会暂停 TSF 输入。</td></tr>
<tr><td>SES_DEFAULTLATINLIGA</td><td>0x10</td><td>Windows 8：使用默认 OpenType 功能显示具有 fi 连字的字体，从而改进了版式 (默认值：0) 。</td></tr>
<tr><td>SES_DRAFTMODE</td><td>0x8000</td><td>Windows XP SP1：使用草稿模式字体显示文本。 草稿模式是一个辅助功能选项，其中控件使用单一字体显示文本;字体由消息框中所用字体的系统设置确定。 例如，如果文本是统一的，则可访问的用户可以更轻松地阅读文本，而不是将字体和样式混合 (默认值：0) 。</td></tr>
<tr><td>SES_EMULATE10</td><td>16</td><td>Windows 8：模拟 RichEdit 1.0 行为。注意： 如果确实需要此行为，请使用 Windows riched32.dll，而不是 riched20.dll 或 msftedit.dll。 Riched32.dll 具有更多功能。</td></tr>
<tr><td>SES_EMULATESYSEDIT</td><td>1</td><td>当此位处于打开状态时，rich edit 将尝试模拟系统编辑控件 (默认值：0) 。</td></tr>
<tr><td>SES_EXTENDBACKCOLOR</td><td>4</td><td>将背景色一直扩展到客户端矩形的边缘 (默认值：0) 。</td></tr>
<tr><td>SES_HIDEGRIDLINES</td><td>0x00020000</td><td>带 SP1 的 Windows XP：如果表格网格线的宽度为零，则不显示网格线。 这等效于Word表菜单中的隐藏网格线功能，默认 (：0) 。</td></tr>
<tr><td>SES_HYPERLINKTOOLTIPS</td><td>8</td><td>Windows 8：当光标悬停在某个链接上时，显示工具提示，其目标链接地址 (默认值：0) 。</td></tr>
<tr><td>SES_LOGICALCARET</td><td>0x01000000</td><td>Windows 8：提供逻辑插入符号信息而不是插入点位图，如 ITextHost：：TxSetCaretPos (默认值：0) 。</td></tr>
<tr><td>SES_LOWERCASE</td><td>0x400</td><td>将所有输入字符转换为小写 (默认值：0) 。</td></tr>
<tr><td>SES_MAPCPS</td><td>8</td><td>已过时。 请勿使用。</td></tr>
<tr><td>SES_MULTISELECT</td><td>0x08000000</td><td>Windows 8：在按 Ctrl 键时使用单个鼠标选择启用多选 (默认值：0) 。</td></tr>
<tr><td>SES_NOEALINEHEIGHTADJUST</td><td>0x20000000</td><td>Windows 8：不调整东亚文本的行高 (默认值：0，它将行高调整 15%) 。</td></tr>
<tr><td>SES_NOFOCUSLINKNOTIFY</td><td>32</td><td>从没有焦点的链接发送 EN_LINK 通知。</td></tr>
<tr><td>SES_NOIME</td><td>0x80</td><td>禁止此格式编辑控件实例的 IME， (默认值：0) 。</td></tr>
<tr><td>SES_NOINPUTSEQUENCECHK</td><td>0x800</td><td>当此位处于打开状态时，丰富编辑不会验证键入文本的顺序。 某些语言 (（如泰语和越南语）) 要求先验证输入序列顺序，然后再将其提交到后备存储 (默认值：0) 。</td></tr>
<tr><td>SES_SCROLLONKILLFOCUS</td><td>0x2000</td><td>发生 KillFocus 时，滚动到文本的开头， (字符位置等于 0) (默认值：0) 。</td></tr>
<tr><td>SES_SMARTDRAGDROP</td><td>0x04000000</td><td>Windows 8：在删除文本时根据上下文添加或删除空格 (默认值：0) 。</td></tr>
<tr><td>SES_USECRLF</td><td>0x00010000</td><td>已过时。 请勿使用。</td></tr>
<tr><td>SES_WORDDRAGDROP</td><td>0x02000000</td><td>Windows 8：如果 word select 处于活动状态，请确保放置位置位于单词边界 (默认值：0) 。</td></tr>
<tr><td>SES_UPPERCASE</td><td>0x200</td><td>将所有输入字符转换为大写 (默认值：0) 。</td></tr>
<tr><td>SES_USEAIMM</td><td>0x100</td><td>使用 Internet Explorer 4.0 或更高版本随附的 Active IMM 输入法组件 (默认值：0) 。</td></tr>
<tr><td>SES_USEATFONT</td><td>0x00040000</td><td>Windows XP SP1：使用 @ 字体，专为垂直文本设计;这与 ES_VERTICAL 窗口样式一起使用。 @ 字体的名称以 @ 符号开头，例如，“@Batang” (默认值：0，但会自动打开垂直文本布局) 。</td></tr>
<tr><td>SES_USECTF</td><td>0x00010000</td><td>Windows XP SP1：启用 TSF 支持。 (默认值：0)</td></tr>
<tr><td>SES_XLTCRCRLFTOCR</td><td>0x4000</td><td>打开将 CRCRLF 转换为 PR。 打开此位并读取文件时，所有 CRCRLF 实例都将在内部转换为硬性 PR。 这会影响文本环绕。 请注意，如果此类文件保存为纯文本，则 CRL 将替换为 CRLF。 这是纯文本 (默认值为 0 的 .txt 标准，用于删除输入) 上的 CRCRLF。</td></tr>
</table><p><font size="6"><a name="扩展编辑样式">富编辑控件扩展编辑样式标志</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SES_EX_HANDLEFRIENDLYURL</td><td>0x00000100</td><td>显示与自动链接相同的文本颜色和下划线的友好名称链接，前提是未使用临时格式或使用文本自动颜色 (默认值：0) 。</td></tr>
<tr><td>SES_EX_MULTITOUCH</td><td>0x08000000</td><td>在 Rich Edit 中启用触摸支持。 这包括选择、插入点放置和上下文菜单调用。 如果未设置此标志，则鼠标命令会模拟触摸，这些命令不考虑触摸模式的详细信息， (默认值：0) 。</td></tr>
<tr><td>SES_EX_NOACETATESELECTION</td><td>0x00100000</td><td>使用经典Windows选择文本和背景色而不是背景色来显示所选文本， (默认值：0) 。</td></tr>
<tr><td>SES_EX_NOMATH</td><td>0x00000040</td><td>禁用 (默认值插入数学区域：1) 。 若要启用数学编辑和显示，请将 wParam 设置为 0 且 lParam 设置为SES_EX_NOMATH发送EM_SETEDITSTYLEEX消息。</td></tr>
<tr><td>SES_EX_NOTABLE</td><td>0x00000004</td><td>禁用插入表。 默认为 (0) ，EM_INSERTTABLE消息返回E_FAIL，RTF 表将跳过 。</td></tr>
<tr><td>SES_EX_USESINGLELINE</td><td>0x00200000</td><td>使多行控件像单行控件一样，当单行高度大于窗口高度 (默认值：0) 时，能够垂直滚动。</td></tr>
<tr><td>SES_HIDETEMPFORMAT</td><td>0x10000000</td><td>隐藏使用 tomApplyTmp 调用 ITextFont.Reset 时创建的临时格式。 例如，拼写检查器使用此类格式在可能拼写错误的字词下显示波浪下划线。</td></tr>
<tr><td>SES_EX_USEMOUSEWPARAM</td><td>0x20000000</td><td>处理WM_MOUSEMOVE消息时使用 wParam，而不调用 按键开关。</td></tr>
</table><p><font size="6"><a name="字符格式">字符格式</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SCF_SELECTION</td><td>0x0001</td><td>将格式应用于当前所选内容。 如果所选内容为空，则字符格式将应用于插入点，并且新字符格式仅在插入点更改之前生效。</td></tr>
<tr><td>SCF_WORD</td><td>0x0002</td><td>将格式应用于所选的一个或多个单词。 如果所选内容为空，但插入点位于单词内，则将格式应用于该单词。 SCF_WORD值必须与SCF_SELECTION值结合使用。</td></tr>
<tr><td>SCF_DEFAULT</td><td>0x0000</td><td>RichEdit 4.1：设置控件的默认字体。</td></tr>
<tr><td>SCF_ALL</td><td>0x0004</td><td>将格式应用于 控件中的所有文本。 对 SCF_SELECTION 或 SCF_WORD 无效。</td></tr>
<tr><td>SCF_USEUIRULES</td><td>0x0008</td><td>RichEdit 4.1： 与 SCF_SELECTION 一起使用。 指示格式来自工具栏或其他 UI 工具，因此应使用 UI 格式规则而不是文本格式设置。</td></tr>
<tr><td>SCF_ASSOCIATEFONT</td><td>0x0010</td><td>RichEdit 4.1： 将字体关联到给定脚本，从而更改该脚本的默认字体。</td></tr>
<tr><td>SCF_NOKBUPDATE</td><td>0x0020</td><td></td>RichEdit 4.1： 阻止键盘切换以匹配字体。 例如，如果设置了阿拉伯语字体，则通常 Bidi 语言的自动键盘功能会将键盘更改为阿拉伯语键盘。</tr>
<tr><td>SCF_ASSOCIATEFONT2</td><td>0x0040</td><td>RichEdit 4.1： 将代理项 (平面 2) 字体关联到给定脚本，从而更改该脚本的默认字体。</td></tr>
<tr><td>SCF_SMARTFONT</td><td>0x0080</td><td>仅当字体可以处理脚本时，才应用字体。</td></tr>
<tr><td>SCF_CHARREPFROMLCID</td><td>0x0100</td><td>从 LCID 获取字符剧目。</td></tr>
<tr><td>SPF_DONTSETDEFAULT</td><td>0x0002</td><td>当 Richedit 控件为空时，阻止设置默认段落格式。</td></tr>
<tr><td>SPF_SETDEFAULT</td><td>0x0004</td><td>设置默认段落格式属性。</td></tr>
</table><p><font size="6"><a name="输入法语言选项">富编辑控件输入法语言选项</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>IMF_AUTOKEYBOARD</td><td>0x0001</td><td>如果设置了此标志，则当用户显式更改为其他字体或用户将插入点显式更改为文本中的新位置时，控件会自动更改键盘布局。 将为双向控件自动打开。 对于所有其他控件，默认情况下会将其关闭。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_AUTOFONT</td><td>0x0002</td><td>如果设置了此标志，当用户显式更改为其他键盘布局时，控件会自动更改字体。 关闭通用 Unicode 字体 IMF_AUTOFONT 很有用。 此选项默认为 启用(1) 。</td></tr>
<tr><td>IMF_IMECANCELCOMPLETE</td><td>0x0004</td><td>此标志确定控件在用户取消输入法时如何使用它的组合字符串。 如果设置了此标志，则控件放弃该字符串。 如果未设置此标志，则控件将该字符串用作结果字符串。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_IMEALWAYSSENDNOTIFY</td><td>0x0008</td><td>此标志控制丰富编辑控件在 IME 合成期间通知客户端的方式：
0：未确定状态期间没有 EN_CHANGE 或 EN_SELCHANGE 通知。 当最后一个字符串传入时发送通知。 这是默认值。1：在不确定状态下发送 EN_CHANGE 和 EN_SELCHANGE 事件。</td></tr>
<tr><td>IMF_AUTOFONTSIZEADJUST</td><td>0x0010</td><td>如果设置了此标志，控件将根据脚本从插入点大小缩放字体绑定字体大小。 例如，亚洲字体略大于西方字体。 此选项默认为 启用(1)。</td></tr>
<tr><td>IMF_UIFONTS</td><td>0x0020</td><td>使用用户界面默认字体。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_NOIMPLICITLANG</td><td>0x0040</td><td>Windows 8：如果设置了此标志，请使用键盘语言禁用标记键盘输入，并确保非东亚语言 ID 与字符集兼容。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_DUALFONT</td><td>0x0080</td><td>如果设置了此标志，控件将使用双字体模式。 用于亚洲语言支持。 控件对 ASCII 文本使用英文字体，对亚洲文本使用亚洲字体。 此选项默认为 启用(1) 。</td></tr>
<tr><td>IMF_NOKBDLIDFIXUP</td><td>0x0200</td><td>Windows 8：如果设置了此标志，则丰富编辑控件将禁用对空控件的键盘语言进行标记。 此选项默认关闭 (0) </td></tr>
<tr><td>IMF_NORTFFONTSUBSTITUTE</td><td>0x0400</td><td>如果设置了此标志，则不使用RTF字体文本替换</td></tr>
<tr><td>IMF_SPELLCHECKING</td><td>0x0800</td><td>Windows 8：如果设置了此标志，则丰富编辑控件将打开拼写检查。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_TKBPREDICTION</td><td>0x1000</td><td>Windows 10：忽略。Windows 8：如果设置了此标志，则丰富编辑控件将启用触摸键盘预测。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_DISABLEAUTOBIDIAUTOKEYBOARD</td><td></td><td>Windows 8：如果设置了此标志，控件将使用非特定语言逻辑进行自动键盘切换。 此选项默认关闭 (0) 。</td></tr>
<tr><td>IMF_TKBAUTOCORRECTION</td><td></td><td>indows 8：如果设置了此标志，请启用触摸键盘自动更正。 此选项默认关闭 (0) 。</td></tr>
</table><p><font size="6"><a name="框架模式偏差">富编辑控件文字服务框架模式偏差标志</a>——常量数值：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>CTFMODEBIAS_DEFAULT</td><td>0x0000</td><td>不存在模式偏差。</td></tr>
<tr><td>CTFMODEBIAS_FILENAME</td><td>0x0001</td><td>偏差是文件名。</td></tr>
<tr><td>CTFMODEBIAS_NAME</td><td>0x0002</td><td>偏向于名称。</td></tr>
<tr><td>CTFMODEBIAS_READING</td><td>0x0003</td><td>偏见是阅读。</td></tr>
<tr><td>CTFMODEBIAS_DATETIME</td><td>0x0004</td><td>偏差为日期或时间。</td></tr>
<tr><td>CTFMODEBIAS_CONVERSATION</td><td>0x0005</td><td>偏见是对话。</td></tr>
<tr><td>CTFMODEBIAS_NUMERIC</td><td>0x0006</td><td>偏差是数字的偏差。</td></tr>
<tr><td>CTFMODEBIAS_HIRAGANA</td><td>0x0007</td><td>偏向于平假名字符串。</td></tr>
<tr><td>CTFMODEBIAS_KATAKANA</td><td>0x0008</td><td>偏差是片假名字符串。</td></tr>
<tr><td>CTFMODEBIAS_HANGUL</td><td>0x0009</td><td>偏向于朝鲜文字符。</td></tr>
<tr><td>CTFMODEBIAS_HALFWIDTHKATAKANA</td><td>0x000a</td><td>偏差为半角片假名字符串。</td></tr>
<tr><td>CTFMODEBIAS_FULLWIDTHALPHANUMERIC</td><td>0x000b</td><td>偏差为全角字母数字字符。</td></tr>
<tr><td>CTFMODEBIAS_HALFWIDTHALPHANUMERIC</td><td>0x000c</td><td>偏差为半角字母数字字符。</td></tr>

</table><p><font size="6"><a name="段落格式类">段落格式类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>段落格式类</td><td>PARAFORMAT2</td><td>194</td><td>包含有关丰富编辑控件中的段落格式设置属性的信息。</td></tr>
<tr><th colspan=4>段落格式类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>掩码</td><td>dwMask</td><td>整数</td><td>包含结构成员有效信息的组合。</td></tr>
<tr><td>符号</td><td>wNumbering</td><td>整形</td><td>掩码:0x20。用于项目符号或编号段落的选项:0无,1开头插入,2阿拉伯数字,3小写字母,4大写字母,5小写罗马字母,6写罗马字母,7wNumberingStart 成员指定的 Unicode 字符开头的字符序列;</td></tr>
<tr><td>效果</td><td>wEffects</td><td>整形</td><td>一组指定段落效果的位标志。参见：<a href="#段落效果掩码">段落效果掩码标志</a></td></tr>
<tr><td>首缩</td><td>dxStartIndent</td><td>整数</td><td>段落第一行的缩进，以缇为单位。掩码：1</td></tr>
<tr><td>右缩</td><td>dxRightIndent</td><td>整数</td><td>段落右侧相对于右边距的缩进，以缇为单位。掩码：2</td></tr>
<tr><td>后缩</td><td>dxOffset</td><td>整数</td><td>相对于第一行的缩进，第二行和后续行的缩进，以缇为单位。掩码：4</td></tr>
<tr><td>对齐</td><td>wAlignment</td><td>整形</td><td>段落对齐方式。1左对齐,2右对齐,3居中,4两端对齐/单独展开空白;掩码：8。</td></tr>
<tr><td>表数</td><td>cTabCount</td><td>整形</td><td>在 rgxTabs 数组中定义的制表位数。</td></tr>
<tr><td>表位</td><td>rgxTabs[128]</td><td>文本</td><td>绝对制表位位置的数组。低24位指定绝对偏移量（缇）。24-27位：0普通,1居中,2右对齐,3小数,4垂直条<br>28-31位:0无前导符,1虚线,2虚线,3下划线,4粗线,5双行;掩码:0x10</td></tr>
<tr><td>上距</td><td>dySpaceBefore</td><td>整数</td><td>段落上方间距的大小（以缇为单位）。 掩码:0x40</td></tr>
<tr><td>下距</td><td>dySpaceAfter</td><td>整数</td><td>段落下方间距的大小（以缇为单位）。 掩码:0x80</td></tr>
<tr><td>间距</td><td>dyLineSpacing</td><td>整数</td><td>行之间的间距。掩码:0x100</td></tr>
<tr><td>样式</td><td>sStyle</td><td>整形</td><td>文本样式。 掩码:0x400</td></tr>
<tr><td>行间</td><td>bLineSpacingRule</td><td>整形</td><td>行距的类型。0单间距,1一个半,2双倍间距,3指定间距不小于单间距,4指定确切间距,<br>5间距值的1/20(20=单间距40=双间距60=3间距) 掩码:0x100</td></tr>
<tr><td>明暗</td><td>wShadingWeight</td><td>整形</td><td>着色中使用的前景色百分比。5表示底纹颜色由5%的前景色和95%的背景色组成。 掩码:0x1000</td></tr>
<tr><td>背景</td><td>wShadingStyle</td><td>整形</td><td>用于背景着色的样式和颜色。0-3位包含着色样式，4-7位包含前景色索引，8-11位包含背景色索引。掩码:0x1000<br>底纹样式:0无,1深色水平,2深色垂直,3深色向下对角线,4深色向上对角线,5深色网格,6深色格子,7浅色水平,8浅色垂直,9浅色向下对角线,10,亮起对角线,11浅色网格,12浅色格栅<br>前景色索引和背景色索引:0黑色,1蓝色,2青色,3绿色,4洋红色,5红色,6黄色,7白色,8深蓝色,9深青色,10暗绿色,11深洋红色,12深红色,13深黄色,14,深灰色,15浅灰色</td></tr>
<tr><td>始值</td><td>wNumberingStart</td><td>整形</td><td>用于编号段落的起始数字或 Unicode 值。与符号成员结合使用 掩码:0x8000</td></tr>
<tr><td>段式</td><td>wNumberingStyle</td><td>整形</td><td>与带编号的段落一起使用的编号样式。与符号成员结合使用 掩码:0x2000<br>0后跟带右括号的数字,0x100将数字括在括号中,0x200后跟带句点的数字,0x300仅显示数字,0x400继续编号列表不用下个符号,0x8000使用 始值 启动新数字。</td></tr>
<tr><td>段距</td><td>wNumberingTab</td><td>整形</td><td>段落编号与段落文本之间的最小间距（以缇为单位）。与符号成员结合使用 掩码:0x4000</td></tr>
<tr><td>边宽</td><td>wBorderWidth</td><td>整形</td><td>边框宽度（以缇为单位）。 掩码:0x800</td></tr>
<tr><td>边框</td><td>wBorders</td><td>整形</td><td>边框位置、样式和颜色。0-7位指定边框位置，8-11位指定边框样式，12-15位指定边框颜色索引。掩码:0x800<br>边框位置:1左边框。2右边框。4上边框。8下边框。16内部边框。32外边框。64自动着色(不用颜色索引)。<br>边框样式:0=无,1=3/4 磅,2=11/2 磅,3=21/4 磅,4=3 磅,5=41/2 磅,6=6 磅,7=3/4 磅双,8=11/2 磅双,9=21/4 分双,10=3/4 磅灰色,11=3/4 磅灰色虚线<br>边框颜色:0黑色,1蓝色,2青色,3绿色,4洋红色,5红色,6黄色,7白色,8深蓝色,9深青色,10暗绿色,11深洋红色,12深红色,13深黄色,14,深灰色,15浅灰色</td></tr>
</table><p><font size="6"><a name="段落效果掩码">段落效果掩码标志</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>掩码标志</td><td>数值</td><td>作用解释</td><td>段落效果</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PFM_RTLPARA</td><td>0x10000</td><td>PFE_RTLPARA值有效。</td><td>PFE_RTLPARA</td><td>0x1</td><td>使用从右到左的阅读顺序显示文本。</td><tr>
<tr><td>PFM_KEEP</td><td>0x20000</td><td>PFE_KEEP值有效。</td><td>PFE_KEEP</td><td>0x2</td><td>段落内无分页符。</td><tr>
<tr><td>PFM_KEEPNEXT</td><td>0x40000</td><td>PFE_KEEPNEXT值有效。</td><td>PFE_KEEPNEXT</td><td>0x4</td><td>此段落与下一段之间没有分页符。</td><tr>
<tr><td>PFM_PAGEBREAKBEFORE</td><td>0x80000</td><td>PFE_PAGEBREAKBEFORE值有效。</td><td>PFE_PAGEBREAKBEFORE</td><td>0x8</td><td>在所选段落之前插入分页符。</td><tr>
<tr><td>PFM_NOLINENUMBER</td><td>0x100000</td><td>PFE_NOLINENUMBER值有效。</td><td>PFE_NOLINENUMBER</td><td>0x10</td><td>禁用行号(未实现) 。</td><tr>
<tr><td>PFM_NOWIDOWCONTROL</td><td>0x200000</td><td>PFE_NOWIDOWCONTROL值有效。</td><td>PFE_NOWIDOWCONTROL</td><td>0x20</td><td>禁用所选段落的寡妇和孤立控件。</td><tr>
<tr><td>PFM_DONOTHYPHEN</td><td>0x400000</td><td>PFE_DONOTHYPHEN值有效。</td><td>PFE_DONOTHYPHEN</td><td>0x40</td><td>禁用自动断字。</td><tr>
<tr><td>PFM_SIDEBYSIDE</td><td>0x800000</td><td>PFE_SIDEBYSIDE值有效。</td><td>PFE_SIDEBYSIDE</td><td>0x80</td><td>并排显示段落(未实现)。</td><tr>
<tr><td>PFM_COLLAPSED</td><td>0x1000000</td><td>PFE_COLLAPSED值有效。</td><td>PFE_COLLAPSED</td><td>0x100</td><td>作用</td><tr>
<tr><td>PFM_OUTLINELEVEL</td><td>0x2000000</td><td>PFE_OUTLINELEVEL值有效。</td><td>PFE_OUTLINELEVEL</td><td>0x200</td><td>作用</td><tr>
<tr><td>PFM_BOX</td><td>0x4000000</td><td>PFE_BOX值有效。</td><td>PFE_BOX</td><td>0x400</td><td>作用</td><tr>
<tr><td>PFM_RESERVED2</td><td>0x8000000</td><td>PFE_RESERVED2值有效。</td><td>PFE_RESERVED2</td><td>0x800</td><td>作用</td><tr>
<tr><td>PFM_TABLEROWDELIMITER</td><td>0x10000000</td><td>PFE_TABLEROWDELIMITER值有效。</td><td>PFE_TABLEROWDELIMITER</td><td>0x1000</td><td>段落是表中行 (U+FFF9 U+000D) 或结束分隔符 (U+FFFB U+000D) 。</td><tr>
<tr><td>PFM_TEXTWRAPPINGBREAK</td><td>0x20000000</td><td>PFE_TEXTWRAPPINGBREAK值有效。</td><td>PFE_TEXTWRAPPINGBREAK</td><td>0x2000</td><td>作用</td><tr>
<tr><td>PFM_TABLE</td><td>0x40000000</td><td>PFE_TABLE值有效。</td><td>PFE_TABLE</td><td>0x4000</td><td>段落是表格行。</td><tr>
</table><p><font size="6"><a name="输入法属性">输入法属性和功能</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><th colspan=3>要检索的属性信息的类型</th></tr>
<tr><td>IGP_PROPERTY</td><td>4</td><td>属性信息。</td></tr>
<tr><td>IGP_CONVERSION</td><td>8</td><td>转换功能。</td></tr>
<tr><td>IGP_SENTENCE</td><td>12</td><td>句子模式功能。</td></tr>
<tr><td>IGP_UI</td><td>0x10</td><td>用户界面功能。</td></tr>
<tr><td>IGP_SETCOMPSTR</td><td>0x14</td><td>组合字符串功能。</td></tr>
<tr><td>IGP_SELECT</td><td>0x18</td><td>选择继承功能。</td></tr>
<tr><td>IGP_GETIMEVERSION</td><td>-4</td><td>检索为其创建了指定 IME 的系统版本号。</td></tr>
<tr><th colspan=3>IGP_PROPERTY 属性信息常量</th></tr>
<tr><td>IME_PROP_AT_CARET</td><td>0x00010000</td><td>如果设置，则转换窗口位于插入点位置。 如果清除，则窗口接近插入点位置。</td></tr>
<tr><td>IME_PROP_SPECIAL_UI</td><td>0x00020000</td><td>如果设置，IME 具有非标准用户界面。 应用程序不应在 IME 窗口中绘制。</td></tr>
<tr><td>IME_PROP_CANDLIST_START_FROM_1</td><td>0x00040000</td><td>如果设置，候选列表中的字符串从 1 开始编号。 如果清除，则字符串从零开始。</td></tr>
<tr><td>IME_PROP_UNICODE</td><td>0x00080000</td><td>系统和 IME 将通过 UnicodeIME 接口进行通信。 如果清除，IME 将使用 ANSI 接口与系统通信。</td></tr>
<tr><td>IME_PROP_COMPLETE_ON_UNSELECT</td><td>0x00100000</td><td>如果设置，则转换窗口位于插入点位置。 如果清除，则窗口接近插入点位置。</td></tr>
<tr><td>IME_PROP_ACCEPT_WIDE_VKEY</td><td>0x00000020</td><td>如果设置，IME 将使用 VK_PACKET 处理来自 SendInput 函数的注入 Unicode。<br>如果清除，IME 可能不会处理注入的 Unicode，并且注入的 Unicode 可能会直接发送到应用程序。</td></tr>
<tr><th colspan=3>IGP_UI 用户界面常量</th></tr>
<tr><td>UI_CAP_2700</td><td>1</td><td>支持文本转义值 0 或 2700。</td></tr>
<tr><td>UI_CAP_ROT90</td><td>2</td><td>支持文本转义值 0、900、1800 或 2700。</td></tr>
<tr><td>UI_CAP_ROTANY</td><td>4</td><td>支持任何文本转义值。</td></tr>
<tr><th colspan=3>IGP_SETCOMPSTR 组合字符串常量</th></tr>
<tr><td>SCS_CAP_COMPSTR</td><td>1</td><td>可以通过使用 SCS_SETSTR 值调用 ImmSetCompositionString 函数来创建组合字符串。</td></tr>
<tr><td>SCS_CAP_MAKEREAD</td><td>2</td><td>在将 ImmSetCompositionString 函数与 SCS_SETSTR 一起使用且不设置 lpRead 时，可以从相应的组合字符串创建读取字符串。</td></tr>
<tr><td>SCS_CAP_SETRECONVERTSTRING</td><td>4</td><td>此输入法可以支持重新转换。 使用 ImmSetCompositionString 执行重新转换。</td></tr>
<tr><th colspan=3>IGP_SELECT 选择继承功能常量</th></tr>
<tr><td>SELECT_CAP_CONVMODE</td><td>1</td><td>选择新的 IME 时继承转换模式。</td></tr>
<tr><td>SELECT_CAP_SENTENCE</td><td>2</td><td>选择新的 IME 时继承句子模式。</td></tr>
<tr><th colspan=3>IGP_GETIMEVERSION 获取IME版本功能常量</th></tr>
<tr><td>IMEVER_0310</td><td>0x0003000A</td><td>IME 是为 Windows 3.1 创建的。</td></tr>
<tr><td>IMEVER_0400</td><td>0x00040000</td><td>IME 是为 Windows 95 或更高版本创建的</td></tr>
</table><p><font size="6"><a name="查找方式">查找方式</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FR_DOWN</td><td>1</td><td>如果设置，则搜索从当前所选内容的末尾到文档末尾。否则搜索将从当前所选内容的末尾到文档的开头。</td></tr>
<tr><td>FR_WHOLEWORD</td><td>2</td><td>如果已设置，则操作仅搜索与搜索字符串匹配的整个单词。 如果未设置，该操作还会搜索与搜索字符串匹配的单词片段。</td></tr>
<tr><td>FR_MATCHALEFHAMZA</td><td>0x80000000</td><td>Microsoft Rich Edit 3.0 及更高版本：如果设置，搜索将区分具有不同口音的阿拉伯语 alef。 如果未设置，则由 alef 字符单独匹配所有 alef。</td></tr>
<tr><td>FR_MATCHDIAC</td><td>0x20000000</td><td>Microsoft Rich Edit 3.0 及更高版本：如果设置，搜索操作将考虑阿拉伯语和希伯来语音调符号。 如果未设置，则忽略音调符号。</td></tr>
<tr><td>FR_MATCHKASHIDA</td><td>0x40000000</td><td>Microsoft Rich Edit 3.0 及更高版本：如果设置，则搜索操作将视为阿拉伯语 kashida。 如果未设置，则忽略 kashidas。</td></tr>
<tr><td>FR_MATCHWIDTH</td><td>0x10000000</td><td>Windows 8：如果设置，则同一字符的单字节和双字节版本被视为不相等。</td></tr>
</table><p><font size="6"><a name="富编辑对象">富编辑对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>富编辑对象</td><td>IRichEditOle</td><td>公开组件对象模型 (COM) 丰富编辑控件的功能。</td></tr>
<tr><th colspan=4>富编辑对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClientSite</td><td>站点(@接口)</td><td>检索创建新对象时要使用的 <a href="#客户站点对象">客户站点对象</a> 接口。客户端站点可以只与一个对象一起使用。</td></tr>
<tr><td>GetObjectCount</td><td>对象数</td><td>返回格式编辑控件中当前包含的对象数。</td></tr>
<tr><td>GetLinkCount</td><td>链接数</td><td>返回富编辑控件中作为链接的对象数。</td></tr>
<tr><td>GetObject</td><td>信息(索引,富对象类,方式)</td><td>检索存储在 <a href="#富对象类">富对象类</a> 结构中的有关丰富编辑控件中的对象的信息。<a href="#对象信息接口">方式</a>:0无,1对象,2存储,4网站界面,7所有</td></tr>
<tr><td>InsertObject</td><td>插入(富对象类)</td><td>将对象插入到富编辑控件中。</td></tr>
<tr><td>ConvertObject</td><td>转换(索引,类标识,新名)</td><td>将对象转换为新类型名称的字符串。会重新加载对象但不强制更新;调用方必须执行此操作。索引=-1为所选对象</td></tr>
<tr><td>ActivateAs</td><td>激活(旧类标识,新类标识)</td><td>通过卸载旧类的所有对象、通知 OLE 将这些对象视为新类的对象并重新加载对象来处理 Activate As 行为。 如果无法重新加载对象，则会删除它们。</td></tr>
<tr><td>SetHostNames</td><td>改名(程序名,文档对象名)</td><td>设置在对象插入到富编辑控件时要提供给对象的主机名。 主机名在服务器的用户界面中用于描述已打开对象的容器上下文。</td></tr>
<tr><td>SetLinkAvailable</td><td>链接位(索引,真)</td><td>设置对象标志中链接可用位的值。默认为真。如果链接上出现任何错误，表示连接到链接对象或应用程序时出现问题，则应将其设置为假装。修复问题再设置为真。索引=-1为所选对象</td></tr>
<tr><td>SetDvaspect</td><td>绘面(索引,方面)</td><td>设置丰富编辑控件用于绘制对象的方面。 此调用不会更改对象中缓存的绘图信息;这必须由调用方完成。 调用会导致重绘对象。索引=-1为所选对象</td></tr>
<tr><td>HandsOffStorage</td><td>免提(索引)</td><td>指示何时要释放对与指定对象关联的存储接口的丰富编辑控件的引用。索引=-1为所选对象</td></tr>
<tr><td>SaveCompleted</td><td>保存(索引,存储)</td><td>指示完成最近保存操作的时间，并且富编辑控件应保留对象的不同存储。索引=-1为所选对象</td></tr>
<tr><td>InPlaceDeactivate</td><td>停用</td><td>指示格式编辑控件何时停用当前活动的就地对象（如果有）。</td></tr>
<tr><td>ContextSensitiveHelp</td><td>帮助(真)</td><td>指示丰富编辑控件是应转换到上下文相关帮助模式还是应退出上下文相关帮助模式。</td></tr>
<tr><td>GetClipboardData</td><td>剪贴板(范围类,0,数据对象)</td><td>检索编辑控件中某个区域的剪贴板<a href="#数据对象">对象</a>。</td></tr>
<tr><td>ImportDataObject</td><td>导入(对象,格式,图像)</td><td>将剪贴板对象导入富编辑控件，替换当前所选内容。</td></tr>
</table><p><font size="6"><a name="富编辑回调对象">富编辑回调对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>富编辑回调对象</td><td>IRichEditOle</td><td>从其客户端检索与 OLE 相关的信息。 </td></tr>
<tr><th colspan=4>富编辑回调对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetNewStorage</td><td>存储(@接口)</td><td>为从剪贴板粘贴的新对象或从RTF格式读取的新对象提供<a href="#存储对象">存储接口</a>。</td></tr>
<tr><td>GetInPlaceContext</td><td>环境(@<a href="#嵌入框架对象">框架</a>框架,<a href="#嵌入窗口对象">@文档</a>@文档,<a href="#加速器信息类">加速器</a>)</td><td>提供支持就地激活所需的应用程序和文档级接口和信息。</td></tr>
<tr><td>ShowContainerUI</td><td>显容器(真)</td><td>指示应用程序是否显示其容器 UI。真:显示,假:不显示;富编辑控件会向前看双击，并在适当时延迟调用。</td></tr>
<tr><td>QueryInsertObject</td><td>插入(类标识符,存储,字符位置)</td><td>查询应用程序是否应插入对象。当粘贴和阅读 RTF 格式时，将调用 该成员。</td></tr>
<tr><td>DeleteObject</td><td>删除(对象)</td><td>发送通知指出对象即将从富编辑控件中删除。但不一定释放对象。</td></tr>
<tr><td>QueryAcceptData</td><td>接受(对象,格式,操作,拖放,图像)</td><td>在粘贴操作或拖动事件期间，确定是否应接受粘贴或拖动的数据。格式:<a href="#剪切板格式">剪切板格式</a>;操作:0拖放,1粘贴;拖放为真表示已经拖放</td></tr>
<tr><td>ContextSensitiveHelp</td><td>帮助(真)</td><td>指示应用程序是应转换到上下文相关帮助模式(真)还是从上下文相关帮助模式转换(假)。 </td></tr>
<tr><td>GetClipboardData</td><td>复制(范围类,操作,@数据对象)</td><td>允许客户端提供其自己的剪贴板对象。操作:2复制,3剪切</td></tr>
<tr><td>GetDragDropEffect</td><td>效果(拖放,键状态,效果)</td><td>允许客户端指定放置操作的效果。拖放为真代表完成拖放,效果为允许拖放;拖放为假表示正在拖放,效果为拖放使用中</td></tr>
<tr><td>GetContextMenu</td><td>菜单(选中,对象,范围类,@菜单)</td><td>查询应用程序以查找要用于右键单击事件的上下文菜单。选中:0为空,1文本,2对象,4多个字符,8多个对象,0x8000右键菜单</td></tr>
</table><p><font size="6"><a name="对象信息接口">富编辑控件对象信息接口标志</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>REO_GETOBJ_NO_INTERFACES</td></td><td>0</td><td>不获取接口。</td></tr>
<tr><td>REO_GETOBJ_POLEOBJ</td><td>1</td><td>获取对象接口。</td></tr>
<tr><td>REO_GETOBJ_PSTG</td><td>2</td><td>获取存储接口。</td></tr>
<tr><td>REO_GETOBJ_POLESITE</td><td>4</td><td>获取网站界面。</td></tr>
<tr><td>REO_GETOBJ_ALL_INTERFACES</td><td>7</td><td>获取所有接口。</td></tr>
</table><p><font size="6"><a name="富对象类">富对象类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>富对象类</td><td>REOBJECT</td><td>56</td><td>包含有关丰富编辑控件中的 OLE 或图像对象的信息。</td></tr>
<tr><th colspan=4>富对象类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbStruct</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>位置</td><td>cp</td><td>整数</td><td>对象的字符位置。</td></tr>
<tr><td>类标识</td><td>clsid[16]</td><td>文本</td><td>对象的类标识符。</td></tr>
<tr><td>接口</td><td>poleobj</td><td>整数</td><td>对象的 IOleObject 接口的实例。</td></tr>
<tr><td>存储</td><td>pstg</td><td>整数</td><td><a href="#存储对象">存储对象</a> 接口的实例。这是与对象关联的存储对象。</td></tr>
<tr><td>站点</td><td>polesite</td><td>整数</td><td><a href="#客户站点对象">客户站点对象</a> 接口的实例。 必须从 <a href="@富编辑对象">富编辑对象</a>.站点 方法获取此地址。</td></tr>
<tr><td>宽度</td><td>sizel.cx</td><td>整数</td><td>对象的大小。度量单位为 0.01 毫米，这是 HIMETRIC 度量单位。</td></tr>
<tr><td>高度</td><td>sizel.cy</td><td>整数</td><td>对象的大小。度量单位为 0.01 毫米，这是 HIMETRIC 度量单位。</td></tr>
<tr><td>方位</td><td>dvaspect</td><td>整数</td><td>使用的显示方面。<a href="#视图方位">视图方位</a></td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>对象状态标志。它可以是<a href="#富状态标志">状态标志值</a>的组合。</td></tr>
<tr><td>定义</td><td>dwUser</td><td>整数</td><td>为用户定义的值保留。</td></tr>
</table><p><font size="6"><a name="视图方位">视图方位常量</a>——在绘制或获取数据时，指定所需对象数据或对象视图方位。DVASPECT</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DVASPECT_CONTENT</td><td>1</td><td>提供对象的表示形式，以便它可以显示为容器内的嵌入对象。 通常为复合文档对象指定此值。 该演示可提供给屏幕或打印机。</td></tr>
<tr><td>DVASPECT_THUMBNAIL</td><td>2</td><td>提供对象的缩略图表示形式，以便可以在浏览工具中显示该对象。<br>缩略图大约为 120 x 120 像素、16 色 (建议) 可能包装在图元文件中的与设备无关的位图。</td></tr>
<tr><td>DVASPECT_ICON</td><td>4</td><td>提供对象的图标表示形式。</td></tr>
<tr><td>DVASPECT_DOCPRINT</td><td>8</td><td>提供屏幕上对象的表示形式，就像使用“文件”菜单中的“打印”命令打印到打印机一样。 该描述数据可以表示页序列。</td></tr>
</table>DVASPECT2指定用于优化绘图过程的新绘图方面。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DVASPECT_OPAQUE</td><td>16</td><td>表示不透明、易于剪辑对象的部分。</td></tr>
<tr><td>DVASPECT_TRANSPARENT</td><td>32</td><td>表示 对象上的透明或不规则部分，通常是昂贵或无法剪裁的部分。对象可能支持（也可能不支持）这一方面。</td></tr>
</table><p><font size="6"><a name="富状态标志">丰富编辑控件状态标志组合</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>REO_RESIZABLE</td><td>1</td><td>对象可以调整大小。</td></tr>
<tr><td>REO_BELOWBASELINE</td><td>2</td><td>对象位于周围文本的基线下方;默认值为位于基线上。</td></tr>
<tr><td>REO_INVERTEDSELECT</td><td>4</td><td>选定对象时将完全反转绘制;默认为使用边框绘制。</td></tr>
<tr><td>REO_BLANK</td><td>0x10</td><td>对象是新的。 此值使对象有机会不保存任何内容并自动从控件中删除。</td></tr>
<tr><td>REO_CANROTATE</td><td>0x80</td><td>对象可以在旋转的位置显示自身。</td></tr>
<tr><td>REO_ALIGNTORIGHT</td><td>0x100</td><td>将 对象与视图的右侧对齐。 如果未指定REO_WRAPTEXTAROUND，则忽略此值。</td></tr>
<tr><td>REO_DONTNEEDPALETTE</td><td>0x20</td><td>对象在创建和实现半色调调色板之前呈现。 仅适用于 32 位平台。</td></tr>
<tr><td>REO_DYNAMICSIZE</td><td>8</td><td>对象始终确定其盘区，尽管修改标志被关闭，但可能会更改。</td></tr>
<tr><td>REO_GETMETAFILE</td><td>0x00400000</td><td>Rich edit 控件从 对象检索图元文件，以正确确定对象的范围。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_HILITED</td><td>0x01000000</td><td>对象当前突出显示以指示选择。 当焦点位于控件中并设置 <tr><td>REO_SELECTED 时发生。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_INPLACEACTIVE</td><td>0x02000000</td><td>对象当前处于就地活动状态。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_LINK</td><td>0x80000000</td><td>对象是一个链接。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_LINKAVAILABLE</td><td>0x00800000</td><td>对象是一个链接，据信是可用的。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_OPEN</td><td>0x04000000</td><td>对象当前在其服务器中处于打开状态。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_OWNERDRAWSELECT</td><td>0x40</td><td>所有者绘制所选对象。</td></tr>
<tr><td>REO_SELECTED</td><td>0x08000000</td><td>对象当前在 Rich edit 控件中处于选中状态。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_STATIC</td><td>0x40000000</td><td>对象是静态对象。 可以读取此标志，但不能设置。</td></tr>
<tr><td>REO_USEASBACKGROUND</td><td>0x400</td><td>使用 对象作为背景图片。</td></tr>
<tr><td>REO_WRAPTEXTAROUND</td><td>0x00000200</td><td>文本环绕对象。</td></tr>
</table>
<p><font size="6"><a name="字符集">字符集</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>编码</td><td>代码页</td></tr>
<tr><td>ANSI_CHARSET</td><td>0x00</td><td>0</td><td>1252</td></tr>
<tr><td>DEFAULT_CHARSET</td><td>0x01</td><td>1</td><td> </td></tr>
<tr><td>SYMBOL_CHARSET</td><td>0x02</td><td>2</td><td> </td></tr>
<tr><td>SHIFTJIS_CHARSET</td><td>0x80</td><td>128</td><td>932</td></tr>
<tr><td>HANGUL_CHARSET</td><td>0x81</td><td>129</td><td>949</td></tr>
<tr><td>GB2312_CHARSET</td><td>0x86</td><td>134</td><td>936</td></tr>
<tr><td>CHINESEBIG5_CHARSET</td><td>0x88</td><td>136</td><td>950</td></tr>
<tr><td>GREEK_CHARSET</td><td>0xA1</td><td>161</td><td>1253</td></tr>
<tr><td>TURKISH_CHARSET</td><td>0xA2</td><td>162</td><td>1254</td></tr>
<tr><td>HEBREW_CHARSET</td><td>0xB1</td><td>177</td><td>1255</td></tr>
<tr><td>ARABIC_CHARSET</td><td>0xB2</td><td>178</td><td>1256</td></tr>
<tr><td>BALTIC_CHARSET</td><td>0xBA</td><td>186</td><td>1257</td></tr>
<tr><td>RUSSIAN_CHARSET</td><td>0xCC</td><td>204</td><td>1251</td></tr>
<tr><td>THAI_CHARSET</td><td>0xDE</td><td>222</td><td>874</td></tr>
<tr><td>EE_CHARSET</td><td>0xEE</td><td>238</td><td>1250</td></tr>
<tr><td>OEM_CHARSET</td><td>0xFF</td><td>255</td><td> </td></tr>
</table>
<p><font size="6"><a name="滑块条">滑块条</a>——使用简介：</font></p>
跟踪条是一个窗口，其中包含一个滑块 (有时称为通道中的拇指) 和可选的刻度线。 当用户使用鼠标或方向键移动滑块时，跟踪条会发送通知消息以指示更改。<br>
当希望用户选择一个离散无符号整数值或一个范围内的一组连续无符号整数值时，跟踪栏非常有用。 例如，可以使用跟踪条来允许用户通过将滑块移动到给定刻度线来设置键盘的重复速率。 下图显示了一个典型的跟踪条。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tkb-simple.png"><br>
跟踪栏中的滑块以创建时指定的增量移动。 此范围内的值称为逻辑单元。 例如，如果指定跟踪条的逻辑单元范围为 0 到 5，则滑块只能占据六个位置：跟踪条左侧的一个位置，以及范围中每个增量的一个位置。<br>
通常，每个位置都由刻度线标识;但是，刻度线的数量是任意的，并且可能小于逻辑位置的数量。<br>
使用 创建窗口 函数创建跟踪条，指定 "msctls_trackbar32" 窗口类。 创建跟踪栏后，可以使用跟踪条消息来设置和检索其许多属性。可进行的更改包括设置滑块的最小和最大位置、绘制刻度线、设置选择范围以及重新定位滑块。<br>

<h2>选择范围</h2>
如果创建具有 TBS_ENABLESELRANGE样式的 跟踪条，则可以指定选择范围。 跟踪条突出显示选择范围，并在开始和结束位置显示三角形刻度线，如下图所示。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/controls/images/tkb-selrange.png"><br>
跟踪条的选择范围不会以任何方式影响其功能。 由应用程序来实现范围。 可以通过以下方法之一执行此操作：<br>

使用选择范围使用户能够设置某些参数的最大值和最小值。 例如，用户可以将滑块移动到某个位置，然后单击标有“Max”的按钮。 然后，应用程序设置选择范围以显示用户选择的值。<br>
通过处理 水平滚动 或 垂直滚动 通知并禁止任何超出选择范围的任何移动，将滑块的移动限制为控件内预先确定的子范围。 例如，如果用户可用的值范围可能因用户所做的其他选择或根据可用资源而更改，则可以执行此操作。<br>
<h2>跟踪栏通知消息</h2>
跟踪栏通过向父级发送 水平滚动 或 垂直滚动 消息来通知其父窗口的用户操作。 具有 水平方向 样式的 跟踪条发送 水平滚动 消息。 具有 垂直方向 样式的跟踪条发送 垂直滚动 消息。<br>
水平滚动 或垂直滚动的 ③参数 参数的低序字包含通知代码。 对于松开滑块和拖动滑块通知代码， ③参数 参数的高序字指定滑块的位置。 对于所有其他通知代码，高序字为零;发送 滑块获取位置 消息以确定滑块位置。 ④数据 参数是跟踪条的句柄。<br>

仅当用户使用键盘与跟踪条交互时，系统才会发送按左上键、按右下键、按首页键和按结尾键通知代码。 仅当用户使用鼠标时，才会发送松开滑块和拖动滑块通知代码。<br>
在这两种情况下，都会发送 结束滑键、按上页键 和 按下页键 通知代码。 下表列出了跟踪栏通知代码，以及导致发送虚拟密钥代码通知 (虚拟 密钥代码或鼠标事件) 的事件。<br>
<p><font size="6"><a name="滑块移动">滑块条——移动类型：</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>按左上键</td><td>TB_LINEUP</td><td>0</td><td>用户按下了向左键 (VK_LEFT) 或向上键 (VK_UP) 键。</td></tr>
<tr><td>按右下键</td><td>TB_LINEDOWN</td><td>1</td><td>用户按下了向右键 (VK_RIGHT) 或向下键 (VK_DOWN) 键。</td></tr>
<tr><td>按上页键</td><td>TB_PAGEUP</td><td>2</td><td>用户单击了滑块上方或左侧的通道 (VK_PRIOR)。</td></tr>
<tr><td>按下页键</td><td>TB_PAGEDOWN</td><td>3</td><td>用户单击了滑块下方或右侧的通道 (VK_NEXT)。</td></tr>
<tr><td>松开滑块</td><td>TB_THUMBPOSITION</td><td>4</td><td>跟踪条在收到 TB_THUMBTRACK 通知代码后收到 WM_LBUTTONUP。</td></tr>
<tr><td>拖动滑块</td><td>TB_THUMBTRACK</td><td>5</td><td>用户拖动了滑块。</td></tr>
<tr><td>按结尾键</td><td>TB_BOTTOM</td><td>7</td><td>用户按下了 END 键 (VK_END)。</td></tr>
<tr><td>搂首页键</td><td>TB_TOP</td><td>6</td><td>用户按下了 Home 键 (VK_HOME)。</td></tr>
<tr><td>结束滑键</td><td>TB_ENDTRACK</td><td>8</td><td>跟踪条收到 WM_KEYUP，这表示用户释放了发送相关虚拟键代码的键。</td></tr>
</table>
<h2>默认跟踪条消息处理</h2>
本部分介绍由跟踪条执行的窗口消息处理。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>失去鼠标</td><td>WM_CAPTURECHANGED</td><td>0x215</td><td>如果在 WM_LBUTTONDOWN 处理期间设置了计时器，则终止计时器，并在必要时发送TB_THUMBPOSITION通知代码。 它始终发送TB_ENDTRACK通知代码。</td></tr>
<tr><td>窗口创建</td><td>WM_CREATE</td><td>0x1</td><td>执行其他初始化，例如将行大小、页面大小和刻度线频率设置为默认值。</td></tr>
<tr><td>程序关闭</td><td>WM_DESTROY</td><td>0x2</td><td>释放资源。</td></tr>
<tr><td>可用状态</td><td>WM_ENABLE</td><td>0xA</td><td>重新绘制跟踪条窗口。</td></tr>
<tr><td>擦除背景</td><td>WM_ERASEBKGND</td><td>0x14</td><td>使用跟踪条的当前背景色擦除窗口背景。</td></tr>
<tr><td>切换控件</td><td>WM_GETDLGCODE</td><td>0x87</td><td>返回DLGC_WANTARROWS值。</td></tr>
<tr><td>键盘按下</td><td>WM_KEYDOWN</td><td>0x100</td><td>处理方向键，并根据需要发送TB_TOP、TB_BOTTOM、TB_PAGEUP、TB_PAGEDOWN、TB_LINEUP和TB_LINEDOWN通知代码。</td></tr>
<tr><td>键盘松开</td><td>WM_KEYUP</td><td>0x101</td><td>如果键是方向键之一，则发送TB_ENDTRACK通知代码。</td></tr>
<tr><td>失去焦点</td><td>WM_KILLFOCUS</td><td>0x8</td><td>重新绘制跟踪条窗口。</td></tr>
<tr><td>按下左键</td><td>WM_LBUTTONDOWN</td><td>0x201</td><td>将焦点和鼠标捕获设置为跟踪条。 如有必要，它会设置一个计时器，用于确定当用户在窗口中按住鼠标按钮时滑块向鼠标光标移动的速度。</td></tr>
<tr><td>释放左键</td><td>WM_LBUTTONUP</td><td>0x202</td><td>释放鼠标捕获并在 WM_LBUTTONDOWN 处理期间设置计时器并终止计时器。 如有必要，它会发送TB_THUMBPOSITION通知代码。 它始终发送TB_ENDTRACK通知代码。</td></tr>
<tr><td>鼠标移动</td><td>WM_MOUSEMOVE</td><td>0x200</td><td>移动滑块并在跟踪鼠标时发送TB_THUMBTRACK通知代码， (看到 WM_TIMER) 。</td></tr>
<tr><td>窗口重绘</td><td>WM_PAINT</td><td>0xF</td><td>绘制跟踪条。 如果 wParam 参数为非 NULL，则控件假定该值是 HDC 并使用该设备上下文进行绘制。</td></tr>
<tr><td>获得焦点</td><td>WM_SETFOCUS</td><td>0x7</td><td>重新绘制跟踪条窗口。</td></tr>
<tr><td>窗口缩放</td><td>WM_SIZE</td><td>0x5</td><td>设置跟踪条的尺寸，如果没有足够的空间显示滑块，则删除滑块。</td></tr>
<tr><td>定时事件</td><td>WM_TIMER</td><td>0x113</td><td>检索鼠标位置并更新滑块的位置。 (仅在用户拖动 slider 时收到它。)</td></tr>
<tr><td>配置更新</td><td>WM_WININICHANGE</td><td>0x1A</td><td>初始化滑块维度。</td></tr>
</table>
<h2>跟踪条工具提示</h2>
使用 支持提示 样式创建的跟踪条具有默认的工具提示控件。 当用户使用鼠标拖动滑块时，工具提示将保持可见并显示当前值。<br>

可以通过发送 滑块设置提示 消息将新的工具提示控件分配给跟踪条。 若要检索已分配的工具提示控件的句柄，请使用 滑块获取提示 消息。<br>
<p><font size="6">滑块条——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。④数据:NMCUSTOMDRAW 结构的 dwItemSpec 成员:1边缘显示刻度,2拇指标记,3拇指沿轨道滑动</td></tr>
<tr><td>控件释放鼠标</td><td>-16</td><td>NM_RELEASEDCAPTURE</td><td>通知控件的父窗口控件要释放鼠标捕捉</td></tr>
<tr><td>滑块位置更改</td><td>-1502</td><td>TRBN_THUMBPOSCHANGING</td><td>通知跟踪条上的拇指位置正在更改。④数据:<a href="#跟踪通知类">跟踪通知类</a> 结构</td></tr>
<tr><td>水平滚动</td><td>$0114</td><td>WM_HSCROLL</td><td>当窗口的标准水平滚动条产生一个滚动事件时,发送本消息给该窗口。③参数:低位=0点左键,1点右/下键,2点滑块左,3点滑块右,4松开滑块,<br>5拖动滑块,6按home,7按END,8释放按键;高位=滑块当前位置;④数据:控件</td></tr>
<tr><td>垂直滚动</td><td>$0115</td><td>WM_VSCROLL</td><td>当窗口的标准垂直滚动条产生一个滚动事件时,发送本消息给该窗口。③参数:低位=0点上键,1点下键,2点滑块上方,3点滑块下方,4松开滑块,<br>5拖动滑块,6按home,7按END,8释放按键;高位=滑块当前位置;④数据:控件</td></tr>
</table>
<p><font size="6">滑块条——发送消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>滑块获取位置</td><td>TBM_GETPOS</td><td>0x400</td><td>检索跟踪栏中滑块的当前逻辑位置。 逻辑位置是跟踪条最小到最大滑块位置范围内的整数值。③参数:0；④数据:0</td></tr>
<tr><td>滑块取最小位</td><td>TBM_GETRANGEMIN</td><td>0x401</td><td>检索跟踪栏中滑块的最小位置。③参数:0；④数据:0</td></tr>
<tr><td>滑块取最大位</td><td>TBM_GETRANGEMAX</td><td>0x402</td><td>检索跟踪栏中滑块的最大位置。③参数:0；④数据:0</td></tr>
<tr><td>滑块取刻度线</td><td>TBM_GETTIC</td><td>0x403</td><td>检索跟踪栏中刻度线的逻辑位置。 逻辑位置可以是跟踪条的最小到最大滑块位置范围内的任意整数值。③参数:索引0到2；④数据:0</td></tr>
<tr><td>滑块改刻度线</td><td>TBM_SETTIC</td><td>0x404</td><td>在指定逻辑位置的跟踪栏中设置刻度线。③参数:0；④数据:位置</td></tr>
<tr><td>滑块修改位置</td><td>TBM_SETPOS</td><td>0x405</td><td>设置跟踪栏中滑块的当前逻辑位置。③参数:是否重绘；④数据:新位置</td></tr>
<tr><td>滑块位置范围</td><td>TBM_SETRANGE</td><td>0x406</td><td>设置跟踪栏中滑块的最小和最大逻辑位置范围。③参数:是否重绘；④数据:最小/最大位置</td></tr>
<tr><td>滑块改最小位</td><td>TBM_SETRANGEMIN</td><td>0x407</td><td>设置跟踪栏中滑块的最小逻辑位置。③参数:是否重绘；④数据:最小位置</td></tr>
<tr><td>滑块改最大位</td><td>TBM_SETRANGEMAX</td><td>0x408</td><td>设置跟踪栏中滑块的最大逻辑位置。③参数:是否重绘；④数据:最大位置</td></tr>
<tr><td>滑块删刻度线</td><td>TBM_CLEARTICS</td><td>0x409</td><td>从跟踪条中删除当前刻度线。此消息不会删除由跟踪条自动创建的第一个和最后一个刻度线。③参数:是否重绘；④数据:0</td></tr>
<tr><td>滑块选择范围</td><td>TBM_SETSEL</td><td>0x40A</td><td>设置跟踪栏中可用选择范围的起始和结束位置。③参数:是否重绘；④数据:起始/结束位置</td></tr>
<tr><td>滑块取起始位</td><td>TBM_SETSELSTART</td><td>0x40B</td><td>设置跟踪栏中当前选择范围的起始逻辑位置。 如果跟踪条没有 范围显示 样式，则忽略此消息。③参数:是否重绘；④数据:起始位置</td></tr>
<tr><td>滑块取结束位</td><td>TBM_SETSELEND</td><td>0x40C</td><td>设置跟踪栏中当前选择范围的结束逻辑位置。 如果跟踪条没有 范围显示 样式，则忽略此消息。③参数:是否重绘；④数据:结束位置</td></tr>
<tr><td>滑块刻度数组</td><td>TBM_GETPTICS</td><td>0x40E</td><td>检索包含跟踪条刻度线位置的数组的地址。③参数:0；④数据:0</td></tr>
<tr><td>滑块刻度位置</td><td>TBM_GETTICPOS</td><td>0x40F</td><td>检索跟踪栏中刻度线的当前物理位置。③参数:索引（不包括第一和最后）；④数据:0</td></tr>
<tr><td>滑块刻度线数</td><td>TBM_GETNUMTICS</td><td>0x410</td><td>检索跟踪栏中的刻度线数。③参数:0；④数据:0</td></tr>
<tr><td>滑块改起始位</td><td>TBM_GETSELSTART</td><td>0x411</td><td>检索跟踪栏中当前选择范围的起始位置。③参数:0；④数据:0</td></tr>
<tr><td>滑块改结束位</td><td>TBM_GETSELEND</td><td>0x412</td><td>检索跟踪栏中当前选择范围的结束位置。③参数:0；④数据:0</td></tr>
<tr><td>滑块清除选择</td><td>TBM_CLEARSEL</td><td>0x413</td><td>清除跟踪栏中的当前选择范围。③参数:是否重绘；④数据:0</td></tr>
<tr><td>滑块间隔频率</td><td>TBM_SETTICFREQ</td><td>0x414</td><td>设置跟踪栏中刻度线的间隔频率。例如频率设置为2，则跟踪条范围中每隔一个增量显示一个刻度线。默认为1。③参数:频率；④数据:0</td></tr>
<tr><td>滑块取翻页量</td><td>TBM_GETPAGESIZE</td><td>0x415</td><td>检索跟踪条的滑块在响应键盘或鼠标输入时移动的逻辑位置数。③参数:0；④数据:0</td></tr>
<tr><td>滑块改翻页量</td><td>TBM_SETPAGESIZE</td><td>0x416</td><td>设置跟踪条的滑块在响应键盘或鼠标输入时移动的逻辑位置数。③参数:0；④数据:增量</td></tr>
<tr><td>滑块取移动量</td><td>TBM_GETLINESIZE</td><td>0x417</td><td>检索跟踪条滑块在响应键盘或鼠标输入时移动的逻辑位置数。③参数:0；④数据:0</td></tr>
<tr><td>滑块改移动量</td><td>TBM_SETLINESIZE</td><td>0x418</td><td>设置跟踪条滑块在响应键盘或鼠标输入时移动的逻辑位置数。③参数:0；④数据:增量</td></tr>
<tr><td>滑块边框矩形</td><td>TBM_GETTHUMBRECT</td><td>0x419</td><td>检索跟踪栏中滑块的边框的大小和位置。③参数:0；④数据:矩形类</td></tr>
<tr><td>滑块通道矩形</td><td>TBM_GETCHANNELRECT</td><td>0x41A</td><td>检索跟踪条通道的边框的大小和位置。通道是滑块移动的区域。③参数:0；④数据:矩形类</td></tr>
<tr><td>滑块修改长度</td><td>TBM_SETTHUMBLENGTH</td><td>0x41B</td><td>设置跟踪栏中滑块的长度。如果跟踪条没有 滑块调整 样式，则忽略此消息。③参数:长度；④数据:0</td></tr>
<tr><td>滑块获取长度</td><td>TBM_GETTHUMBLENGTH</td><td>0x41C</td><td>检索跟踪栏中滑块的长度（以像素为单位）。③参数:0；④数据:0</td></tr>
<tr><td>滑块设置提示</td><td>TBM_SETTOOLTIPS</td><td>0x41D</td><td>将工具提示控件分配给跟踪条控件。③参数:提示控件；④数据:0</td></tr>
<tr><td>滑块获取提示</td><td>TBM_GETTOOLTIPS</td><td>0x41E</td><td>检索分配给跟踪栏的工具提示控件的句柄（如果有）。③参数:0；④数据:0</td></tr>
<tr><td>滑块提示方位</td><td>TBM_SETTIPSIDE</td><td>0x41F</td><td>放置使用支持提示样式跟踪条控件使用的工具提示控件。③参数:0上方，1左边，2下边，3右边；④数据:0</td></tr>
<tr><td>滑块修改伴窗</td><td>TBM_SETBUDDY</td><td>0x420</td><td>将窗口分配为跟踪条控件的伙伴窗口。伙伴窗口将自动显示在相对于控件方向的位置。③参数:真=伙伴在左/上，假=伙伴在右/下；④数据:窗口</td></tr>
<tr><td>滑块获取伴窗</td><td>TBM_GETBUDDY</td><td>0x421</td><td>检索给定位置的跟踪条控件伙伴窗口的句柄。指定位置相对于控件的方向 (水平或垂直) 。③参数:真=取左/上伙伴，假=取右/下伙伴；④数据:0</td></tr>
<tr><td>滑块改变位置</td><td>TBM_SETPOSNOTIFY</td><td>0x422</td><td>设置跟踪栏中滑块的当前逻辑位置。③参数:0；④数据:新位置</td></tr>
<tr><td>控件设置宽字</td><td>TBM_SETUNICODEFORMAT</td><td>0x2005</td><td>设置控件的 Unicode 字符格式标志。③参数:是否宽字;④数据:0;</td></tr>
<tr><td>控件获取宽字</td><td>TBM_GETUNICODEFORMAT</td><td>0x2006</td><td>获取控件的 Unicode 字符格式标志。③参数:0;④数据:0;</td></tr>
</table>
<p><font size="6">滑块条——自定义绘制：</font></p>
本部分列出了用于标识滑块条控件部分的值。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>通道</td><td>TBCD_CHANNEL</td><td>0x3</td><td>标识跟踪条控件的拇指标记滑行的通道。</td></tr>
<tr><td>滑块</td><td>TBCD_THUMB</td><td>0x2</td><td>标识跟踪条控件的拇指标记。 这是用户移动的控件的一部分。</td></tr>
<tr><td>刻度</td><td>TBCD_TICS</td><td>0x1</td><td>标识沿跟踪条控件边缘显示的刻度线。</td></tr>
</table>
<p><font size="6">滑块条——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>显刻度线</td><td>TBS_AUTOTICKS</td><td>0x1</td><td>跟踪条控件在其值范围中的每个增量中都有一个刻度线。</td></tr>
<tr><td>垂直方向</td><td>TBS_VERT</td><td>0x2</td><td>跟踪条控件垂直方向。</td></tr>
<tr><td>水平方向</td><td>TBS_HORZ</td><td>0</td><td>跟踪条控件是水平方向的。这是默认方向。</td></tr>
<tr><td>左上刻度</td><td>TBS_TOP</td><td>0x4</td><td>跟踪条控件在控件上方显示刻度线。 此样式仅对 水平方向 有效。</td></tr>
<tr><td>下方刻度</td><td>TBS_BOTTOM</td><td>0</td><td>跟踪条控件在控件下方显示刻度线。 此样式仅对 水平方向 有效。</td></tr>
<tr><td>左边刻度</td><td>TBS_LEFT</td><td>0x4</td><td>跟踪条控件在控件左侧显示刻度线。 此样式仅对 垂直方向 有效。</td></tr>
<tr><td>右边刻度</td><td>TBS_RIGHT</td><td>0</td><td>跟踪条控件在控件右侧显示刻度线。 此样式仅对 垂直方向 有效。</td></tr>
<tr><td>两边刻度</td><td>TBS_BOTH</td><td>0x8</td><td>跟踪条控件在控件的两侧显示刻度线。 与 水平方向 一起使用时，这既是顶部，也是底部，如果与 垂直方向 一起使用，则为左和右。</td></tr>
<tr><td>不显刻度</td><td>TBS_NOTICKS</td><td>0x10</td><td>跟踪条控件不显示任何刻度线。</td></tr>
<tr><td>范围显示</td><td>TBS_ENABLESELRANGE</td><td>0x20</td><td>跟踪条控件仅显示选择范围。 选择范围起始和结束位置处的刻度线显示为三角形 (而不是) 垂直虚线，并突出显示选择范围。</td></tr>
<tr><td>滑块调整</td><td>TBS_FIXEDLENGTH</td><td>0x40</td><td>跟踪条控件允许随 滑块修改长度 消息更改滑块的大小。</td></tr>
<tr><td>不显滑块</td><td>TBS_NOTHUMB</td><td>0x8</td><td>跟踪条控件不显示滑块。</td></tr>
<tr><td>支持提示</td><td>TBS_TOOLTIPS</td><td>0x100</td><td>版本 4.70。 跟踪条控件支持工具提示。 使用此样式创建跟踪条控件时，它会自动创建显示滑块当前位置的默认工具提示控件。 可以使用 滑块提示方位 消息更改工具提示的显示位置。</td></tr>
<tr><td>反向跟踪</td><td>TBS_REVERSED</td><td>0x200</td><td>版本 5.80。此样式位用于“反向”跟踪条，其中较小的数字表示“较高”，较大的数字表示“较低”。它对控件没有影响;它只是一个标签，可以检查以确定跟踪条是正常还是反向。</td></tr>
<tr><td>反转方向</td><td>TBS_DOWNISLEFT</td><td>0x400</td><td>默认情况下，跟踪条控件使用向下等于右，向上等于左。 使用此样式来反转默认值，使向下等于左，向上等于右。</td></tr>
<tr><td>贴靠通知</td><td>TBS_NOTIFYBEFOREMOVE</td><td>0x800</td><td>版本 6.00 和 Windows Vista。 由于用户操作，跟踪条在重新定位滑块之前应通知父级， (启用贴靠) 。</td></tr>
<tr><td>自绘背景</td><td>TBS_TRANSPARENTBKGND</td><td>0x1000</td><td>版本 6.00 和 Windows Vista。 背景由父级通过 绘客户区 消息绘制。</td></tr>
</table><font size="6"><a name="跟踪通知类">跟踪通知类</a>——结构定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>跟踪通知类</td><td>NMTRBTHUMBPOSCHANGING</td><td>8</td><td>包含有关跟踪条更改通知的信息。 此消息随 滑块位置更改 通知一起发送。</td></tr>
<tr><th colspan=4>跟踪通知类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>通知</td><td>hdr</td><td>通知类</td><td>描述通知的 <a href="#通知类">通知类</a>。</td></tr>
<tr><td>定位</td><td>dwPos</td><td>整数</td><td>定位在跟踪条上。</td></tr>
<tr><td>原因</td><td>nReason</td><td>整数</td><td>作为以下值之一的<a href="#滑块移动">移动类型</a></td></tr>
</table>
<p><font size="6"><a name="影音动画">影音动画</a>——使用简介：</font></p>
动画控件是显示交错Audio-Video (AVI) 剪辑的窗口。 AVI 剪辑是一系列位图帧，如电影。 动画控件只能显示不包含音频的 AVI 剪辑。<br>
动画控件的一个常见用途是在长时间操作期间指示系统活动。 这是可能的，因为操作线程在显示 AVI 剪辑时继续执行。 例如，Windows 资源管理器的“查找”对话框在系统搜索文件时显示一个移动的放大镜。<br>
动画控件可以显示源自未压缩 AVI 文件或使用运行长度 (BI_RLE8) 编码压缩的 AVI 文件的 AVI 剪辑。 可以将 AVI 剪辑作为 AVI 资源添加到应用程序，也可以将剪辑作为单独的 AVI 文件随应用程序一起。<br>
<h2>关于动画控件消息</h2>
应用程序将消息发送到动画控件，以打开、播放、停止和关闭相应的 AVI 剪辑。 每条消息都有一个或多个宏，你可以使用这些宏，而不是显式发送消息。<br>

创建动画控件后，应用程序发送 动画打开文件 消息以打开 AVI 剪辑并将其加载到内存中。 该消息指定 AVI 文件的路径或 AVI 资源的名称。 系统从创建动画控件的模块加载 AVI 资源。<br>

如果动画控件具有 动画开始播放 样式，则控件在打开 AVI 文件或 AVI 资源后立即开始播放 AVI 剪辑。 否则，应用程序可以使用 动画开始播放 消息启动 AVI 剪辑。<br>
应用程序可以通过发送 动画停止播放 消息随时停止剪辑。 当控件完成播放 AVI 剪辑或发送 ACM_STOP 时，播放的最后一帧将保持显示状态。<br>

动画控件可以向其父窗口发送两个通知代码： 动画开始事件 和 动画停止事件。 大多数应用程序不处理任一通知。

若要关闭 AVI 文件或 AVI 资源并将其从内存中删除，应用程序可以发送 动画打开文件 消息，并将文件名或资源名称设置为 NULL。<br>
<font color="#0000FF">发送消息(影音,动画打开文件,0,"D:\sec.avi")</font>打开视频文件<br>
<font color="#0000FF">发送消息(影音,动画开始播放,1,$FFFF0000)</font>播放视频文件<br>
<font color="#0000FF">发送消息(影音,动画停止播放,0,0)</font>停止播放视频文件<br>
<h2>默认消息处理</h2>
本部分介绍动画窗口类在窗体消息 的窗口过程 处理的窗口消息。

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>窗口关闭</td><td>WM_CLOSE</td><td>0x10</td><td>释放与动画控件关联的 AVI 文件或 AVI 资源。</td></tr>
<tr><td>程序关闭</td><td>WM_DESTROY</td><td>0x2</td><td>释放 AVI 文件或 AVI 资源，释放内部数据结构，然后调用 处理窗口 函数。</td></tr>
<tr><td>擦除背景</td><td>WM_ERASEBKGND</td><td>0x14</td><td>使用静态控件的当前背景色擦除窗口背景。</td></tr>
<tr><td>首创窗口</td><td>WM_NCCREATE</td><td>0x81</td><td>分配并初始化内部数据结构，然后调用 处理窗口。</td></tr>
<tr><td>区外鼠标</td><td>WM_NCHITTEST</td><td>0x84</td><td>返回 HTTRANSPARENT 命中测试值。</td></tr>
<tr><td>窗口重绘</td><td>WM_PAINT</td><td>0xF</td><td>在动画控件中绘制 AVI 帧。</td></tr>
<tr><td>窗口缩放</td><td>WM_SIZE</td><td>0x5</td><td>检查控件是否具有 ACS_CENTER 样式。 如果控件没有，它将调用 处理窗口。 否则，它会使动画在控件中居中，使控件失效，然后调用 处理窗口。</td></tr>
</table>
单击按钮事件的高位值为事件代码<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><th colspan=4>通知消息——常数表</th></tr>
<tr><td>动画开始事件</td><td>1</td><td>ACN_START</td><td>通知动画控件的父窗口关联的AVI剪辑已开始播放。③参数:标识/代码;④数据:控件</td></tr>
<tr><td>动画停止事件</td><td>2</td><td>ACN_STOP</td><td>通知动画控件的父窗口关联的 AVI 剪辑已停止播放。 ③参数:标识/代码;④数据:控件</td></tr>
<tr><th colspan=4>发送消息——常数表</th></tr>
<tr><td>动画打开文件</td><td>$464</td><td>ACM_OPENA</td><td>打开 AVI 剪辑并在动画控件中显示其第一帧。③参数:0/实例;④数据:路径/资源标识</td></tr>
<tr><td>动画开始播放</td><td>$465</td><td>ACM_PLAY</td><td>在动画控件中播放 AVI 剪辑。 ③参数:次数,-1无限;④数据:开头/结尾</td></tr>
<tr><td>动画停止播放</td><td>$466</td><td>ACM_STOP</td><td>停止在动画控件中播放 AVI 剪辑。 ③参数:0;④数据:0</td></tr>
<tr><td>动画视频文件</td><td>$467</td><td>ACM_OPENW</td><td>打开 AVI 剪辑并在动画控件中显示其第一帧。③参数:0/实例;④数据:路径/资源标识</td></tr>
<tr><td>动画是否播放</td><td>$468</td><td>ACM_ISPLAYING</td><td>检查是否正在播放AVI剪辑。 ③参数:0;④数据:0</td></tr>
</table>
<p><font size="6">影音动画——控件样式：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>释义</td></tr>
<tr><td>居中显示</td><td>ACS_CENTER</td><td>1</td><td>动画在动画控件的窗口中居中。</td></tr>
<tr><td>控件透明</td><td>ACS_TRANSPARENT</td><td>2</td><td>允许将动画的背景色与基础窗口的背景色匹配，从而创建“透明”背景。</td></tr>
<tr><td>自动播放</td><td>ACS_AUTOPLAY</td><td>4</td><td>打开 AVI 剪辑后立即开始播放动画。</td></tr>
<tr><td>内部控制</td><td>ACS_TIMER</td><td>8</td><td>默认控件创建一个线程来播放AVI剪辑。设置此标志，控件在内部使用 Win32 计时器来同步播放。</td></tr>
</table><p><font size="6"><a name="图像列表">图像列表</a>——通知消息：</font></p>
使用图像列表可以为其它控件提供显示图标<br>
<font color="#0000FF">图像列表(数量,大小,格式)</font>格式：0=位图1图标2光标。<br>
添加指定数量和大小的图像到列表，默认从图像目录下名称为0的文件开始加载<br>
在程序目录下新建一个图像的文件夹,把图片文件从0开始递增排序,如0.bmp,1.bmp<br>
位图扩展名是bmp,图标扩展名是ico,光标扩展名是cur<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>常量数值</td><td>释义</td></tr>
<tr><td>图像掩码</td><td>ILC_MASK</td><td>0x00001</td><td>使用掩码。 图像列表包含两个位图，其中一个是用作蒙板的单色位图。 如果未包含此值，则图像列表仅包含一个位图。</td></tr>
<tr><td>图像颜色</td><td>ILC_COLOR</td><td>0x00000</td><td>如果未指定其他ILC_COLORx标志，请使用默认行为。 通常，默认值为ILC_COLOR4，但对于较旧的显示驱动程序，默认值为ILC_COLORDDB。</td></tr>
<tr><td>图像位色</td><td>ILC_COLORDDB</td><td>0x000FE</td><td>使用与设备相关的位图。</td></tr>
<tr><td>图像四位</td><td>ILC_COLOR4</td><td>0x00004</td><td>使用 4 位 (16 色) 与设备无关的位图 (DIB) 部分作为图像列表的位图。</td></tr>
<tr><td>图像八位</td><td>ILC_COLOR8</td><td>0x00008</td><td>使用 8 位 DIB 节。 用于颜色表的颜色与半色调调色板的颜色相同。</td></tr>
<tr><td>图像16位</td><td>ILC_COLOR16</td><td>0x00010</td><td>使用 16 位 (32/64k 彩色) DIB 部分。</td></tr>
<tr><td>图像24位</td><td>ILC_COLOR24</td><td>0x00018</td><td>使用 24 位 DIB 节。</td></tr>
<tr><td>图像32位</td><td>ILC_COLOR32</td><td>0x00020</td><td>使用 32 位 DIB 节。</td></tr>
<tr><td>图像粘贴</td><td>ILC_PALETTE</td><td>0x00800</td><td>未实现。</td></tr>
<tr><td>图像镜图</td><td>ILC_MIRROR</td><td>0x02000</td><td>镜像包含的图标（如果进程已镜像）</td></tr>
<tr><td>图像插入</td><td>ILC_PERITEMMIRROR</td><td>0x08000</td><td>导致镜像代码在插入一组图像时镜像每个项，而不是整个条带。</td></tr>
<tr><td>图像小于</td><td>ILC_ORIGINALSIZE</td><td>0x10000</td><td>Windows Vista 及更高版本。 Imagelist 应接受小于设置的图像，并根据添加的图像应用原始大小。</td></tr>
<tr><td>图像预留</td><td>ILC_HIGHQUALITYSCALE</td><td>0x20000</td><td>Windows Vista 及更高版本。 保留。</td></tr>
</table><p><font size="6"><a name="用户控件">用户控件</a></font></p>
创建静态图片框,选择自绘控件风格,可以用来绘制图片和文字。目前，以下控件支持自定义绘制功能：
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>标头控件</td><td>NMCUSTOMDRAW 结构</td></tr>
<tr><td>表格框</td><td>	NMLVCUSTOMDRAW 结构</td></tr>
<tr><td>伸缩条</td><td>NMCUSTOMDRAW 结构</td></tr>
<tr><td>工具栏</td><td>NMTBCUSTOMDRAW 结构</td></tr>
<tr><td>工具提示</td><td>NMTTCUSTOMDRAW 结构</td></tr>
<tr><td>滑动条</td><td>NMCUSTOMDRAW 结构</td></tr>
<tr><td>树表框</td><td>NMTVCUSTOMDRAW 结构</td></tr>
</table>用户控件——通知消息：<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>控件自行绘制</td><td>-12</td><td>NM_CUSTOMDRAW</td><td>通知控件的父窗口有关自定义绘制操作的信息。</td></tr>
<tr><td>自绘控件</td><td>13</td><td>SS_OWNERDRAW</td><td>静态控件的所有者负责绘制控件。每当需要绘制控件时，所有者窗口都会收到 外观改变 消息。</td></tr>
<tr><td>外观改变</td><td>$002B</td><td>WM_DRAWITEM </td><td>按钮、组合框、列表框、菜单的外观改变时会发送本消息给这些控件的所有者。④数据:<a href="#绘制项目类">绘制项目类</a></td></tr>
</table><p><font size="6"><a name="调色板">调色板</a>——通知消息：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>色板请求</td><td>$30F</td><td>WM_QUERYNEWPALETTE</td><td>本消息发送给将要收到焦点的窗口,本消息能使窗口在收到焦点时同时有机会实现逻辑调色板。③参数:0;④数据:0</td></tr>
<tr><td>色板启用</td><td>$310</td><td>WM_PALETTEISCHANGING</td><td>当一个应用程序正要实现它的逻辑调色板时,发本消息通知所有的应用程序。③参数:窗口;④数据:0</td></tr>
<tr><td>色板变更</td><td>$311</td><td>WM_PALETTECHANGED</td><td>发送本消息给所有顶级并重叠的窗口,以此来改变系统调色板。③参数:窗口;④数据:0</td></tr>
<tr><td>系统变色</td><td>$0015</td><td>WM_SYSCOLORCHANGE</td><td>当系统颜色改变时,发送本消息给所有顶级窗口。③参数:0;④数据:0</td></tr>
</table>
<font size="6"><a name="公用控件库">公用控件库</a>——comctl32函数：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>工具位图</td><td>CreateMappedBitmap</td><td>工具位图(实例,资源,标志,变色类,变色数)</td><td>创建用于工具栏的位图。标志:2位图掩码;</td></tr>
<tr><td>状态窗口</td><td>CreateStatusWindowA</td><td>状态窗口(样式,文字,窗口,标识)</td><td>创建状态栏窗口，用于显示应用程序的状态。</td></tr>
<tr><td>拖动插图</td><td>DrawInsert</td><td>拖动插图(窗口,列表框,图标项)</td><td>在指定拖动列表框的父窗口中绘制插入图标。</td></tr>
<tr><td>状态栏字</td><td>DrawStatusTextA</td><td>销属性页(设备,矩形,文字,标志)</td><td>带有边框的状态栏绘制文本。标志:0x100无边框,0x200突出边框,0x400反向显示</td></tr>
<tr><td>控制平条</td><td>FlatSB_EnableScrollBar</td><td>控制平条(窗口,方向,箭头)</td><td>启用或禁用平面滚动条方向按钮。方向:0水平箭头,1垂直箭头,2滑块,3双箭头;激活=0都有效,1左或上箭头无效,2右或下箭头无效,3都无效</td></tr>
<tr><td>读平滚区</td><td>FlatSB_GetScrollInfo</td><td>读平滚区(窗口,方式,信息)</td><td>获取滚动条的信息，<a href="#滚动信息类">滚动信息类</a>。方式=1垂直 0水平</td></tr>
<tr><td>改平滚区</td><td>FlatSB_SetScrollInfo</td><td>改平滚区(窗口,方式,信息)</td><td>设置滚动条的信息，<a href="#滚动信息类">滚动信息类</a>。方式=1垂直 0水平</td></tr>
<tr><td>读平滚位</td><td>FlatSB_GetScrollPos</td><td>位置=读平滚位(窗口,方式)</td><td>检索有关指定滚动条的滑块位置。方式=1垂直 0水平</td></tr>
<tr><td>改平滚位</td><td>FlatSB_SetScrollPos</td><td>改平滚位(窗口,方式,位置,重绘)</td><td>设置滚动框（滑块）在指定滚动条中的位置。方式=1垂直 0水平;重绘是真或假</td></tr>
<tr><td>读平滚框</td><td>FlatSB_GetScrollRange</td><td>读平滚框(窗口,方式,最小,最大)</td><td>检索有关指定滚动条的当前最小和最大滚动框位置。方式=1垂直 0水平</td></tr>
<tr><td>改平滚框</td><td>FlatSB_SetScrollRange</td><td>改平滚框(窗口,方式,最小,最大,重绘)</td><td>设置有关指定滚动条的当前最小和最大滚动框位置。方式=1垂直 0水平</td></tr>
<tr><td>读平滚式</td><td>FlatSB_GetScrollProp</td><td>读平滚式(窗口,属性,@数值)</td><td>获取平面滚动条的<a href="#滚动属性">属性</a>。</td></tr>
<tr><td>改平滚式</td><td>FlatSB_SetScrollProp</td><td>改平滚式(窗口,属性,数值,重绘)</td><td>设置平面滚动条的<a href="#滚动属性">属性</a>。</td></tr>
<tr><td>显平滚条</td><td>FlatSB_ShowScrollBar</td><td>显平滚条(窗口,方式,隐藏)</td><td>显示或隐藏平面滚动条。方式=3双向,1垂直,0水平</td></tr>
<tr><td>窗区尺寸</td><td>GetEffectiveClientRect</td><td>窗区尺寸(窗口,矩形,控件组)</td><td>计算工作区中包含所有指定控件的矩形的尺寸。</td></tr>
<tr><td>图表添加</td><td>ImageList_Add</td><td>图表添加(图表,图像,掩码图)</td><td>向图像列表添加图像。</td></tr>
<tr><td>图标添加</td><td>ImageList_AddIcon</td><td>图标添加(图表,图标)</td><td>将图标或光标添加到图像列表。</td></tr>
<tr><td>图表掩码</td><td>ImageList_AddMasked</td><td>图表掩码(图表,图像,掩码色)</td><td>将一个或多个图像添加到图像列表，从指定的位图生成掩码。</td></tr>
<tr><td>图表拖起</td><td>ImageList_BeginDrag</td><td>图表拖起(图表,序号,左,顶)</td><td>开始拖动图像。</td></tr>
<tr><td>图表复制</td><td>ImageList_Copy</td><td>图表复制(目标图表,目标序号,源图表,源序号,标志)</td><td>复制给定图像列表中的图像。标志:0复制,1交换</td></tr>
<tr><td>图表创建</td><td>ImageList_Create</td><td>图表创建(宽,高,标志,初数,新数)</td><td>创建新的映像列表。标志:<a href="#图像列表">图像列表创建标志</a></td></tr>
<tr><td>图表销毁</td><td>ImageList_Destroy</td><td>图表销毁(图表)</td><td>销毁图像列表。</td></tr>
<tr><td>图表拖图</td><td>ImageList_DragEnter</td><td>图表拖图(窗口,左,顶)</td><td>在窗口中的指定位置显示拖动图像。</td></tr>
<tr><td>图表拖离</td><td>ImageList_DragLeave</td><td>图表拖离(窗口)</td><td>解锁指定窗口并隐藏拖动图像，从而允许更新窗口。</td></tr>
<tr><td>图表拖动</td><td>ImageList_DragMove</td><td>图表拖动(图表,序号,左,顶)</td><td>移动在拖放操作期间拖动的图像。</td></tr>
<tr><td>图表拖显</td><td>ImageList_DragShowNolock</td><td>图表拖显(是否)</td><td>显示或隐藏正在拖动的图像。</td></tr>
<tr><td>图表绘制</td><td>ImageList_Draw</td><td>图表绘制(图表,序号,设备,左,顶,样式)</td><td>在指定的设备上下文中绘制图像列表项。<a href="#图表样式">绘制样式</a></td></tr>
<tr><td>图表绘图</td><td>ImageList_DrawEx</td><td>图表绘图(图表,序号,设备,左,顶,宽,高,背景,前景,样式)</td><td>在指定的设备上下文中绘制图像列表项。宽高为0原大小;背景,前景:0xffffffff无色,0xff000000默认色</td></tr>
<tr><td>图表绘区</td><td>ImageList_DrawIndirect</td><td>图表绘区(图表绘制类)</td><td>绘制图像列表图像。</td></tr>
<tr><td>图表副本</td><td>ImageList_Duplicate</td><td>图表副本(图表)</td><td>创建现有映像列表的副本。</td></tr>
<tr><td>图表拖完</td><td>ImageList_EndDrag</td><td>图表拖完</td><td>结束拖动操作。</td></tr>
<tr><td>图表取色</td><td>ImageList_GetBkColor</td><td>图表取色(图表)</td><td>检索图像列表的当前背景色。</td></tr>
<tr><td>图表取拖</td><td>ImageList_GetDragImage</td><td>图表取拖(当前坐标,偏移坐标)</td><td>检索用于拖动图像的临时图像列表。</td></tr>
<tr><td>图表取图</td><td>ImageList_GetIcon</td><td>图表取图(图表,序号,样式)</td><td>从图像创建图标，并在图像列表中创建掩码。<a href="#图表样式">绘制样式</a></td></tr>
<tr><td>图表取块</td><td>ImageList_GetIconSize</td><td>图表取块(图表,@宽,@高)</td><td>检索图像列表中图像的尺寸。</td></tr>
<tr><td>图表取数</td><td>ImageList_GetImageCount</td><td>图表取数(图表)</td><td>检索图像列表中的图像数。</td></tr>
<tr><td>图表信息</td><td>ImageList_GetImageInfo</td><td>图表信息(图表,序号,信息)</td><td>检索有关图像的信息。<a href="#图表信息类">图表信息类</a></td></tr>
<tr><td>图表边框</td><td>ImageList_GetImageRect</td><td>图表边框(图表,序号,矩形类)</td><td>获取图像的边框。</td></tr>
<tr><td>图表载入</td><td>ImageList_LoadImageA</td><td>图表载入(实例,图片,宽度,数量,掩码,0,标志)</td><td>从指定的位图创建图像列表。<a href="#加图类型">加载图像标志</a></td></tr>
<tr><td>图表合并</td><td>ImageList_Merge</td><td>图表合并(图表1,序号1,图表2,序号2,x偏移,y偏移)</td><td>通过组合两个现有映像创建新映像。两个现有映像的掩码执行逻辑 OR 操作</td></tr>
<tr><td>图表读取</td><td>ImageList_Read</td><td>图表读取(流)</td><td>从流中读取图像列表。</td></tr>
<tr><td>图表读流</td><td>ImageList_ReadEx</td><td>图表拖动(标志,流,@IID,@接口)</td><td>从流中读取图像列表，并将 IImageList接口返回到图像列表。标志:0正常,1降级</td></tr>
<tr><td>图表移除</td><td>ImageList_Remove</td><td>图表移除(图表,序号)</td><td>从图像列表中移除图像。序号-1清除所有</td></tr>
<tr><td>图表替换</td><td>ImageList_Replace</td><td>图表替换(图表,序号,图像,掩码)</td><td>将图像列表中的图像替换为新图像。</td></tr>
<tr><td>图表换标</td><td>ImageList_ReplaceIcon</td><td>图表换标(图表,序号,图标)</td><td>将图像替换为图标或光标。</td></tr>
<tr><td>图表改色</td><td>ImageList_SetBkColor</td><td>图表改色(图表,颜色)</td><td>设置图像列表的背景色。</td></tr>
<tr><td>图表结合</td><td>ImageList_SetDragCursorImage</td><td>图表结合(图表,序号,左,顶)</td><td>将指定的图像与当前拖动图像相结合，创建新的拖动图像。</td></tr>
<tr><td>图表改块</td><td>ImageList_SetIconSize</td><td>图表改块(图表,宽,高)</td><td>设置图像列表中图像的尺寸，并从列表中删除所有图像。</td></tr>
<tr><td>图表改数</td><td>ImageList_SetImageCount</td><td>图表改数(图表,数量)</td><td>调整现有图像列表的大小。</td></tr>
<tr><td>图表覆盖</td><td>ImageList_SetOverlayImage</td><td>图表覆盖(图表,覆盖序号,掩码序号)</td><td>将指定的图像添加到要用作覆盖掩码的图像列表中。</td></tr>
<tr><td>图表写入</td><td>ImageList_Write</td><td>图表写入(图表,流)</td><td>将图像列表写入流。</td></tr>
<tr><td>图表写流</td><td>ImageList_WriteEx</td><td>图表写流(图表,标志,流)</td><td>将图像列表写入流。标志:0正常,1降级</td></tr>
<tr><td>初始化类</td><td>InitCommonControls</td><td>初始化类</td><td>注册并初始化某些常见的控件窗口类。此函数已过时。</td></tr>
<tr><td>初始控件</td><td>InitCommonControlsEx</td><td>初始控件(控件类)</td><td>注册特定的<a href="#控件类">公共控件类</a>。</td></tr>
<tr><td>初始平条</td><td>InitializeFlatSB</td><td>初始平条(窗口)</td><td>初始化特定窗口的平面滚动条。</td></tr>
<tr><td>列表点项</td><td>LBItemFromPt</td><td>列表点项(列表框,坐标类,是否滚动)</td><td>检索列表框中指定点处项的索引。点在列表项上返回项标识,滚动为真返回-1</td></tr>
<tr><td>列表拖动</td><td>MakeDragList</td><td>列表拖动(列表框)</td><td>将指定的单选列表框更改为拖动列表框。</td></tr>
<tr><td>显隐菜单</td><td>ShowHideMenuCtl</td><td>显隐菜单(窗口,标识,控件组)</td><td>设置或删除指定菜单项的检查 mark 属性，并显示或隐藏相应的控件。</td></tr>
<tr><td>注销平条</td><td>UninitializeFlatSB</td><td>注销平条(窗口)</td><td>取消初始化特定窗口的平面滚动条。</td></tr>
<tr><td>建属性页</td><td>CreatePropertySheetPageA</td><td>建属性表(属性页类)</td><td>为属性表创建新<a href="#属性页类">属性页</a>。</td></tr>
<tr><td>销属性页</td><td>DestroyPropertySheetPage</td><td>销属性页(页面)</td><td>销毁属性表页。</td></tr>
<tr><td>建属性表</td><td>PropertySheetA</td><td>销属性页(属性表类)</td><td>创建<a href="#属性表类">属性表</a>并添加在指定的属性表标题结构中定义的页面。</td></tr>
</table><font size="6"><a name="属性页类">属性页类</a>——结构定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>属性页类</td><td>PROPSHEETPAGEA_V2</td><td>8</td><td>定义属性表中的页面。</td></tr>
<tr><th colspan=4>属性页类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标题</td><td>pszHeaderTitle</td><td>整数</td><td>标题区域的标题。</td></tr>
<tr><td>副标题</td><td>pszHeaderSubTitle</td><td>整数</td><td>标题区域的副标题。</td></tr>
</table><font size="6"><a name="属性表类">属性表类</a>——结构定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>属性表类</td><td>PROPSHEETHEADERA_V2</td><td>12</td><td>定义属性表中的页面。</td></tr>
<tr><th colspan=4>属性表类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>水印</td><td>hbmWatermark</td><td>整数</td><td>水印位图的句柄。</td></tr>
<tr><td>资源</td><td>pszbmWatermark</td><td>整数</td><td>要用作水印的位图资源标识符或字符串。</td></tr>
<tr><td>标头</td><td>hplWatermark</td><td>整数</td><td>用于绘制水印位图和/或标头位图。</td></tr>
</table><font size="6"><a name="图表信息类">图表信息类</a>——结构定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>图表信息类</td><td>IMAGEINFO</td><td>32</td><td>包含有关图像列表中的图像的信息。</td></tr>
<tr><th colspan=4>图表信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>图像</td><td>hbmImage</td><td>整数</td><td>包含图像的位图的句柄。</td></tr>
<tr><td>掩码</td><td>hbmMask</td><td>整数</td><td>包含图像掩码的单色位图的句柄。</td></tr>
<tr><td>预</td><td>Unused1</td><td>整数</td><td>未使用。</td></tr>
<tr><td>留</td><td>Unused2</td><td>整数</td><td>未使用。</td></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>指定图像绘制位置的x坐标。</td></tr>
<tr><td>顶</td><td>y</td><td>整数</td><td>指定图像绘制位置的y坐标。</td></tr>
<tr><td>宽</td><td>cx</td><td>整数</td><td>绘制图像的宽度,宽高是0为原大小</td></tr>
<tr><td>高</td><td>cy</td><td>整数</td><td>绘制图像的宽度,宽高是0为原大小。</td></tr>
</table><font size="6"><a name="图表绘制类">图表绘制类</a>——结构定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>图表绘制类</td><td>IMAGELISTDRAWPARAMS</td><td>68</td><td>包含有关图像列表绘制操作的信息。</td></tr>
<tr><th colspan=4>图表绘制类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>图表</td><td>himl</td><td>整数</td><td>包含要绘制的图像的图像列表的句柄。</td></tr>
<tr><td>序号</td><td>i</td><td>整数</td><td>要绘制的图像的从零开始的索引。</td></tr>
<tr><td>设备</td><td>hdcDst</td><td>整数</td><td>目标设备上下文的句柄。</td></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>指定图像绘制位置的x坐标。</td></tr>
<tr><td>顶</td><td>y</td><td>整数</td><td>指定图像绘制位置的y坐标。</td></tr>
<tr><td>宽</td><td>cx</td><td>整数</td><td>绘制图像的宽度,宽高是0为原大小</td></tr>
<tr><td>高</td><td>cy</td><td>整数</td><td>绘制图像的宽度,宽高是0为原大小。</td></tr>
<tr><td>右</td><td>xBitmap</td><td>整数</td><td>指定引用图像本身的绘制操作左上角的 x 坐标。</td></tr>
<tr><td>底</td><td>yBitmap</td><td>整数</td><td>指定引用图像本身的绘制操作左上角的y坐标。</td></tr>
<tr><td>背景</td><td>rgbBk</td><td>整数</td><td>图像前景色。0xffffffff无色,0xff000000默认色。仅当样式包含ILD_BLEND25或ILD_BLEND50标志时可用</td></tr>
<tr><td>前景</td><td>rgbFg</td><td>整数</td><td>图像前景色。0xffffffff无色,0xff000000默认色。仅当样式包含ILD_BLEND25或ILD_BLEND50标志时可用</td></tr>
<tr><td>样式</td><td>fStyle</td><td>整数</td><td>指定绘图样式和覆盖图像。<a href="#图表绘制">绘制样式</a></td></tr>
<tr><td>光栅</td><td>dwRop</td><td>整数</td><td>一个指定光栅操作代码的值。<a href="#光栅操作">光栅操作常量</a></td></tr>
<tr><td>状态</td><td>fState</td><td>整数</td><td>一个指定绘图状态的标志。<a href="#绘图状态">图表绘图状态常量</a></td></tr>
<tr><td>混合</td><td>Frame</td><td>整数</td><td>与alpha混合效果一起使用。0表示完全透明，255表示完全不透明。</td></tr>
<tr><td>光影</td><td>crEffect</td><td>整数</td><td>用于发光和阴影效果的颜色。</td></tr>
</table><font size="6"><a name="图表样式">图表绘制样式</a>——常量：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ILD_NORMAL</td><td>0</td><td>使用图像列表的背景色绘制图像。</td></tr>
<tr><td>ILD_TRANSPARENT</td><td>1</td><td>使用蒙板以透明方式绘制图像，而不考虑背景色。</td></tr>
<tr><td>ILD_BLEND25</td><td>2</td><td>绘制图像，将25% 与 rgbFg 指定的混合颜色混合</td></tr>
<tr><td>ILD_BLEND50</td><td>4</td><td>绘制图像，将50% 与 rgbFg 指定的混合颜色混合</td></tr>
<tr><td>ILD_MASK</td><td>0x10</td><td>绘制蒙板。</td></tr>
<tr><td>ILD_IMAGE</td><td>0x20</td><td>如果覆盖不需要绘制掩码，请设置此标志。</td></tr>
<tr><td>ILD_ROP</td><td>0x40</td><td>使用光栅成员指定的光栅操作代码绘制图像。</td></tr>
<tr><td>ILD_OVERLAYMASK</td><td>0xF00</td><td>若要从样式中提取覆盖图像，请使用逻辑 AND 将此值组合在一起。</td></tr>
<tr><td>ILD_PRESERVEALPHA</td><td>0x1000</td><td>保留目标中的 alpha 通道。</td></tr>
<tr><td>ILD_SCALE</td><td>0x2000</td><td>使映像缩放到指定宽度，而不是被剪裁。</td></tr>
<tr><td>ILD_DPISCALE</td><td>0x4000</td><td>将图像缩放到显示器的当前 dpi。</td></tr>
<tr><td>ILD_ASYNC</td><td>0x8000</td><td>如果缓存中可用。不要自动提取它。</td></tr>
</table><font size="6"><a name="绘图状态">图像列表状态标志</a>——常量：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ILS_NORMAL</td><td>0</td><td>未修改映像状态。</td></tr>
<tr><td>ILS_GLOW</td><td>1</td><td>不支持。</td></tr>
<tr><td>ILS_SHADOW</td><td>2</td><td>不支持。</td></tr>
<tr><td>ILS_SATURATE</td><td>4</td><td>将图标的颜色饱和度降低到灰度。</td></tr>
<tr><td>ILS_ALPHA</td><td>8</td><td>根据其 alpha 通道的值控制图标的透明度级别。</td></tr>
</table><font size="6"><a name="加图类型">加载图像类型标志</a>——常量：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>LR_DEFAULTCOLOR</td><td>0x0000</td><td>使用显示器的颜色格式。</td></tr>
<tr><td>LR_MONOCHROME</td><td>0x0001</td><td>加载黑白图像。</td></tr>
<tr><td>LR_COLOR</td><td>0x0002</td><td>作用解释</td></tr>
<tr><td>LR_COPYRETURNORG</td><td>0x0004</td><td>如果原图满足复制条件（即正确的尺寸和颜色深度）则返回原图，否则始终会创建一个新对象。</td></tr>
<tr><td>LR_COPYDELETEORG</td><td>0x0008</td><td>创建副本后删除原始映像。</td></tr>
<tr><td>LR_LOADFROMFILE</td><td>0x0010</td><td>从指定的文件中加载图像。</td></tr>
<tr><td>LR_LOADTRANSPARENT</td><td>0x0020</td><td>检索图像中第一个像素的颜色值，并将颜色表中的相应条目替换为默认窗口颜色</td></tr>
<tr><td>LR_DEFAULTSIZE</td><td>0x0040</td><td>如果宽度设置为零，则使用由游标和图标的系统指标值指定的宽度或高度。</td></tr>
<tr><td>LR_VGACOLOR</td><td>0x0080</td><td>真VGA颜色</td></tr>
<tr><td>LR_LOADMAP3DCOLORS</td><td>0x1000</td><td>在颜色表中搜索图像，并将以下灰色底纹替换为相应的三维颜色：<br>
Dk灰色：0:128.128.128(COLOR_3DSHADOW)灰色：0:192.192.192(COLOR_3DFACE)Lt灰色：0:223.223.223(COLOR_3DLIGHT)</td></tr>
<tr><td>LR_CREATEDIBSECTION</td><td>0x2000</td><td>DIB节位图。可用于加载位图而不将其映射到显示设备的颜色。</td></tr>
<tr><td>LR_COPYFROMRESOURCE</td><td>0x4000</td><td>尝试从原始资源文件重新加载图标或游标资源。使用LR_SHARED标志加载后适用</td></tr>
<tr><td>LR_SHARED</td><td>0x8000</td><td>如果多次加载映像，则共享映像句柄。</td></tr>
</table><font size="6"><a name="滚动属性">滚动属性</a>——常量：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>WSB_PROP_CYVSCROLL</td><td>0x1</td><td>数值接收垂直滚动条中方向按钮的高度（以像素为单位）。</td></tr>
<tr><td>WSB_PROP_CXHSCROLL</td><td>0x2</td><td>数值接收水平滚动条中方向按钮的宽度（以像素为单位）。</td></tr>
<tr><td>WSB_PROP_CYHSCROLL</td><td>0x4</td><td>数值接收水平滚动条的高度（以像素为单位）。</td></tr>
<tr><td>WSB_PROP_CXVSCROLL</td><td>0x8</td><td>数值接收垂直滚动条的宽度（以像素为单位）。</td></tr>
<tr><td>WSB_PROP_CXHTHUMB</td><td>0x10</td><td>该值接收水平滚动条中滑块的宽度（以像素为单位）。</td></tr>
<tr><td>WSB_PROP_CYVTHUMB</td><td>0x20</td><td>该值接收垂直滚动条中滑块的高度（以像素为单位）。</td></tr>
<tr><td>WSB_PROP_VBKGCOLOR</td><td>0x40</td><td>该值接收垂直滚动条中的背景色。</td></tr>
<tr><td>WSB_PROP_HBKGCOLOR</td><td>0x80</td><td>该值接收水平滚动条中的背景色。</td></tr>
<tr><td>WSB_PROP_VSTYLE</td><td>0x100</td><td>该值接收垂直滚动条的以下视觉效果之一。0普通,1三维滑块,2反色滑块</td></tr>
<tr><td>WSB_PROP_HSTYLE</td><td>0x200</td><td>该值接收水平滚动条的以下视觉效果之一。0普通,1三维滑块,2反色滑块</td></tr>
<tr><td>WSB_PROP_WINSTYLE</td><td>0x400</td><td>该值接收当前窗口包含垂直和水平滚动条的样式位。</td></tr>
<tr><td>WSB_PROP_PALETTE</td><td>0x800</td><td>该值接收滚动条在绘图时使用的调色板。</td></tr>
</table><font size="6"><a name="控件类">控件类</a>——结构定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>控件类</td><td>INITCOMMONCONTROLSEX</td><td>8</td><td>从动态链接库加载常见控件类的信息</td></tr>
<tr><th colspan=4>控件类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>dwICC</td><td>整数</td><td>公共控件类的位标志集。</td></tr>
</table><font size="6"><a name="控件类标志">控件类标志集</a>——常量：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ICC_LISTVIEW_CLASSES</td><td>0x1</td><td>加载列表视图和标头控件类。</td></tr>
<tr><td>ICC_TREEVIEW_CLASSES</td><td>0x2</td><td>加载树视图和工具提示控件类。</td></tr>
<tr><td>ICC_BAR_CLASSES</td><td>0x4</td><td>加载工具栏、状态栏、跟踪栏和工具提示控件类。</td></tr>
<tr><td>ICC_TAB_CLASSES</td><td>0x8</td><td>加载选项卡和工具提示控件类。</td></tr>
<tr><td>ICC_UPDOWN_CLASS</td><td>0x10</td><td>加载调节器控件类。</td></tr>
<tr><td>ICC_PROGRESS_CLASS</td><td>0x20</td><td>加载进度栏控件类。</td></tr>
<tr><td>ICC_HOTKEY_CLASS</td><td>0x40</td><td>加载热键控件类。</td></tr>
<tr><td>ICC_ANIMATE_CLASS</td><td>0x80</td><td>加载动画控件类。</td></tr>
<tr><td>ICC_WIN95_CLASSES</td><td>0xff</td><td>加载动画控件、标头、热键、列表视图、进度栏、状态栏、选项卡、工具提示、工具栏、跟踪条、树视图和调节器控件类。</td></tr>
<tr><td>ICC_DATE_CLASSES</td><td>0x100</td><td>加载日期和时间选取器控件类。</td></tr>
<tr><td>ICC_USEREX_CLASSES</td><td>0x200</td><td>加载超组合框控件类。</td></tr>
<tr><td>ICC_COOL_CLASSES</td><td>0x400</td><td>加载伸缩条控件类。</td></tr>
<tr><td>ICC_INTERNET_CLASSES</td><td>0x800</td><td>加载IP地址类。</td></tr>
<tr><td>ICC_PAGESCROLLER_CLASS</td><td>0x1000</td><td>加载分页器控件类。</td></tr>
<tr><td>ICC_NATIVEFNTCTL_CLASS</td><td>0x2000</td><td>加载本机字体控件类。</td></tr>
<tr><td>ICC_STANDARD_CLASSES</td><td>0x4000</td><td>用户控件包括按钮、编辑、静态、列表框、组合框和滚动条。</td></tr>
<tr><td>ICC_LINK_CLASS</td><td>0x8000</td><td>加载超链接控件类。</td></tr>
</table>
<p><font size="6" color="#0000FF"><a name="通用简介">1.通用对话框-功能简介</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>颜色对话框</td><td>显示可用颜色，并选择性地允许用户创建自定义颜色。用户可以选择基本或自定义颜色。</td></tr>
<tr><td>查找对话框</td><td>显示查找字符串的对话框，用户还可以指定搜索选项，例如搜索方向以及搜索是否区分大小写。</td></tr>
<tr><td>字体对话框</td><td>显示一个对话框，用户可在其中选择字体系列和关联的字体样式、磅号和其他字体属性，如字体颜色、下划线或删除线。</td></tr>
<tr><td>打开对话框</td><td>显示一个对话框，用户可在其中键入或选择要打开的文件或 shell 名称空间对象的名称。</td></tr>
<tr><td>页面设置框</td><td>显示当前页配置。 用户可以选择页面配置选项，例如纸张方向、大小、源和页边距。</td></tr>
<tr><td>打印对话框</td><td>显示有关已安装打印机及其配置的信息。可以选择打印作业选项，例如要打印的页面范围和份数，然后开始打印过程。</td></tr>
<tr><td>替换对话框</td><td>显示查找和替换字符串的对话框，用户可以指定搜索选项（例如搜索是否区分大小写）和替换选项（例如替换范围）。</td></tr>
<tr><td>保存对话框</td><td>显示一个对话框，用户可在其中键入或选择要保存文件或 shell 名称空间对象的名称。 </td></tr>
</table><br>
<p><font size="6" color="#0000FF"><a name="通用函数">通用对话框-comdlg32库函数</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>颜色选框</td><td>ChooseColorA</td><td>颜色选框(<a href="#颜色框类">颜色框类</a>)</td><td>创建一个“常用颜色”对话框，使用户可以选择颜色</td></tr>
<tr><td>字体选框</td><td>ChooseFontA</td><td>字体选框(<a href="#字体框类">字体框类</a>)</td><td>创建一个字体公共对话框，使对话框能够为用户选择逻辑字体的属性。</td></tr>
<tr><td>对话错误</td><td>CommDlgExtendedError</td><td>错误=对话错误</td><td>返回在执行对话框函数时最后出现的<a href="#对话错误">错误代码</a></td></tr>
<tr><td>搜索选框</td><td>FindTextA</td><td>搜索选框(<a href="#查找替换类">查找替换类</a>)</td><td>创建一个系统定义的无模式对话框，允许用户指定要搜索的字符串以及在文档中搜索文本时使用的选项</td></tr>
<tr><td>文件选框</td><td>GetOpenFileNameA</td><td>文件选框(<a href="#文件框类">文件框类</a>)</td><td>创建一个文件框，允许用户指定要打开的文件或文件集的驱动器，目录和名称。</td></tr>
<tr><td>保存选框</td><td>GetSaveFileNameA</td><td>保存选框(<a href="#文件框类">文件框类</a>)</td><td>创建一个文件框，允许用户指定要保存的文件的驱动器，目录和名称。</td></tr>
<tr><td>页面设置</td><td>PageSetupDlgA</td><td>页面设置(<a href="#页面框类">页面框类</a>)</td><td>创建一个页面设置对话框，允许用户可以编辑设置打印页面的属性。</td></tr>
<tr><td>打印选项</td><td>PrintDlgA</td><td>打印选项(<a href="#打印框类">打印框类</a>)</td><td>创建显示“打印”对话框或“打印设置”对话框。使用户能够指定特定打印作业的属性。</td></tr>
<tr><td>打印选框</td><td>PrintDlgExA</td><td>打印选框(<a href="#打印框类">打印框类</a>)</td><td>创建显示“打印”对话框或“打印设置”对话框。使用户能够指定特定打印作业的属性。</td></tr>
<tr><td>替换选框</td><td>ReplaceTextA</td><td>替换选框(<a href="#查找替换类">查找替换类</a>)</td><td>创建一个系统定义的无模式对话框，允许用户指定要搜索的字符串以及在文档中搜索文本时使用的选项</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><th colspan=4>通用对话框——通知消息</th></tr>
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>对话完成排列</td><td>-601</td><td>CDN_INITDONE</td><td>系统已完成在打开另存为通用对话框中排列控件</td></tr>
<tr><td>对话选择改变</td><td>-602</td><td>CDN_SELCHANGE</td><td>用户在对话框文件列表里选择了一个新文件或文件夹</td></tr>
<tr><td>对话新文件夹</td><td>-603</td><td>CDN_FOLDERCHANGE</td><td>向钩子函数发送一个新文件夹被打开的消息</td></tr>
<tr><td>对话共享冲突</td><td>-604</td><td>CDN_SHAREVIOLATION</td><td>用户选择的文件名发生网络共享冲突</td></tr>
<tr><td>对话点击帮助</td><td>-605</td><td>CDN_HELP</td><td>通用对话框中的帮助按钮被按下</td></tr>
<tr><td>对话点击确定</td><td>-606</td><td>CDN_FILEOK</td><td>向钩子函数发送确定按钮被按下的消息</td></tr>
<tr><td>对话类型改变</td><td>-607</td><td>CDN_TYPECHANGE</td><td>从文件类型列表中选择一个新文件类型</td></tr>
<tr><td>对话包含项目</td><td>-608</td><td>CDN_INCLUDEITEM</td><td>对话框会针对文件夹中的每一项发送包含项通知。</td></tr>
<tr><td>对话颜色返回</td><td>"commdlg_ColorOK"</td><td>COLOROKSTRING</td><td>用户选择颜色并单击“确定”按钮时，“颜色”对话框会将注册的消息发送到挂钩过程 。③参数:0;④数据:<a href="#颜色框类">颜色框类</a></td></tr>
<tr><td>对话文件返回</td><td>"commdlg_FileNameOK"</td><td>FILEOKSTRING</td><td>当用户指定文件名并单击“确定”按钮时，对话框会将注册的消息发送到挂钩过程 。③参数:0;④数据:<a href="#文件框类">文件框类</a></td></tr>
<tr><td>对话查找返回</td><td>"commdlg_FindReplace"</td><td>FINDMSGSTRING</td><td>当用户点击查找替换对话框按钮时，对话框会将注册的消息发送到挂钩过程 。③参数:0;④数据:<a href="#查找替换类">查找替换类</a></td></tr>
<tr><td>对话文件返回</td><td>"commdlg_help"</td><td>HELPMSGSTRING</td><td>当用户点击“帮助”按钮时，对话框会将注册的消息发送到挂钩过程 。③参数:对话框;④数据:对话结构</td></tr>
<tr><td>对话选项返回</td><td>"commdlg_LBSelChangedNotify"</td><td>FINDMSGSTRING</td><td>当对话框的任何列表框或组合框中的选择发生更改时，对话框会将注册的消息发送到挂钩过程 。<br>③参数:标识;④数据:项号/高位：0单选项，1非多选框选项，2多选框选项，-1多选框无项目</td></tr>
<tr><td>对话共享冲突</td><td>"commdlg_ShareViolation"</td><td>SHAREVISTRING</td><td>如果用户单击“确定”按钮时所选文件发生共享冲突，对话框会将注册的消息发送到挂钩过程 。③参数:0;④数据:<a href="#文件框类">文件框类</a></td></tr>
<tr><th colspan=4>页面绘图回调消息——常数表</th></tr>
<tr><td>对话绘制页面</td><td>0x400</td><td>WM_PSD_PAGESETUPDLG</td><td>对话框将绘制示例页面的内容。③参数:纸张大小/<a href="#纸张方向">方向</a>;④数据:<a href="#页面框类">页面框类</a></td></tr>
<tr><td>对话页面坐标</td><td>0x401</td><td>WM_PSD_FULLPAGERECT</td><td>页面矩形在对话框中的坐标。③参数:设备;④数据:矩形</td></tr>
<tr><td>对话边距坐标</td><td>0x402</td><td>WM_PSD_MINMARGINRECT</td><td>边距矩形在对话框中的坐标。③参数:设备;④数据:矩形</td></tr>
<tr><td>对话边距矩形</td><td>0x403</td><td>WM_PSD_MARGINRECT</td><td>对话框将绘制示例页的边距矩形。③参数:设备;④数据:矩形</td></tr>
<tr><td>对话绘希腊文</td><td>0x404</td><td>WM_PSD_GREEKTEXTRECT</td><td>边距矩形在对话框中的坐标。③参数:设备;④数据:矩形</td></tr>
<tr><td>对话绘制信封</td><td>0x405</td><td>WM_PSD_ENVSTAMPRECT</td><td>对话框将绘制示例页的信封戳矩形。③参数:设备;④数据:矩形</td></tr>
<tr><td>对话绘制地址</td><td>0x406</td><td>WM_PSD_YAFULLPAGERECT</td><td>对话框将绘制信封示例页的寄信人地址部分。③参数:设备;④数据:矩形</td></tr>
<tr><th colspan=4>发送消息——文件对话框常数表</th></tr>
<tr><td>对话文件名称</td><td>0x464</td><td>CDM_GETSPEC</td><td>资源管理器样式的文件对话框中检索文件名。③参数:大小;④数据:缓冲区</td></tr>
<tr><td>对话文件路径</td><td>0x465</td><td>CDM_GETFILEPATH</td><td>在资源管理器样式的文件对话框中检索所选文件的路径和文件名。③参数:大小;④数据:缓冲区</td></tr>
<tr><td>对话目录路径</td><td>0x466</td><td>CDM_GETFOLDERPATH</td><td>检索资源管理器样式的文件对话框当前已打开的文件夹或目录的路径。③参数:大小;④数据:缓冲区</td></tr>
<tr><td>对话目录列表</td><td>0x467</td><td>CDM_GETFOLDERIDLIST</td><td>检索资源管理器样式的文件对话框当前已打开的文件夹对应的项目标识符列表的地址。③参数:大小;④数据:缓冲区</td></tr>
<tr><td>对话控件文本</td><td>0x468</td><td>CDM_SETCONTROLTEXT</td><td>在资源管理器样式的文件对话框中设置指定控件的文本。③参数:标识;④数据:新内容</td></tr>
<tr><td>对话隐藏控件</td><td>0x469</td><td>CDM_HIDECONTROL</td><td>隐藏资源管理器样式的文件对话框中的指定控件。③参数:标识;④数据:0</td></tr>
<tr><td>对话改扩展名</td><td>0x46A</td><td>CDM_SETDEFEXT</td><td>设置“资源管理器”样式的文件对话框的默认文件扩展名不含点(.) 。③参数:0;④数据:扩展名</td></tr>
<tr><th colspan=4>发送消息——字体对话框常数表</th></tr>
<tr><td>对话获取字体</td><td>0x401</td><td>WM_CHOOSEFONT_GETLOGFONT</td><td>检索有关用户当前字体选择的信息。③参数:0;④数据:逻辑字体类</td></tr>
<tr><td>对话设置字体</td><td>0x465</td><td>WM_CHOOSEFONT_SETLOGFONT</td><td>设置当前逻辑字体信息。③参数:0;④数据:逻辑字体类</td></tr>
<tr><td>对话字体选项</td><td>0x466</td><td>WM_CHOOSEFONT_SETFLAGS</td><td>设置对话框的显示选项。③参数:0;④数据:字体框类</td></tr>
<tr><td>对话修改颜色</td><td>"commdlg_SetRGBColor"</td><td>SETRGBSTRING</td><td>挂钩过程将注册的消息发送到对话框，以设置当前颜色选择。③参数:0;④数据:颜色</td></tr>
</table><p><font size="6" color="#0000FF">通用对话框-回调函数</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>颜色回调</td><td>Lpcchookproc</td><td>颜色回调(窗口,消息,参数,数据)</td><td>接收用于 “颜色 ”对话框的默认对话框过程的消息或通知。</td></tr>
<tr><td>字体回调</td><td>Lpcfhookproc</td><td>字体回调(窗口,消息,参数,数据)</td><td>接收用于 “字体 ”对话框的默认对话框过程的消息或通知。</td></tr>
<tr><td>查找回调</td><td>Lpfrhookproc</td><td>查找回调(窗口,消息,参数,数据)</td><td>接收用于 “查找 ”或“ 替换 ”对话框的默认对话框过程的消息或通知。</td></tr>
<tr><td>打开另存</td><td>Lpofnhookproc</td><td>打开另存(窗口,消息,参数,数据)</td><td>接收用于 “打开 ”和“ 另存为 ”对话框的默认对话框过程的消息或通知。</td></tr>
</table><p><font size="6" color="#0000FF"><a name="对话错误">通用对话框-错误代码</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>CDERR_DIALOGFAILURE</td><td>0xFFFF</td><td>无法创建对话框。</td></tr>
<tr><td>CDERR_FINDRESFAILURE</td><td>0x0006</td><td>通用对话框函数未能找到指定的资源。</td></tr>
<tr><td>CDERR_INITIALIZATION</td><td>0x0002</td><td>常见对话框函数在初始化期间失败。当内存不足时，通常会发生此错误。</td></tr>
<tr><td>CDERR_LOADRESFAILURE</td><td>0x0007</td><td>通用对话框函数未能加载指定的资源。</td></tr>
<tr><td>CDERR_LOADSTRFAILURE</td><td>0x0005</td><td>通用对话框函数未能加载指定的字符串。</td></tr>
<tr><td>CDERR_LOCKRESFAILURE</td><td>0x0008</td><td>通用对话框函数未能锁定指定的资源。</td></tr>
<tr><td>CDERR_MEMALLOCFAILURE</td><td>0x0009</td><td>通用对话框函数无法为内部结构分配内存。</td></tr>
<tr><td>CDERR_MEMLOCKFAILURE</td><td>0x000A</td><td>通用对话框函数无法锁定与句柄关联的内存。</td></tr>
<tr><td>CDERR_NOHINSTANCE</td><td>0x0004</td><td>但未能提供相应的实例句柄。</td></tr>
<tr><td>CDERR_NOHOOK</td><td>0x000B</td><td>但未能提供指向相应挂钩过程的指针。</td></tr>
<tr><td>CDERR_NOTEMPLATE</td><td>0x0003</td><td>但未能提供相应的模板。</td></tr>
<tr><td>CDERR_REGISTERMSGFAIL</td><td>0x000C</td><td><a href="#通用函数">对话错误</a>函数在由通用对话框函数调用时返回错误代码。</td></tr>
<tr><td>CDERR_STRUCTSIZE</td><td>0x0001</td><td>相应公共对话框的初始化结构的大小无效。</td></tr>
<tr><th colspan=3><a href="#通用函数">打印选项</a>函数返回以下错误代码。</th></tr>
<tr><td>PDERR_CREATEICFAILURE</td><td>0x100A</td><td>PrintDlg 函数在尝试创建信息上下文时失败。</td></tr>
<tr><td>PDERR_DEFAULTDIFFERENT</td><td>0x100C</td><td>其他结构成员描述的打印机与当前默认打印机不匹配。</td></tr>
<tr><td>PDERR_DNDMMISMATCH</td><td>0x1009</td><td><a href="#设备环境类">DEVMODE和DEVNAMES</a>结构中的数据描述了两个不同的打印机。</td></tr>
<tr><td>PDERR_GETDEVMODEFAIL</td><td>0x1005</td><td>打印机驱动程序无法初始化<a href="#设备环境类">DEVMODE</a> 结构。</td></tr>
<tr><td>PDERR_INITFAILURE</td><td>0x1006</td><td><a href="#通用函数">打印选项</a> 函数在初始化期间失败，没有更具体的扩展错误代码来描述失败。 这是函数的通用默认错误代码。</td></tr>
<tr><td>PDERR_LOADDRVFAILURE</td><td>0x1004</td><td><a href="#通用函数">打印选项</a> 函数无法加载指定打印机的设备驱动程序。</td></tr>
<tr><td>PDERR_NODEFAULTPRN</td><td>0x1008</td><td>默认打印机不存在。</td></tr>
<tr><td>PDERR_NODEVICES</td><td>0x1007</td><td>找不到打印机驱动程序。</td></tr>
<tr><td>PDERR_PARSEFAILURE</td><td>0x1002</td><td><a href="#通用函数">打印选项</a> 函数无法分析WIN.INI文件的 [devices] 节中的字符串。</td></tr>
<tr><td>PDERR_PRINTERNOTFOUND</td><td>0x100B</td><td>WIN.INI文件的 [devices] 部分不包含所请求打印机的条目。</td></tr>
<tr><td>PDERR_RETDEFFAILURE</td><td>0x1003</td><td><a href="#打印框类">打印框类</a> 结构指定了PD_RETURNDEFAULT标志，但 环境 或 名称 成员不是0。</td></tr>
<tr><td>PDERR_SETUPFAILURE</td><td>0x1001</td><td><a href="#通用函数">打印选项</a> 函数无法加载所需的资源。</td></tr>
<tr><th colspan=3><a href="#通用函数">字体选框</a>函数返回以下错误代码。</th></tr>
<tr><td>CFERR_MAXLESSTHANMIN</td><td>0x2002</td><td><a href="#字体框类">字体框类</a> 结构的最小尺寸小于最大尺寸。</td></tr>
<tr><td>CFERR_NOFONTS</td><td>0x2001</td><td>不存在字体。</td></tr>
<tr><th colspan=3><a href="#通用函数">文件/保存选框</a>函数返回以下错误代码。</th></tr>
<tr><td>FNERR_BUFFERTOOSMALL</td><td>0x3003</td><td><a href="#文件框类">文件框类</a> 结构的 路径 成员指向的缓冲区太小。</td></tr>
<tr><td>FNERR_INVALIDFILENAME</td><td>0x3002</td><td>文件名无效。</td></tr>
<tr><td>FNERR_SUBCLASSFAILURE</td><td>0x3001</td><td>尝试将列表框子类化失败，因为没有足够的内存可用。</td></tr>
<tr><th colspan=3><a href="#通用函数">查找/替换选框</a>函数返回以下错误代码。</th></tr>
<tr><td>FRERR_BUFFERLENGTHZERO</td><td>0x4001</td><td><a href="#查找替换类">查找替换类</a> 结构的成员指向无效的缓冲区。</td></tr>
 </table><p><font size="6" color="#0000FF">通用对话框-使用示例</font></p>
2.<a name="颜色对话">颜色对话框——选择颜色</a><br>
显示允许用户选择特定颜色值的模式对话框。 用户可以从一组基本或自定义调色板中选择一种颜色。<br>
可以通过修改对话框用户界面的 RGB 或色调、饱和度、亮度 (HSL) 颜色值来生成颜色值。返回用户选择的颜色的 RGB 值。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/colordialogboxxp.png"><br>
首先初始化 <a href="#颜色框类">颜色框类</a> 结构，然后调用 <a href="#通用函数">颜色选框</a> 函数以显示对话框。 <br>
<font color="#0000FF">颜色框类 选色(长度=36,标志=3)</font>//定义颜色框类变量为选色,结构数据的长度=36,标志=1初始化颜色+2定义颜色<br>
<font color="#0000FF">整数 颜色表[16]</font>;//自定义颜色阵列<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">选色.窗口=窗体</font>;//指定颜色对话框的窗口为程序主窗体<br>
<font color="#0000FF">选色.数组=@颜色表</font>;//指定对话框的颜色数组为颜色表的指针地址<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮1_点击</font>;//在按钮1的点击事件里弹出颜色对话框<br>
<font color="#0000FF">如果(颜色选框(选色))</font>//如果函数返回真，表示用户选择了一种颜色<br>
<font color="#0000FF">{整数 背景=创建画刷(选色.颜色)</font>//用选择的颜色创建一个背景画刷(用来填充窗体背景)<br>
<font color="#0000FF">修改类值(窗体,类背景色,背景)</font>//修改窗体的背景颜色为创建的颜色画刷<br>
<font color="#0000FF">重绘矩形(窗体,0,1)}</font>//重绘窗体擦除背景,从而显示新的背景色<br>
<font color="#0000FF">结束</font>//本例演示创建背景画刷,也可以用来创建画笔<br>
RGB 颜色模型<br>
RGB 模型用于指定显示器和其他发光设备的颜色。有效的红色、绿色和蓝色值范围为 0 到 255，其中 0 表示最小强度，255 表示最大强度。<br>
下图显示了如何将红色、绿色和蓝色的原色组合在一起以生成四种其他颜色。 (对于显示设备，当红色、绿色和蓝色值设置为 0 时，将生成黑色。在显示技术中，黑色是所有颜色的缺失。)<br>
<img sec="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/rgbcolormodel.png"><br>
下表列出了 RGB 模型的八种颜色及其关联的 RGB 值。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>颜色</td><td>16进制</td><td>RGB 值</td></tr>
<tr><td>红色</td><td>0xFF</td><td>0:255.0.0</td></tr>
<tr><td>绿色</td><td>0xFF00</td><td>0:0.255.0</td></tr>
<tr><td>蓝色</td><td>0xFF0000</td><td>0:0.0.255</td></tr>
<tr><td>青色</td><td>0xFFFF00</td><td>0:0.255.255</td></tr>
<tr><td>洋红</td><td>0xFF00FF</td><td>0:255.0.255</td></tr>
<tr><td>黄色</td><td>0xFFFF</td><td>0:255.255.0</td></tr>
<tr><td>白色</td><td>0xFFFFFF</td><td>0:255.255.255</td></tr>
<tr><td>黑色</td><td>0x0</td><td>0:0.0.0</td></tr>
</table><a name="颜色框类">颜色框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>颜色框类</td><td>CHOOSECOLOR</td><td>36</td><td>弹出一个选取颜色的对话框，并得到颜色相关信息。</td></tr>
<tr><th colspan=4>颜色框类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>dwSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>拥有对话框的窗口的句柄。可不指定</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>对话框的模块或内存对象的句柄</td></tr>
<tr><td>颜色</td><td>rgbResult</td><td>整数</td><td>返回用户选择的颜色。</td></tr>
<tr><td>数组</td><td>lpCustColors</td><td>整数</td><td>指向一个包含16个值的数组，该数组包含了对话框中自定义颜色的红、绿、蓝（RGB）值。</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>$100所有颜色;$10回调;$20实例模板;$40忽略模板;2定义颜色;4禁用定义;1初始颜色;8显示帮助;$80只显纯色</td></tr>
<tr><td>数据</td><td>lCustData</td><td>整数</td><td>指定程序自定义的数据，该数据会被系统发送给钩子程序。</td></tr>
<tr><td>回调</td><td>lpfnHook</td><td>整数</td><td>指向CCHookProc钩子程序的指针，该钩子可以处理发送给对话框的消息。</td></tr>
<tr><td>模板</td><td>lpTemplateName</td><td>整数</td><td>指向对话框模板资源名称的字符串</td></tr>
</table>
3.<a name="字体对话">字体对话框——选择字体</a><br>
字体对话框允许用户选择逻辑字体的属性，例如字体系列和关联的字体样式、点大小、效果 (下划线、删除线和文本颜色) ，以及脚本 (或字符集) 。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/fontdialogboxxp.png"><br>
首先初始化 <a href="#字体框类">字体框类</a> 结构，然后调用 <a href="#通用函数">字体选框</a> 函数以显示对话框。<br>
<font color="#0000FF">字体框类 字框(长度=60,标志=0x101)</font>;//结构数据的长度=60,标志=1系统字体+0x100允许选颜色<br>
<font color="#0000FF">逻辑字体类 字号;</font>;//申请一个逻辑字体类,用来获取字体名称和字号大小等信息<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">字框.窗口=窗体</font>;//指定字体对话框的窗口为程序主窗体<br>
<font color="#0000FF">字框.字体=字号</font>;//指定字体对话框的字体为字号变量<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮2_点击</font>;//在按钮2的点击事件里弹出字体对话框<br>
<font color="#0000FF">如果(字体选框(字框))</font>//如果函数返回真，表示用户选择了一种字体或颜色<br>
<font color="#0000FF">{写设置("字体",字号.名称)</font>;//把字体名称保存到配置文件<br>
<font color="#0000FF">写数值("字号",字号.高度)</font>;//把字体大小保存到配置文件<br>
<font color="#0000FF">写数值("颜色",字框.颜色)</font>;//把字体颜色保存到配置文件<br>
<font color="#0000FF">发送消息(文档,$443,0,字框.颜色)</font>;//修改编辑框的背景颜色<br>
<font color="#0000FF">字体=新建字体(字号)</font>;//从选择的逻辑字体新建一个字体<br>
<font color="#0000FF">发送消息(文档,指定字体,字体,0)}</font>;//指定编辑框的字体为新建的字体<br>
<font color="#0000FF">结束</font>//本例演示修改编辑框的字体和背景色<br>
<a name="字体框类">字体框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字体框类</td><td>CHOOSEFONT</td><td>60</td><td>弹出一个选取颜色的对话框，并得到颜色相关信息。函数：ChooseFont</td></tr>
<tr><th colspan=4>字体框类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>lStructSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>拥有对话框的窗口的句柄。可不指定</td></tr>
<tr><td>设备</td><td>hDC</td><td>整数</td><td>显示的设备环境句柄，不指定</td></tr>
<tr><td>字体</td><td>lpLogFont</td><td>整数</td><td>选中的字体返回值，字体是逻辑字体</td></tr>
<tr><td>大小</td><td>iPointSize</td><td>整数</td><td>字体的大小</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>用来初始化对话框。1仅列出系统字体;2仅打印字体;4显示帮助;8启用回调函数;$10启用模板;$20启用模板数据;$40启用逻辑字体;$80自定义字体风格;$100允许选颜色;$200显示应用按钮;<br>
$400仅英文和定制字体;$800不许矢量字体;$1000不允许模拟字体;$2000限指定范围字号;$4000限固定字体;$8000仅可显字体;$10000检查错误字体;$20000仅可缩放字体;$40000仅真实字体;<br>
$80000阻止选择指定字体;$100000阻止默选字体样式;$200000阻止默选字体大小;$400000只显示字体结构中的字符集;$800000禁止脚本组合框;$1000000仅横向字体;$2000000显示隐藏字体;</td></tr>
<tr><td>颜色</td><td>rgbColors</td><td>整数</td><td>返回字体的颜色</td></tr>
<tr><td>数据</td><td>lCustData</td><td>整数</td><td>自定义数据，传到的钩子程序</td></tr>
<tr><td>回调</td><td>lpfnHook</td><td>整数</td><td>指向钩子程序的指针，该钩子可以处理回调消息。</td></tr>
<tr><td>模板</td><td>lpTemplateName</td><td>整数</td><td>指向对话框模板资源名称的字符串</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>实例句柄</td></tr>
<tr><td>风格</td><td>lpszStyle</td><td>整数</td><td>字体风格</td></tr>
<tr><td>分类</td><td>nFontType</td><td>整数</td><td>字体的类型</td></tr>
<tr><td>最小</td><td>nSizeMin</td><td>整数</td><td>字体允许的最小尺寸</td></tr>
<tr><td>最大</td><td>nSizeMax</td><td>整数</td><td>字体允许的最大尺寸</td></tr>
</table>
4.<a name="文件对话">打开保存文件对话框——选择文件</a><br>
打开对话框允许用户指定要打开的文件或文件集的驱动器、目录和名称。 可以通过初始化 <a href="#文件框类">文件框类</a> 结构并将结构传递给 文件选框 函数来创建并显示“打开”对话框。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/opendialogboxxp.png"><br>
另存为对话框允许用户指定要保存的文件的驱动器、目录和名称。 可以通过初始化 <a href="#文件框类">文件框类</a> 结构并将结构传递给 保存选框 函数来创建并显示“另存为”对话框。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/saveasdialogboxxp.png"><br>
资源管理器样式 的“打开 ”和“ 另存为 ”对话框提供类似于 Windows 资源管理器的用户界面功能。 但是，对于必须与旧式用户界面一致的应用程序，系统仍支持旧式 的“打开 ”和“ 另存为 ”对话框。<br>
首先初始化 <a href="#文件框类">文件框类</a> 结构，然后调用 <a href="#通用函数">文件选框</a> 函数以显示对话框。<br>
<font color="#0000FF">文件框类 文件框(长度=76,路长=64)</font>;//结构数据的长度=76,文件路径名称的长度=64<br>
<font color="#0000FF">文本 路径[64]</font>;//申请一个文本变量的内存缓冲区,用来存储文件的路径信息<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">文件框.窗口=窗体</font>;//指定文件对话框的窗口为程序主窗体<br>
<font color="#0000FF">文件框.路径=路径</font>;//指定文件对话框的路径为文本缓冲区<br>
<font color="#0000FF">文件框.分类 = "文本文件'\0'*.txt;*.inc'\0'所有文件'\0'*.*'\0'";</font>;//文件分类过滤器格式:名称+0+扩展名+0,多个扩展名用分号隔开<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮2_点击</font>;//在按钮2的点击事件里弹出打开文件对话框<br>
<font color="#0000FF">如果(文件选框(文件框))</font>//如果函数返回真，表示用户选择了文件路径<br>
<font color="#0000FF">信息框(0,路径,"选择的文件是",信息图标)</font>;//弹出消息框,显示选择的文件完整路径<br>
<font color="#0000FF">结束</font>//本例演示了在文件选择对话框中选择路径到指定的文本缓冲区<br>
<font color="#0000FF">程序段 按钮3_点击</font>;//在按钮3的点击事件里弹出另存为对话框<br>
<font color="#0000FF">如果(保存选框(文件框))</font>//如果函数返回真，表示用户选择或输入了文件路径<br>
<font color="#0000FF">信息框(0,路径,"选择的文件是",信息图标)</font>;//弹出消息框,显示选择的文件完整路径<br>
<font color="#0000FF">结束</font>//本例演示了在文件选择对话框中选择路径到指定的文本缓冲区<br>
<a name="文件框类">文件框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文件框类</td><td>OPENFILENAME</td><td>76</td><td>用来初始化打开或另存为对话框的信息</td></tr>
<tr><th colspan=4>文件框类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>lStructSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>指向对话框所在窗口的句柄。</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>指向对话框模板的对象。</td></tr>
<tr><td>分类</td><td>lpstrFilter</td><td>整数</td><td>过滤显示指定类型文件（过滤器）如 .分类="所有文件'\0'*.*'\0'文本文件'\0'*.txt'\0'"</td></tr>
<tr><td>指定</td><td>lpstrCustomFilter</td><td>整数</td><td>用来保留用户选择的哪种过滤器，为空不保留</td></tr>
<tr><td>定长</td><td>nMaxCustFilter</td><td>整数</td><td>指定lpstrCustomFilter的缓冲区长度</td></tr>
<tr><td>定位</td><td>nFilterIndex</td><td>整数</td><td>指定选择哪种过滤器，从1开始</td></tr>
<tr><td>路径</td><td>lpstrFile</td><td>整数</td><td>指向选择文件完整路径的缓冲区，可以是一个文本变量或内存</td></tr>
<tr><td>路长</td><td>nMaxFile</td><td>整数</td><td>“路径”缓冲区的长度</td></tr>
<tr><td>文件</td><td>lpstrFileTitle</td><td>整数</td><td>指向接收选择的文件的文件名和扩展名的缓冲（不带路径信息）。</td></tr>
<tr><td>名长</td><td>nMaxFileTitle</td><td>整数</td><td>指定文件名缓冲区的长度</td></tr>
<tr><td>目录</td><td>lpstrInitialDir</td><td>整数</td><td>指定初始目录</td></tr>
<tr><td>标题</td><td>lpstrTitle</td><td>整数</td><td>指向对话框标题栏的字符串，不指定时显示系统默认的打开或另存为</td></tr>
<tr><td>标记</td><td>Flags</td><td>整数</td><td>可以设置对话框的风格样式等。1只读;2允许覆盖;4隐藏只读;8更改默认目录;$10显示帮助;$20启用回调;$40允许模板;$80允许模板数据指针;$100允许无效字符;$200允许多选;<br>
$400输入非指定扩展名指定为空;$800限制有效路径;$1000只能输入现有文件;$2000允许创建;$4000忽略共享错误;$8000不要只读检查;$10000关闭后创建文件;$20000隐藏网络按钮;<br>
$40000短文件名;$80000资源模板对话框;$100000返回快捷方式;$200000长文件名;$400000启用回调通知;$800000允许调整大小;$10000000显示系统和隐藏文件</td></tr>
<tr><td>偏移</td><td>nFileOffset</td><td>整数</td><td>表示完整路径开头到文件名的偏移量，也就是文件名前面有多少个字</td></tr>
<tr><td>扩展</td><td>lpstrDefExt</td><td>整数</td><td>指向包含默认扩展名的缓冲。通常三个字符，如“txt”、“exe”，不带“.”</td></tr>
<tr><td>定义</td><td>lCustData</td><td>整数</td><td>指定应用程序定义的数据，这数据是能被lpfnHook成员识别的系统传到的钩子程序。</td></tr>
<tr><td>回调</td><td>lpfnHook</td><td>整数</td><td>指向一个钩子程序。标记:$20。</td></tr>
<tr><td>模板</td><td>lpTemplateName</td><td>整数</td><td>指向一个对话框模板资源名字的字符串。标记:$40</td></tr></table>
5.<a name="查找替换">查找替换对话框——编辑文本</a><br>
显示一个无模式对话框，该对话框允许用户指定要搜索的字符串，以及在搜索文档中的文本时要使用的选项。“ 替换 ”对话框允许用户指定要搜索的字符串和替换字符串，以及用于控制操作的选项。<br>

通过初始化 <a href="#查找替换类">查找替换类</a> 结构并将该结构传递给<a href="#通用函数">查找选框</a>函数，可以创建并显示“查找”对话框。下图显示了一个典型的“ 查找 ”对话框。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/finddialogboxxp.png"><br>
通过初始化 <a href="#查找替换类">查找替换类</a> 结构并将结构传递给 <a href="#通用函数">替换选框</a>函数，可以创建并显示“替换”对话框。下图显示了一个典型的“ 替换 ”对话框。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/replacedialogboxxp.png"><br>
与其他常见对话框不同，“查找 ”和“ 替换 ”对话框是无模式的。无模式对话框允许用户在对话框和创建对话框的窗口之间切换。<br>
这对于让用户搜索字符串、切换到应用程序窗口以处理字符串，以及切换回对话框以搜索另一个字符串很有用，而无需重复打开对话框所需的命令。<br>
如果 <a href="#通用函数">搜索选框 或 替换选框 </a>函数成功创建对话框，它将返回对话框的句柄。 可以使用此句柄移动对话框并与之通信。
 如果函数无法创建对话框，则返回 NULL。可以通过调用 <a href="#通用函数">对话错误</a> 函数来检索扩展的错误值来确定错误的原因。<br>
 在创建 “查找 ”或“ 替换 ”对话框之前，必须调用 注册消息 函数以获取 "commdlg_FindReplace" 已注册消息的消息标识符。<br>
 然后可以使用标识符来检测和处理从对话框发送的消息。 当用户单击对话框中的 “查找下一个”、“ 替换”或“ 全部替换 ”按钮时，<br>
 对话框过程会将消息发送到所有者窗口的窗口过程。 创建对话框时，<a href="#查找替换类">查找替换类</a> 结构的 窗口 成员标识所有者窗口。<br>
查找替换消息的 ④数据 参数是指向在创建对话框时指定的 <a href="#查找替换类">查找替换类</a> 结构的指针。 <br>
在发送消息之前，对话框使用最新的用户输入设置此结构的成员，包括要搜索替换的字符串以及查找和替换操作的选项。<br>
查找替换消息中，<a href="#查找替换类">查找替换类</a>结构的 标志 成员包含以下标志之一，用于指示导致消息的事件。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>向下查找</td><td>FR_DOWN</td><td>1</td><td>如果设置，则选择方向单选按钮的 向下 按钮，指示用户想要从当前位置到文档末尾进行搜索。 如果未设置 向下 ，则选择“ 向上 ”按钮，以便用户想要搜索到文档的开头。</td></tr>
<tr><td>全字匹配</td><td>FR_WHOLEWORD</td><td>2</td><td>如果设置，则选中“匹配整个Word仅检查”框，指示用户只想搜索与搜索字符串匹配的整个单词。 如果未设置全字匹配，则未选中检查框，因此还应搜索与搜索字符串匹配的单词片段。</td></tr>
<tr><td>分大小写</td><td>FR_MATCHCASE</td><td>4</td><td>如果设置，则选中“匹配大小写检查框，指示用户希望搜索区分大小写。 如果未设置分大小写，则取消选中检查框，以便搜索不区分大小写。</td></tr>
<tr><td>查下一个</td><td>FR_FINDNEXT</td><td>8</td><td>用户单击了“查找”或“替换”对话框中的“查找下一个”按钮。 查找 成员指定要搜索的字符串。</td></tr>
<tr><td>选中替换</td><td>FR_REPLACE</td><td>0x10</td><td>用户单击了“ 替换 ”对话框中的“ 替换 ”按钮。 查找 成员指定要替换的字符串，替换 成员指定替换字符串。</td></tr>
<tr><td>全部替换</td><td>FR_REPLACEALL</td><td>0x20</td><td>用户单击了“ 替换 ”对话框中的“全部 替换 ”按钮。 查找 成员指定要替换的字符串，替换 成员指定替换字符串。</td></tr>
<tr><td>查找关闭</td><td>FR_DIALOGTERM</td><td>0x40</td><td>对话框正在关闭。所有者窗口处理此消息后，对话框的句柄不再有效。</td></tr>
</table>代码示例:<br>
<font color="#0000FF">整数 查换消息</font>;//在窗体消息函数前面申请此整数变量<br>
<font color="#0000FF">查找替换类 查换(长度=40,标志=1,查长=64,替长=64)</font>;//结构数据的长度=40,标志=1向下,查找和替换的文字长度=64<br>
<font color="#0000FF">文本 查找[64],替换[64]</font>;//申请文本变量的内存缓冲区,用来存储查找和替换的文字<br>
<font color="#0000FF">为 查换消息 查找替换(窗口)</font>;//在窗体消息的判断(消息)下方插入这段代码<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">查换消息=注册消息("commdlg_FindReplace")</font>;//获取已注册消息的消息标识符。<br>
<font color="#0000FF">查换.窗口=窗体</font>;//指定查找替换对话框的窗口为程序主窗体<br>
<font color="#0000FF">查换.查找=查找</font>;//指定查找替换对话框的查找为文本缓冲区<br>
<font color="#0000FF">查换.替换=替换</font>;//指定查找替换对话框的替换为文本缓冲区<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮2_点击</font>;//在按钮2的点击事件里弹出查找对话框<br>
<font color="#0000FF">搜索选框(查换)</font>//使用定义的查找替换类调用搜索选框弹出对话框<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮3_点击</font>;//在按钮3的点击事件里弹出替换为对话框<br>
<font color="#0000FF">替换选框(查换)</font>//使用定义的查找替换类调用替换选框弹出对话框<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br><br>
<font color="#0000FF">程序段 查找替换(窗口)</font>//窗体消息收到查换消息时调用此函数<br>
<font color="#0000FF">整数 功能=查换.标志 & $F8</font>;//从标志里去掉1向下,2全字匹配,4区分大小写,这三项信息<br>
<font color="#0000FF">查换.标志=查换.标志 & 7</font>;//标志只保留1向下,2全字匹配,4区分大小写,这三项信息<br>
<font color="#0000FF">判断(功能)为 8 搜索内容(0)</font>//单击查找下一个按钮,执行继续搜索内容<br>
<font color="#0000FF">为 16{替换内容;搜索内容(0)}</font>//单击了替换按钮,替换当前选中文字,继续搜索内容<br>
<font color="#0000FF">为 32{选中位置(0,0)搜索内容(1)}</font>//单击了全部替换按钮,改光标位置为起始处,搜索内容提交参数1为循环搜索并替换<br>
<font color="#0000FF">结束</font>//搜索内容和替换内容都是程序段代码,需要使用发送消息函数实现<br>
<a name="查找替换类">查找替换类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>查找替换类</td><td>FINDREPLACE</td><td>40</td><td>弹出一个查找或替换文本的对话框</td></tr>
<tr><th colspan=4>查找替换类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>lStructSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>拥有对话框的窗口的句柄。可不指定</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>Flags设置了FR_ENABLETEMPLATEHANDLE标志，则 hInstance 是包含对话框模板的内存对象的句柄。<br>设置了FR_ENABLETEMPLATE标志，是包含对话框模板的模块句柄。</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>1选向下;2全字匹配;4大小写;8查找下个;$10替换;$20全部替换;$40关闭;$80显示帮助;$100回调;$200实例模板;$400禁用方向;<br>$800禁用大小写;$1000禁用全字匹配;$2000忽略模板;$4000隐藏方向;$8000隐藏大小写;$10000隐藏全字匹配;</td></tr>
<tr><td>查找</td><td>lpstrFindWhat</td><td>整数</td><td>如果指定了FR_FINDNEXT标志，则要包含搜索的字符串。<br>FR_DOWN、FR_WHOLEWORD和FR_MATCHCASE标志指示搜索的方向和类型。<br>如果指定FR_REPLACE或FR_REPLACE标志，则要包含替换的字符串。</td></tr>
<tr><td>替换</td><td>lpstrReplaceWith</td><td>整数</td><td>如果指定FR_REPLACE或FR_REPLACEALL标志，则要包含替换字符串 。</td></tr>
<tr><td>查长</td><td>wFindWhatLen</td><td>整形</td><td>查找字符缓冲区长度</td></tr>
<tr><td>替长</td><td>wReplaceWithLen</td><td>整形</td><td>替换字符缓冲区长度</td></tr>
<tr><td>数据</td><td>lCustData</td><td>整数</td><td>自定义数据，传到的钩子程序</td></tr>
<tr><td>回调</td><td>lpfnHook</td><td>整数</td><td>指向钩子程序的指针，该钩子可以处理回调消息。</td></tr>
<tr><td>模板</td><td>lpTemplateName</td><td>整数</td><td>指向对话框模板资源名称的字符串</td></tr></table>
6.<a name="目录对话">文件夹对话框——选择文件夹</a><br>
有两种可用的对话框样式。 较旧的样式默认显示，且不可调整大小。较新的样式提供了许多附加功能，<br>
包括对话框中的拖放功能、重新排序、删除、快捷菜单、创建新文件夹的功能以及其他快捷菜单命令。<br>
最初，它比旧对话框大，但用户可以调整其大小。 若要使用较新的样式指定对话框，请在 目录框类 结构的 选项 成员中设置新的界面和含编辑框标志。<br>

如果实现在 目录框类 结构的 回调 成员中指定的回调函数，则会收到对话框的句柄。 此窗口句柄的一个用途是修改对话框的布局或内容。<br>
由于它不可调整大小，因此修改旧样式对话框相对简单。 修改较新的样式对话框要困难得多，不建议这样做。<br>
它不仅具有与旧样式不同的大小和布局，而且每次用户调整其大小时，其控件的尺寸和位置都会发生变化。<br>

如果在 目录框类 结构的 选项 成员中设置了根节点标志，则“确定”按钮仍对“\server”项以及“\server\share”和目录项保持启用状态。<br>
但是，如果用户选择“\server”项，将 目录选框 返回的 PIDL 传递到 转换路径 会失败。<br>
示例代码:<br>
<font color="#0000FF">目录框类 目录(选项=$41)</font>;//选项=$40新的界面+1只含文件目录<br>
<font color="#0000FF">文本 路径[64]</font>;//申请文本变量的内存缓冲区,用来存储目标文件夹的文字<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">目录.窗口=窗体</font>;//指定目录对话框的窗口为程序主窗体<br>
<font color="#0000FF">目录.路径=路径</font>;//指定目录对话框的路径为文本缓冲区<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮2_点击</font>;//在按钮2的点击事件里弹出目录对话框<br>
<font color="#0000FF"> 整数 项目=目录选框(目录)</font>//使用目录框类调用目录选框弹出对话框<br>
<font color="#0000FF">转换路径(项目,路径)</font>;//将项目标识符列表转换为文件系统路径。<br>
<font color="#0000FF">任务释放(项目)</font>;//释放目录选框返回的项目标识符列表。<br>
<font color="#0000FF">结束</font>//文本变量"路径"就是选择的文件夹<br>
<a name="目录框类">目录框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>目录框类</td><td>BROWSEINFO</td><td>32</td><td>用来获取用户选择的目录</td></tr>
<tr><th colspan=4>目录框类	成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>指向所在窗口的句柄。</td></tr>
<tr><td>目录</td><td>pidlRoot</td><td>整数</td><td>ITEMIDLIST结构的地址，包含浏览时的初始根目录</td></tr>
<tr><td>路径</td><td>pszDisplayName</td><td>整数</td><td>用来保存用户选中的目录字符串的内存地址。</td></tr>
<tr><td>标题</td><td>lpszTitle</td><td>整数</td><td>浏览文件夹对话框的标题内容。</td></tr>
<tr><td>选项</td><td>ulFlags</td><td>整数</td><td>描述了对话框的选项。1只含文件目录,2不含域名目录,4对话框可设置状态文本,8只返回文件根节点<br>
$10含编辑框,$20检查名称,$40新的界面,$80可显示URL,$100用法提示,$200新建文件夹,$400快捷方式,<br>$1000显示计算机,$2000显示打印机,$4000显示目录和文件,$8000显示可共享资源,$10000可展开压缩文件或库</td></tr>
<tr><td>回调</td><td>lpfn</td><td>整数</td><td>程序定义的浏览对话框回调函数的地址。</td></tr>
<tr><td>参数</td><td>lParam</td><td>整数</td><td>对话框传递给回调函数的一个参数指针</td></tr>
<tr><td>图像</td><td>iImage</td><td>整数</td><td>与选中目录相关的图像。该图像将被指定为系统图像列表中的索引值。</td></tr>
</table>
7.<a name="页面设置">页面设置对话框——设置打印页属性</a><br>
显示允许用户设置打印页的以下属性的模式对话框：<br>
纸张类型 (信封、法律、信件等)<br>
纸张源 (手动进纸、拖拉机进纸、纸张送纸器等)<br>
页面方向 (纵向或横向)<br>
页边距的宽度<br>
通过初始化 <a href="#页面框类">页面框类</a> 结构并将该结构传递给 <a href="#通用函数">页面设置</a> 函数，可以创建并显示“页面设置”对话框。<br>
但是，对话框中显示的属性因打印机的功能而异。 下图显示了典型的 “页面设置 ”对话框。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/pagesetupdialogboxxp.png"><br>
如果用户单击“确定”按钮，在 <a href="#页面框类">页面框类</a> 结构中设置各种成员以指定用户的选择后，<a href="#通用函数">页面设置</a>将返回真。<br>
纸宽、纸高、左宽、上宽、右宽、下宽 等成员得到用户指定的值。 环境 和 名称 成员包含 <a href="#设备环境类">设备环境、名称类</a> 结构的全局内存句柄。<br>
这些结构包含其他页面信息以及有关打印机的信息。 可以使用此信息准备要发送到所选打印机的输出。<br>

如果用户取消“ 页面设置 ”对话框或发生错误， <a href="#通用函数">页面设置</a> 将返回假。<br>
若要确定错误的原因，请调用 <a href="#通用函数">对话错误</a> 函数来检索扩展的错误值。<br>
示例代码:<br>
<font color="#0000FF">页面框类 页面(长度=84,标志=0x40005,左宽=1250,上宽=1000,右宽=1250,下宽=1000)</font>;//标志=4千分之一英寸+1指定边距+0x40000启用重绘回调<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">页面.窗口=窗体</font>;//指定页面设置框的窗口为程序主窗体<br>
<font color="#0000FF">页面.重绘回调=@设置回调</font>;//指定页面设置框的重绘回调为设置回调,也可以指定为窗体消息<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 设置回调(窗口,消息,设备,矩形类 数据)</font>;//设置回调跟窗体消息相同<br>
<font color="#0000FF">判断(消息)为 0x403</font>//此为页面设置对话框边距矩形的消息<br>
<font color="#0000FF">{边框=取元素色(13)</font>;//获取系统高亮颜色<br>
<font color="#0000FF">画笔=创建画笔(3,1,边框)</font>//使用交替的短划线和点创建笔宽为1的画笔<br>
<font color="#0000FF">选择对象(设备,画笔)</font>//回调函数的第三参数是打印的设备<br>
<font color="#0000FF">画方块(设备,数据.左,数据.顶,数据.宽,数据.高)}</font>//在打印设备上绘制矩形方块<br>
<font color="#0000FF">结束</font>//示例代码结束<br>

<p><font size="6" color="#0000FF">打印对话框-回调函数</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>打印回调</td><td>Lpprinthookproc</td><td>打印回调(窗口,消息,参数,数据)</td><td>接收用于 “打印 ”对话框的默认对话框过程的消息或通知。</td></tr>
<tr><td>打印设置</td><td>Lpsetuphookproc</td><td>打印设置(窗口,消息,参数,数据)</td><td>与 打印选项 函数一起使用的挂钩过程接收消息或通知。适用于 “打印设置 ”对话框</td></tr>
<tr><td>页面绘图</td><td>Lppagepainthook</td><td>页面绘图(窗口,消息,参数,数据)</td><td>接收允许您在“ 页面设置 ”对话框中自定义示例页面绘图的消息。</td></tr>
<tr><td>页面回调</td><td>Lppagesetuphook</td><td>页面回调(窗口,消息,参数,数据)</td><td>接收用于 “页面设置 ”对话框的默认对话框过程的消息或通知。</td></tr>
</table><a name="页面框类">页面框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>页面框类</td><td>PAGESETUPDLG</td><td>84</td><td>用来显示打印对话框或打印设置对话框。</td></tr>
<tr><th colspan=4>页面框类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>lStructSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>拥有对话框的窗口的句柄。可不指定</td></tr>
<tr><td>环境</td><td>hDevMode</td><td>整数</td><td>包含打印机设备与环境信息的DEVMODE结构句柄</td></tr>
<tr><td>名称</td><td>hDevNames</td><td>整数</td><td>包含驱动器名、打印机名和输出端口名的设备名结构DEVNAMES句柄</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>用于打印公用对话框初始化的标志位</td></tr>
<tr><td>纸宽</td><td>ptPaperSize.x</td><td>整数</td><td>指定用户选择的纸张的宽度</td></tr>
<tr><td>纸高</td><td>ptPaperSize.y</td><td>整数</td><td>确指定用户选择的纸张的高度</td></tr>
<tr><td>左边</td><td>rtMinMargin.left</td><td>整数</td><td>指定左边距的最小允许宽度</td></tr>
<tr><td>上边</td><td>rtMinMargin.top</td><td>整数</td><td>指定上边距的最小允许宽度</td></tr>
<tr><td>右边</td><td>rtMinMargin.right</td><td>整数</td><td>指定右边距的最小允许宽度</td></tr>
<tr><td>下边</td><td>rtMinMargin.bottom</td><td>整数</td><td>指定下边距的最小允许宽度</td></tr>
<tr><td>左宽</td><td>rtMargin.left</td><td>整数</td><td>指定左边距的宽度</td></tr>
<tr><td>上宽</td><td>rtMargin.top</td><td>整数</td><td>指定上边距的宽度</td></tr>
<tr><td>右宽</td><td>rtMargin.right</td><td>整数</td><td>指定右边距的宽度</td></tr>
<tr><td>下宽</td><td>rtMargin.bottom</td><td>整数</td><td>指定下边距的宽度</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>程序实例,很少使用</td></tr>
<tr><td>数据</td><td>lCustData</td><td>整数</td><td>指定系统传递给设置回调过程的应用程序定义数据</td></tr>
<tr><td>设置回调</td><td>lpfnPageSetupHook</td><td>整数</td><td>挂接回调过程的指针，可以处理针对该对话框的消息,可忽略</td></tr>
<tr><td>重绘回调</td><td>lpfnPagePaintHook</td><td>整数</td><td>挂钩回调过程的指针，重新绘制示例页面时，可在收到消息时自定义样本页面的外观</td></tr>
<tr><td>设置模板名</td><td>lpPageSetupTemplateName</td><td>整数</td><td>对话框模板资源的名称,可忽略</td></tr>
<tr><td>设置模板</td><td>hPageSetupTemplate</td><td>整数</td><td>包含对话框模板的内存对象的句柄</td></tr>
</table><a name="页面选项">页面设置选项</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>PSD_DEFAULTMINMARGINS</td><td>0x00000000</td><td>将用户可以为页边距指定的最小值设置为打印机允许的最小页边距。 这是默认值。 如果还指定 了PSD_MARGINS 和 PSD_MINMARGINS 标志，则忽略此标志。</td></tr>
<tr><td>PSD_DISABLEMARGINS</td><td>0x00000010</td><td>禁用边距控件，防止用户设置边距。</td></tr>
<tr><td>PSD_DISABLEORIENTATION</td><td>0x00000100</td><td>禁用方向控件，从而阻止用户设置页面方向。</td></tr>
<tr><td>PSD_DISABLEPAGEPAINTING</td><td>0x00080000</td><td>阻止对话框绘制示例页的内容。 如果启用 页面绘图 挂钩过程，仍可以绘制示例页面的内容。</td></tr>
<tr><td>PSD_DISABLEPAPER</td><td>0x00000200</td><td>禁用纸张控件，防止用户设置页面参数，例如纸张大小和来源。</td></tr>
<tr><td>PSD_DISABLEPRINTER</td><td>0x00000020</td><td>已过时。Windows XP/2000：禁用“ 打印机 ”按钮，防止用户调用包含其他打印机设置信息的对话框。</td></tr>
<tr><td>PSD_ENABLEPAGEPAINTHOOK</td><td>0x00040000</td><td>启用 重绘回调 成员中指定的挂钩过程。</td></tr>
<tr><td>PSD_ENABLEPAGESETUPHOOK</td><td>0x00002000</td><td>启用 设置回调 成员中指定的挂钩过程。</td></tr>
<tr><td>PSD_ENABLEPAGESETUPTEMPLATE</td><td>0x00008000</td><td>指示 实例 和 设置模板名 成员指定要用于替代默认模板的对话框模板。</td></tr>
<tr><td>PSD_ENABLEPAGESETUPTEMPLATEHANDLE</td><td>0x00020000</td><td>指示 设置模板 成员标识包含预加载对话框模板的数据块。 如果指定了此标志，系统将忽略 设置模板名 成员。</td></tr>
<tr><td>PSD_INHUNDREDTHSOFMILLIMETERS</td><td>0x00000008</td><td>指示百分之一毫米是边距和纸张大小的度量单位。可以在输入时设置此标志，以替代用户区域设置的默认度量单位。</td></tr>
<tr><td>PSD_INTHOUSANDTHSOFINCHES</td><td>0x00000004</td><td>指示千分之一英寸是边距和纸张大小的度量单位。函数返回时，对话框会设置此标志以指示使用的单位。</td></tr>
<tr><td>PSD_INWININIINTLMEASURE</td><td>0x00000000</td><td>保留。</td></tr>
<tr><td>PSD_MARGINS</td><td>0x00000002</td><td>使系统使用指定的值作为左、上、右和下边距的初始宽度。如果未设置 PSD_MARGINS ，系统将所有边距的初始宽度设置为 1 英寸。</td></tr>
<tr><td>PSD_MINMARGINS</td><td>0x00000001</td><td>使系统使用指定的值作为左、上、右和下边距的最小允许宽度。系统会阻止用户输入小于指定最小值的宽度。</td></tr>
<tr><td>PSD_NONETWORKBUTTON</td><td>0x00200000</td><td>隐藏和禁用“ 网络 ”按钮。</td></tr>
<tr><td>PSD_NOWARNING</td><td>0x00000080</td><td>防止系统在没有默认打印机时显示警告消息。</td></tr>
<tr><td>PSD_RETURNDEFAULT</td><td>0x00000400</td><td>不显示对话框。将 环境 和 名称 成员设置为为系统默认打印机初始化的 <a href="#设备环境类">设备环境、名称类</a> 结构的句柄。</td></tr>
<tr><td>PSD_SHOWHELP</td><td>0x00000800</td><td>使对话框显示 “帮助” 按钮。 窗口 成员必须指定窗口，以接收当用户单击“帮助”按钮时对话框发送的 HELPMSGSTRING 注册消息。</td></tr>
</table><font size="6"><a name="纸张方向">纸张或信封的方向</a>——常量定义：</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>数值</td><td>作用解释</td></tr>
<tr><td>0x0001</td><td>横向模式下的纸张 (点阵)</td></tr>
<tr><td>0x0003</td><td>横向模式下的纸张 (HPPCL)</td></tr>
<tr><td>0x0005</td><td>纵向模式下的纸张 (点阵)</td></tr>
<tr><td>0x0007</td><td>纵向模式下的纸张 (HPPCL)</td></tr>
<tr><td>0x000b</td><td>横向模式下的信封 (HPPCL)</td></tr>
<tr><td>0x000d</td><td>纵向模式下的信封 (点阵)</td></tr>
<tr><td>0x0019</td><td>横向模式下的信封 (点阵)</td></tr>
<tr><td>0x001f</td><td>纵向模式下的信封 (HPPCL)</td></tr>
</table>
8.<a name="打印对话">打印对话框——打印作业</a><br>
“ 打印 ”对话框允许用户选择特定打印作业的选项。 例如，用户可以指定要使用的打印机、要打印的页面范围和份数。<br>

可以使用 <a href="#通用函数">打印选框</a> 函数显示“打印属性表”，该页包含类似于“打印”对话框的控件的“常规”页。<br>
属性表还可以在 “常规 ”页之后具有其他特定于应用程序的属性页和特定于驱动程序的属性页。<br>

可以通过初始化 <a href="#打印框类">打印框类</a> 结构并将结构传递给 <a href="#通用函数">打印选项</a> 函数来创建并显示“打印”对话框。<br>

下图显示了典型的“ 打印 ”对话框。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/printerpropertypagexp.png"><br>
如果用户单击“ 确定” 按钮， <a href="#通用函数">打印选项</a> 将返回 TRUE ，并使用 <a href="#打印框类">打印框类</a> 结构返回有关用户选择的信息。<br>
例如， 环境 和 名称 成员通常返回 和 <a href="#设备环境类">设备名称类</a> 结构的全局内存句柄。 可以使用这些结构中的信息为所选打印机创建设备上下文或信息上下文。<br>

如果用户取消“ 打印 ”对话框或发生错误， <a href="#通用函数">打印选项</a> 返回 FALSE。 可以使用 <a href="#通用函数">对话错误</a> 函数检索扩展错误值来确定错误原因。<br>

“ 打印 ”对话框包含一组单选按钮的 “打印范围 ”，这些按钮指示用户是要打印所有页面、一系列页面还是仅打印所选文本。<br>
在调用 <a href="#通用函数">打印选项</a> 之前，可以设置 0、1 或 2 标志之一，以指示最初选择哪个按钮。<br>
当 <a href="#通用函数">打印选项</a> 返回真时，函数将设置其中一个标志来指示用户的选择。 如果设置了2，<a href="#打印框类">打印框类</a>结构的 首页 和 末页 成员包含用户指定的起始页和结束页。<br>
若要禁用 “页面” 单选按钮及其关联的“ 发件人 ”和“ 要编辑” 控件，请设置 8 标志。 若要禁用 “选择” 单选按钮，请设置 4 标志。<br>

该对话框包含一个编辑控件，用户可以在其中键入要打印的副本数。 如果 <a href="#打印框类">打印框类</a> 结构的 环境 成员为非0，则结构的 份数 成员指定此编辑控件的初始值。<br>
如果 环境 为0，<a href="#打印框类">打印框类</a>结构的 份数 成员将指定初始值。 当 <a href="#通用函数">打印选项</a> 返回时，份数 通常指示用户指定的副本数。<br>
但是，如果在创建对话框时设置0x40000标志，份数 在返回时始终设置为 1，<a href="#设备环境类">设备环境</a> 的 份数 成员指示要打印的副本数。<br>

“整理检查框指示在打印多个副本时用户是否要整理页面。 如果选择了“整理检查”框，则会设置0x10标志。<br>
如果应用程序不支持多个副本或模拟排序规则，请在 <a href="#打印框类">打印框类</a> 结构的 标志 成员中设置0x40000标志。<br>
这将禁用“排序检查”框和“份数”编辑控件，除非打印机驱动程序支持多个副本和排序规则。<br>

“打印到文件检查”框指示用户是否要将输出发送到文件而不是打印机。 可以设置0x20标志，以便最初选择检查框。 若要隐藏检查框，请设置0x100000标志。<br>
若要禁用它，请设置 0x80000 标志。 如果用户选择“打印到文件”选项，<a href="#通用函数">打印选项</a> 将设置0x20标志，并在 <a href="#设备环境类">设备名称类</a> 结构的 wOutputOffset 成员指示的偏移量处返回“FILE：”。<br>
调用 函数以启动打印操作时，请在结构的 lpszOutput 成员中指定此“FILE：”字符串。 指定此字符串会导致打印子系统向用户查询输出文件的名称。<br>

默认情况下，“ 打印 ”对话框最初显示有关当前默认打印机的信息。 若要显示另一台已安装打印机的信息，请初始化 和 <a href="#设备环境类">设备名称类</a> 结构，并将结构的全局内存句柄分配给 环境 和 名称 成员。<br>
在 <a href="#设备环境类">设备环境</a> 结构的 名称 成员和 <a href="#设备环境类">设备名称</a> 结构的 wDriverOffset 成员中指定的设备名称必须标识系统配置中的打印机设备。否则<a href="#通用函数">打印选项</a>将返回错误。<br>

可以通过在 <a href="#打印框类">打印框类</a> 结构的 标志 成员中设置 0x100 或 0x200 标志来指示 <a href="#通用函数">打印选项</a> 为打印机创建设备上下文或信息上下文。<br>
 函数返回 hDC 成员中的设备上下文或信息上下文的句柄。如果使用 0x100 标志，则可以使用设备上下文为打印机生成输出。<br>

若要在不显示“ 打印 ”对话框的情况下检索有关默认打印机的信息，请设置 0x400 标志。 在这种情况下， <a href="#通用函数">打印选项</a> 在将 环境 和 名称 成员设置为包含信息的结构句柄后立即返回。<br>

默认情况下， <a href="#通用函数">打印选项</a> 在发生错误时显示消息框。 例如，如果未安装打印机，函数会显示错误消息。 若要防止函数显示这些警告消息，请设置 0x80 标志。<br>
可以通过在调用 <a href="#通用函数">打印选项</a> 函数时设置 0x40 标志来创建和显示“打印设置”对话框。 但是，“ 打印设置 ”对话框已被 “页面设置 ”对话框取代，不应在新应用程序中使用。
示例代码:<br>
<font color="#0000FF">打印框类 打印(长度=66,标志=0x40100,份数=1,首页=0xFFFF,末页=0xFFFF,最小=1,最大=0xFFFF)</font>;//标志=0x40000支持多副本+0x100选择的设备<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">打印框.窗口=窗体</font>;//指定打印对话框的窗口为程序主窗体<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮2_点击</font>;//在按钮2的点击事件里弹出打印对话框<br>
<font color="#0000FF">如果(打印选项(打印))</font>//使用打印框类调用打印选项弹出对话框<br>
<font color="#0000FF">删除设备(打印.设备)</font>;//打印作业完成,删除设备。<br>
<font color="#0000FF">结束</font>//示例代码结束<br>
<a name="打印框类">打印框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>打印框类</td><td>PRINTDLG</td><td>66</td><td>用来显示打印对话框或打印设置对话框。</td></tr>
<tr><th colspan=4>打印框类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>lStructSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>拥有对话框的窗口的句柄。可不指定</td></tr>
<tr><td>环境</td><td>hDevMode</td><td>整数</td><td>包含打印机设备与环境信息的DEVMODE结构句柄</td></tr>
<tr><td>名称</td><td>hDevNames</td><td>整数</td><td>包含驱动器名、打印机名和输出端口名的设备名结构DEVNAMES句柄</td></tr>
<tr><td>设备</td><td>hDC</td><td>整数</td><td>设备上下文或信息上下文的句柄，由Flags是否设置PD_RETURNDC或PC_RETURNIC标志来决定。</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>用于打印公用对话框初始化的标志位</td></tr>
<tr><td>首页</td><td>nFromPage</td><td>整形</td><td>指定开始页码编辑控件的初始值</td></tr>
<tr><td>末页</td><td>nToPage</td><td>整形</td><td>指定结束页码编辑控件的初始值</td></tr>
<tr><td>最小</td><td>nMinPage</td><td>整形</td><td>指定页码编辑控件的页码范围的最小值</td></tr>
<tr><td>最大</td><td>nMaxPage</td><td>整形</td><td>指定页码编辑控件的页码范围的最大值</td></tr>
<tr><td>份数</td><td>nCopies</td><td>整形</td><td>指定复制编辑控件的初始副本数</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>设置了 PD_ENABLEPRINTTEMPLATE 或 PD_ENABLESETUPTEMPLATE 标志</td></tr>
<tr><td>数据</td><td>lCustData</td><td>整数</td><td>系统传递给挂钩过程的应用程序定义数据。 </td></tr>
<tr><td>打印回调</td><td>lpfnPrintHook</td><td>整数</td><td>指向 打印回调 挂钩过程的指针</td></tr>
<tr><td>设置回调</td><td>lpfnSetupHook</td><td>整数</td><td>指向 打印设置 挂钩过程的指针</td></tr>
<tr><td>打印模板名</td><td>lpPrintTemplateName</td><td>整数</td><td>程序模块中对话框模板资源的名称。</td></tr>
<tr><td>设置模板名</td><td>lpSetupTemplateName</td><td>整数</td><td>设置了PD_ENABLESETUPTEMPLATE标志</td></tr>
<tr><td>打印模板</td><td>hPrintTemplate</td><td>整数</td><td>设置了PD_ENABLEPRINTTEMPLATEHANDLE标志</td></tr>
<tr><td>设置模板</td><td>hSetupTemplate</td><td>整数</td><td>设置了PD_ENABLESETUPTEMPLATEHANDLE标志</td></tr>
</table><a name="打印标志">打印属性标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PD_ALLPAGES</td><td>0x00000000</td><td>默认标志，指示最初选择了“ 所有” 单选按钮。</td></tr>
<tr><td>PD_SELECTION</td><td>0x00000001</td><td>选择 “选择” 单选按钮。</td></tr>
<tr><td>PD_PAGENUMS</td><td>0x00000002</td><td>选择 “页面” 单选按钮。</td></tr>
<tr><td>PD_NOSELECTION</td><td>0x00000004</td><td>禁用“ 选择” 单选按钮。</td></tr>
<tr><td>PD_NOPAGENUMS</td><td>0x00000008</td><td>禁用 “页面” 单选按钮和关联的编辑控件。还会导致“整理检查”框显示在对话框中。</td></tr>
<tr><td>PD_COLLATE</td><td>0x00000010</td><td>选中整理检查框。</td></tr>
<tr><td>PD_PRINTTOFILE</td><td>0x00000020</td><td>选中“打印到文件检查框。</td></tr>
<tr><td>PD_PRINTSETUP</td><td>0x00000040</td><td>使系统显示“ 打印设置 ”对话框，而不是“ 打印 ”对话框。</td></tr>
<tr><td>PD_NOWARNING</td><td>0x00000080</td><td>防止在发生错误时显示警告消息。</td></tr>
<tr><td>PD_RETURNDC</td><td>0x00000100</td><td>返回与用户在属性表中所做的选择匹配的设备上下文。</td></tr>
<tr><td>PD_RETURNIC</td><td>0x00000200</td><td>与 PD_RETURNDC 标志类似，但此标志返回信息上下文而不是设备上下文。</td></tr>
<tr><td>PD_RETURNDEFAULT</td><td>0x00000400</td><td>不显示属性表。 而是将 名称 和 环境 成员设置为系统默认打印机初始化的结构句柄。</td></tr>
<tr><td>PD_SHOWHELP</td><td>0x00000800</td><td>使对话框显示“ 帮助 ”按钮。</td></tr>
<tr><td>PD_ENABLEPRINTHOOK</td><td>0x00001000</td><td>启用 在 打印回调 成员中指定的挂钩过程。 这将启用“ 打印 ”对话框的挂钩过程。</td></tr>
<tr><td>PD_ENABLESETUPHOOK</td><td>0x00002000</td><td>启用 在 设置回调 成员中指定的挂钩过程。这将启用“ 打印设置 ”对话框的挂钩过程。 </td></tr>
<tr><td>PD_ENABLEPRINTTEMPLATE</td><td>0x00004000</td><td>指示 实例 和 模板 成员指定“ 常规 ”页下半部分中默认对话框模板的替换项。</td></tr>
<tr><td>PD_ENABLESETUPTEMPLATE</td><td>0x00008000</td><td>指示 实例 和 设置模板名 成员指定默认 打印设置 对话框模板的替换项。</td></tr>
<tr><td>PD_ENABLEPRINTTEMPLATEHANDLE</td><td>0x00010000</td><td>指示 实例 成员标识包含预加载对话框模板的数据块。</td></tr>
<tr><td>PD_ENABLESETUPTEMPLATEHANDLE</td><td>0x00020000</td><td>指示 设置模板 成员标识包含预加载对话框模板的数据块。 </td></tr>
<tr><td>PD_USEDEVMODECOPIESANDCOLLATE</td><td>0x00040000</td><td>此标志指示应用程序是否支持多个副本和排序规则。 </td></tr>
<tr><td>PD_DISABLEPRINTTOFILE</td><td>0x00080000</td><td>禁用打印到文件检查框。</td></tr>
<tr><td>PD_HIDEPRINTTOFILE</td><td>0x00100000</td><td>隐藏“打印到文件检查框。</td></tr>
<tr><td>PD_NONETWORKBUTTON</td><td>0x00200000</td><td>隐藏和禁用“ 网络 ”按钮。</td></tr>
<tr><td>PD_CURRENTPAGE</td><td>0x00400000</td><td>选择 “当前页” 单选按钮。</td></tr>
<tr><td>PD_NOCURRENTPAGE</td><td>0x00800000</td><td>禁用 “当前页” 单选按钮。</td></tr>
<tr><td>PD_EXCLUSIONFLAGS</td><td>0x01000000</td><td>指示 排除 成员标识要从打印机驱动程序属性页中排除的项目。</td></tr>
<tr><td>PD_USELARGETEMPLATE</td><td>0x10000000</td><td>强制属性表对 “常规 ”页使用大型模板。 </td></tr>
</table>
9.<a name="打印属性">打印属性表——打印作业属性</a><br>
打印属性表是一个标准用户界面，允许用户指定特定打印作业的属性。 属性表由一组属性页组成，这些属性页因打印机或应用程序而异。<br>
对于标准 Windows 属性页的子集，某些打印机可能会添加特定于驱动程序的属性页，而某些应用程序可能会添加特定于应用程序的属性页。<br>

若要创建并显示打印属性表，请初始化 <a href="#打印选框类">打印选框类</a> 结构并将该结构传递给 <a href="#通用函数">打印选框</a> 函数。下图显示了典型的打印属性表。<br>
<img src=="https://learn.microsoft.com/zh-cn/windows/win32/dlgbox/images/printerpropertypagexp.png"><br>
<a href="#打印选框类">打印选框类</a>  结构的大多数成员与 <a href="#打印框类">打印框类</a>  结构的成员相同。<br>
有关如何使用通用结构成员与对话框控件交互的说明，请参阅 <a href="#打印对话">打印对话框。</a>本主题的其余部分介绍与 “打印 ”对话框不同的“ 打印 ”属性表功能。<br>

可以通过为“常规”页的下半部分指定自定义对话框模板以及指定其他属性页以跟随“常规”页来自定义打印属性表。 有关详细信息，请参阅 自定义打印属性表。<br>

可以实现回调对象，以在显示属性表时从 <a href="#通用函数">打印选框</a> 函数接收通知和消息。 提供自定义模板或其他页面的应用程序使用回调对象与属性表通信。 有关详细信息，请参阅 打印属性表的回调对象。<br>

打印属性表支持指定要打印的多个不连续页面范围。 <a href="#打印选框类">打印选框类</a> 结构的 组数 成员指定 <a href="#打印页类">打印页类</a> 结构的数组，其中每个结构指定页面范围。<br>

“打印”属性表将“当前页”单选按钮显示为单选按钮的“页面范围”组的一部分。 若要控制“当前页”单选按钮，请使用 <a href="#打印选框类">打印选框类</a> 结构的 标志 成员中的0x400000和0x800000标志。<br>
示例代码:<br>
<font color="#0000FF">打印页类 打印页[10]</font>;//申请10个打印面,用来存储页面的首页和末页<br>
<font color="#0000FF">打印选框类 打印框(长度=84,标志=$110,页数=10,份数=1,最小=1,最大=1000,始页=0xffffffff)</font>;//标志=0x10选中整理检查框+0x100匹配设备<br>
<font color="#0000FF">程序段 窗体启动</font>;//以上代码为全局变量,在窗体启动程序段进行赋值<br>
<font color="#0000FF">打印框.窗口=窗体</font>;//指定打印对话框的窗口为程序主窗体<br>
<font color="#0000FF">打印框.页面=打印页</font>;//指定打印对话框的页面为打印页<br>
<font color="#0000FF">结束</font>//换到其它地方书写代码<br>
<font color="#0000FF">程序段 按钮2_点击</font>;//在按钮2的点击事件里弹出打印对话框<br>
<font color="#0000FF">如果(打印选框(打印框))返回;</font>//打印选框正常返回0,非0就不再执行后面代码<br>
<font color="#0000FF">如果(打印框.回值=1)</font>;//用户点击了打印选框上面的打印按钮。<br>
<font color="#0000FF">窗体~"正在打印文档"</font>;//显示正在打印。<br>
<font color="#0000FF">结束</font>//例程代码结束<br>
<a name="打印选框类">打印选框类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>打印选框类</td><td>PRINTDLGEXA</td><td>84</td><td>用来显示打印对话框或打印设置对话框。函数：PrintDlg(lppd)</td></tr>
<tr><th colspan=4>打印选框类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>lStructSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hwndOwner</td><td>整数</td><td>拥有对话框的窗口的句柄。可不指定</td></tr>
<tr><td>环境</td><td>hDevMode</td><td>整数</td><td>包含打印机设备与环境信息的DEVMODE结构句柄</td></tr>
<tr><td>名称</td><td>hDevNames</td><td>整数</td><td>包含驱动器名、打印机名和输出端口名的设备名结构DEVNAMES句柄</td></tr>
<tr><td>设备</td><td>hDC</td><td>整数</td><td>设备上下文或信息上下文的句柄，由Flags是否设置PD_RETURNDC或PC_RETURNIC标志来决定。</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>用于打印公用对话框初始化的标志位</td></tr>
<tr><td>标记</td><td>Flags2</td><td>整数</td><td>排斥标志</td></tr>
<tr><td>排除</td><td>ExclusionFlags</td><td>整数</td><td>从打印驱动程序属性页中排除项。0x8100=属性页中排除“复制”和“整理”控件</td></tr>
<tr><td>组数</td><td>nPageRanges</td><td>整数</td><td>数组中指定的初始页范围数。</td></tr>
<tr><td>页数</td><td>nMaxPageRanges</td><td>整数</td><td>页面数组缓冲区的大小（以数组元素为单位）。</td></tr>
<tr><td>页面</td><td>lpPageRanges</td><td>整数</td><td>指向包含 打印页类 结构数组的缓冲区的指针。</td></tr>
<tr><td>最小</td><td>nMinPage</td><td>整数</td><td>指定页码编辑控件的页码范围的最小值</td></tr>
<tr><td>最大</td><td>nMaxPage</td><td>整数</td><td>指定页码编辑控件的页码范围的最大值</td></tr>
<tr><td>份数</td><td>nCopies</td><td>整数</td><td>指定副本编辑控件的初始副本数</td></tr>
<tr><td>实例</td><td>hInstance</td><td>整数</td><td>标志成员中设置了PD_ENABLEPRINTTEMPLATEHANDLE标志</td></tr>
<tr><td>模板</td><td>lpPrintTemplateName</td><td>整数</td><td>程序模块中对话框模板资源的名称。</td></tr>
<tr><td>回调</td><td>lpCallback</td><td>整数</td><td>指向应用程序定义的回调对象的指针。</td></tr>
<tr><td>属组</td><td>nPropertyPages</td><td>整数</td><td> 数组中的属性页句柄数。</td></tr>
<tr><td>属性</td><td>lphPropertyPages</td><td>整数</td><td>包含要添加到打印属性表的属性页句柄数组。 </td></tr>
<tr><td>始页</td><td>nStartPage</td><td>整数</td><td>最初显示的属性页。</td></tr>
<tr><td>回值</td><td>dwResultAction</td><td>整数</td><td>输入时，将此成员设置为零。返回:0单击了取消按钮,1打印按钮,2应用按钮</td></tr>
</table><a name="打印页类">打印页类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>打印页类</td><td>PRINTPAGERANGE</td><td>8</td><td>表示打印作业中的页面范围。 打印作业可以有多个页面范围。</td></tr>
<tr><th colspan=4>打印页类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>首页</td><td>nFromPage</td><td>整数</td><td>范围的第一页。</td></tr>
<tr><td>末页</td><td>nToPage</td><td>整数</td><td>范围的最后一页。</td></tr>
</table><a name="文档类">文档类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文档类</td><td>DOCINFO</td><td>20</td><td>用来显示打印对话框或打印设置对话框。函数：PrintDlg(lppd)</td></tr>
<tr><th colspan=4>文档类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>名称</td><td>lpszDocName</td><td>整数</td><td>指向指定文档名称的字符串</td></tr>
<tr><td>输出</td><td>lpszOutput</td><td>整数</td><td>指向指定输出文件名称的字符串</td></tr>
<tr><td>数据</td><td>lpszDatatype</td><td>整数</td><td>指定用于记录打印作业的数据类型(已忽略)</td></tr>
<tr><td>其它</td><td>fwType</td><td>整数</td><td>指定有关打印作业的其他信息。(已忽略)</td></tr>
<tr><td>设置模板</td><td>hPageSetupTemplate</td><td>整数</td><td>包含对话框模板的内存对象的句柄</td></tr>
</table><a name="设备环境类">设备环境类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>设备环境类</td><td>DEVMODEA</td><td>156</td><td>包含有关打印机或显示设备的初始化和环境的信息。</td></tr>
<tr><th colspan=4>设备环境类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>名称</td><td>dmDeviceName[32]</td><td>文本</td><td>以零结尾的字符数组，指定打印机或显示器的“友好”名称;</td></tr>
<tr><td>规范</td><td>dmSpecVersion</td><td>整形</td><td>初始化数据规范的版本号。DM_SPECVERSION</td></tr>
<tr><td>版本</td><td>dmDriverVersion</td><td>整形</td><td>驱动程序开发人员分配的驱动程序版本号。</td></tr>
<tr><td>大小</td><td>dmSize</td><td>整形</td><td>结构的大小（以字节为单位）</td></tr>
<tr><td>字数</td><td>dmDriverExtra</td><td>整形</td><td>包含遵循此结构的专用驱动程序数据的字节数。</td></tr>
<tr><td>标志</td><td>dmFields</td><td>整数</td><td>指定结构的某些成员是否已初始化。</td></tr>
<tr><td>方向</td><td>dmOrientation</td><td>整形</td><td>仅对于打印机设备，选择纸张的方向(1肖像,2风景)。标志:1</td></tr>
<tr><td>尺寸</td><td>dmPaperSize</td><td>整形</td><td>仅对于打印机设备，选择要打印的<a href="#纸张大小">纸张大小</a>。标志:2</td></tr>
<tr><td>长度</td><td>dmPaperLength</td><td>整形</td><td>替代 大小 成员指定的纸张长度，以十分之一毫米为单位。标志:4</td></tr>
<tr><td>纸宽</td><td>dmPaperWidth</td><td>整形</td><td>覆盖大小成员指定的纸张宽度。标志:8</td></tr>
<tr><td>缩放</td><td>dmScale</td><td>整形</td><td>指定缩放打印输出所依据的因子。标志:0x10</td></tr>
<tr><td>份数</td><td>dmCopies</td><td>整形</td><td>如果设备支持多页副本，则选择打印的份数。标志:0x100</td></tr>
<tr><td>来源</td><td>dmDefaultSource</td><td>整形</td><td>指定纸张来源。标志:0x200</td></tr>
<tr><td>分辨</td><td>dmPrintQuality</td><td>整形</td><td>指定打印机分辨率(DPI)。标志:0x400</td></tr>
<tr><td></td><td>dmPosition</td><td>坐标类</td><td>显示设备在桌面区域中的位置坐标。标志:0x20</td></tr>
<tr><td></td><td>dmDisplayOrientation</td><td>整数</td><td>表示应呈现图像的方向:0默认,1旋转90度,2旋转180度,3旋转270度。标志:0x80</td></tr>
<tr><td></td><td>dmDisplayFixedOutput</td><td>整数</td><td>仅对于固定分辨率的显示设备:。标志:0x20000000</td></tr>
<tr><td>颜色</td><td>dmColor</td><td>整形</td><td>在彩色打印机上切换彩色2和单色1。标志:0x800</td></tr>
<tr><td>双工</td><td>dmDuplex</td><td>整形</td><td>1普通打印,2长边绑定垂直,3短边绑定长边水平。标志:0x1000</td></tr>
<tr><td>纸高</td><td>dmYResolution</td><td>整形</td><td>指定打印机的 y 分辨率（英寸为单位）。标志:0x2000</td></tr>
<tr><td>字体</td><td>dmTTOption</td><td>整形</td><td>打印字体:1打印为图形,2下载为软字体,3替换为TT字体,4下载为大纲软字体。标志:0x4000</td></tr>
<tr><td>排序</td><td>dmCollate</td><td>整形</td><td>排序规则:0不排序,1排序。标志:0x8000</td></tr>
<tr><td>窗名</td><td>dmFormName[32]</td><td>文本</td><td>指定要使用的窗体的名称。标志:0x10000</td></tr>
<tr><td>英寸</td><td>dmLogPixels</td><td>整形</td><td>每个逻辑英寸的像素数。标志:0x20000</td></tr>
<tr><td>位色</td><td>dmBitsPerPel</td><td>整数</td><td>指定显示设备的颜色分辨率，4位16色，8位256色，16位65536色。标志:0x40000</td></tr>
<tr><td>像宽</td><td>dmPelsWidth</td><td>整数</td><td>指定可见设备图面的宽度（以像素为单位）。 标志:0x80000</td></tr>
<tr><td>像高</td><td>dmPelsHeight</td><td>整数</td><td>指定可见设备图面的高度（以像素为单位）。标志:0x100000</td></tr>
<tr><td>模式</td><td>dmDisplayFlags</td><td>整数</td><td>指定设备的显示模式:1灰色,2交错显示。标志:0x200000</td></tr>
<tr><td>频率</td><td>dmDisplayFrequency</td><td>整数</td><td>指定特定模式下显示设备的频率。标志:0x400000</td></tr>
<tr><td>处理</td><td>dmICMMethod</td><td>整数</td><td>指定如何处理ICM:1禁用,2系统处理,3驱动处理,4设备处理。标志:0x800000</td></tr>
<tr><td>匹配</td><td>dmICMIntent</td><td>整数</td><td>指定颜色匹配方法或意向:1饱和度优化,2对比度优化,3确切颜色匹配,4绝对颜色匹配。标志:0x1000000</td></tr>
<tr><td>媒体</td><td>dmMediaType</td><td>整数</td><td>指定要打印的媒体的类型:1普通纸,2透明膜,3光泽纸。标志:0x2000000</td></tr>
<tr><td>抖动</td><td>dmDitherType</td><td>整数</td><td>指定如何执行抖动:1无,2粗笔抖,3细笔抖,4线条艺术抖,10灰色缩放。标志:0x4000000</td></tr>
<tr><td>预</td><td>dmReserved1</td><td>整数</td><td>未使用;必须为零。</td></tr>
<tr><td>留</td><td>dmReserved2</td><td>整数</td><td>未使用;必须为零。</td></tr>
<tr><td>景宽</td><td>dmPanningWidth</td><td>整数</td><td>此成员必须为零。标志:0x8000000</td></tr>
<tr><td>景高</td><td>dmPanningHeight</td><td>整数</td><td>此成员必须为零。标志:0x10000000</td></tr>
</table><a name="纸张大小">纸张大小</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DMPAPER_LETTER</td><td>1</td><td>字母，8 1/2- by 11 英寸</td></tr>
<tr><td>DMPAPER_LETTERSMALL</td><td>2</td><td>小写字母，8 1/2- by 11 英寸</td></tr>
<tr><td>DMPAPER_TABLOID</td><td>3</td><td>小报，11- 乘 17 英寸</td></tr>
<tr><td>DMPAPER_LEDGER</td><td>4</td><td>账本，17 by 11 英寸</td></tr>
<tr><td>DMPAPER_LEGAL</td><td>5</td><td>法律，8 1/2- by 14 英寸</td></tr>
<tr><td>DMPAPER_STATEMENT</td><td>6</td><td>语句，5 1/2- by 8 1/2 英寸</td></tr>
<tr><td>DMPAPER_EXECUTIVE</td><td>7</td><td>行政， 7 1/4- by 10 1/2 英寸</td></tr>
<tr><td>DMPAPER_A3</td><td>8</td><td>A3 工作表，297- by 420 毫米</td></tr>
<tr><td>DMPAPER_A4</td><td>9</td><td>A4 工作表，210- by 297 毫米</td></tr>
<tr><td>DMPAPER_A4SMALL</td><td>10</td><td>A4 小纸，210 by 297 毫米</td></tr>
<tr><td>DMPAPER_A5</td><td>11</td><td>A5 工作表，148- by 210 毫米</td></tr>
<tr><td>DMPAPER_B4</td><td>12</td><td>B4 工作表，250- by 354 毫米</td></tr>
<tr><td>DMPAPER_B5</td><td>13</td><td>B5 工作表，182- by 257 毫米纸</td></tr>
<tr><td>DMPAPER_FOLIO</td><td>14</td><td>Folio， 8 1/2- by 13 英寸纸</td></tr>
<tr><td>DMPAPER_QUARTO</td><td>15</td><td>Quarto，215 by 275 毫米纸</td></tr>
<tr><td>DMPAPER_10X14</td><td>16</td><td>10- 14 英寸工作表</td></tr>
<tr><td>DMPAPER_11X17</td><td>17</td><td>11- by 17 英寸工作表</td></tr>
<tr><td>DMPAPER_NOTE</td><td>18</td><td>注意，8 1/2- by 11 英寸</td></tr>
<tr><td>DMPAPER_ENV_9</td><td>19</td><td>#9 信封，3 7/8- by 8 7/8 英寸</td></tr>
<tr><td>DMPAPER_ENV_10</td><td>20</td><td>#10 信封，4 1/8- by 9 1/2 英寸</td></tr>
<tr><td>DMPAPER_ENV_11</td><td>21</td><td>#11 信封，4 1/2- by 10 3/8 英寸</td></tr>
<tr><td>DMPAPER_ENV_12</td><td>22</td><td>#12 信封，4 3/4- by 11 英寸</td></tr>
<tr><td>DMPAPER_ENV_14</td><td>23</td><td>#14 信封，5- by 11 1/2 英寸</td></tr>
<tr><td>DMPAPER_CSHEET</td><td>24</td><td>C 工作表，17- by 22 英寸</td></tr>
<tr><td>DMPAPER_DSHEET</td><td>25</td><td>D 工作表，22 by 34 英寸</td></tr>
<tr><td>DMPAPER_ESHEET</td><td>26</td><td>E 工作表，34 by 44 英寸</td></tr>
<tr><td>DMPAPER_ENV_DL</td><td>27</td><td>DL 信封，110- by 220 毫米</td></tr>
<tr><td>DMPAPER_ENV_C5</td><td>28</td><td>C5 信封，162- by 229 毫米</td></tr>
<tr><td>DMPAPER_ENV_C3</td><td>29</td><td>C3 信封，324 by 458 毫米</td></tr>
<tr><td>DMPAPER_ENV_C4</td><td>30</td><td>C4 信封，229- by 324 毫米</td></tr>
<tr><td>DMPAPER_ENV_C6</td><td>31</td><td>C6 信封，114- by 162 毫米</td></tr>
<tr><td>DMPAPER_ENV_C65</td><td>32</td><td>C65 信封，114 by 229 毫米</td></tr>
<tr><td>DMPAPER_ENV_B4</td><td>33</td><td>B4 信封，250- by 353 毫米</td></tr>
<tr><td>DMPAPER_ENV_B5</td><td>34</td><td>B5 信封，176- by 250 毫米</td></tr>
<tr><td>DMPAPER_ENV_B6</td><td>35</td><td>B6 信封，176- by 125 毫米</td></tr>
<tr><td>DMPAPER_ENV_ITALY</td><td>36</td><td>意大利信封，110- by 230 毫米</td></tr>
<tr><td>DMPAPER_ENV_MONARCH</td><td>37</td><td>君主信封， 3 7/8- by 7 1/2 英寸</td></tr>
<tr><td>DMPAPER_ENV_PERSONAL</td><td>38</td><td>6 3/4 信封，3 5/8- by 6 1/2 英寸</td></tr>
<tr><td>DMPAPER_FANFOLD_US</td><td>39</td><td>US Std Fanfold， 14 7/8- by 11 英寸</td></tr>
<tr><td>DMPAPER_FANFOLD_STD_GERMAN</td><td>40</td><td>德国 Std Fanfold， 8 1/2- by 12 英寸</td></tr>
<tr><td>DMPAPER_FANFOLD_LGL_GERMAN</td><td>41</td><td>德国法律范福尔德， 8 - by 13 英寸</td></tr>
<tr><td>DMPAPER_ISO_B4</td><td>42</td><td>B4 (ISO) 250- by 353 毫米纸张</td></tr>
<tr><td>DMPAPER_JAPANESE_POSTCARD</td><td>43</td><td>日本明信片，100-by 148 毫米</td></tr>
<tr><td>DMPAPER_9X11</td><td>44</td><td>9- by 11 英寸工作表</td></tr>
<tr><td>DMPAPER_10X11</td><td>45</td><td>10- 11 英寸工作表</td></tr>
<tr><td>DMPAPER_15X11</td><td>46</td><td>15- by 11 英寸工作表</td></tr>
<tr><td>DMPAPER_ENV_INVITE</td><td>47</td><td>信封邀请 220 x 220 mm</td></tr>
<tr><td>DMPAPER_RESERVED_48</td><td>48</td><td>预留--请勿使用</td></tr>
<tr><td>DMPAPER_RESERVED_49</td><td>49</td><td>预留--请勿使用</td></tr>
<tr><td>DMPAPER_LETTER_EXTRA</td><td>50</td><td>字母额外 9 1/2 x 12 英寸。</td></tr>
<tr><td>DMPAPER_LEGAL_EXTRA</td><td>51</td><td>法定额外 9 1/2 x 15 英寸。</td></tr>
<tr><td>DMPAPER_TABLOID_EXTRA</td><td>52</td><td>小报，11.69 x 18 英寸</td></tr>
<tr><td>DMPAPER_A4_EXTRA</td><td>53</td><td>A4 工作表，9.27 x 12.69 英寸</td></tr>
<tr><td>DMPAPER_LETTER_TRANSVERSE</td><td>54</td><td>字母横向 8 1/2 x 11 英寸</td></tr>
<tr><td>DMPAPER_A4_TRANSVERSE</td><td>55</td><td>A4 横向 210 x 297 毫米</td></tr>
<tr><td>DMPAPER_LETTER_EXTRA_TRANSVERSE</td><td>56</td><td>字母额外横向 9 1/2 x 12 英寸。</td></tr>
<tr><td>DMPAPER_A_PLUS</td><td>57</td><td>SuperA/A4 227 x 356 毫米</td></tr>
<tr><td>DMPAPER_B_PLUS</td><td>58</td><td>SuperB/A3 305 x 487 毫米</td></tr>
<tr><td>DMPAPER_LETTER_PLUS</td><td>59</td><td>美国字母加号 8.5 x 12.69 in</td></tr>
<tr><td>DMPAPER_A4_PLUS</td><td>60</td><td>A4 Plus 210 x 330 毫米</td></tr>
<tr><td>DMPAPER_A5_TRANSVERSE</td><td>61</td><td>A5 横向 148 x 210 毫米</td></tr>
<tr><td>DMPAPER_B5_TRANSVERSE</td><td>62</td><td>B5 (JIS) 横向 182 x 257 mm</td></tr>
<tr><td>DMPAPER_A3_EXTRA</td><td>63</td><td>A3 额外 322 x 445 毫米</td></tr>
<tr><td>DMPAPER_A5_EXTRA</td><td>64</td><td>A5 额外 174 x 235 毫米</td></tr>
<tr><td>DMPAPER_B5_EXTRA</td><td>65</td><td>B5 (ISO) 额外 201 x 276 毫米</td></tr>
<tr><td>DMPAPER_A2</td><td>66</td><td>A2 工作表，420 x 594 毫米</td></tr>
<tr><td>DMPAPER_A3_TRANSVERSE</td><td>67</td><td>A3 横向 297 x 420 mm</td></tr>
<tr><td>DMPAPER_A3_EXTRA_TRANSVERSE</td><td>68</td><td>A3 额外横向 322 x 445 毫米</td></tr>
<tr><td>DMPAPER_DBL_JAPANESE_POSTCARD</td><td>69</td><td>双日明信片，200 by 148 毫米</td></tr>
<tr><td>DMPAPER_A6</td><td>70</td><td>A6 工作表，105- 乘 148 毫米</td></tr>
<tr><td>DMPAPER_JENV_KAKU2</td><td>71</td><td>日语信封 Kaku #2</td></tr>
<tr><td>DMPAPER_JENV_KAKU3</td><td>72</td><td>日语信封 Kaku #3</td></tr>
<tr><td>DMPAPER_JENV_CHOU3</td><td>73</td><td>日语信封周 #3</td></tr>
<tr><td>DMPAPER_JENV_CHOU4</td><td>74</td><td>日语信封 Chou #4</td></tr>
<tr><td>DMPAPER_LETTER_ROTATED</td><td>75</td><td>字母旋转 11 by 8 1/2 英寸</td></tr>
<tr><td>DMPAPER_A3_ROTATED</td><td>76</td><td>A3 旋转纸，420 乘 297 毫米</td></tr>
<tr><td>DMPAPER_A4_ROTATED</td><td>77</td><td>A4 旋转纸，297 乘 210 毫米</td></tr>
<tr><td>DMPAPER_A5_ROTATED</td><td>78</td><td>A5 旋转纸，210 乘 148 毫米</td></tr>
<tr><td>DMPAPER_B4_JIS_ROTATED</td><td>79</td><td>B4 (JIS) 旋转工作表，364 乘 257 毫米</td></tr>
<tr><td>DMPAPER_B5_JIS_ROTATED</td><td>80</td><td>B5 (JIS) 旋转工作表，257 乘 182 毫米</td></tr>
<tr><td>DMPAPER_JAPANESE_POSTCARD_ROTATED</td><td>81</td><td>日本明信片旋转，148 乘 100 毫米</td></tr>
<tr><td>DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED</td><td>82</td><td>双日本明信片旋转，148 乘 200 毫米</td></tr>
<tr><td>DMPAPER_A6_ROTATED</td><td>83</td><td>A6 旋转纸，148 乘 105 毫米</td></tr>
<tr><td>DMPAPER_JENV_KAKU2_ROTATED</td><td>84</td><td>日语信封 Kaku #2 旋转</td></tr>
<tr><td>DMPAPER_JENV_KAKU3_ROTATED</td><td>85</td><td>日语信封 Kaku #3 旋转</td></tr>
<tr><td>DMPAPER_JENV_CHOU3_ROTATED</td><td>86</td><td>日本信封 Chou #3 旋转</td></tr>
<tr><td>DMPAPER_JENV_CHOU4_ROTATED</td><td>87</td><td>日本信封周 #4 旋转</td></tr>
<tr><td>DMPAPER_B6_JIS</td><td>88</td><td>B6 (JIS) 纸，128 乘 182 毫米</td></tr>
<tr><td>DMPAPER_B6_JIS_ROTATED</td><td>89</td><td>B6 (JIS) 旋转工作表，182 乘 128 毫米</td></tr>
<tr><td>DMPAPER_12X11</td><td>90</td><td>12- by 11 英寸工作表</td></tr>
<tr><td>DMPAPER_JENV_YOU4</td><td>91</td><td>日语信封 You #4</td></tr>
<tr><td>DMPAPER_JENV_YOU4_ROTATED</td><td>92</td><td>日语信封你 #4 旋转</td></tr>
<tr><td>DMPAPER_P16K</td><td>93</td><td>中国 16K，146- by 215 毫米</td></tr>
<tr><td>DMPAPER_P32K</td><td>94</td><td>中国 32K，97- by 151 毫米</td></tr>
<tr><td>DMPAPER_P32KBIG</td><td>95</td><td>中国 32K (大) 97- 乘 151 毫米</td></tr>
<tr><td>DMPAPER_PENV_1</td><td>96</td><td>中国信封 #1， 102- by 165 毫米</td></tr>
<tr><td>DMPAPER_PENV_2</td><td>97</td><td>中国信封 #2， 102- by 176 毫米</td></tr>
<tr><td>DMPAPER_PENV_3</td><td>98</td><td>中国信封 #3， 125- by 176 毫米</td></tr>
<tr><td>DMPAPER_PENV_4</td><td>99</td><td>中国信封 #4， 110- by 208 毫米</td></tr>
<tr><td>DMPAPER_PENV_5</td><td>100</td><td>中国信封 #5， 110- by 220 毫米</td></tr>
<tr><td>DMPAPER_PENV_6</td><td>101</td><td>中国信封 #6， 120- by 230 毫米</td></tr>
<tr><td>DMPAPER_PENV_7</td><td>102</td><td>中国信封 #7， 160- by 230 毫米</td></tr>
<tr><td>DMPAPER_PENV_8</td><td>103</td><td>中国信封 #8，120- x 309 毫米</td></tr>
<tr><td>DMPAPER_PENV_9</td><td>104</td><td>中国信封 #9，229- x 324 毫米</td></tr>
<tr><td>DMPAPER_PENV_10</td><td>105</td><td>中国信封 #10，324- x 458 毫米</td></tr>
<tr><td>DMPAPER_P16K_ROTATED</td><td>106</td><td>中国 16K 旋转，215 by 146 毫米</td></tr>
<tr><td>DMPAPER_P32K_ROTATED</td><td>107</td><td>中国 32K 旋转，151 乘 97 毫米</td></tr>
<tr><td>DMPAPER_P32KBIG_ROTATED</td><td>108</td><td>中国 32K (大) 旋转，151- by 97 毫米</td></tr>
<tr><td>DMPAPER_PENV_1_ROTATED</td><td>109</td><td>中国信封 #1 旋转，165- x 102 毫米</td></tr>
<tr><td>DMPAPER_PENV_2_ROTATED</td><td>110</td><td>中国信封 #2 旋转，176- x 102 毫米</td></tr>
<tr><td>DMPAPER_PENV_3_ROTATED</td><td>111</td><td>中国信封 #3 旋转，176- x 125 毫米</td></tr>
<tr><td>DMPAPER_PENV_4_ROTATED</td><td>112</td><td>中国信封 #4 旋转， 208- by 110 毫米</td></tr>
<tr><td>DMPAPER_PENV_5_ROTATED</td><td>113</td><td>中国信封 #5 旋转， 220- x 110 毫米</td></tr>
<tr><td>DMPAPER_PENV_6_ROTATED</td><td>114</td><td>中国信封 #6 旋转， 230- by 120 毫米</td></tr>
<tr><td>DMPAPER_PENV_7_ROTATED</td><td>115</td><td>中国信封 #7 旋转，230- x 160 毫米</td></tr>
<tr><td>DMPAPER_PENV_8_ROTATED</td><td>116</td><td>中国信封 #8 旋转，309- x 120 毫米</td></tr>
<tr><td>DMPAPER_PENV_9_ROTATED</td><td>117</td><td>中国信封 #9 旋转，324 x 229 毫米</td></tr>
<tr><td>DMPAPER_PENV_10_ROTATED</td><td>118</td><td>中国信封 #10 旋转，458- x 324 毫米</td></tr>
</table><a name="打印框回调对象">打印框回调对象</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>作用解释</td></tr>
<tr><td>打印框回调对象</td><td>IPrintDialogCallback</td><td>提供使应用程序能够在显示打印属性表时从 打印选框 函数接收通知和消息的方法。</td></tr>
<tr><th colspan=3>打印框回调对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>InitDone</td><td>初始化</td><td>当系统完成初始化“打印属性表”的“常规”页时，由 打印选框 调用。</td></tr>
<tr><td>SelectionChange</td><td>已选</td><td>从“打印属性表”的“常规”页上的已安装打印机列表中选择其他打印机时。</td></tr>
<tr><td>HandleMessage</td><td>处理(窗口,消息,参数,数据,结果)</td><td>处理发送到“打印属性表”常规“页下半部分中子对话框的消息。结果为真处理消息,为假不处理</td></tr>
</table><a name="打印框服务对象">打印框服务对象</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>作用解释</td></tr>
<tr><td>打印框服务对象</td><td>IPrintDialogServices</td><td>供程序能够使用 打印选框 函数检索有关当前所选打印机的信息的方法。</td></tr>
<tr><th colspan=3>打印框服务对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetCurrentDevMode</td><td>信息(环境,@大小)</td><td>使用当前所选打印机的相关信息填充 DEVMODE 结构。</td></tr>
<tr><td>GetCurrentPrinterName</td><td>名称(内容,@大小)</td><td>检索当前所选打印机的名称</td></tr>
<tr><td>GetCurrentPortName</td><td>端口(内容,@大小)</td><td>检索要与 打印选框 一起使用的当前端口的名称。</td></tr>
</table>
<font size="6"><a name="模块">极语言模块类库</a></font><br>
开发使用：点击设置菜单-选择"编辑模块",打开设置选项的界面<br>
使用模块勾选模块列表里的项目即可<br>
选中项目,点击"编辑模块"按钮可以查看源代码<br>
开发模块点击"新建模块"按钮,输入模块名称<br>
然后在编辑器界面就可以开发模块了,模块里可以写类<br>
极语言更新的模块函数只有中文名称,英文仅作对照参考
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>用法示例</td><td>作用解释</td></tr>
<tr><td>定时器</td><td>Timer</td><td>定时器(窗体,编号,毫秒)</td><td>开启指定编号和毫秒的定时器，毫秒数为零关闭定时器。</td></tr>
<tr><td>定时器事件</td><td>TimerEvents</td><td>定时器事件(窗口,消息,编号,毫秒)</td><td>定时器回调的事件。</td></tr>
<tr><td>音乐播放</td><td>MusicPlay</td><td>音乐播放("命令")</td><td>.添加("文件名").开始(编号).暂停(1).停止(2)</td></tr>
<tr><td>数据.连接</td><td>DataConn</td><td>数据.连接(语句)</td><td>提交SQL连接语句建立数据库连接。</td></tr>
<tr><td>数据.执行</td><td>DataExec</td><td>数据.执行(语句)</td><td>提交SQL执行语句读取写入数据库。</td></tr>
<tr><td>数据.读取</td><td>DataRead</td><td>数据.读取(语句)</td><td>提交SQL查询语句返回结果数或更新的行数。</td></tr>
<tr><td>数据.读表</td><td>DataTable</td><td>数据.读表(表名)</td><td>提交数据库表名读取全表并返回行数。</td></tr>
<tr><td>数据.写入</td><td>DataWrite</td><td>数据.写入(语句)</td><td>提交SQL执行语句读取写入数据库。</td></tr>
<tr><td>数据.释放</td><td>DataFree</td><td>数据.释放</td><td>释放已打开的数据库表。</td></tr>
<tr><td>数据.关闭</td><td>DataClose</td><td>数据.关闭</td><td>关闭数据库连接。</td></tr>
<tr><td>调用对象</td><td>callobject</td><td>调用对象(名称,方式,参数,数据)</td><td>访问新建对象的属性和方法，方式：1方法;2属性读;3属性写;4参照赋值；参数为DISPPARAMS结构,数据为Variant结构</td></tr>
<tr><td>集合</td><td>Collection</td><td>集合</td><td>集合类，添加(键值)：不重复的编号键；取值：获取一个键值并删除；取键(键值)：获取编号键值的序号，判断是否存在。</td></tr>
<tr><td>容器类</td><td>Dictionary</td><td>容器类</td><td>初始化；添加(键值,数值)：添加键值对，也可修改；取值(键值)：获取键对应数值；查值(数值)：通过值查询键；取键(键值)：获取键的序号；删除(键值)：删除指定键</td></tr>
<tr><td>进程信息</td><td>NtQueryInformationProcess</td><td>进程信息(进程,类别,数据,长度,大小)</td><td>检索有关指定进程的信息。</td></tr>
<tr><td>网络消息</td><td>NetworkMessages</td><td>网络消息{网络事件(参数,数据)}</td><td>网络通讯模块的自定义消息事件</td></tr>
<tr><td>网络窗口</td><td>NetworkWindow</td><td>网络窗口(窗体)</td><td>网络通讯模块的初始化网络并指定窗口</td></tr>
<tr><td>网络连接</td><td>NetworkConnection</td><td>网络连接(网址,端口)</td><td>网址为0是监听端口，指定IP地址是连接网络</td></tr>
<tr><td>网络数据</td><td>NetworkData</td><td>网络数据(网口)</td><td>网络数据到来或连接成功时触发，从网络接口获取数据</td></tr>
<tr><td>网络断开</td><td>NetworkClose</td><td>网络断开(网口)</td><td>网络接口断开时触发的事件</td></tr>
<tr><td>设置网络</td><td>SetTcpEntry</td><td>设置网络(数据)</td><td>设置 TCP 连接的状态</td></tr>
<tr><td>网卡信息</td><td>GetAdaptersInfo</td><td>网卡信息(数据,长度)</td><td>检索本地计算机的适配器信息。</td></tr>
<tr><td>网络列表</td><td>GetExtendedTcpTable</td><td>网络列表(数据,长度,排序,版本,类别,0)</td><td>检索包含应用程序可用的 TCP 终结点列表的表。</td></tr>
<tr><td>导入列表</td><td>ImageDirectoryEntryToData</td><td>导入列表(基址,映像,索引,大小)</td><td>获取对特定于图像的数据的访问权限。</td></tr>
<tr><td>哈希加密</td><td>CryptHash</td><td>哈希加密(数据,长度,算法)</td><td>常用算法:MD2=$8001;MD4=$8002;MD5=$8003;SHA1=$8004;MAC=$8005;SHA256=$800C;SHA512=$800E;</td></tr>
<tr><td>编码转换</td><td>CodePage</td><td>编码转换(数据,65001,936)</td><td>文字编码相互转换，UTF-8=65001；GBK=936；BIG5=950；日文=932；韩文=949；泰文=874</td></tr>
<tr><td>分割文字</td><td>split</td><td>分割文字(内容,符号,@数组)</td><td>返回分割后数组的长度，动态数组使用名称.指针，固定数组使用@</td></tr>
<tr><td>替换文字</td><td>Replace</td><td>替换文字(原文,查找,替换)</td><td>返回替换后的文字，替换英文区分大小写</td></tr>
<tr><td>替换文本</td><td>ReplaceI</td><td>替换文本(原文,查找,替换)</td><td>返回替换后的文字，替换英文不区分大小写</td></tr>
<tr><td>文件内容</td><td>filedata</td><td>文件内容(路径)</td><td>返回文件数据的地址（自行释放）；文件内容(路径,[长度])=数据内容</td></tr>
<tr><td>图像列表</td><td>ImageList</td><td>图像列表(数量,大小,格式)</td><td>格式：0=位图1图标2光标。添加指定数量和大小的图像到列表，默认从ICO_0.ico开始加载，数字依次递增；</td></tr>
<tr><td>公共事件</td><td>PublicEvents</td><td>公共事件(数据)</td><td>控件事件到来时,数据前三项为:窗口,编号,事件;-1=内存不足;-2=单击左键;-3=双击左键;-4=按下回车;-5右键单击;-6=右键双击;<br>-7=得到焦点;-8失去焦点;-15按下键盘;-18键入字符;-402树项改变</td></tr>
<tr><td>配置路径</td><td>inipath</td><td>配置路径(名称)</td><td>指定配置文件的名称，为空指定与程序同名的ini文件。</td></tr>
<tr><td>配置段名</td><td>inisn</td><td>配置段名</td><td>文本=配置段名；配置段名(段名)=内容：多条内容用0字符分割，末尾加0字符</td></tr>
<tr><td>配置结构</td><td>iniStruct</td><td>配置结构(段名,键名)</td><td>文本=配置结构(段名,键名);配置结构(段名,键名,大小)=内容</td></tr>
<tr><td>配置区段</td><td>iniSec</td><td>配置区段(段名)</td><td>文本=配置区段(段名)；获取区段的所有键名和内容</td></tr>
<tr><td>配置文字</td><td>iniString</td><td>配置文字(段名,键名)</td><td>文本=配置文字(段名,键名);配置文字(段名,键名)=内容</td></tr>
<tr><td>配置整数</td><td>iniint</td><td>配置整数(段名,键名)</td><td>数值=配置整数(段名,键名)；获取键值为数字（含十六进制）的数值</td></tr>
<tr><td>资源数据</td><td>ResData</td><td>资源数据(编号,@大小)</td><td>返回指定编号资源的数据，第二参数获得资源文件的大小</td></tr>
<tr><td>剪切板</td><td>Clipboard</td><td>剪切板</td><td>取剪切板可选参数[格式]，写剪切板三个参数(数据,[长度],[格式])。格式:1文本;2位图;3图元;4符号连接;5交换数据;6标签图像;<br>7OEM文本;8DIB位图;9调色板;10手写笔;11复杂音频;12标准音频;13宽字符;14增强图元;15文件列表</td></tr>
<tr><td>检验开启</td><td>CRCLoad</td><td>检验开启</td><td>crc32校验初始化数据</td></tr>
<tr><td>检验数据</td><td>CRCData</td><td>检验数据(数据,长度)</td><td>crc32校验数据,返回检验结果</td></tr>
<tr><td>格式转换</td><td>BinaryToString</td><td>格式转换(数据,长度,格式)</td><td>二进制转文本，返回转换文本地址。格式:0=Base64含证书标头;1=Base64不含标头;2=纯二进制副本;<br>3=Base64包含请求标头;4=仅十六进制;5=十六进制带ASCII字符;11=十六进制带ASCII和地址</td></tr>
<tr><td>转换格式</td><td>StringToBinary</td><td>转换格式(数据,标志)</td><td>文本转二进制，返回二进制数据地址。格式:1=Base64不含标头;2=纯二进制副本;3=Base64包含标头;<br>4=仅十六进制;5=十六进制带ASCII字符;9=Base64带CRL标头;10=十六进制带地址;11=十六进制带ASCII和地址</td></tr>
<tr><td>路径存在</td><td>PathFileExistsA</td><td>路径存在(路径)</td><td>判断目标路径（文件或目录）是否存在</td></tr>
<tr><td>复制文本</td><td>StrDupA</td><td>复制文本(内容)</td><td>复制字符串。</td></tr>
<tr><td>转换整数</td><td>StrToIntA</td><td>转换整数("123")</td><td>将表示十进制值的字符串转换为整数。</td></tr>
<tr><td>转整数值</td><td>StrToIntExA</td><td>转整数值(内容,格式,@数值)</td><td>将表示十进制或十六进制数的字符串转换为整数。格式:0十进制,1十/16进制(加0x)</td></tr>
<tr><td>去首尾字</td><td>StrTrimA</td><td>去首尾字(内容,文字)</td><td>从字符串中删除指定的前导字符和尾随字符。</td></tr>
</table><font color="#0000FF"><a name="文件系统">内核对象</a>——本地文件系统</font><br>
文件系统使应用程序能够在存储设备上存储和检索文件。 文件放置在分层结构中。 文件系统指定文件的命名约定和用于指定树结构中文件路径的格式。<br>
每个文件系统由一个或多个驱动程序和动态链接库组成，用于定义文件系统的数据格式和功能。<br>
文件系统可以存在于许多不同类型的存储设备上，包括硬盘、自动存储盒、可移动光盘、磁带备份单元和内存卡。<br>
<pre>
Windows 支持的所有文件系统都具有以下存储组件：

卷。 卷是目录和文件的集合。
目录。 目录是目录和文件的分层集合。
文件存储。 文件是相关数据的逻辑分组。
</pre><h2>目录管理</h2>
目录是目录和文件的分层集合。 单个目录中可包含的文件数的唯一限制是目录所在的磁盘的物理大小。<br>
包含一个或多个目录的目录是包含目录的 父 目录，每个包含目录都是父目录的 子 目录。 目录的分层结构称为 目录树。<br>

NTFS文件系统实现目录与它作为目录 条目表包含的文件之间的逻辑链接。 将文件移动到目录中时，在表中创建条目并写入文件的名称。删除目录中包含的文件时，<br>
也会从表中删除与已删除文件对应的名称和条目。 一个目录项表中可以存在单个文件的多个条目。 如果在表中为文件创建了其他条目，该条目称为指向该文件的 硬链接 。<br>
 可以为单个文件创建的硬链接数量没有限制。目录还可以包含交汇点和重新分析点。<br>
 <h2>创建和删除目录</h2>
 应用程序可以编程方式创建和删除目录。<br>

若要创建新目录，请使用 创建目录、 仿建目录 或 事务目录 函数。 目录在创建时为其指定的名称。 命名目录的约定遵循命名文件的约定。 有关这些约定的说明，请参阅 命名文件。<br>

若要删除现有目录，请使用 删除目录 或 移除目录 函数。 在删除目录之前，必须确保目录为空，并且你具有该目录的删除访问权限。 若要执行后者，请调用 取安全符 函数。<br>
<h2>目录句柄</h2>
每当进程创建或打开目录对象时，它都会收到该对象的句柄。若要获取现有目录的句柄，请使用 0x02000000 标志调用 创建文件 函数。可以将目录句柄传递给以下函数。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>函数</td><td>说明</td></tr>
<tr><td>备份读取</td><td>备份文件或目录，包括安全信息。</td></tr>
<tr><td>备份查找</td><td>在最初使用 备份读取 或 备份写入 函数访问的数据流中向前查找。</td></tr>
<tr><td>备份写入</td><td>还原使用 备份读取 备份的文件或目录。</td></tr>
<tr><td>开件属性</td><td>检索指定文件的文件信息。</td></tr>
<tr><td>文件大小</td><td>检索指定文件的大小（以字节为单位）。</td></tr>
<tr><td>文件日期</td><td>检索创建文件或目录、上次访问和上次修改的日期和时间。</td></tr>
<tr><td>文件类型</td><td>检索指定文件的文件类型。</td></tr>
<tr><td>目录变更</td><td>检索描述指定目录中的更改的信息。</td></tr>
<tr><td>文件改时</td><td>设置指定的文件或目录的创建、上次访问或上次修改的日期和时间。</td></tr>
</table>
<h2>重分析点</h2>
文件或目录可以包含 重新分析点，这是用户定义的数据的集合。 存储数据的应用程序和安装用于解释数据和处理文件的文件系统筛选器可以理解此数据的格式。<br>
当应用程序设置重新分析点时，它将存储此数据，以及一个 重新分析标记，该标记唯一标识它正在存储的数据。当文件系统打开具有重分析点的文件时，它会尝试查找与重新分析<br>
标记标识的数据格式关联的文件系统筛选器。如果找到文件系统筛选器，筛选器将按照重分析数据的指示处理文件。如果未找到文件系统筛选器，则文件打开操作将失败。<br>

例如，重新分析点用于实现 NTFS 文件系统链接和微软远程存储服务器 (RSS) 。 RSS 使用管理员定义的一组规则将不常使用的文件移动到长期存储，例如磁带或光学介质。<br>
它使用重新分析点在文件系统中存储有关文件的信息。 此信息存储在存根文件中，该文件包含一个重分析点，其数据指向实际文件现在所在的设备。 <br>

文件系统筛选器可以使用此信息来检索文件。重分析点还用于实现装载的文件夹。
<pre>
以下限制适用于重新分析点：
可以为目录建立重分析点，但目录必须为空。 否则，NTFS 文件系统无法建立重新分析点。 此外，不能在包含重分析点的目录中创建目录或文件。
重分析点和扩展属性是互斥的。 当文件包含扩展属性时，NTFS 文件系统无法创建重新分析点，并且不能在包含重新分析点的文件上创建扩展属性。
重分析点数据（包括 标记和可选 GUID）不能超过 16 KB。 如果要放置在重分析点中的数据量超过此限制，则设置重分析点将失败。
任何给定路径上的重分析点数限制为 63 个。

注意： 根据重分析点的长度，可以降低限制。 例如，如果重分析点以完全限定的路径为目标，则限制变为 31。
Windows Server 2003 和 Windows XP： 任何给定路径上的重分析点数限制为 31 个。
</pre>
<h2>重新分析点标记</h2>
每个重分析点都有一个标识符标记，以便可以有效地区分不同类型的重新分析点，而无需检查重新分析点中的用户定义的数据。系统使用一组预定义的标记和一系列为微软保留的标记。<br>
如果在设置重新分析点时使用任何保留标记，操作将失败。 这些范围中未包含的标记不是保留标记，可供应用程序使用。<br>

设置重新分析点时，必须标记要放置在重分析点中的数据。 建立重分析点后，如果新数据的标记与现有数据的标记不匹配，则新的设置操作将失败。 如果标记匹配，则设置操作将覆盖现有的重新分析点。<br>

若要检索重新分析点标记，请使用 查找文件 函数。 如果 属性 成员包含 0x400 属性，则 预留1 成员指定重新分析点。<br>

<b>标记内容</b><br>
重分析标记存储为 DWORD 值。 位定义某些属性，如下图所示。
<pre><code>   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
  +-+-+-+-+-----------------------+-------------------------------+
  |M|R|N|R|     Reserved bits     |      Reparse tag value        |
  +-+-+-+-+-----------------------+-------------------------------+
</code></pre>
低 16 位确定重新分析点的类型。 高 16 位保留 12 位供将来使用，4 位表示标记的特定属性以及重新分析点表示的数据。下表描述了这些位。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>位</td><td>说明</td></tr>
<tr><td>M</td><td>微软 位。 如果设置了此位，则标记归 微软 所有。 所有其他标记必须对此位使用零。</td></tr>
<tr><td>R</td><td>保留;对于所有非 微软 标记，必须为零。</td></tr>
<tr><td>N</td><td>名称代理位。 如果设置了此位，则文件或目录表示系统中的另一个命名实体。</td></tr>
</table>
<h2>重新分析点和文件操作</h2>
若要确定文件系统是否支持重新分析点，请调用 取卷信息 函数并检查 0x80 位标志。<br>

使用 硬件控制 函数可以设置、修改、获取和删除重新分析点。 下表描述了可以使用 硬件控制 执行的重新分析点操作。<br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>操作</td><td>说明</td></tr>
<tr><td>FSCTL_SET_REPARSE_POINT</td><td>允许调用程序设置新的重新分析点，或修改现有的重新分析点。</td></tr>
<tr><td>FSCTL_GET_REPARSE_POINT</td><td>获取存储在现有重分析点中的信息。</td></tr>
<tr><td>FSCTL_DELETE_REPARSE_POINT</td><td>删除现有的重新分析点。</td></tr>
</table>
如果要修改、获取或删除重新分析点，则必须在文件中包含的操作中指定相同的重新分析标记。 否则，操作将失败。<br>
如果要修改或删除重新分析点，还必须在文件中包含的操作中指定重新分析 GUID 。 否则，操作将失败。<br>

若要确定文件或目录是否包含重新分析点，请使用 文件属性 函数。 如果文件或目录具有关联的重新分析点，则设置 0x400 属性。<br>

若要覆盖现有的重分析点，而没有文件或目录的句柄，请使用 0x400调用 创建文件。 无论相应的文件系统筛选器是否已安装并正常工作，此标志都允许打开文件。<br>
重新分析点 使文件系统行为不同于大多数 Windows 开发人员可能习惯的行为，因此在编写处理文件的应用程序时注意这些行为对于旨在访问支持重分析点的文件系统的可靠可靠应用程序至关重要。<br>
 这些注意事项的范围将取决于特定重新分析点的特定实现和关联的文件系统筛选器行为，这些行为可由用户定义。<br>

请考虑以下有关 NTFS 重新分析点实现的示例，其中包括装载的文件夹、链接文件和 微软 远程存储服务器：
<pre>
使用文件流的备份应用程序在使用重分析点备份文件时，应在 WIN32_STREAM_ID结构中指定8。
如果文件是重分析点，则使用 创建文件 函数的应用程序应在打开文件时指定 0x400 标志。
对 文件进行碎片整理 的过程需要对重新分析点进行特殊处理。
病毒检测应用程序应搜索指示链接文件的重新分析点。
大多数应用程序应对已移动到长期存储的文件采取特殊操作，前提是仅通知用户检索文件可能需要一段时间。
OpenFileById 函数将打开文件或重新分析点，具体取决于0x400标志的使用。
符号链接作为重分析点，具有特定于它们的某些 编程注意事项 。
使用 USN_RECORD和READ_USN_JOURNAL_DATA 结构时，用于读取更新序列号 (USN ) 更改日志记录的卷管理活动需要对重新分析点进行特殊处理。
</pre>
<h2>更改当前目录</h2>
活动路径末尾的目录称为当前目录;它是活动应用程序启动的目录，除非已显式更改。 应用程序可以通过调用 当前目录 函数来确定当前目录。<br>
有时需要使用 全路径名 函数来确保在应用程序需要时包含驱动器号。应用程序可以通过调用 修改目录 函数来更改当前目录。<br>

以下示例演示如何使用 当前目录 和 修改目录。<br>
<font color="#0000FF">文本 内容[64]</font>;//申请一个64字节长度的文本<br>
<font color="#0000FF">当前目录(64,内容)</font>;//把当前进程所在目录获取到内容变量,并指明长度为64<br>
<font color="#0000FF">修改目录("D:\Sec")</font>;//修改当前进程工作目录为D:\Sec<br>
<h2>列出目录中的文件</h2>
<font color="#0000FF">查找文件类 文件;</font>;//申请一个查找文件类的变量,名为文件<br>
<font color="#0000FF"><pre>程序段 遍历(目录)
	目录=查找文件(目录,文件)
	循环{
	发送消息(列表, 列表添加, 0,文件.名称)
	}(下个文件(目录,文件)=0)
	关闭查找(目录)
结束
</pre>
</font>//目录是程序段接收的目录地址参数<br>
查找文件时提交目录地址和查找文件类,返回查找文件的句柄对象,把它保存到目录这个参数变量里<br>
循环把文件.名称添加到列表框,直到下个文件返回结果为0时,停止循环<br>
最后关闭查找的句柄对象:目录<br>
<font color="#0000FF">程序段 按钮1_点击</font>;//在按钮事件里调用遍历目录的函数<br>
<font color="#0000FF">遍历("d:\sec\*.*")</font>;//遍历d:\sec\目录下的所有文件<br>
<font color="#0000FF">结束</font><br>
<h2>移动目录</h2>
若要将目录以及其中包含的文件和子目录移到另一个位置，请调用 文件复制、 传送文件 或 移动事务 函数。
传送文件 函数具有与 转移文件 相同的功能，只不过 传送文件 允许您指定一个回调例程来接收有关操作进度的通知。 移动事务 函数使你能够以事务处理操作的形式执行操作。

以下示例演示如何将 转移文件 函数与目录配合使用。
<font color="#0000FF">转移文件("d:\sec\code","d:\sec\源码",8)</font>;//把"d:\sec\code"里的文件移动到"d:\sec\源码"目录下<br>
这里使用标志为8,就是等待文件转移完成之后才返回<br>
<h2>获取目录更改通知</h2>
应用程序可以使用更改通知监视目录及其子目录的内容。 等待更改通知类似于对目录及其子目录（如有必要）挂起读取操作。 当正在监视的目录中发生更改时，读取操作将完成。<br>
例如，每当受监视目录内的文件名更改时，应用程序都可以使用这些函数来更新目录列表。<br>

应用程序可以使用 初改通知 函数指定触发更改通知的一组条件。 条件包括对文件名、目录名称、属性、文件大小、上次写入时间和安全性的更改。此函数还返回可以使用<a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/wait-functions">等待函数</a>的句柄。<br>
 如果满足等待条件，可以使用 次改通知 提供通知句柄来等待后续更改。 但是，这些函数并不指示满足等待条件的实际更改。使用 停改通知 关闭通知句柄。<br>
若要在通知中检索有关特定更改的信息，请使用 目录变更 函数。 此函数还可用于提供完成例程。若要跟踪卷上的更改，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/change-journals">更改日志</a>。<br>

以下示例监视目录树的目录名称更改。 它还监视目录的文件名更改。 该示例使用 初改通知 函数创建两个通知句柄，并使用 等多对象 函数来等待句柄。<br>
每当在树中创建或删除目录时，该示例都应更新整个目录树。 每当在目录中创建或删除文件时，本示例都应刷新目录。<br>
<font color="#0000FF">整数 结果,监视[2]</font>;//申请一个返回结果的整数和监视的数组<br>
<font color="#0000FF">监视[0]=初改通知("d:\sec\code\",假,1)</font>//监视目录中的文件创建和删除。含子目录为假,条件=1文件名更改<br>
<font color="#0000FF">监视[1]=初改通知("d:\sec\",真,2)</font>//观察子目录创建和删除。含子目录为真,条件=2目录名或子目录名更改<br>
<font color="#0000FF">循环{结果=等多对象(2,@监视,假,-1)</font>//等待两个对象,超时=-1是无限等待<br>
<font color="#0000FF">判断(结果)</font>//文件目录有变动就会返回结果<br>
<font color="#0000FF">为 0 次改通知(监视[0])</font>//已在目录中创建、重命名或删除文件。这里可以显示变更并重新启动通知<br>
<font color="#0000FF">为 1 次改通知(监视[1])</font>//已创建、重命名或删除目录。这里可以显示变更并重新启动通知<br>
<font color="#0000FF">否则 信息框(0,"超时或错误")</font>//其它结果可能是发生错误,值为0x102是超时<br>
<h2>文件管理</h2>
文件对象提供资源 (物理设备或位于物理设备上的资源表示形式，) 可由 I/O 系统管理。 与其他对象一样，它们支持共享资源，<br>
它们具有名称，它们受基于对象的安全性保护，并且支持同步。 I/O 系统还支持从资源读取或写入资源。<br>
<h2>文件和群集</h2>
文件是文件系统中用户可以访问和管理的数据单元。文件在其目录中必须具有唯一的名称。由字节流组成，包含一组相关数据，以及一组属性，用于描述文件或文件中的数据。<br> 

文件的创建时间是文件属性的一个示例。创建文件时，会创建一个未命名的默认流，以存储文件打开时写入该文件的所有数据。还可以在 文件中创建其他流。这些附加流称为备用流。<br> 
文件属性不存储在包含文件数据的数据流中，而是存储在其他位置并由操作系统管理。<br> 

所有文件系统数据（包括系统启动代码和目录）都由 NTFS 文件系统存储在文件中。 其他文件系统将此信息存储在文件系统外部的磁盘区域中。将此信息存储在文件中的一个优点是<br> 
Windows 可以轻松查找、访问和维护信息。 其他优点是，其中每个文件都可能受安全描述符的保护，在部分磁盘损坏的情况下，它们可能会快速重定位到磁盘的更安全部分。<br> 

所有受支持的文件系统的基本存储单元都是 群集，它是一组扇区。 这使文件系统可以独立于硬件磁盘控制器设置的磁盘扇区大小来优化磁盘数据的管理。<br> 
如果要管理的磁盘很大，并且在单个操作中移动和组织大量数据，管理员可以调整群集大小以适应这种情况。<br> 
<h2>文件流</h2>
流是字节序列。 在 NTFS 文件系统中，流包含写入文件的数据，它提供了比特性和属性更多的关于文件的信息。 例如，可以创建包含搜索关键字的流，或者创建文件的用户帐户的标识。<br> 
<pre>
与文件关联的每个流都有自己的分配大小、实际大小和有效数据长度：

分配大小是为流保留的磁盘空间量。
实际大小是调用方正在使用的字节数。
有效数据长度 (VDL) 是根据流的分配大小初始化的字节数。
</pre>每个流还维护自己的压缩、加密和稀疏状态。没有与流关联的文件时间。 当文件中的任何流更新时，文件的文件时间也会更新。<br> 

每个流维护机会锁。 每个流还维护共享模式。 当请求对文件的删除访问权限时，操作系统会检查文件中所有打开的流的删除访问权限。<br> 
如果另一个进程在没有 4 权限的情况下打开了一个流，则你无法打开该文件进行删除访问。<br> 

如果要复制的文件具有数据流，并且使用了网络重定向程序，则仅当客户端同时具有读取权限和读取属性权限时，才能复制该文件。<br> 
<b>流的命名约定</b><br> 
从 Windows shell 命令行指定时，流的全名是“文件名:流名称:流类型”，如下例所示：“myfile.dat:stream1:$DATA”。<br> 

对于文件名合法的任何字符对于流名称也是合法的，包括空格。 有关详细信息，请参阅命名文件。 流类型（也称为属性类型代码）在 NTFS 文件系统内部。<br> 
因此，用户无法创建新的流类型，但可以打开现有的 NTFS 文件系统类型。 流类型说明符值始终以美元符号 ($) 开头。 有关流类型的列表，请参阅下文。<br> 

默认情况下，默认数据流未命名。 要完全指定默认数据流，请使用“filename::$DATA”，其中 $DATA 是流类型。 这等效于“filename”。 你可以使用文件命名约定在文件中创建命名流。<br> 
请注意，“$DATA”是合法的流名称。 例如，名为“sample”的文件中名为“$DATA”的流的全名将是“sample:$DATA:$DATA”。如果在同一个文件上创建了一个名为“bar”的流，它的全名将是“sample:bar:$DATA”。<br> 

在创建和处理文件名为单字符的文件时，请在文件名前加上句点和反斜杠 (.)，或者使用完全限定的路径名。这样做的原因是 Windows 会将单字符文件名视为驱动器号。<br> 
当使用相对路径指定驱动器号时，驱动器号与路径之间用冒号分隔。 如果单字符名称是驱动器号还是文件名存在歧义，则如果冒号后面的字符串是有效路径，则 Windows 会假定它是驱动器号，即使驱动器号无效。<br> 
<h2>文件对象</h2>
文件对象 充当内核和用户模式进程与驻留在物理磁盘上的文件数据之间的逻辑接口。 文件对象包含写入文件的数据以及以下内核维护的属性集。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>信息类型</td><td>目的</td></tr>
<tr><td>文件名</td><td>命名相应的物理文件。</td></tr>
<tr><td>当前字节偏移量</td><td>本部分后面介绍的同步文件 I/O () 用于标识读取和写入操作的当前起始位置。</td></tr>
<tr><td>共享模式</td><td>指定当初始进程仍在访问文件时，第二个进程是否可以打开文件进行读取、写入或删除访问。</td></tr>
<tr><td>I/O 模式</td><td>指定初始进程是针对 同步 I/O 还是异步 I/O、缓存或未缓存的 I/O、顺序或随机 I/O 等打开文件。</td></tr>
<tr><td>指向设备对象的指针</td><td>标识文件数据所在的物理设备。</td></tr>
<tr><td>指向卷参数块或 VPB 的指针</td><td>标识文件数据所在的卷或分区。</td></tr>
<tr><td>指向节对象指针的指针</td><td>标识描述 映射文件的根结构。</td></tr>
<tr><td>指向专用缓存映射的指针</td><td>标识当前缓存的文件数据。</td></tr>
</table>
<h2>文件句柄</h2>
当某个进程使用 创建文件 函数打开文件时， 文件句柄 将与之关联，直到进程终止或使用 关闭对象 函数关闭句柄为止。 文件句柄用于标识许多函数调用中的文件。<br>

每个文件句柄和文件对象通常对于打开文件的每个进程都是唯一的，唯一的例外是复制进程持有的文件句柄，或者当子进程继承父进程的文件句柄时。<br>
在这些情况下，这些文件句柄是唯一的，但可以看到单个共享文件对象。 有关复制进程保留的文件句柄的详细信息，请参阅 复制对象 。<br>

请注意，虽然文件句柄通常对进程是专用的，但文件处理指向的文件数据不是。共享同一文件的进程和线程必须同步其访问。多数情况进程通过其专用句柄池来标识文件。<br>
<h2>文件指针</h2>
打开文件时，系统会将 文件指针 与默认流相关联。 此文件指针是一个 64 位偏移量值，用于指定要读取的下一个字节或接收写入的下一个字节的位置。<br>
每次打开文件时，系统都会将文件指针放在文件开头，即偏移量零。 每个读取和写入操作都会按读取和写入的字节数来提升文件指针。<br>
例如，如果文件指针位于文件的开头，并且请求了 5 个字节的读取操作，则文件指针将在读取操作后紧接在偏移量 5 处。<br>
当读取或写入每个字节时，系统会推进文件指针。 还可以通过调用 文件定位 函数来重新定位文件指针。<br>

当文件指针到达文件末尾并且应用程序尝试从文件读取时，不会发生错误，但不会读取任何字节。<br>
因此，在没有错误的情况下读取零个字节意味着应用程序已到达文件的末尾。 写入零个字节没有任何作用。<br>

应用程序可以使用 结尾文件 函数截断或扩展文件。 此函数将文件末尾设置为文件指针的当前位置。<br>
<h2>群集和盘区</h2>
可以从两个不同的角度引用群集：在文件内和卷上。 文件中的任何群集都有一个 虚拟群集编号 (VCN) ，这是它与文件开头的相对偏移量。<br>
例如，查找到群集大小的两倍，然后是读取，将返回从第三个 VCN 开始的数据。 (LCN) 的 逻辑群集编号 描述群集与卷中某个任意点的偏移量。<br>
LPN 应仅视为序号或相对数字。 无法保证将逻辑群集映射到物理硬盘驱动器扇区。<br>

盘区是连续群集的运行。 例如，假设一个由 30 个群集组成的文件记录在两个区中。 第一个区可能由 5 个连续群集组成，其余 25 个群集中的另一个。<br>

不保证磁盘上与任何其他范围的任何关系。 例如，第一个盘区可能高于后续盘区的 LCN。<br>
<h2>访问掩码格式</h2>
所有安全对象都使用下图所示 的访问掩码 格式来排列其访问权限。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/secauthz/images/accctrl4.png" alt="访问掩码格式"><br>
在此格式中，低阶 16 位用于对象特定的访问权限，接下来的 8 位用于 标准访问权限，这适用于大多数类型的对象，而 4 位高阶位用于指定每个对象类型可以映射到一组标准和对象特定权限的 通用访问权限 。<br> 
ACCESS_MASK数据类型是定义标准权限、特定权限和泛型权限的 DWORD 值。 这些权限用于 访问控制条目 (ACE) ，是指定请求或授予对对象的访问权限的主要方式。<br>
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>位</th><th>含义</th></tr></thead>
<tbody>
<tr><td>0 15</td><td>特定权限。 包含特定于与掩码关联的对象类型的访问掩码。</td></tr>
<tr><td>16 23</td><td>标准权限。 包含对象的标准访问权限。</td></tr>
<tr><td>24</td><td>访问系统安全 (<b>ACCESS_SYSTEM_SECURITY</b>) 。 它用于指示对 SACL)  (<a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/s-gly"><em>系统访问控制列表</em></a> 的访问。 这种类型的访问要求调用进程具有 <b>SE_SECURITY_NAME</b> (管理审核和安全日志) 权限。 如果在审核访问 ACE 的访问掩码中设置了此标志， (成功或不成功的访问) ，则将审核 SACL 访问。</td></tr>
<tr><td>25</td><td>允许的最大 (<b>MAXIMUM_ALLOWED) </b> 。</td></tr>
<tr><td>26 27</td><td>保留。</td></tr>
<tr><td>28</td><td>泛型所有 (<b>GENERIC_ALL</b>) 。</td></tr>
<tr><td>29</td><td>泛型执行 (<b>GENERIC_EXECUTE</b>) 。</td></tr>
<tr><td>30</td><td>泛型写入 (<b>GENERIC_WRITE</b>) 。</td></tr>
<tr><td>31</td><td>泛型读取 (<b>GENERIC_READ</b>) 。</td></tr>
</tbody></table>
<p>标准权限位（16 到 23）包含对象的标准访问权限，可以是以下预定义标志的组合。</p>
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>位</th><th>标志</th><th>含义</th></tr></thead>
<tbody><tr><td>16</td><td><b>DELETE</b></td><td>删除访问权限。</td></tr>
<tr><td>17</td><td><b>READ_CONTROL</b></td>
<td>读取对安全描述符的所有者、组和 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/d-gly" data-linktype="absolute-path"><em>任意访问控制列表</em></a> (DACL) 的访问权限。</td></tr>
<tr><td>18</td><td><b>WRITE_DAC</b></td><td>对 DACL 的写入访问权限。</td></tr>
<tr><td>19</td><td><b>WRITE_OWNER</b></td><td>对所有者的写入访问权限。</td></tr>
<tr><td>20</td><td><b>同步</b></td><td>同步访问。</td></tr>
</tbody></table>
<a name="标准访问权限">标准访问权限</a><br>
每种类型的安全对象都有一组访问权限，这些权限对应于特定于该对象类型的操作。<br>
除了这些特定于对象的访问权限外，还有一组标准访问权限，这些权限对应于大多数安全对象类型通用的操作。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DELETE</td><td>0x10000</td><td>删除对象的权限。</td></tr>
<tr><td>READ_CONTROL</td><td>0x20000</td><td>读取对象 安全描述符中的信息的权限，不包括 系统访问控制列表中 的信息 (SACL) 。</td></tr>
<tr><td>SYNCHRONIZE</td><td>0x100000</td><td>将对象用于同步的权限。 这使线程能够等待对象处于信号状态。 某些对象类型不支持此访问权限。</td></tr>
<tr><td>WRITE_DAC</td><td>0x40000</td><td>修改 自由访问控制列表 的权限 (DACL 在对象的安全描述符中) 。</td></tr>
<tr><td>WRITE_OWNER</td><td>0x80000</td><td>更改对象安全说明符中的所有者的权限。</td></tr>
<tr><th colspan=3>以下是上面几个值的组合</th></tr>
<tr><td>STANDARD_RIGHTS_ALL</td><td>0x1F0000</td><td>合并 DELETE、READ_CONTROL、WRITE_DAC、WRITE_OWNER 和 SYNCHRONIZE 访问。</td></tr>
<tr><td>STANDARD_RIGHTS_EXECUTE</td><td>0x20000</td><td>当前定义为等于 READ_CONTROL。</td></tr>
<tr><td>STANDARD_RIGHTS_READ</td><td>0x20000</td><td>当前定义为等于 READ_CONTROL。</td></tr>
<tr><td>STANDARD_RIGHTS_REQUIRED</td><td>0xF0000</td><td>合并 DELETE、READ_CONTROL、WRITE_DAC 和 WRITE_OWNER 访问。</td></tr>
<tr><td>STANDARD_RIGHTS_WRITE</td><td>0x20000</td><td>当前定义为等于 READ_CONTROL。</td></tr>
</table><a name="通用访问权限">通用访问权限</a><br>
可以使用通用访问权限来指定打开对象句柄时所需的访问类型。 这通常比指定所有相应的标准和特定权限更简单。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>GENERIC_ALL</td><td>0x10000000</td><td>所有可能的访问权限</td></tr>
<tr><td>GENERIC_EXECUTE</td><td>0x20000000</td><td>执行访问权限</td></tr>
<tr><td>GENERIC_READ</td><td>0x80000000</td><td>读取权限</td></tr>
<tr><td>GENERIC_WRITE</td><td>0x40000000</td><td>写入权限</td></tr>
</table><a name="文件访问权限常量">文件访问权限常量</a><br>
文件和目录的有效访问权限包括标准访问权限。 下表列出了特定于文件和目录的访问权限。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FILE_ADD_FILE</td><td>2</td><td>对于目录，有权在目录中创建文件。</td></tr>
<tr><td>FILE_ADD_SUBDIRECTORY</td><td>4</td><td>对于目录，是创建子目录的权限。</td></tr>
<tr><td>FILE_ALL_ACCESS</td><td>0x1F03FF</td><td>文件的所有可能的访问权限。</td></tr>
<tr><td>FILE_APPEND_DATA</td><td>4</td><td>对于文件对象，是将数据追加到文件的权限。 (对于本地文件，如果未指定此标志，写入操作将不会覆盖现有数据 FILE_WRITE_DATA。) 对于目录对象，创建子目录 (的权限 FILE_ADD_SUBDIRECTORY) 。</td></tr>
<tr><td>FILE_CREATE_PIPE_INSTANCE</td><td>4</td><td>对于命名管道，是创建管道的权限。</td></tr>
<tr><td>FILE_DELETE_CHILD</td><td>64 (0x40)</td><td>对于目录，有权删除目录及其包含的所有文件，包括只读文件。</td></tr>
<tr><td>FILE_EXECUTE</td><td>32 (0x20)</td><td>对于本机代码文件，是执行该文件的权利。 授予脚本的此访问权限可能会导致脚本可执行，具体取决于脚本解释器。</td></tr>
<tr><td>FILE_LIST_DIRECTORY</td><td>1</td><td>对于目录，是列出目录内容的权限。</td></tr>
<tr><td>FILE_READ_ATTRIBUTES</td><td>128 (0x80)</td><td>读取文件属性的权利。</td></tr>
<tr><td>FILE_READ_DATA</td><td>1</td><td>对于文件对象，读取相应文件数据的权限。 对于目录对象，是读取相应目录数据的权限。</td></tr>
<tr><td>FILE_READ_EA</td><td>8</td><td>读取扩展文件属性的权利。</td></tr>
<tr><td>FILE_TRAVERSE</td><td>32 (0x20)</td><td>对于目录，是遍历目录的权限。 默认情况下，会向用户分配 BYPASS_TRAVERSE_CHECKING权限，这会忽略 FILE_TRAVERSE访问权限。 有关详细信息，请参阅 文件安全和访问权限 中的备注。</td></tr>
<tr><td>FILE_WRITE_ATTRIBUTES</td><td>256 (0x100)</td><td>写入文件属性的权利。</td></tr>
<tr><td>FILE_WRITE_DATA</td><td>2</td><td>对于文件对象，是将数据写入文件的权限。 对于目录对象，在目录中创建文件的权限 (FILE_ADD_FILE) 。</td></tr>
<tr><td>FILE_WRITE_EA</td><td>16 (0x10)</td><td>写入扩展文件属性的权利。</td></tr>
<tr><td>STANDARD_RIGHTS_READ</td><td>0x20000</td><td>包括 READ_CONTROL，这是读取文件或目录对象的安全描述符中信息的权限。 这不包括 SACL 中的信息。</td></tr>
<tr><td>STANDARD_RIGHTS_WRITE</td><td>0x20000</td><td>与 STANDARD_RIGHTS_READ 相同。</td></tr>
</table><a name="文件安全和访问权限">文件安全和访问权限</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FILE_GENERIC_EXECUTE<td>0x1200A0</td></td><td>FILE_EXECUTE|FILE_READ_ATTRIBUTES|STANDARD_RIGHTS_EXECUTE|SYNCHRONIZE</td></tr>
<tr><td>FILE_GENERIC_READ<td>0x120089</td></td><td>FILE_READ_ATTRIBUTES|FILE_READ_DATA|FILE_READ_EA|STANDARD_RIGHTS_READ|SYNCHRONIZE</td></tr>
<tr><td>FILE_GENERIC_WRITE<td>0x120116</td></td><td>FILE_APPEND_DATA|FILE_WRITE_ATTRIBUTES|FILE_WRITE_DATA|FILE_WRITE_EA|STANDARD_RIGHTS_WRITE|SYNCHRONIZE</td></tr>
</table><a name="文件属性类型">文件属性类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FILE_ATTRIBUTE_READONLY</td><td>1 (0x00000001)</td><td>只读文件。 应用程序可以读取文件，但不能写入或删除该文件。 在目录上不遵循此属性。 有关详细信息，请参阅 无法在 Windows Server 2003、Windows XP、Windows Vista 或 Windows 7 中查看或更改文件夹的只读或系统属性。</td></tr>
<tr><td>FILE_ATTRIBUTE_HIDDEN</td><td>2 (0x00000002)</td><td>文件或目录处于隐藏状态。 它不包括在普通目录列表中。</td></tr>
<tr><td>FILE_ATTRIBUTE_SYSTEM</td><td>4 (0x00000004)</td><td>操作系统使用其中的一部分或独占使用的文件或目录。</td></tr>
<tr><td>FILE_ATTRIBUTE_DIRECTORY</td><td>16 (0x00000010)</td><td>标识目录的句柄。</td></tr>
<tr><td>FILE_ATTRIBUTE_ARCHIVE</td><td>32 (0x00000020)</td><td>作为存档文件或目录的文件或目录。 应用程序通常使用此属性来标记要备份或删除的文件。</td></tr>
<tr><td>FILE_ATTRIBUTE_DEVICE</td><td>64 (0x00000040)</td><td>此值保留供系统使用。</td></tr>
<tr><td>FILE_ATTRIBUTE_NORMAL</td><td>128 (0x00000080)</td><td>未设置其他属性的文件。 此属性仅在单独使用时才有效。</td></tr>
<tr><td>FILE_ATTRIBUTE_TEMPORARY</td><td>256 (0x00000100)</td><td>用于临时存储的文件。 如果有足够的缓存内存可用，文件系统会避免将数据写回到大容量存储，因为通常情况下，应用程序在句柄关闭后会删除临时文件。 在这种情况下，系统可以完全避免写入数据。 否则，在句柄关闭后写入数据。</td></tr>
<tr><td>FILE_ATTRIBUTE_SPARSE_FILE</td><td>512 (0x00000200)</td><td>是稀疏文件的文件。</td></tr>
<tr><td>FILE_ATTRIBUTE_REPARSE_POINT</td><td>1024 (0x00000400)</td><td>具有关联的重新分析点的文件或目录，或作为符号链接的文件。</td></tr>
<tr><td>FILE_ATTRIBUTE_COMPRESSED</td><td>2048 (0x00000800)</td><td>压缩的文件或目录。 对于文件，将压缩该文件中的所有数据。 对于目录，压缩是新建文件和子目录的默认设置。</td></tr>
<tr><td>FILE_ATTRIBUTE_OFFLINE</td><td>4096 (0x00001000)</td><td>文件的数据不会立即可用。 此属性指示文件数据以物理方式移动到脱机存储。 此属性由远程存储（分层存储管理软件）使用。 应用程序不应随意更改此属性。</td></tr>
<tr><td>FILE_ATTRIBUTE_NOT_CONTENT_INDEXED</td><td>8192 (0x00002000)</td><td>内容索引服务不会为文件或目录编制索引。</td></tr>
<tr><td>FILE_ATTRIBUTE_ENCRYPTED</td><td>16384 (0x00004000)</td><td>加密的文件或目录。 对于文件，文件中的所有数据流都已加密。 对于目录，加密是新创建的文件和子目录的默认加密。</td></tr>
<tr><td>FILE_ATTRIBUTE_INTEGRITY_STREAM</td><td>32768 (0x00008000)</td><td>目录或用户数据流配置了完整性 (仅在 ReFS 卷) 上受支持。 它不包括在普通目录列表中。 如果文件已重命名，完整性设置将一直保留。 如果复制了某个文件，则如果源文件或目标目录设置了完整性，则目标文件将具有完整性设置。在Windows Server 2012之前，不支持此标志。</td></tr>
<tr><td>FILE_ATTRIBUTE_VIRTUAL</td><td>65536 (0x00010000)</td><td>此值保留供系统使用。</td></tr>
<tr><td>FILE_ATTRIBUTE_NO_SCRUB_DATA</td><td>131072 (0x00020000)</td><td>后台数据完整性扫描程序不读取的用户数据流 (AKA 清理器) 。 在目录上设置时，它仅提供继承。 此标志仅在 存储空间 和 ReFS 卷上受支持。 它不包括在普通目录列表中。在Windows 8和Windows Server 2012之前，不支持此标志。</td></tr>
<tr><td>FILE_ATTRIBUTE_EA</td><td>262144 (0x00040000)</td><td>具有扩展属性的文件或目录。重要： 此常量仅供内部使用。</td></tr>
<tr><td>FILE_ATTRIBUTE_PINNED</td><td>524288 (0x00080000)</td><td>此属性指示用户意图，即即使未主动访问文件或目录，也应在本地保持完全存在。 此属性用于分层存储管理软件。</td></tr>
<tr><td>FILE_ATTRIBUTE_UNPINNED</td><td>1048576 (0x00100000)</td><td>此属性指示，除非主动访问文件或目录，否则不应在本地完全存在。 此属性用于分层存储管理软件。</td></tr>
<tr><td>FILE_ATTRIBUTE_RECALL_ON_OPEN</td><td>262144 (0x00040000)</td><td>此属性仅出现在目录枚举类 (FILE_DIRECTORY_INFORMATION、FILE_BOTH_DIR_INFORMATION等) 中。 设置此属性时，这意味着文件或目录在本地系统上没有物理表示形式;项是虚拟的。 打开该项目的成本将比平常要高，例如，它会导致至少从远程存储中提取其中一部分。</td></tr>
<tr><td>FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS</td><td>4194304 (0x00400000)</td><td>如果设置了此属性，则意味着文件或目录在本地未完全存在。 对于表示并非所有数据都位于本地存储 (的文件，例如，它可能稀疏，某些数据仍位于远程存储) 中。 对于目录，这意味着某些目录内容正在从另一个位置虚拟化。 读取文件/枚举目录的成本将比平常要高，例如，这会导致至少从远程存储中提取一些文件/目录内容。 只有内核模式调用方可以设置此位。文件系统微型筛选器低于 180000 – 189999高度范围 (FSFilter HSM 加载顺序组) 不得对设置了此属性的文件发出目标缓存读取或写入。 这可能会导致缓存污染和潜在的文件损坏。 有关详细信息，请参阅 处理占位符。</td></tr>
</table><a name="文件属性标志">文件属性标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FILE_FLAG_BACKUP_SEMANTICS</td><td>0x02000000</td><td>正在为备份或还原操作打开或创建文件。 当进程具有 SE_BACKUP_NAME 和 SE_RESTORE_NAME 权限时，系统将确保调用进程替代文件安全检查。 有关详细信息，请参阅 更改令牌中的特权。</td></tr>
<tr><td>FILE_FLAG_DELETE_ON_CLOSE</td><td>0x04000000</td><td>文件在其所有句柄都关闭后立即被删除，其中包括指定的句柄和任何其他打开或重复的句柄。如果存在文件的现有打开句柄，则调用会失败，除非它们都以 FILE_SHARE_DELETE 共享模式打开。针对文件的后续打开请求将失败，除非指定 FILE_SHARE_DELETE 共享模式。</td></tr>
<tr><td>FILE_FLAG_NO_BUFFERING</td><td>0x20000000</td><td>正在打开文件或设备，没有系统缓存用于数据读取和写入。 此标志不会影响硬盘缓存或内存映射文件。</td></tr>
<tr><td>FILE_FLAG_OPEN_NO_RECALL</td><td>0x00100000</td><td>文件数据已请求，但应继续位于远程存储中。 不应将其传输回本地存储。 此标志供远程存储系统使用。</td></tr>
<tr><td>FILE_FLAG_OPEN_REPARSE_POINT</td><td>0x00200000</td><td>不会进行正常的 重分析点 处理; CreateFile 将尝试打开重新分析点。 打开文件时，无论控制重分析点的筛选器是否正常运行，都返回文件句柄。此标志不能与 CREATE_ALWAYS 标志一起使用。</td></tr>
<tr><td>FILE_FLAG_OVERLAPPED</td><td>0x40000000</td><td>正在为异步 I/O 打开或创建文件或设备。在此句柄上完成后续 I/O 操作时， OVERLAPPED 结构中指定的事件将设置为信号状态。如果指定了此标志，则文件可用于同时读取和写入操作。</td></tr>
<tr><td>FILE_FLAG_POSIX_SEMANTICS</td><td>0x01000000</td><td>将根据 POSIX 规则进行访问。 这包括允许多个具有名称的文件（仅在大小写上不同）用于支持该命名的文件系统。 使用此选项时请小心，因为为 MS-DOS 或 16 位 Windows 编写的应用程序可能无法访问使用此标志创建的文件。</td></tr>
<tr><td>FILE_FLAG_RANDOM_ACCESS</td><td>0x10000000</td><td>访问应是随机的。 系统可将此选项用作优化文件缓存的提示。如果文件系统不支持缓存的 I/O 且 FILE_FLAG_NO_BUFFERING，则此标志无效。</td></tr>
<tr><td>FILE_FLAG_SESSION_AWARE</td><td>0x00800000</td><td>正在使用会话感知打开文件或设备。 如果未指定此标志，则会话 0 中运行的进程无法打开每个会话 (设备，例如使用 RemoteFX USB 重定向) 的设备。 此标志对不在会话 0 中的调用方无效。 此标志仅在服务器版本的 Windows 上受支持。</td></tr>
<tr><td>FILE_FLAG_SEQUENTIAL_SCAN</td><td>0x08000000</td><td>访问旨在从头到尾按顺序进行。 系统可将此选项用作优化文件缓存的提示。如果读取隐藏 (即使用反向扫描) ，则不应使用此标志。如果文件系统不支持缓存的 I/O 且 FILE_FLAG_NO_BUFFERING，则此标志无效。</td></tr>
<tr><td>FILE_FLAG_WRITE_THROUGH</td><td>0x80000000</td><td>写入操作不会通过任何中间缓存，它们将直接转到磁盘。有关其他信息，请参阅本主题的 缓存行为 部分。</td></tr>
</table><a name="文件安全标志">文件安全标志</a><br>
SECURITY_SQOS_PRESENT 标志指定为 属性 的一部分时，它还可以包含以下一个或多个值。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SECURITY_ANONYMOUS</td><td>0</td><td>在匿名模拟级别模拟客户端。</td></tr>
<tr><td>SECURITY_CONTEXT_TRACKING</td><td>0x40000</td><td>安全跟踪模式是动态的。 如果未指定此标志，则安全跟踪模式为静态。</td></tr>
<tr><td>SECURITY_DELEGATION</td><td>0x30000</td><td>在委派模拟级别模拟客户端。</td></tr>
<tr><td>SECURITY_EFFECTIVE_ONLY</td><td>0x80000</td><td>服务器只能使用客户端安全上下文中已启用的方面。</td></tr>
<tr><td>SECURITY_IDENTIFICATION</td><td>0x10000</td><td>在标识模拟级别模拟客户端。</td></tr>
<tr><td>SECURITY_IMPERSONATION</td><td>0x20000</td><td>在模拟级别模拟客户端。 如果未将其他标志与 SECURITY_SQOS_PRESENT 标志一起指定，则这是默认行为。</td></tr>
<tr><td>SECURITY_SQOS_PRESENT</td><td>0x00100000</td><td>SECURITY_SQOS_PRESENT</td></tr>
<tr><td>SECURITY_VALID_SQOS_FLAGS</td><td>0x001F0000</td><td>SECURITY_VALID_SQOS_FLAGS</td></tr>
</table><a name="文件共享模式">文件共享模式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>0</td><td>0x00000000</td><td>阻止其他进程在请求删除、读取或写入访问权限时打开文件或设备。</td></tr>
<tr><td>FILE_SHARE_DELETE</td><td>0x00000004</td><td>启用文件或设备上的后续打开操作以请求删除访问权限。否则，如果其他进程请求删除访问权限，则无法打开文件或设备。</td></tr>
<tr><td>FILE_SHARE_READ</td><td>0x00000001</td><td>启用文件或设备上的后续打开操作以请求读取访问权限。否则，如果其他进程请求读取访问权限，则无法打开文件或设备。</td></tr>
<tr><td>FILE_SHARE_WRITE</td><td>0x00000002</td><td>启用文件或设备上的后续打开操作以请求写入访问权限。否则，如果其他进程请求写入访问权限，则无法打开文件或设备。</td></tr>
</table><a name="文件创建方式">文件创建方式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>CREATE_ALWAYS</td><td>2</td><td>始终创建新文件。如果指定的文件存在且可写，则函数将截断文件，函数成功，最后错误代码设置为 ERROR_ALREADY_EXISTS (183) 。否则为0</td></tr>
<tr><td>CREATE_NEW</td><td>1</td><td>仅当文件尚不存在时，才创建新文件。如果指定的文件存在，则函数将失败，最后一个错误代码设置为 ERROR_FILE_EXISTS (80) 。否则会创建一个新文件。</td></tr>
<tr><td>OPEN_ALWAYS</td><td>4</td><td>始终打开文件。如果指定的文件存在，则函数成功，并将最后一个错误代码设置为 ERROR_ALREADY_EXISTS (183) 。否则为0</td></tr>
<tr><td>OPEN_EXISTING</td><td>3</td><td>仅当文件或设备存在时才打开它。如果指定的文件或设备不存在，则函数将失败，并将最后一个错误代码设置为 ERROR_FILE_NOT_FOUND (2) 。</td></tr>
<tr><td>TRUNCATE_EXISTING</td><td>5</td><td>打开一个文件并截断它，使其大小为零字节，仅当它存在时。如果指定的文件不存在，则函数将失败，最后一个错误代码设置为 ERROR_FILE_NOT_FOUND (2) 。</td></tr>
</table>
<font color="#0000FF">文件系统——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><th colspan=4>目录管理</th></tr>
<tr><td>创建目录</td><td>CreateDirectoryA</td><td>创建目录(目录名,0)</td><td>创建一个文件夹</td></tr>
<tr><td>仿建目录</td><td>CreateDirectoryExA</td><td>仿建目录(模板,目录名,<a href="#安全属性类">安全</a>)</td><td>使用指定模板目录的属性创建新目录。新目录保留指定模板目录的其他属性。</td></tr>
<tr><td>事务目录</td><td>CreateDirectoryTransactedA</td><td>事务目录(模板,目录名,<a href="#安全属性类">安全</a>,事务)</td><td>使用指定模板目录的属性，以事务处理操作的形式创建新目录。</td></tr>
<tr><td>停改通知</td><td>FindCloseChangeNotification</td><td>停改通知(通知)</td><td>停止更改通知句柄监视。</td></tr>
<tr><td>初改通知</td><td>FindFirstChangeNotificationA</td><td>初改通知(目录名,含子目录,条件)</td><td>创建更改通知句柄并设置初始更改通知筛选<a href="#通知条件">条件</a>。</td></tr>
<tr><td>次改通知</td><td>FindNextChangeNotification</td><td>次改通知(通知)</td><td>请求操作系统在下次检测到相应更改时，发出更改通知句柄信号。</td></tr>
<tr><td>当前目录</td><td>GetCurrentDirectoryA</td><td>当前目录(长度,内容)</td><td>获得当前进程的所在目录</td></tr>
<tr><td>修改目录</td><td>SetCurrentDirectoryA</td><td>修改目录(目录名)</td><td>修改当前进程运行的目录</td></tr>
<tr><td>目录变更</td><td>ReadDirectoryChangesW</td><td>目录变更(监视,@数据,大小,子,<a href="#通知条件">条件</a>,@已收,重叠类,<a href="#文件传输回调">回调</a>)</td><td>检索描述指定目录中更改的信息。函数不会报告对指定目录本身的更改。</td></tr>
<tr><td>目录更改</td><td>ReadDirectoryChangesExW</td><td>目录更改(监视,@数据,大小,子,<a href="#通知条件">条件</a>,@已收,重叠类,<a href="#文件传输回调">回调</a>,类型)</td><td>检索描述指定目录中更改的信息。函数不会报告对指定目录本身的更改。</td></tr>
<tr><td>删除目录</td><td>RemoveDirectoryA</td><td>删除目录(目录)</td><td>删除现有空目录,有文件不能删除</td></tr>
<tr><td>移除目录</td><td>RemoveDirectoryTransactedA</td><td>移除目录(目录,事务)</td><td>删除现有的空目录作为事务处理操作。</td></tr>
<tr><td>备份读取</td><td>BackupRead</td><td>备份读取(文件,缓冲,长度,@已读,完成,访表,数据)</td><td>将与指定文件或目录关联的数据读入缓冲区，可将数据写入备份介质。</td></tr>
<tr><td>备份查找</td><td>BackupSeek</td><td>备份查找(文件,低位,高位,@收低,@收高,数据)</td><td>在使用备份数据时访问的数据流中查找转发。</td></tr>
<tr><td>备份写入</td><td>BackupWrite</td><td>备份写入(文件,缓冲,长度,@已读,完成,访表,数据)</td><td>将与指定文件或目录关联的数据读入缓冲区，可将数据写入备份介质。</td></tr>
<tr><th colspan=4>文件管理</th></tr>
<tr><td>文件读</td><td>_hread</td><td>文件读(文件,内容,长度)</td><td>返回实际读取的字节数。</td></tr>
<tr><td>文件写</td><td>_hwrite</td><td>文件写(文件,内容,长度)</td><td>返回实际写入的字节数</td></tr>
<tr><td>建文件</td><td>_lcreat</td><td>文件=建文件("12.txt",属性)</td><td>创建或打开指定的文件,<a href="#文件属性类型">属性</a>:0读写,1只读,2隐藏,4系统</td></tr>
<tr><td>开文件</td><td>_lopen</td><td>文件=开文件("34.txt",方式)</td><td>打开现有文件,方式:0=读,1=写,2=读写</td></tr>
<tr><td>关文件</td><td>_lclose</td><td>关文件(文件)</td><td>关闭指定的文件</td></tr>
<tr><td>读文件</td><td>_lread</td><td>已读=读文件(文件,内容,长度)</td><td>返回实际读取的字节数。</td></tr>
<tr><td>写文件</td><td>_lwrite</td><td>已写=写文件(文件,内容,长度)</td><td>返回实际写入的字节数</td></tr>
<tr><td>流定位</td><td>_llseek</td><td>流定位(文件,位置,方向)</td><td>方向0=开头,1=当前位置,2=文件结尾;文件长度=流定位(文件,0,2)</td></tr>
<tr><td>文件码页</td><td>AreFileApisANSI</td><td>文件码页</td><td>确定文件 I/O 函数是使用 ANSI(非零)还是 OEM (0)字符集代码页。适用于 8 位控制台输入和输出操作。</td></tr>
<tr><td>取消操作</td><td>CancelIo</td><td>取消操作(文件)</td><td>取消由指定文件的调用线程颁发的所有挂起输入和输出 (I/O) 操作。</td></tr>
<tr><td>取消传输</td><td>CancelIoEx</td><td>取消传输(文件,<a href="#重叠类">重叠类</a>)</td><td>标记指定文件句柄的任何未完成的 I/O 操作。</td></tr>
<tr><td>取消同步</td><td>CancelSynchronousIo</td><td>取消同步(线程)</td><td>将指定线程发出的挂起同步 I/O 操作标记为已取消。</td></tr>
<tr><td>关闭对象</td><td>CloseHandle</td><td>关闭对象(对象)</td><td>关闭文件、文件映射、进程、线程、安全和同步对象等</td></tr>
<tr><td>文件传送</td><td>CopyFile2</td><td>文件传送(名称1,名称2,<a href="#复制文件类">复制文件类</a>)</td><td>将现有文件复制到新文件，并通过回调函数向应用程序通知此操作的进度。</td></tr>
<tr><td>复制文件</td><td>CopyFileA</td><td>复制文件("a.txt","b.txt",假)</td><td>最后参数为真不覆盖已有文件</td></tr>
<tr><td>文件复制</td><td>CopyFileExA</td><td>文件复制(名称,新名,<a href="#复制进度">回调</a>,附加,取消,<a href="#复制文件标志">标志</a>)</td><td>将现有文件复制到新文件，并通过回调函数通知应用程序其进度。</td></tr>
<tr><td>复制事务</td><td>CopyFileTransactedA</td><td>复制事务(名称,新名,<a href="#复制进度">回调</a>,附加,取消,<a href="#复制文件标志">标志</a>,事务)</td><td>将现有文件作为事务处理操作复制到新文件，并通过回调函数通知应用程序其进度。</td></tr>
<tr><td>创建文件</td><td>CreateFileA</td><td>文件=创建文件(名,<a href="#标准访问权限">读写</a>,<a href="#文件共享模式">共享</a>,<a href="#安全属性类">安全</a>,<a href="#文件创建方式">方式</a>,<a href="#文件属性类型">属性</a>,模板)</td><td>可打开或创建文件或者I/O设备，并返回可访问的句柄：控制台，通信资源 目录(只读),磁盘驱动器,文件,邮槽,管道。</td></tr>
<tr><td>创建硬链</td><td>CreateHardLinkA</td><td>创建硬链(新名,原名,0)</td><td>在现有文件和新文件之间建立硬链接。</td></tr>
<tr><td>删除文件</td><td>DeleteFileA</td><td>删除文件(文件名)</td><td>删除现有文件</td></tr>
<tr><td>关闭查找</td><td>FindClose</td><td>关闭查找(搜索)</td><td>关闭指定的搜索句柄</td></tr>
<tr><td>查找文件</td><td>FindFirstFileA</td><td>搜索=查找文件(文件名,文件信息)</td><td>查找指定目录下的文件</td></tr>
<tr><td>下个文件</td><td>FindNextFileA</td><td>下个文件(搜索,文件信息)</td><td>查找该目录下一个文件</td></tr>
<tr><td>查寻文件</td><td>FindFirstFileExA</td><td>查寻文件(目录,<a href="#查找级别">级别</a>,@<a href="#查找文件类">数据</a>,<a href="#查找匹配">匹配</a>,条件,<a href="#查找选项">选项</a>)</td><td>在目录中搜索具有与指定属性匹配的名称和属性的文件或子目录。</td></tr>
<tr><td>刷新文件</td><td>FlushFileBuffers</td><td>刷新文件(文件)</td><td>清除指定文件的缓冲区，并将所有缓冲的数据写入文件</td></tr>
<tr><td>执行类型</td><td>GetBinaryTypeA</td><td>执行类型(文件名,<a href="#可执行类型">@类别</a>)</td><td>判断文件是否可以执行,类别收到文件的类型.返回0不可执行</td></tr>
<tr><td>压缩大小</td><td>GetCompressedFileSizeA</td><td>大小=压缩大小(文件名,@长度)</td><td>获取压缩文件的大小,未压缩为实际大小.长度为高32位,大小为低32位</td></tr>
<tr><td>文件属性</td><td>GetFileAttributesA</td><td>属性=文件属性(文件名)</td><td>获得指定文件或目录的<a href="#文件属性类型">属性</a></td></tr>
<tr><td>文件大小</td><td>GetFileSize</td><td>大小=文件大小(文件,@长度)</td><td>获取已打开文件的大小,长度为高32位,返回大小为低32位</td></tr>
<tr><td>文件日期</td><td>GetFileTime</td><td>文件日期(文件,@创建,@访问,@写入)</td><td>获取已打开文件的<a href="#文件日期类">各项日期</a>,不需要的参数可以为0</td></tr>
<tr><td>文件类型</td><td>GetFileType</td><td>t=文件类型(文件)</td><td>返回指定文件的类型,0未知,1磁盘文件,2控制台,3管道</td></tr>
<tr><td>全路径名</td><td>GetFullPathNameA</td><td>长度=全路径名(文件名,长度,@路径,@名称)</td><td>检索指定文件的完整路径和文件名。</td></tr>
<tr><td>长路径名</td><td>GetLongPathNameA</td><td>长度=长路径名(短名,@长名,长度)</td><td>获取指定文件路径的长路径形式</td></tr>
<tr><td>短路径名</td><td>GetShortPathNameA</td><td>短路径名(长路径,@短路径,大小)</td><td>检索指定路径的短路径形式。</td></tr>
<tr><td>文目属性</td><td>GetFileAttributesExA</td><td>文目属性(名称,0,<a href="#文件属性类">@信息</a>)</td><td>检索指定文件或目录的属性。</td></tr>
<tr><td>开件属性</td><td>GetFileInformationByHandle</td><td>开件属性(文件,<a href="#开件属性类">@信息</a>)</td><td>检索指定文件句柄的文件信息。</td></tr>
<tr><td>文件取名</td><td>GetTempFileNameA</td><td>文件取名(目录,前缀,唯一,@名称)</td><td>创建临时文件的名称。如果唯一为零，文件存在会增加数字直到不存在。</td></tr>
<tr><td>临时目录</td><td>GetTempPathA</td><td>临时目录(大小,@目录)</td><td>检索为临时文件指定的目录的路径。</td></tr>
<tr><td>端口队列</td><td>GetQueuedCompletionStatus</td><td>端口队列(端口,@长度,@键值,@重叠类,超时)</td><td>尝试从指定的 I/O 完成端口等待挂起取消对 I/O 完成数据包的排队。</td></tr>
<tr><td>端口发布</td><td>PostQueuedCompletionStatus</td><td>端口发布(端口,长度,键值,重叠类)</td><td>将 I/O 完成数据包发布到 I/O 完成端口。</td></tr>
<tr><td>锁定文件</td><td>LockFile</td><td>锁定文件(文件,位置低,位置高,长度低,长度高)</td><td>锁定打开文件中的区域。防止其他进程访问该区域</td></tr>
<tr><td>锁住文件</td><td>LockFileEx</td><td>锁住文件(文件,标志,0,长度低,长度高,重叠类)</td><td>通过调用进程锁定指定的文件以供独占访问。标志：0共享锁，1不等待，2共享锁</td></tr>
<tr><td>解锁文件</td><td>UnlockFile</td><td>解锁文件(文件,位置低,位置高,长度低,长度高)</td><td>解锁打开文件中的区域。允许其他进程访问该区域</td></tr>
<tr><td>解开文件</td><td>UnlockFileEx</td><td>解开文件(文件,0,长度低,长度高,重叠类)</td><td>解锁打开文件中的区域。此函数可以同步或异步运行。</td></tr>
<tr><td>移动文件</td><td>MoveFileA</td><td>移动文件(原名,新名)</td><td>原名文件不存在时,移动一个文件或目录,存在时改名.都存在或都不存在则出错</td></tr>
<tr><td>转移文件</td><td>MoveFileExA</td><td>转移文件(名称,新名,<a href="#转移文件">标志</a>)</td><td>使用各种移动选项移动现有文件或目录，包括其子级。</td></tr>
<tr><td>传送文件</td><td>MoveFileWithProgressA</td><td>传送文件(名称,新名,回调,附加,<a href="#转移文件">标志</a>)</td><td>移动文件或目录，包括其子级。可以提供接收进度通知的<a href="#复制进度">回调函数</a>。</td></tr>
<tr><td>移动事务</td><td>MoveFileTransactedA</td><td>移动事务(名称,新名,回调,附加,<a href="#转移文件">标志</a>,事务)</td><td>移动文件或目录包括其子级作为事务处理操作移动。可以提供接收进度通知的<a href="#复制进度">回调函数</a>。</td></tr>
<tr><td>打开文件</td><td>OpenFile</td><td>打开文件(名称,<a href="#打开文件类">@信息</a>,<a href="#"></a>文件执行操作">操作</a>)</td><td>创建、打开、重新打开或删除文件。</td></tr>
<tr><td>读取文件</td><td>ReadFile</td><td>读取文件(文件,内容,长度,@已读,<a href="#重叠类">重叠类</a>)</td><td>从文件指针所指定的位置开始读取数据</td></tr>
<tr><td>读入文件</td><td>ReadFileEx</td><td>读入文件(文件,内容,长度,<a href="#重叠类">重叠类</a>,回调)</td><td>异步方式从文件指定的位置开始读取数据，通过指定<a href="#文件传输回调">完成例程</a>报告可警报等待完成状态。</td></tr>
<tr><td>写入文件</td><td>WriteFile</td><td>写入文件(文件,内容,长度,@已读,<a href="#重叠类">重叠类</a>)</td><td>向文件指针所指定的位置开始写入数据</td></tr>
<tr><td>写出文件</td><td>WriteFileEx</td><td>写出文件(文件,内容,长度,<a href="#重叠类">重叠类</a>,回调)</td><td>异步方式向文件指定的位置开始写入数据，通过指定<a href="#文件传输回调">完成例程</a>报告可警报等待完成状态。</td></tr>
<tr><td>修改属性</td><td>SetFileAttributesA</td><td>修改属性(路径,属性)</td><td>修改指定文件或目录的属性</td></tr>
<tr><td>读文件组</td><td>ReadFileScatter</td><td>读文件组(文件,数组,大小,0,<a href="#重叠类">重叠类</a>)</td><td>从文件读取数据并将其存储在缓冲区数组中。</td></tr>
<tr><td>写文件组</td><td>WriteFileGather</td><td>写文件组(文件,数组,大小,0,<a href="#重叠类">重叠类</a>)</td><td>从缓冲区数组检索数据并将数据写入文件。</td></tr>
<tr><td>文件定位</td><td>SetFilePointer</td><td>文件定位(文件,位置,高位,方向)</td><td>方向0开头,1当前,2结尾</td></tr>
<tr><td>文件改时</td><td>SetFileTime</td><td>文件改时(文件,创建时间,最后访问,上次写入)</td><td>修改已打开文件的各项日期,不需要的参数可以为0</td></tr>
<tr><td>结尾文件</td><td>SetEndOfFile</td><td>结尾文件(文件)</td><td>将指定文件的文件末尾（EOF）位置移动到文件指针的当前位置</td></tr>
</table><a name="坐标值">坐标值</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>坐标值</td><td>COORD</td><td>4</td><td>用来存储16位坐标位置的信息</td></tr>
<tr><th colspan=4>坐标值——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>左</td><td>x</td><td>整形</td><td>水平坐标位置。</td></tr>
<tr><td>顶</td><td>y</td><td>整形</td><td>垂直坐标位置。</td></tr>
</table><a name="查找文件类">查找文件类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>查找文件类</td><td>FINDDATA</td><td>318</td><td>用来获取文件名称和时间等属性。</td></tr>
<tr><th colspan=4>查找文件类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>属性</td><td>dwFileAttributes</td><td>整数</td><td>表示文件的属性：$20（存档）、2（隐藏）、$80（正常）<br>1（只读）、$10（文件夹）、4（系统）$100(临时)</td></tr>
<tr><td>创建时间</td><td>ftCreationTime.dwLowDateTime</td><td>整数</td><td>文件被创建的时间</td></tr>
<tr><td>创建高位</td><td>ftCreationTime.dwHighDateTime</td><td>整数</td><td>创建时间的高位。</td></tr>
<tr><td>最后访问</td><td>ftLastAccessTime.dwLowDateTime</td><td>整数</td><td>最后一次访问的时间</td></tr>
<tr><td>访问高位</td><td>ftLastAccessTime.dwHighDateTime</td><td>整数</td><td>最后访问时间的高位</td></tr>
<tr><td>最后修改</td><td>ftLastWriteTime.dwLowDateTime</td><td>整数</td><td>最后一次修改的时间</td></tr>
<tr><td>修改高位</td><td>ftLastWriteTime.dwHighDateTime</td><td>整数</td><td>最后修改时间的高位</td></tr>
<tr><td>大小</td><td>nFileSizeHigh</td><td>整数</td><td>文件大小的高位</td></tr>
<tr><td>长度</td><td>nFileSizeLow</td><td>整数</td><td>文件大小的低位</td></tr>
<tr><td>预留1</td><td>dwReserved0</td><td>整数</td><td>保留占位</td></tr>
<tr><td>预留2</td><td>dwReserved1</td><td>整数</td><td>保留占位</td></tr>
<tr><td>名称</td><td>cFileName</td><td>文本</td><td>260字节长度的文件名称</td></tr>
<tr><td>备用名</td><td>cAlternateFileName</td><td>文本</td><td>14字节长度的备用文件名</td></tr>
</table><a name="文件传输回调">文件传输回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文件传输回调</td><td>LpoverlappedCompletionRoutine</td><td>3</td><td>当异步输入和输出 (I/O) 操作完成或取消，并且调用线程处于可警报状态 </td></tr>
<tr><th colspan=4>文件传输回调——参数表</th></tr>
<tr><td>状态</td><td>dwErrorCode</td><td>整数</td><td>I/O 完成状态。</td></tr>
<tr><td>已传</td><td>dwNumberOfBytesTransfered</td><td>整数</td><td>已传输的字节数。 如果发生错误，此参数为零。</td></tr>
<tr><td>数据</td><td>lpOverlapped</td><td>整数</td><td>指向异步 I/O 函数指定的 <a href="#重叠类">重叠类</a> 结构的指针。</td></tr>
</table><a name="复制进度">复制进度</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>复制进度</td><td>CopyProgressRoutine </td><td>9</td><td> 当复制或移动操作的一部分完成时，将调用它。 </td></tr>
<tr><th colspan=4>复制进度 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>总大小</td><td>TotalFileSize</td><td>整数</td><td>文件的总大小（以字节为单位）。</td></tr>
<tr><td>总传送</td><td>TotalBytesTransferred</td><td>整数</td><td>自复制操作开始以来从源文件传输到目标文件的字节总数。</td></tr>
<tr><td>流大小</td><td>StreamSize</td><td>整数</td><td>当前文件流的总大小（以字节为单位）。</td></tr>
<tr><td>流传送</td><td>StreamBytesTransferred</td><td>整数</td><td>自复制操作开始以来，当前流中从源文件传输到目标文件的字节总数。</td></tr>
<tr><td>流号</td><td>dwStreamNumber</td><td>整数</td><td>当前流的句柄。 首次调用时，流号为 1。</td></tr>
<tr><td>原因</td><td>dwCallbackReason</td><td>整数</td><td>0=复制了数据文件的另一部分。1=另一个流已创建，即将复制。 </td></tr>
<tr><td>源文件</td><td>hSourceFile</td><td>整数</td><td>源文件的句柄。</td></tr>
<tr><td>目标</td><td>hDestinationFile</td><td>整数</td><td>目标文件的句柄</td></tr>
<tr><td>附加</td><td>hDestinationFile</td><td>整数</td><td>传递的附加参数</td></tr>
</table>复制进度返回值<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>PROGRESS_CANCEL</td><td>1</td><td>取消复制操作并删除目标文件。</td></tr>
<tr><td>PROGRESS_CONTINUE</td><td>0</td><td>继续复制操作。</td></tr>
<tr><td>PROGRESS_QUIET</td><td>3</td><td>继续复制操作，但停止调用 复制进度 来报告进度。</td></tr>
<tr><td>PROGRESS_STOP</td><td>2</td><td>停止复制操作。 它可以在以后重新启动。</td></tr>
</table><a name="文件属性类">文件属性类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文件属性类</td><td>WIN32_FILE_ATTRIBUTE_DATA</td><td>32</td><td>包含文件或目录的属性信息。</td></tr>
<tr><th colspan=4>文件属性类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>属性</td><td>dwFileAttributes</td><td>整数</td><td>表示文件的属性：$20（存档）、2（隐藏）、$80（正常）<br>1（只读）、$10（文件夹）、4（系统）$100(临时)</td></tr>
<tr><td>创建时间</td><td>ftCreationTime.dwLowDateTime</td><td>整数</td><td>文件被创建的时间</td></tr>
<tr><td>创建高位</td><td>ftCreationTime.dwHighDateTime</td><td>整数</td><td>创建时间的高位。</td></tr>
<tr><td>最后访问</td><td>ftLastAccessTime.dwLowDateTime</td><td>整数</td><td>最后一次访问的时间</td></tr>
<tr><td>访问高位</td><td>ftLastAccessTime.dwHighDateTime</td><td>整数</td><td>最后访问时间的高位</td></tr>
<tr><td>最后修改</td><td>ftLastWriteTime.dwLowDateTime</td><td>整数</td><td>最后一次修改的时间</td></tr>
<tr><td>修改高位</td><td>ftLastWriteTime.dwHighDateTime</td><td>整数</td><td>最后修改时间的高位</td></tr>
<tr><td>大小</td><td>nFileSizeHigh</td><td>整数</td><td>文件大小的高位</td></tr>
<tr><td>长度</td><td>nFileSizeLow</td><td>整数</td><td>文件大小的低位</td></tr>
</table><a name="开件属性类">开件属性类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>开件属性类</td><td>BY_HANDLE_FILE_INFORMATION</td><td>44</td><td>包含文件或目录的属性信息。</td></tr>
<tr><th colspan=4>开件属性类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>属性</td><td>dwFileAttributes</td><td>整数</td><td>表示文件的属性：$20（存档）、2（隐藏）、$80（正常）<br>1（只读）、$10（文件夹）、4（系统）$100(临时)</td></tr>
<tr><td>创建时间</td><td>ftCreationTime.dwLowDateTime</td><td>整数</td><td>文件被创建的时间</td></tr>
<tr><td>创建高位</td><td>ftCreationTime.dwHighDateTime</td><td>整数</td><td>创建时间的高位。</td></tr>
<tr><td>最后访问</td><td>ftLastAccessTime.dwLowDateTime</td><td>整数</td><td>最后一次访问的时间</td></tr>
<tr><td>访问高位</td><td>ftLastAccessTime.dwHighDateTime</td><td>整数</td><td>最后访问时间的高位</td></tr>
<tr><td>最后修改</td><td>ftLastWriteTime.dwLowDateTime</td><td>整数</td><td>最后一次修改的时间</td></tr>
<tr><td>修改高位</td><td>ftLastWriteTime.dwHighDateTime</td><td>整数</td><td>最后修改时间的高位</td></tr>
<tr><td>大小</td><td>nFileSizeHigh</td><td>整数</td><td>文件大小的高位</td></tr>
<tr><td>长度</td><td>nFileSizeLow</td><td>整数</td><td>文件大小的低位</td></tr>
<tr><td>链接数</td><td>nNumberOfLinks</td><td>整数</td><td>指向此文件的链接数。对于 FAT 文件系统，此成员始终为 1。对于 NTFS 文件系统，它可以超过 1。</td></tr>
<tr><td>标识高位</td><td>nFileIndexHigh</td><td>整数</td><td>与文件关联的唯一标识符的高阶部分。</td></tr>
<tr><td>标识低位</td><td>nFileIndexLow</td><td>整数</td><td>与文件关联的唯一标识符的低序部分。</td></tr>
</table><a name="可执行类型">可执行文件类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SCS_32BIT_BINARY</td><td>0</td><td>基于 32 位 Windows 的应用程序</td></tr>
<tr><td>SCS_64BIT_BINARY</td><td>6</td><td>基于 64 位 Windows 的应用程序。</td></tr>
<tr><td>SCS_DOS_BINARY</td><td>1</td><td>基于 MS-DOS 的应用程序</td></tr>
<tr><td>SCS_OS216_BINARY</td><td>5</td><td>基于 16 位 OS/2 的应用程序</td></tr>
<tr><td>SCS_PIF_BINARY</td><td>3</td><td>执行基于 MS-DOS 的应用程序的 PIF 文件</td></tr>
<tr><td>SCS_POSIX_BINARY</td><td>4</td><td>基于 POSIX 的应用程序</td></tr>
<tr><td>SCS_WOW_BINARY</td><td>2</td><td>基于 16 位 Windows 的应用程序</td></tr>
</table><a name="打开文件类">打开文件类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>打开文件类</td><td>OFSTRUCT</td><td>136</td><td>包含有关 打开文件 函数打开的或尝试打开的文件的信息。</td></tr>
<tr><th colspan=4>复制文件类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cBytes</td><td>字节</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>硬盘</td><td>fFixedDisk</td><td>字节</td><td>如果此成员为非零，则该文件位于固定磁盘 (硬) 。 否则就不是架构拥有的。</td></tr>
<tr><td>错误</td><td>nErrCode</td><td>整形</td><td>如果 打开文件 函数失败，则返回 MS-DOS 错误代码。</td></tr>
<tr><td>预留</td><td>Reserved1</td><td>整形</td><td>保留值；请勿使用。</td></tr>
<tr><td>备用</td><td>Reserved2</td><td>整形</td><td>保留值；请勿使用。</td></tr>
<tr><td>名称</td><td>szPathName[OFS_MAXPATHNAME]</td><td>文本</td><td>文件的路径和文件名。</td></tr>
</table><a name="文件执行操作">文件执行操作</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>OF_CANCEL</td><td>0x00000800</td><td>已忽略。若要生成包含 “取消 ”按钮的对话框，请使用 OF_PROMPT。</td></tr>
<tr><td>OF_CREATE</td><td>0x00001000</td><td>创建新文件。如果文件存在，则将其截断为零， (0) 长度。</td></tr>
<tr><td>OF_DELETE</td><td>0x00000200</td><td>删除文件。</td></tr>
<tr><td>OF_EXIST</td><td>0x00004000</td><td>打开一个文件，然后将其关闭。使用它来测试文件是否存在。</td></tr>
<tr><td>OF_PARSE</td><td>0x00000100</td><td>填充 OFSTRUCT 结构，但不执行任何其他操作。</td></tr>
<tr><td>OF_PROMPT</td><td>0x00002000</td><td>如果请求的文件不存在，则显示一个对话框。对话框通知用户系统找不到文件，其中包含 “重试” 和“ 取消 ”按钮。 “ 取消 ”按钮指示 OpenFile 返回找不到文件的错误消息。</td></tr>
<tr><td>OF_READ</td><td>0x00000000</td><td>打开文件以供只读。</td></tr>
<tr><td>OF_READWRITE</td><td>0x00000002</td><td>使用读/写权限打开文件。</td></tr>
<tr><td>OF_REOPEN</td><td>0x00008000</td><td>使用重新打开缓冲区中的信息打开文件。</td></tr>
<tr><td>OF_SHARE_COMPAT</td><td>0x00000000</td><td>对于基于 MS-DOS 的文件系统，使用兼容模式打开文件，允许指定计算机上的任何进程打开文件任意次数。使用其他共享模式打开文件的其他工作失败。 此标志映射到 CreateFile 函数的|FILE_SHARE_READ FILE_SHARE_WRITE标志。</td></tr>
<tr><td>OF_SHARE_DENY_NONE</td><td>0x00000040</td><td>在不拒绝对其他进程的读取或写入访问权限的情况下打开文件。在基于 MS-DOS 的文件系统上，如果该文件已被任何其他进程以兼容模式打开，则函数将失败。此标志映射到 CreateFile 函数的|FILE_SHARE_READ FILE_SHARE_WRITE标志。</td></tr>
<tr><td>OF_SHARE_DENY_READ</td><td>0x00000030</td><td>打开文件并拒绝对其他进程的读取访问权限。在基于 MS-DOS 的文件系统上，如果文件已在兼容模式下打开，或者由任何其他进程进行读取访问，则函数将失败。此标志映射到 CreateFile 函数的 FILE_SHARE_WRITE 标志。</td></tr>
<tr><td>OF_SHARE_DENY_WRITE</td><td>0x00000020</td><td>打开文件并拒绝对其他进程的写入访问权限。在基于 MS-DOS 的文件系统上，如果某个文件已在兼容模式下打开，或者由任何其他进程进行写入访问，则函数将失败。此标志映射到 CreateFile 函数的 FILE_SHARE_READ 标志。</td></tr>
<tr><td>OF_SHARE_EXCLUSIVE</td><td>0x00000010</td><td>使用独占模式打开文件，并拒绝对其他进程的读/写访问。如果文件已以任何其他模式打开进行读/写访问，即使当前进程也是如此，则函数会失败。</td></tr>
<tr><td>OF_VERIFY</td><td>0x00000400</td><td>验证文件的日期和时间是否与之前打开的时间相同。这对于只读文件的额外检查非常有用。</td></tr>
<tr><td>OF_WRITE</td><td>0x00000001</td><td>只是为了进行写入访问而打开文件。</td></tr>
</table><a name="复制文件类">复制文件类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>复制文件类</td><td>COPYFILE2_EXTENDED_PARAMETERS</td><td>20</td><td>包含文件或目录的属性信息。</td></tr>
<tr><th colspan=4>复制文件类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>dwCopyFlags</td><td>整数</td><td>包含零个或多个<a href="#文件复制标志">这些标志值</a>的组合。</td></tr>
<tr><td>取消</td><td>pfCancel</td><td>整数</td><td>如果在复制操作期间将此标志设置为 真 ，则取消复制操作。</td></tr>
<tr><td>回调</td><td>pProgressRoutine</td><td>整数</td><td><a href="#复制进度回调">回调函数</a>的可选地址，每次复制文件的另一部分时调用该函数。</td></tr>
<tr><td>附加</td><td>pvCallbackContext</td><td>整数</td><td>传递给回调函数的应用程序特定上下文信息的指针。</td></tr>
</table><a name="复制进度回调">复制进度回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>复制进度回调</td><td>Pcopyfile2ProgressRoutine </td><td>2</td><td> 与 CopyFile2 函数一起使用的应用程序定义回调函数。 当复制或移动操作的一部分完成时，将调用它。 </td></tr>
<tr><th colspan=4>复制进度回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>信息</td><td>pMessage</td><td>整数</td><td>指向 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/winbase/ns-winbase-copyfile2_message">复制信息</a> 结构的指针。</td></tr>
<tr><td>附加</td><td>pvCallbackContext</td><td>整数</td><td>传递给回调函数的应用程序特定上下文信息的副本。</td></tr>
</table><a name="文件复制标志">文件复制标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>COPY_FILE_FAIL_IF_EXISTS</td><td>0x00000001</td><td>如果目标文件存在，则复制操作将立即失败。 如果存在具有目标名称的文件或目录，则 CopyFile2 函数调用将失败并出现 HRESULT_FROM_WIN32(ERROR_ALREADY_EXISTS) 或 HRESULT_FROM_WIN32(ERROR_FILE_EXISTS)。 如果还指定 了COPY_FILE_RESUME_FROM_PAUSE ，则仅当目标文件没有有效的重启标头时才会触发失败。</td></tr>
<tr><td>COPY_FILE_RESTARTABLE</td><td>0x00000002</td><td>如果再次使用相同的源文件名和目标文件名，则复制文件的方式可以重启。 速度较慢。</td></tr>
<tr><td>COPY_FILE_OPEN_SOURCE_FOR_WRITE</td><td>0x00000004</td><td>复制该文件，并打开源文件以获取写入访问权限。</td></tr>
<tr><td>COPY_FILE_ALLOW_DECRYPTED_DESTINATION</td><td>0x00000008</td><td>即使无法加密目标文件，也会尝试复制。</td></tr>
<tr><td>COPY_FILE_COPY_SYMLINK</td><td>0x00000800</td><td>如果源文件是符号链接，则目标文件也是指向与源符号链接相同的文件的符号链接。</td></tr>
<tr><td>COPY_FILE_NO_BUFFERING</td><td>0x00001000</td><td>复制是使用未缓冲的 I/O 执行的，绕过系统缓存资源。 对于非常大的文件副本，建议使用此标志。 不建议暂停使用此标志的副本。</td></tr>
<tr><td>COPY_FILE_REQUEST_SECURITY_PRIVILEGES</td><td>0x00002000</td><td>尝试复制，并指定 ACCESS_SYSTEM_SECURITY 源文件和 ACCESS_SYSTEM_SECURITY \| WRITE_DAC \| WRITE_OWNER 目标文件。 如果拒绝这些请求，则访问请求将降低到授予访问权限的最高特权级别。 有关详细信息，请参阅 SACL 访问权限。 这可用于允许 CopyFile2ProgressRoutine 回调执行需要更高特权的操作，例如复制文件的安全属性。</td></tr>
<tr><td>COPY_FILE_RESUME_FROM_PAUSE</td><td>0x00004000</td><td>检查目标文件以查看它是否使用 COPY_FILE_RESTARTABLE复制。 如果是这样，则恢复复制。 否则，将完全复制文件。</td></tr>
<tr><td>COPY_FILE_NO_OFFLOAD</td><td>0x00040000</td><td>请勿尝试使用 Windows 复制卸载机制。 通常不建议这样做。</td></tr>
<tr><td>COPY_FILE_IGNORE_EDP_BLOCK</td><td>0x00400000</td><td>如果目标文件系统支持，则应在目标上复制和加密文件，而不是阻止该文件。 在 Windows 10 及更高版本上受支持。</td></tr>
<tr><td>COPY_FILE_IGNORE_SOURCE_ENCRYPTION</td><td>0x00800000</td><td>忽略源文件的加密状态。 在 Windows 10 及更高版本上受支持。</td></tr>
<tr><td>COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC</td><td>0x02000000</td><td>不要请求目标文件访问WRITE_DAC。 在 Windows 10 及更高版本上受支持。</td></tr>
<tr><td>COPY_FILE_OPEN_AND_COPY_REPARSE_POINT</td><td>0x00200000</td><td>无论类型如何，始终复制重新分析点。 调用方有责任了解重新分析点的含义。 支持Windows 10版本 19041 及更高版本。</td></tr>
<tr><td>COPY_FILE_DIRECTORY</td><td>0x00000080</td><td>指示源文件是目录文件。 如果提供 ，则使用 FILE_OPEN_FOR_BACKUP_INTENT打开源文件。 目录文件将具有其备用数据流、重新分析点信息和像普通文件一样复制的 CA。 在 Windows 10 版本 19041 及更高版本中受支持。</td></tr>
<tr><td>COPY_FILE_SKIP_ALTERNATE_STREAMS</td><td>0x00008000</td><td>请勿复制备用数据流。 在 Windows 10 版本 19041 及更高版本中受支持。</td></tr>
<tr><td>COPY_FILE_DISABLE_PRE_ALLOCATION</td><td>0x04000000</td><td>在执行复制之前，请勿预先分配目标文件大小。 在 Windows 10 版本 19041 及更高版本中受支持。</td></tr>
<tr><td>COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE</td><td>0x08000000</td><td>启用 LowFreeSpace 模式。 不使用重叠的 I/O。 不会尝试 ODX 和 SMB 卸载。 在 Windows 10 版本 19041 及更高版本中受支持。</td></tr>
<tr><td>COPY_FILE_REQUEST_COMPRESSED_TRAFFIC</td><td>0x10000000</td><td>请求基础传输通道在复制操作期间压缩数据。 并非所有媒体都支持请求，在这种情况下，它将被忽略。 压缩属性和参数 (计算复杂性、内存使用情况) 无法通过此 API 进行配置，并且可能会在不同的 OS 版本之间发生更改。 在 Windows Server 2022 和 Windows 10 内部版本 1903 及更高版本中受支持。 (Windows 10 上，驻留在 SMB 共享上的文件支持标志，其中协商的 SMB 协议版本为 SMB v3.1.1 或更高版本。)</td></tr>
<tr><td>COPY_FILE_ENABLE_SPARSE_COPY</td><td>0x20000000</td><td>在复制期间启用保留文件的稀疏状态。 在 Windows 11 版本 22H2 及更高版本中受支持。</td></tr>
</table><a name="重叠类">重叠类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>重叠类</td><td>OVERLAPPED</td><td>20</td><td>包含用于异步 (或 重叠) 输入和输出 (I/O) 的信息。</td></tr>
<tr><th colspan=4>重叠类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>状态</td><td>Internal</td><td>整数</td><td>I/O 请求的状态代码。发出请求时，系统会将此成员设置为 STATUS_PENDING 以指示操作尚未启动。</td></tr>
<tr><td>长度</td><td>InternalHigh</td><td>整数</td><td>为 I/O 请求传输的字节数。 如果请求完成且未出错，系统会设置此成员。</td></tr>
<tr><td>位置</td><td>Offset</td><td>整数</td><td>启动 I/O 请求的文件位置的低顺序部分，由用户指定。</td></tr>
<tr><td>偏移</td><td>OffsetHigh</td><td>整数</td><td>要启动 I/O 请求的文件位置的高序部分，由用户指定。</td></tr>
<tr><td>事件</td><td>hEvent</td><td>整数</td><td>事件的句柄，该句柄将在操作完成后由系统设置为信号状态。</td></tr>
</table><a name="转移文件">移动文件标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>MOVEFILE_COPY_ALLOWED</td><td>2</td><td>如果要将文件移动到其他卷，该函数将使用 CopyFile 和 DeleteFile 函数模拟移动。
如果文件已成功复制到其他卷，并且无法删除原始文件，则函数会成功使源文件保持不变。

此值不能与 MOVEFILE_DELAY_UNTIL_REBOOT 一起使用。</td></tr>

<tr><td>MOVEFILE_CREATE_HARDLINK</td><td>0x10</td><td>保留供将来使用。</td></tr>
<tr><td>MOVEFILE_DELAY_UNTIL_REBOOT</td><td>4</td><td>
在重新启动操作系统之前，系统不会移动文件。 系统在执行 AUTOCHK 之后、创建任何分页文件之前立即移动文件。 因此，此参数使 函数能够从以前的启动中删除分页文件。
仅当进程位于属于管理员组或 LocalSystem 帐户的用户的上下文中时，才能使用此值。

此值不能与 MOVEFILE_COPY_ALLOWED一起使用。</td></tr>

<tr><td>MOVEFILE_FAIL_IF_NOT_TRACKABLE</td><td>0x20</td><td>
如果源文件是链接源，则函数失败，但在移动后无法跟踪该文件。 如果目标是使用 FAT 文件系统格式化的卷，则可能会出现这种情况。
<tr><td>MOVEFILE_REPLACE_EXISTING</td><td>1</td><td>
如果存在名为 lpNewFileName 的文件，则函数会将其内容替换为 lpExistingFileName 文件的内容，前提是满足有关访问控制列表 (ACL) 的安全要求。 有关详细信息，请参阅本主题的“备注”部分。
如果 lpNewFileName 命名现有目录，则报告错误。</td></tr>

<tr><td>MOVEFILE_WRITE_THROUGH</td><td>8</td><td>在磁盘上实际移动文件之前， 函数不会返回 。
设置此值可确保作为复制和删除操作执行的移动在函数返回之前刷新到磁盘。 刷新发生在复制操作结束时。

如果设置了 MOVEFILE_DELAY_UNTIL_REBOOT ，则此值无效。</td></tr>
</table><a name="复制文件标志">复制文件标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>COPY_FILE_ALLOW_DECRYPTED_DESTINATION</td><td>0x00000008</td><td>即使无法加密目标复制，复制加密文件也会成功。</td></tr>
<tr><td>COPY_FILE_COPY_SYMLINK</td><td>0x00000800</td><td>如果源文件是符号链接，则目标文件也是指向源符号链接所指向的同一文件的符号链接。</td></tr>
<tr><td>COPY_FILE_FAIL_IF_EXISTS</td><td>0x00000001</td><td>如果目标文件已存在，则复制操作会立即失败。</td></tr>
<tr><td>COPY_FILE_NO_BUFFERING</td><td>0x00001000</td><td>复制操作使用未缓冲的 I/O 执行，绕过系统 I/O 缓存资源。 建议用于非常大的文件传输。</td></tr>
<tr><td>COPY_FILE_OPEN_SOURCE_FOR_WRITE</td><td>0x00000004</td><td>复制该文件，并打开原始文件进行写入访问。</td></tr>
<tr><td>COPY_FILE_RESTARTABLE</td><td>0x00000002</td><td>复制进度在目标文件中跟踪，以防复制失败。</td></tr>
<tr><td>COPY_FILE_REQUEST_COMPRESSED_TRAFFIC</td><td>0x10000000</td><td>请求基础传输通道在复制操作期间压缩数据。</td></tr>
</table><a name="通知条件">文件更改通知条件</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FILE_NOTIFY_CHANGE_FILE_NAME</td><td>0x00000001</td><td>对受监视的目录或子树中文件名的任意更改都会导致返回一个更改通知等待操作。 这些更改包括重命名、创建或删除文件名。</td></tr>
<tr><td>FILE_NOTIFY_CHANGE_DIR_NAME</td><td>0x00000002</td><td>受监视目录或子树中的任何目录名称更改都会导致更改通知等待操作返回。 更改包括创建或删除目录。</td></tr>
<tr><td>FILE_NOTIFY_CHANGE_ATTRIBUTES</td><td>0x00000004</td><td>对受监视的目录或子树中属性的任意更改都会导致返回一个更改通知等待操作。</td></tr>
<tr><td>FILE_NOTIFY_CHANGE_SIZE</td><td>0x00000008</td><td>对受监视的目录或子树中文件大小的任意更改都会导致返回一个更改通知等待操作。 仅当文件写入磁盘时，操作系统才会检测文件大小的更改。 对于使用大量缓存的操作系统，仅当缓存充分刷新时，才会进行检测。</td></tr>
<tr><td>FILE_NOTIFY_CHANGE_LAST_WRITE</td><td>0x00000010</td><td>对受监视的目录或子树中文件的上次写入时间的任意更改都会导致返回一个更改通知等待操作。 仅当文件写入磁盘时，操作系统才会检测上次写入时间的更改。 对于使用大量缓存的操作系统，仅当缓存充分刷新时，才会进行检测。</td></tr>
<tr><td>FILE_NOTIFY_CHANGE_SECURITY</td><td>0x00000100</td><td>监视目录或子树中的任何安全描述符更改都会导致更改通知等待操作返回。</td></tr>
</table><a name="查找级别">文件查找级别</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FindExInfoStandard</td><td>0</td><td>检索标准属性信息集。数据返回查找文件类 结构。</td></tr>
<tr><td>FindExInfoBasic</td><td>1</td><td>不查询短文件名，从而提高了整体枚举速度。 数据返回查找文件类 结构和 备用名</td></tr>
<tr><td>FindExInfoMaxInfoLevel</td><td>2</td><td>此值用于验证。支持的值小于此值。</td></tr>
</table><a name="查找匹配">文件查找匹配</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FindExSearchNameMatch</td><td>0</td><td>搜索与指定文件名匹配的文件。条件参数为空</td></tr>
<tr><td>FindExSearchLimitToDirectories</td><td>1</td><td>如果文件系统支持目录筛选，则函数将搜索与指定名称匹配且也是目录的文件。否则会以无提示方式忽略此标志。条件参数为空</td></tr>
<tr><td>FindExSearchLimitToDevices</td><td>2</td><td>此筛选类型不可用。</td></tr>
<tr><td>FindExSearchMaxSearchOp</td><td>3</td><td>此值用于验证。不可用。</td></tr>
</table><a name="查找选项">文件查找选项</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FIND_FIRST_EX_CASE_SENSITIVE</td><td>1</td><td>搜索区分大小写。</td></tr>
<tr><td>FIND_FIRST_EX_LARGE_FETCH</td><td>2</td><td>对目录查询使用更大的缓冲区，这可以提高查找操作的性能。</td></tr>
<tr><td>FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY</td><td>4</td><td>将结果限制为物理位于磁盘上的文件。 仅当存在文件虚拟化筛选器时，此标志才相关。</td></tr>

</table><font color="#0000FF"><a name="文件映射">文件映射</a>——使用示例</font><br>
文件映射 是文件内容与进程的一部分虚拟地址空间的关联。 系统创建 文件映射对象 (也称为 节对象) 来维护此关联。<br>
文件视图是进程用来访问文件内容的虚拟地址空间部分。 文件映射允许进程使用随机输入和输出 (I/O) 和顺序 I/O。<br>
它还允许进程高效处理大型数据文件（如数据库），而无需将整个文件映射到内存中。 多个进程还可以使用内存映射文件来共享数据。<br>

处理使用指针从文件视图读取和写入文件视图的过程，就像使用动态分配的内存一样。 使用文件映射可提高效率，因为文件驻留在磁盘上，但文件视图驻留在内存中。<br>

 进程还可以使用 虚拟保护 函数操作文件视图。下图显示了磁盘上的文件、文件映射对象和文件视图之间的关系。<br>

<img src="https://learn.microsoft.com/zh-cn/windows/win32/memory/images/fmap.png" alt="磁盘上的文件、文件映射对象和文件视图之间的关系。"><br>

磁盘上的文件可以是要映射到内存中的任何文件，也可以是系统页文件。 文件映射对象可以包含文件的全部或部分。 它由磁盘上的 文件提供支持。<br>
这意味着，当系统交换文件映射对象的页时，对文件映射对象所做的任何更改都将写入文件。 当文件映射对象的页面交换回时，它们将从 文件还原。<br>

文件视图可以包含文件映射对象的全部或部分内容。 一个进程通过文件视图操作文件。 进程可以为文件映射对象创建多个视图。<br>
每个进程创建的文件视图驻留在该进程的虚拟地址空间中。 当进程需要来自当前文件视图中的某个文件部分的数据时，它可以取消映射当前文件视图，然后创建新的文件视图。<br>

当多个进程使用相同的文件映射对象为本地文件创建视图时，数据是一致的。 也就是说，视图包含磁盘上文件的相同副本。 如果要在多个进程之间共享内存，则文件不能驻留在远程计算机上。<br>
<h2>创建文件映射对象</h2>
映射文件的第一步是通过调用 创建文件 函数打开文件。 若要确保其他进程无法写入映射的文件部分，应以独占访问权限打开文件。<br>
此外，文件句柄应保持打开状态，直到进程不再需要文件映射对象。 获取独占访问权限的一种简单方法是在 创建文件 的 共享 参数中指定零。<br>

映射文件 函数返回文件映射对象的句柄。创建文件视图时将使用此句柄，以便可以访问共享内存。 调用 映射文件 时，可以指定对象名称、要从文件映射的字节数，<br>
以及映射内存的读/写权限。调用 映射文件 的第一个进程创建文件映射对象。 为现有对象调用 映射文件 的进程会收到现有对象的句柄。 <br>
可以通过调用 最后错误 函数来判断对 映射文件 的成功调用是否创建或打开了文件映射对象。 最后错误 将 0 返回到创建进程， 并将183 返回到后续进程。<br>

如果访问标志与 创建文件 函数打开文件时指定的标志冲突， 映射文件 函数将失败。 例如，若要读取和写入文件，请执行以下操作：<br>

在 创建文件 的 读写 参数中指定读（0x80000000）和写（0x40000000）值。0xC0000000<br>
在 映射文件 的 页保护 参数中指定4值。<br>
创建文件映射对象不会提交物理内存，只保留它。<br>

<b>文件映射大小</b><br>
文件映射对象的大小与所映射的文件的大小无关。 但是，如果文件映射对象大于文件，系统会在 映射文件 返回之前扩展该文件。 如果文件映射对象小于文件，则系统仅映射文件中的指定字节数。<br>

映射文件 的 高数 和 低数 参数允许您指定要从文件映射的字节数：<br>

如果不希望文件大小更改 (例如，将只读文件映射) 时，请调用 映射文件 并为 高数 和 低数 指定零。 执行此操作会创建与文件完全相同的文件映射对象。<br>
 否则，必须计算或估计完成文件的大小，因为文件映射对象的大小是静态的;创建后，无法增加或减少其大小。 尝试以这种方式映射长度为零的文件失败，错误代码 为 1006。 程序应测试长度为零的文件，并拒绝此类文件。<br>

由命名文件支持的文件映射对象的大小受磁盘空间限制。 文件视图的大小限制为未保留虚拟内存的最大可用连续块。 这最多为 2 GB 减去进程已保留的虚拟内存。<br>

所选文件映射对象的大小控制了使用内存映射“查看”到文件的距离。 如果创建大小为 500 Kb 的文件映射对象，则无论文件大小如何，您都只能访问该文件的前 500 Kb。<br>
由于创建更大的文件映射对象不会花费任何系统资源，因此创建文件映射对象的大小 (将 映射文件 的 高数 和 低数 参数设置为零) 即使不希望查看整个文件。 系统资源的成本来自创建视图并访问它们。<br>
<h2>创建文件视图</h2>
若要将数据从文件映射到进程的虚拟内存，必须创建文件的视图。 映射进程 和 映射空间 函数使用 映射文件 返回的文件映射对象句柄<br>
在进程的虚拟地址空间中创建文件视图或文件的一部分。 如果访问标志与 映射文件 创建文件映射对象时指定的访问标志冲突，则这些函数失败。<br>

映射进程 函数返回指向文件视图的指针。 通过取消引用 映射进程 中指定的地址范围内的指针，应用程序可以从文件读取数据并将数据写入文件。<br>
写入文件视图会导致对文件映射对象进行更改。 对磁盘上的文件的实际写入由系统处理。 在写入文件映射对象时，实际上不会传输数据。<br>
而是缓存大部分文件输入和输出 (I/O) 以提高一般系统性能。 应用程序可以通过调用 刷新映射 函数来替代此行为，以强制系统立即执行磁盘事务。<br>

映射空间 函数的工作方式与 映射进程 函数完全相同，只不过它允许进程在 基址 参数的虚拟地址空间中指定文件视图的基址。<br>
如果指定地址没有足够的空间，则调用将失败。 因此，如果必须将文件映射到多个进程中的同一地址，则进程应协商相应的地址：<br>
基址 参数必须是系统内存分配粒度的整数倍数，否则调用将失败。 若要获取系统的内存分配粒度，请使用 系统信息 函数，该函数填充 <a href="#系统信息类">系统信息类</a> 结构的成员。<br>

应用程序可以从同一文件映射对象创建多个文件视图。 文件视图的大小可以不同于派生它所基于的文件映射对象，但它必须小于文件映射对象。<br>
 映射进程 的 高数 和 低数 参数指定的偏移量必须是系统分配粒度的倍数。<br>
 <h2>共享文件和内存</h2>
文件映射可用于在两个或多个进程之间共享文件或内存。 若要共享文件或内存，所有进程都必须使用同一文件映射对象的名称或句柄。<br>

若要共享文件，第一个进程使用 创建文件 函数创建或打开文件。 接下来，它通过使用 映射文件 函数创建文件映射对象，指定文件句柄和文件映射对象的名称。<br>
事件、信号量、互斥体、可等待计时器、作业和文件映射对象的名称共享同一命名空间。 因此， 如果 映射文件 和 打开映射 函数指定了由另一种类型的对象使用的名称，则它们将失败。<br>

若要共享与文件无关的内存，进程必须使用 映射文件 函数，并将 文件 参数指定为-1，而不是现有文件句柄，大小为零。 相应的文件映射对象访问系统分页文件支持的内存。 <br>

其他进程获取由第一个进程创建的文件映射对象的句柄的最简单方法是使用 打开映射 函数并指定对象的名称。 这称为 命名共享内存。<br>
如果文件映射对象没有名称，则进程必须通过继承或重复获取它的句柄。 有关继承和重复的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/inheritance">继承</a>。<br>

共享文件或内存的进程必须使用 映射进程 或 映射空间 函数创建文件视图。 它们必须使用信号灯、互斥体、事件或其他一些互斥技术来协调其访问。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/sync/synchronization"></a>同步</a>。<br>

在使用该共享文件映射对象的所有进程使用 关闭对象 函数关闭其句柄之前，不会销毁共享文件映射对象。<br>
<h2>从文件视图读取和写入</h2>
若要从文件视图读取数据，请取消引用 映射进程 函数返回的指针，如以下示例所示。<br>

从页面文件以外的文件视图读取或写入文件可能会导致 0xC0000006 异常。 例如，如果与服务器的连接断开，则访问驻留在远程服务器上的映射文件可能会生成异常。<br>
由于磁盘已满、基础设备故障或内存分配失败，也可能发生异常。 为了防止输入和输出 (I/O) 错误导致的异常，所有访问内存映射文件的尝试都应包装在结构化异常处理程序中。<br>
在收到 0xC0000006 时，请确保地址位于当前正在访问的映射中。 如果是，请正常恢复或失败;否则，不处理异常。<br>
<h2>关闭文件映射对象</h2>
当进程完成文件映射对象后，它应通过使用每个文件视图的 取消映射 函数来销毁其地址空间中的所有文件视图。<br>

取消映射文件的映射视图会使视图在进程的地址空间中占用的范围失效，并使该范围可用于其他分配。 它删除属于进程工作集的每个未映射虚拟页面的工作集条目，并减小进程的工作集大小。<br> 

未映射视图中修改的页面在共享计数达到零之前不会写入磁盘，或者换而言之，直到从共享页面的所有进程的工作集中取消映射或剪裁这些页面。即便如此，修改后的页面也会“懒洋洋地”写入磁盘：<br>
也就是说，修改可以在内存中缓存，并在以后写入磁盘。 为了在电源故障或系统崩溃时最大程度地降低数据丢失的风险，应用程序应使用 刷新映射 函数显式刷新修改后的页面。<br>

当每个进程使用完文件映射对象并取消映射所有视图时，它必须通过调用 关闭对象 关闭文件映射对象的句柄和磁盘上的文件。<br>
即使有文件视图仍处于打开状态，这些对 关闭对象 的调用也会成功。 但是，将文件视图保留为映射会导致内存泄漏。<br>
<font color="#0000FF">文件映射 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>关闭映射</td><td>CloseProfileUserMapping</td><td>关闭映射</td><td>关闭所有与初始化文件映射有关的登记键的句柄</td></tr>
<tr><td>映射文件</td><td>CreateFileMappingA</td><td>映射文件(文件,<a href="#安全属性类">安全</a>,<a href="#页面保护">页保护</a>,高数,低数,名称)</td><td>为指定文件创建或打开命名或未命名的文件映射对象。</td></tr>
<tr><td>刷新映射</td><td>FlushViewOfFile</td><td>刷新映射(基址,长度)</td><td>将文件映射视图中的字节范围写入磁盘。</td></tr>
<tr><td>映射进程</td><td>MapViewOfFile</td><td>映射进程(映射,<a href="#映射访问">访问</a>,高数,低数,大小)</td><td>将文件映射的视图映射到调用进程的地址空间。</td></tr>
<tr><td>映射空间</td><td>MapViewOfFileEx</td><td>映射空间(映射,<a href="#映射访问">访问</a>,高数,低数,大小,基址)</td><td>将文件映射的视图映射到调用进程的地址空间。</td></tr>
<tr><td>映射节点</td><td>MapViewOfFileExNuma</td><td>映射节点(映射,<a href="#映射访问">访问</a>,高数,低数,大小,基址,节点)</td><td>将映射的文件视图映射到调用进程的地址空间中，并指定物理内存的 NUMA 节点。</td></tr>
<tr><td>取消映射</td><td>UnmapViewOfFile</td><td>取消映射(基址)</td><td>从调用进程的地址空间中取消映射文件的映射视图。</td></tr>
<tr><td>打开映射</td><td>OpenFileMappingA</td><td>打开映射(访问,继承,映射名)</td><td>打开命名文件映射对象。</td></tr>
</table><a name="映射访问">映射访问类型</a><br>
对文件映射对象的访问类型，该对象确定页面的页面保护。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><th colspan=3>此参数可以是以下值之一，也可以是多个值的按位 OR 组合。</th></tr>
<tr><td>FILE_MAP_ALL_ACCESS</td><td>0xF001F</td><td>映射文件的读/写视图。 文件映射对象必须已创建 PAGE_READWRITE 或 PAGE_EXECUTE_READWRITE 保护。</td></tr>
<tr><td>FILE_MAP_READ</td><td>0x0004</td><td>映射文件的只读视图。 尝试写入文件视图会导致访问冲突。创建文件映射对象时必须具有 PAGE_READONLY、 PAGE_READWRITE、 PAGE_EXECUTE_READ或 PAGE_EXECUTE_READWRITE 保护。</td></tr>
<tr><td>FILE_MAP_WRITE</td><td>0x0002</td><td>映射文件的读/写视图。 文件映射对象必须已创建 PAGE_READWRITE 或 PAGE_EXECUTE_READWRITE 保护。</td></tr>
<tr><th colspan=3>使用按位 OR，可以将上述值与这些值组合在一起。</th></tr>
<tr><td>FILE_MAP_COPY</td><td>1</td><td>映射文件的写入时复制视图。 文件映射对象必须已使用 PAGE_READONLY、 PAGE_READ_EXECUTE、 PAGE_WRITECOPY、 PAGE_EXECUTE_WRITECOPY、 PAGE_READWRITE或 PAGE_EXECUTE_READWRITE 保护创建。
当进程写入写入时复制页时，系统会将原始页面复制到进程专用的新页。 新页面由分页文件提供支持。 对新页面的保护从写入时复制更改为读/写。

指定写入时复制访问权限时，系统将和进程提交费用用于整个视图，因为调用进程可能会写入视图中的每一页，从而使所有页面都成为私有页面。 新页面的内容永远不会写回到原始文件，并在取消映射视图时丢失。</td></tr>

<tr><td>FILE_MAP_LARGE_PAGES</td><td>0x20000000</td><td>从 Windows 10 版本 1703 开始，此标志指定应使用大页面支持映射视图。 视图的大小必须是 GetLargePageMinimum 函数报告的大型页面大小的倍数，并且文件映射对象必须已使用 SEC_LARGE_PAGES 选项创建。 如果为 lpBaseAddress 提供非 null 值，则该值必须是 GetLargePageMinimum 的倍数。
<tr><td>FILE_MAP_EXECUTE</td><td>0x0020</td><td>映射文件的可执行视图 (映射的内存可以作为代码) 运行。 创建文件映射对象时必须具有 PAGE_EXECUTE_READ、 PAGE_EXECUTE_WRITECOPY或 PAGE_EXECUTE_READWRITE 保护。
Windows Server 2003 和 Windows XP： 此值从 Windows XP SP2 和 Windows Server 2003 SP1 开始可用。</td></tr>

<tr><td>FILE_MAP_TARGETS_INVALID</td><td>0x40000000</td><td>将映射文件中的所有位置设置为控制流防护 (CFG) 的无效目标。 此标志类似于 PAGE_TARGETS_INVALID。 将此标志与执行访问权限 FILE_MAP_EXECUTE结合使用。 对这些页面中的位置的任何间接调用都将失败 CFG 检查，并且进程将终止。 分配的可执行页面的默认行为是标记为 CFG 的有效调用目标。</td></tr>
</table><a name="页面保护">页面保护类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PAGE_EXECUTE_READ</td><td>0x20</td><td>允许映射视图，以便进行只读、写入时复制或执行访问。必须使用GENERIC_READ创建 hFile 参数指定的文件句柄，并GENERIC_EXECUTE访问权限。</td></tr>
<tr><td>PAGE_EXECUTE_READWRITE</td><td>0x40</td><td>允许映射视图，以便进行只读、写入时复制、读/写或执行访问。必须使用GENERIC_READ、GENERIC_WRITE和GENERIC_EXECUTE访问权限创建 hFile 参数指定的文件句柄。</td></tr>
<tr><td>PAGE_EXECUTE_WRITECOPY</td><td>0x80</td><td>允许映射视图，以便进行只读、写入时复制或执行访问。必须使用 GENERIC_READ 创建 hFile 参数指定的文件句柄，并GENERIC_EXECUTE访问权限。</td></tr>
<tr><td>PAGE_READONLY</td><td>0x02</td><td>允许映射视图，以便进行只读或写入时复制访问。 尝试写入特定区域会导致访问冲突。必须使用GENERIC_READ访问权限创建 hFile 参数指定的文件句柄。</td></tr>
<tr><td>PAGE_READWRITE</td><td>0x04</td><td>允许映射视图，以便进行只读、写入时复制或读/写访问。必须使用 GENERIC_READ 创建 hFile 参数指定的文件句柄，GENERIC_WRITE访问权限。</td></tr>
<tr><td>PAGE_WRITECOPY</td><td>0x08</td><td>允许映射视图，以便进行只读或写入时复制访问。 此值等效于 PAGE_READONLY。必须使用GENERIC_READ访问权限创建 hFile 参数指定的文件句柄。</td></tr>
</table>
应用程序可以通过将以下属性与前面的页面保护值之一组合，为文件映射对象指定以下一个或多个属性。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SEC_COMMIT</td><td>0x8000000</td><td>如果文件映射对象由操作系统分页文件提供支持， (hfile 参数 INVALID_HANDLE_VALUE) ，则指定当文件的视图映射到进程地址空间时，将提交而不是保留整个页面范围。 系统必须有足够的可提交页来保存整个映射。 否则， 映射文件 将失败。此属性对由可执行映像文件或数据文件支持的文件映射对象无效， (hfile 参数是文件) 的句柄。SEC_COMMIT 不能与 SEC_RESERVE 结合使用。</td></tr>
<tr><td>SEC_IMAGE</td><td>0x1000000</td><td>指定 hFile 参数指定的文件是可执行映像文件。SEC_IMAGE 属性必须与页面保护值（如 PAGE_READONLY）结合使用。 但是，此页面保护值对可执行文件的视图没有影响。 可执行文件的视图的页面保护由可执行文件本身决定。</td></tr>
<tr><td>SEC_IMAGE_NO_EXECUTE</td><td>0x11000000</td><td>指定 hFile 参数指定的文件是不会执行的可执行映像文件，并且加载的映像文件不会运行强制完整性检查。 此外，映射使用 SEC_IMAGE_NO_EXECUTE 属性创建的文件映射对象的视图不会调用使用 PsSetLoadImageNotifyRoutine 内核 API 注册的驱动程序回调。SEC_IMAGE_NO_EXECUTE 属性必须与PAGE_READONLY页保护值结合使用。 SEC_IMAGE_NO_EXECUTE中没有其他属性有效。在 Windows Server 2012 和 Windows 8 之前不支持此值。</td></tr>
<tr><td>SEC_LARGE_PAGES</td><td>0x80000000</td><td>允许将大型页面用于操作系统分页文件支持的文件映射对象， (hfile 参数 INVALID_HANDLE_VALUE) 。 由可执行映像文件或数据文件支持的文件映射对象不支持此属性， (hFile 参数是可执行映像或数据文件的句柄) 。文件映射对象的最大大小必须是 GetLargePageMinimum 函数返回的大页面最小大小的倍数。 否则， 映射文件 将失败。 映射使用 SEC_LARGE_PAGES 创建的文件映射对象的视图时，基址和视图大小也必须是最小大页面大小的倍数。</td></tr>
<tr><td>SEC_NOCACHE</td><td>0x10000000</td><td>将所有页面设置为不可缓存。除非设备明确需要，否则应用程序不应使用此属性。 将互锁函数 与SEC_NOCACHE映射 的内存结合使用可能会导致 EXCEPTION_ILLEGAL_INSTRUCTION 异常。SEC_NOCACHE 要求设置 SEC_RESERVE 或 SEC_COMMIT 属性。</td></tr>
<tr><td>SEC_RESERVE</td><td>0x4000000</td><td>如果文件映射对象由操作系统分页文件提供支持， (hfile 参数 INVALID_HANDLE_VALUE) ，则指定当文件的视图映射到进程地址空间时，将保留整个页面范围供进程以后使用，而不是提交。可以在后续调用 VirtualAlloc 函数时提交保留页。 提交页面后，无法使用 VirtualFree 函数释放或取消提交页面。此属性对由可执行映像文件或数据文件支持的文件映射对象无效， (hfile 参数是文件) 的句柄。SEC_RESERVE 不能与 SEC_COMMIT 结合使用。</td></tr>
<tr><td>SEC_WRITECOMBINE</td><td>0x40000000</td><td>将所有页面设置为写合并。除非设备明确需要，否则应用程序不应使用此属性。 将互锁函数 与SEC_WRITECOMBINE映射 的内存结合使用可能会导致 EXCEPTION_ILLEGAL_INSTRUCTION 异常。SEC_WRITECOMBINE 要求设置 SEC_RESERVE 或 SEC_COMMIT 属性。</td></tr>
</table><font color="#0000FF"><a name="原子名单">原子名单</a>——使用示例</font><br>
原子表是系统定义的表，用于存储字符串和相应的标识符。Atom 表中放置一个字符串（称为 原子名称），并接收一个 16 位整数（称为 atom），该整数可用于访问该字符串。<br>

系统提供许多原子表。 每个原子表都有不同的用途。 例如，Dynamic Data Exchange (DDE) 应用程序使用 全局 atom 表 与其他应用程序共享 item-name 和 topic-name 字符串。<br>
DDE 应用程序将全局原子传递给其合作伙伴应用程序，而不是传递实际字符串。 伙伴使用原子从 atom 表中获取字符串。应用程序可以使用本地 Atom 表来存储其自己的项名称关联。<br>
系统使用应用程序无法直接访问的 Atom 表。 但是，应用程序在调用各种函数时使用这些原子。 例如，注册的剪贴板格式存储在系统使用的内部 Atom 表中。<br>
应用程序使用 注册剪板 函数将 atom 添加到此 Atom 表。 此外，已注册的类存储在系统使用的内部原子表中。 应用程序使用 注册窗类 或 注册窗体 函数将 atom 添加到此 Atom 表。<br>
<h2>全局 Atom 表</h2>
全局 Atom 表可供所有应用程序使用。 当应用程序在全局 Atom 表中放置字符串时，系统会生成一个在整个系统中唯一的原子。 具有 atom 的任何应用程序都可以通过查询全局 atom 表来获取它标识的字符串。<br>

定义用于与其他应用程序共享数据的专用 DDE 数据格式的应用程序应将格式名称放在全局 Atom 表中。 此技术可防止与系统或其他应用程序定义的格式的名称发生冲突，并使标识符 (原子) 其他应用程序可用的消息或格式。<br>

<h2>用户 Atom 表</h2>
除了全局 Atom 表，用户 Atom 表是另一个系统 Atom 表，也是在所有进程之间共享的。 用户原子表用于 win32k 内部的少量方案;例如，Windows 模块名称、win32k 中的已知字符串、OLE 格式等。<br>
尽管应用程序不直接与用户 Atom 表交互，但它们会调用多个 API（如 注册窗类 注册消息 和 注册剪板），这些 API 可将条目添加到用户 Atom 表。 添加的 注册窗类 条目可由 注销窗类 删除。<br>
但是，在会话结束之前，不会删除 由 注册消息 和 注册剪板 添加的条目。 如果用户 Atom 表没有更多的空间，并且传入的字符串不在表中，则调用将失败。<br>

<h2>Atom 表大小</h2>
许多关键 API（包括 创建窗口）依赖于用户原子。 因此，用户 Atom 表中的空间耗尽将导致严重问题：例如，所有应用程序都可能无法启动。<br>
下面是一些建议，可确保应用程序有效地利用 Atom 表，并保留应用程序和系统的可靠性和性能：<br>

1。应限制应用对用户 Atom 表的使用。 使用 API（如 注册窗类、注册消息 或 注册剪板 ）存储唯一字符串会占用用户 Atom 表中的空间，其他应用全局使用该空间来使用字符串注册窗口类。<br>
如果可能，应使用 添加名单/删除名单 将字符串存储在本地 Atom 表中，或者使用 添全名单/删全名单 （如果需要原子跨进程）。<br>

2。如果担心应用程序会导致用户 Atom 表问题，可以通过连接内核调试器并在调用 UserAddAtomEx (bae1 win32kbase!UserAddAtomEx /p <eprocess> "kc10;g") 时进入进程来调查根本原因。<br>
在调用堆栈上查找 user32! ，以查看正在调用哪个 API。 该方法类似于识别全局原子表泄漏中介绍 的全局原子表问题检测。 转储用户 Atom 表内容的另一种方法是<br>
在从 0xC000 到 0xFFFF 的可能原子范围内调用 剪切板名 。 如果在应用程序运行时，总原子计数稳步上升，或者在关闭应用时未返回到基线，则存在问题。<br>

<h2>本地 Atom 表</h2>
应用程序可以使用本地 Atom 表有效地管理仅在应用程序中使用的大量字符串。 这些字符串和关联的原子仅适用于创建表的应用程序。<br>

许多结构中需要相同字符串的应用程序可以通过使用本地 Atom 表来减少内存使用量。 应用程序可以将字符串放置在 atom 表中，并将生成的原子包含在结构中，<br>
而不是将字符串复制到每个结构中。 这样，字符串在内存中只出现一次，但可以在应用程序中多次使用。<br>

在搜索特定字符串时，应用程序还可以使用本地 Atom 表来节省时间。 若要执行搜索，应用程序只需将搜索字符串放在 atom 表中，并将生成的原子与相关结构中的原子进行比较。<br>

 比较原子通常比比较字符串快。Atom 表作为哈希表实现。 默认情况下，本地 Atom 表对其哈希表使用 37 个存储桶。 但是，可以通过调用 初始名单 函数更改使用的存储桶数。<br>
  但是，如果应用程序调用 初始名单，则必须在调用任何其他 Atom 管理功能之前执行此操作。<br>

<h2>Atom 类型</h2>
应用程序可以创建两种类型的原子：字符串原子和整数原子。 整数原子和字符串原子的值不重叠，因此这两种类型的原子都可以在同一代码块中使用。<br>

多个函数接受字符串或原子作为参数。 将原子传递给这些函数时，应用程序可以使用 MAKEINTATOM 宏将原子转换为函数可以使用的形式。<br>

以下部分介绍原子类型。<br>

<h2>字符串 Atoms</h2>
当应用程序将以 null 结尾的字符串传递给 添全名单、添加名单、查全名单 和 查找名单 函数时，它们接收 字符串原子 (16 位整数) 返回。 字符串原子具有以下属性：<br>
<pre>
字符串原子的值在 0xC000 到0xFFFF 范围内。
在 Atom 表中搜索原子名称时，大小写并不重要。 此外，整个字符串必须在搜索操作中匹配;不执行子字符串匹配。
与字符串 Atom 关联的字符串的大小不能超过 255 个字节。 此限制适用于所有原子函数。
引用计数与每个原子名称相关联。 每次将原子名称添加到表中时，计数都会递增，并在每次从表中删除原子名称时递减。
这可以防止同一字符串 Atom 的不同用户销毁彼此的原子名称。 当原子名称的引用计数等于零时，系统会从表中删除原子和原子名称。</pre>
<h2>整数原子</h2>
<pre>
整数原子与字符串原子的不同之处在于：
整数原子的值在0x0001 到 0xBFFF 的范围内。
整数原子的字符串表示形式为 #dddd，其中 dddd 表示的值是十进制数字。 忽略前导零。</pre>
没有与整数原子关联的引用计数或存储开销。</pre>
<h2>Atom 创建和使用情况计数</h2>
应用程序通过调用 添加名单 函数创建本地原子;它通过调用 添全名单 函数创建全局原子。 这两个函数都需要指向字符串的指针。 系统会在相应的 atom 表中搜索字符串，<br>
并将相应的原子返回到应用程序。 对于字符串原子，如果字符串已驻留在 atom 表中，系统会在此过程中递增字符串的引用计数。<br>

重复调用以添加相同的原子名称将返回相同的原子。 如果在调用 添加名单 时表中不存在原子名称，则将原子名称添加到表中，并返回新的原子。 如果它是字符串原子，则其引用计数也设置为 1。<br>

当应用程序不再需要使用本地原子时，应调用 删除名单 函数;当它不再需要全局原子时，它应调用 删全名单 函数。<br>
对于字符串原子，其中任一函数会将相应原子的引用计数减少 1。 当引用计数达到零时，系统会从表中删除原子名称。<br>

只要字符串原子的引用计数大于零，字符串原子的原子名称就保留在全局原子表中，即使在将它放入表中的应用程序终止之后也是如此。<br>
 当关联的应用程序终止时，将销毁本地原子表，而不考虑表中原子的引用计数。

<h2>Atom-Table查询</h2>
应用程序可以使用 查找名单 或 查全名单 函数来确定特定字符串是否已在原子表中。 这些函数在原子表中搜索指定的字符串，如果字符串存在，则返回相应的原子。<br>

应用程序可以使用 获取名单 或 取全名单 函数从原子表检索原子名称字符串，前提是应用程序具有与所搜索的字符串对应的原子。<br>
这两个函数将指定原子的 atom-name 字符串复制到缓冲区，并返回复制的字符串的长度。 获取名单 从本地原子表检索原子名称字符串， 取全名单 从全局原子表检索原子名称字符串。<br>

<h2>Atom 字符串格式</h2>
添加名单、添全名单、查找名单 和 查全名单 函数采用指向以 0 结尾的字符串的指针。 应用程序可以通过以下方式之一指定此指针。<br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>字符串格式</td><td>说明</td></tr>
<tr><td>#dddd</td><td>指定为十进制字符串的整数。 用于创建或查找整数原子。</td></tr>
<tr><td>字符串 atom 名称</td><td>字符串原子名称。 用于向原子表添加字符串原子名称，并接收原子作为返回。</td></tr>
</table>
<font color="#0000FF">原子名单 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>添加名单</td><td>AddAtomA</td><td>编号=添加名单("张三先生")</td><td>将一个字符串[255]添加到本地原子表(程序内)中，并返回一个唯一标识</td></tr>
<tr><td>删除名单</td><td>DeleteAtom</td><td>删除名单(编号)</td><td>从本地原子表中删除关联的字符串</td></tr>
<tr><td>查找名单</td><td>FindAtomA</td><td>编号=查找名单("李四")</td><td>从本地原子表中查找字符串,得到标识</td></tr>
<tr><td>获取名单</td><td>GetAtomNameA</td><td>获取名单(编号,名称,长度)</td><td>获取本地原子表中编号相对应的字符串</td></tr>
<tr><td>初始名单</td><td>InitAtomTable</td><td>初始名单(数量)</td><td>初始化本地原子表并将其设置为指定的大小</td></tr>
<tr><td>添全名单</td><td>GlobalAddAtomA</td><td>编号=添全名单("张三先生")</td><td>将一个字符串[255]添加到全局原子表(系统内)中，并返回一个唯一标识</td></tr>
<tr><td>删全名单</td><td>GlobalDeleteAtom</td><td>删全名单(编号)</td><td>从全局原子表中删除关联的字符串</td></tr>
<tr><td>查全名单</td><td>GlobalFindAtomA</td><td>编号=查全名单("李四")</td><td>从全局原子表中查找字符串,得到标识</td></tr>
<tr><td>取全名单</td><td>GlobalGetAtomNameA</td><td>取全名单(编号,名称,长度)</td><td>获取全局原子表中编号相对应的字符串</td></tr>
</table><font color="#0000FF"><a name="程序资源">程序资源</a>——资源类型</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用类型</td></tr>
<tr><td>RT_CURSOR</td><td>1</td><td>依赖于硬件的游标资源。</td></tr>
<tr><td>RT_BITMAP</td><td>2</td><td>位图资源。</td></tr>
<tr><td>RT_ICON</td><td>3</td><td>依赖于硬件的图标资源。</td></tr>
<tr><td>RT_MENU</td><td>4</td><td>菜单资源。</td></tr>
<tr><td>RT_DIALOG</td><td>5</td><td>对话框。</td></tr>
<tr><td>RT_STRING</td><td>6</td><td>字符串表条目。</td></tr>
<tr><td>RT_FONTDIR</td><td>7</td><td>字体目录资源。</td></tr>
<tr><td>RT_FONT</td><td>8</td><td>字体资源。</td></tr>
<tr><td>RT_ACCELERATOR</td><td>9</td><td>快捷键表。</td></tr>
<tr><td>RT_RCDATA</td><td>10</td><td>应用程序定义的资源 (原始数据)。</td></tr>
<tr><td>RT_MESSAGETABLE</td><td>11</td><td>消息表条目。</td></tr>
<tr><td>RT_GROUP_CURSOR</td><td>12</td><td>与硬件无关的游标资源。</td></tr>
<tr><td>RT_GROUP_ICON</td><td>13</td><td>与硬件无关的图标资源。</td></tr>
<tr><td>RT_VERSION</td><td>16</td><td>版本资源。</td></tr>
<tr><td>RT_DLGINCLUDE</td><td>17</td><td>允许资源编辑工具将字符串与 .rc 文件相关联。</td></tr>
<tr><td>RT_PLUGPLAY</td><td>19</td><td>即插即用资源。</td></tr>
<tr><td>RT_VXD</td><td>20</td><td>Vxd。</td></tr>
<tr><td>RT_ANICURSOR</td><td>21</td><td>动画光标。</td></tr>
<tr><td>RT_ANIICON</td><td>22</td><td>动画图标。</td></tr>
<tr><td>RT_HTML</td><td>23</td><td>HTML 资源。</td></tr>
<tr><td>RT_MANIFEST</td><td>24</td><td>并行程序集清单。</td></tr>
</table>资源语言通常写0,使用默认语言<br>
当前用户的语言:1024<br>
操作系统默认语言:2048<br>
资源的名称可以是宽字符文本或者数字标识符,数值不超过65535<br>
1.读取本程序自定义资源<br>
资源数据是模块函数,提交资源编号和大小,可以得到资源的数据<br>
<font color="#0000FF">整数 大小,数据=资源数据(1,@大小)</font>;//获取1号资源,用大小这个变量接收数据长度<br>
下面是资源数据模块里面的代码解析<br>
<font color="#0000FF">程序段 资源数据(编号,大小)</font><br>
<font color="#0000FF">	整数 资源=查找资源(0,编号,10)</font>;//模块写0是获取EXE本身的资源,类型10=自定义资源<br>
<font color="#0000FF">	整数 长度=资源大小(0,资源)</font>;//获取资源大小,用来告知调用者<br>
<font color="#0000FF">	整数 数据=加载资源(0,资源)</font>;//加载资源到数据变量<br>
<font color="#0000FF">	整数 内容=锁定资源(数据)</font>;//锁定数据这段内存才可以进行读写<br>
<font color="#0000FF">如果(大小)长度>大小;</font>;//需要获取大小提交变量指针非零,向这个地址写入资源大小<br>
<font color="#0000FF">返回(内容)结束</font>;//把数据的内容地址返回给调用者<br>
2.更新文件资源<br>
<font color="#0000FF">整数 大小,数据=文件内容("d:\123.jpg",@大小)</font>;//使用文件内容模块读取图片并得到文件大小<br>
<font color="#0000FF">整数 模块=开更资源("d:\123.exe",假)</font>;//打开一个可执行程序,得到模块句柄<br>
<font color="#0000FF">更新资源(模块,10,1,0,数据,大小)</font>;//资源类型10=自定义资源,名称标识为1,语言写0<br>
<font color="#0000FF">停更资源(模块,假)</font>;//指定放弃为假,保存数据到文件资源中<br>
3.枚举文件里的资源<br>
<font color="#0000FF">整数 模块=加载库("测试.dll")</font>;//获取DLL里的资源,先要得到模块的句柄<br>
<font color="#0000FF">枚举资源(模块, 2, @资源回调,0)</font>;//资源类型为2=位图,指定资源回调的指针地址<br>
自定义参数是定义一个值,回调函数可以知道是执行哪里的代码<br>
<font color="#0000FF">程序段 资源回调(模块,类型,名称,定义)</font>;//这里可以得到资源的类型和名称<br>
<font color="#0000FF">整数 图片=载入位图(模块, 名称)</font>;//加载的位图可以加入图像列表或数组<br>
<font color="#0000FF">图像(编号)=图片;编号++</font>;//加入数组,并让编号递增<br>
<font color="#0000FF">删除对象(图片)</font>;//加入之后删除图片对象<br>
<font color="#0000FF">结束</font>;//枚举资源通常是多个资源数据,这段代码是会循环多次调用<br>
<font color="#0000FF">程序资源 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>语言回调</td><td>EnumResLangProc</td><td>语言回调(模块,类型,名称,语言,定义)</td><td>语言资源 函数一起使用的应用程序定义的回调函数。它接收资源项的类型、名称和语言</td></tr>
<tr><td>资源回调</td><td>EnumResNameProc</td><td>资源回调(模块,类型,名称,定义)</td><td>枚举资源 函数一起使用的应用程序定义的回调函数。它接收资源项的类型和名称</td></tr>
<tr><td>类型回调</td><td>EnumResTypeProc</td><td>类型回调(模块,类型,定义)</td><td>资源类型 函数一起使用的应用程序定义的回调函数。它接收资源项的类型</td></tr>
<tr><td>语言资源</td><td>EnumResourceLanguagesExA</td><td>语言资源(模块,类型,名称,回调,定义,标志)</td><td>枚举与指定类型和名称的特定于语言的资源。标志:1=指定文件,2=关联.mui文件,4=MUI语言的.mui文件,8验证PE头</td></tr>
<tr><td>枚举资源</td><td>EnumResourceNamesA</td><td>枚举资源(模块,类型,回调,定义)</td><td>枚举与指定类型的可执行文件或.mui文件的资源。</td></tr>
<tr><td>资源类型</td><td>EnumResourceTypesExA</td><td>资源类型(模块,回调,定义,标志)</td><td>枚举与指定类型的可执行文件或.mui文件的资源类型。标志:1=指定文件,2=关联.mui文件,8验证PE头</td></tr>
<tr><td>查找资源</td><td>FindResourceA</td><td>查找资源(模块,资源,类型)</td><td>确定指定模块中具有指定类型和名称的资源的位置。</td></tr>
<tr><td>查寻资源</td><td>FindResourceExA</td><td>查寻资源(模块,类型,名称,语言)</td><td>确定指定模块中具有指定类型、名称和语言的资源的位置。</td></tr>
<tr><td>释放资源</td><td>FreeResource</td><td>释放资源(资源)</td><td>递减已加载资源的引用计数。达到零时释放资源占用的内存。</td></tr>
<tr><td>加载资源</td><td>LoadResource</td><td>资源=加载资源(模块,资源ID)</td><td>将指定的资源ID加载到全局内存中</td></tr>
<tr><td>锁定资源</td><td>LockResource</td><td>内存=锁定资源(资源)</td><td>从指定的资源获取到数据的内存地址,此锁定是找到目标的意思,无需解锁</td></tr>
<tr><td>资源大小</td><td>SizeofResource</td><td>长度=资源大小(模块,资源)</td><td>检索指定资源的大小（以字节为单位）。</td></tr>
<tr><td>开更资源</td><td>BeginUpdateResourceA</td><td>开更资源(文件名,删除资源)</td><td>获取用于添加、删除或替换二进制模块中的资源的句柄。删除资源为真=删除已有资源</td></tr>
<tr><td>停更资源</td><td>SizeofResource</td><td>停更资源(模块,放弃)</td><td>提交或放弃之前更新资源所做的更改。放弃为假=更新写入文件</td></tr>
<tr><td>更新资源</td><td>UpdateResourceA</td><td>更新资源(模块,类型,名称,语言,数据,大小)</td><td>添加、删除或替换可移植可执行文件 (PE) 文件中的资源。</td></tr>
</table><font color="#0000FF"><a name="串口通信">串口通信</a>——使用示例</font><br>
通信资源是提供单一双向异步数据流的物理或逻辑设备。 串行端口、并行端口、传真机和调制解调器是通信资源的示例。对于每个通信资源，都有一个由库或驱动程序组成的服务提供程序，使应用程序能够访问资源。<br>
文件输入和输出 (I/O) 函数 (创建文件、关闭对象、读取文件、读入文件、 写入文件 和 写出文件) 提供用于打开和关闭通信资源句柄以及执行读写操作的基本接口。 通信函数提供对通信资源的访问权限。 <br>
<h2>通信资源句柄</h2>
<pre>
进程使用 创建文件 函数打开通信资源的句柄。 例如，指定 COM1 会打开串行端口的句柄，而 LPT1 将打开并行端口的句柄。
如果指定的资源当前正由另一个进程使用则会失败。 进程的任何线程都可以使用 创建文件 返回的句柄来标识访问资源的任何函数中的资源。

当进程调用 创建文件 打开通信资源时，它会指定以下属性：

指定资源存在哪种类型的读/写访问。
句柄是否可以由子进程继承。
句柄是否可以在重叠 (异步) I/O 操作中使用。
当进程使用 创建文件 打开通信资源时，它必须为以下参数指定某些值：

共享 参数必须为零，以便打开资源进行独占访问。
方式 参数必须指定 3(已存在) 标志。
模板 参数必须为 0。
使用 创建文件 直接打开设备的句柄时，应用程序必须使用特殊字符“\\.\”来标识设备。 例如，若要打开用于驱动 A 的句柄，请为 创建文件 的 名称指定 \\ .\a： 。
调用进程可以使用 硬件控制 函数中的 句柄将控制代码发送到设备。</pre>
<h2>修改通信资源设置</h2><pre>
当 创建文件 函数打开串行通信资源的句柄时，系统会根据上次打开资源时设置的值初始化和配置资源。 保留以前的设置使用户能够在重新打开设备时保留设置。
从上一个打开操作继承的值包括设备控制块的配置设置 (DCB 结构) 以及 I/O 操作中使用的超时值。 如果设备从未打开，则会使用系统默认值对其进行配置。
若要确定串行通信资源的初始配置，进程调用 串口状态 函数，该函数使用当前配置设置填充串行端口 <a href="#串口通讯类">串口通讯类</a> 结构。
若要修改此配置，进程在对 状态串口 函数的调用中指定 <a href="#串口通讯类">串口通讯类</a> 结构。
<a href="#串口通讯类">DCB</a> 结构的成员指定配置设置，例如包速率、每个字节的数据位数和每个字节的停止位数。
 其他成员指定特殊字符，并启用奇偶校验和流控制。当进程只需要修改其中几个配置设置时，应首先调用 串口状态 ，以使用当前配置填充 DCB 结构。
 然后，该过程可以调整 <a href="#串口通讯类">通讯类</a> 结构中的重要值，并通过调用 状态串口 并指定修改后的 DCB 结构来重新配置设备。
 此过程可确保 DCB 结构的未修改成员包含适当的值。 例如，常见错误是使用 DCB 结构配置设备，在该结构中的 开字符 成员等于 关字符 成员。
串口命令 函数提供了另一种修改 <a href="#串口通讯类">通讯类</a> 结构的方法。 串口命令 使用与 模式 命令的命令行参数相同的格式的字符串来指定波特率、奇偶校验方案、停止位数和数据位数。
此函数不会更改 DCB 的剩余成员，但相应的成员设置为禁用 XON/XOFF 和硬件流控制。 串口命令 仅修改 <a href="#串口通讯类">串口通讯类</a> 结构;它不会重新配置设备。
进程可以使用 串口属性 函数重新配置通信资源，以便从设备驱动程序获取有关其支持的配置设置的信息。 此过程可以使用此信息来避免指定不支持的配置。
状态串口 函数重新配置通信资源，但它不会影响指定驱动程序的内部输出和输入缓冲区。 缓冲区不会刷新，挂起的读取和写入操作不会过早终止。
进程使用 串口大小 函数重新初始化通信资源，该函数执行以下任务：
终止挂起的读取和写入操作，即使它们尚未完成。
放弃未读字符，释放与指定资源关联的驱动程序的内部输出和输入缓冲区。
重新分配内部输出和输入缓冲区。

调用 串口大小 不需要进程。 如果没有，则资源的驱动程序在第一次使用通信资源句柄时使用默认设置初始化设备。</pre>
<a name="串口通讯类">串口通讯类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>串口通讯类</td><td>DCB</td><td>28</td><td>包含了串口通讯相关设置的结构</td></tr>
<tr><th colspan=4>串口通讯类——成员表</th></tr>
<tr><td>总长度</td><td>DCBlength</td><td>整数</td><td>结构的大小</td></tr>
<tr><td>波特率</td><td>BaudRate</td><td>整数</td><td>设置串口通信的波特率</td></tr>
<tr><td>比特位</td><td>fBitFields</td><td>整数</td><td>设置串口通信的比特位</td></tr>
<tr><td>资源号</td><td>wReserved</td><td>整形</td><td>当前未用</td></tr>
<tr><td>开阈值</td><td>XonLim</td><td>整形</td><td>XON阈值</td></tr>
<tr><td>关阈值</td><td>XoffLim</td><td>整形</td><td>XOFF阈值</td></tr>
<tr><td>数据位</td><td>ByteSize</td><td>字节</td><td>字符位数，4-8</td></tr>
<tr><td>校验位</td><td>Parity</td><td>字节</td><td>奇偶校验位</td></tr>
<tr><td>停止位</td><td>StopBits</td><td>字节</td><td>0，1，2分别为1，1.5，2</td></tr>
<tr><td>开字符</td><td>XonChar</td><td>字节</td><td>XON字符</td></tr>
<tr><td>关字符</td><td>XoffChar</td><td>字节</td><td>XOFF字符</td></tr>
<tr><td>错误符</td><td>ErrorChar</td><td>字节</td><td>奇偶错误替代字符</td></tr>
<tr><td>结束符</td><td>EofChar</td><td>字节</td><td>结束字符</td></tr>
<tr><td>事件符</td><td>EvtChar</td><td>字节</td><td>事件字符</td></tr>
<tr><td>预留</td><td>wReserved1</td><td>字节</td><td>当前未用</td></tr>
<tr><td>备用</td><td>wReserved2</td><td>字节</td><td>当前未用</td></tr>
</table><h2>通信资源配置</h2><pre>
<a href="#串口配置类">串口配置类</a> 结构定义通信资源的配置（串行或其他方式）。 结构的格式因通信资源类型 (提供程序子类型) 而异。
前几个结构成员对所有通信资源通用：为特定提供程序子类型定义其他成员。 特定服务提供商也可以扩展 串口配置类 结构。

应用程序可以使用 查询串口 和 设置串口 函数获取和设置通信资源的 配置 。 打开后，将使用提供程序子类型的默认配置初始化通信资源。
若要获取和设置提供程序子类型的默认配置，请使用 串口默认 和 默认串口 函数。
若要提示用户输入配置信息，请使用 串口设置 函数。 此函数显示由服务提供商定义的对话框，并根据用户输入填充 串口配置类 结构。</pre>
<a name="串口配置类">串口配置类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>串口配置类</td><td>COMMCONFIG</td><td>52</td><td>包含了串口通讯相关配置的结构</td></tr>
<tr><th colspan=4>串口配置类——成员表</th></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构的大小，以字节为单位</td></tr>
<tr><td>版本</td><td>wVersion</td><td>整数</td><td>结构的版本号。可以为 1</td></tr>
<tr><td>通讯</td><td>dcb</td><td>DCB</td><td>串口通讯类结构体</td></tr>
<tr><td>设备</td><td>dwProviderSubType</td><td>整数</td><td>通信提供程序的设备类型</td></tr>
<tr><td>偏移</td><td>dwProviderOffset</td><td>整数</td><td>数据相对于结构开头的偏移量</td></tr>
<tr><td>大小</td><td>dwProviderSize</td><td>整数</td><td>特定于提供程序的数据的大小</td></tr>
<tr><td>数据</td><td>wcProviderData</td><td>整数</td><td>特定于提供程序的数据,可省略</td></tr>
</table>
<h2>调制解调器配置</h2><pre>
使用调制解调器配置功能，可以在建立连接之前配置调制解调器。 应用程序可以设置调制解调器选项并确定调制解调器的功能，
而无需使用特定于任何调制解调器设备的命令。 以下是应用程序在调用前可能设置的一般功能：

主要操作模式 (同步、异步，以及是否) 启用错误控制。
V.42 错误控制 (CCITT 建议 V.42) 定义，包括特定参数。 CCITT 代表国际电报和电话协商委员会。
V.42bis (由 CCITT 建议 V.42bis) 和 MNP5 数据压缩定义。
超时选项，包括呼叫设置、不活动以及缓冲数据传输。
在设置调制解调器的配置之前，应用程序应使用 串口属性 函数确定调制解调器设备的功能。 此函数填充<a href="#串口程序类">串口程序类</a>结构。 
此结构既包含适用于所有通信设备的常规部分，又包含特定于每个提供程序子类型的部分。
对于调制解调器设备， <a href="#串口程序类">串口程序类</a> 结构的提供程序特定部分是 <a href="#猫功能类">猫功能类</a> 结构。

应用程序可以使用 查询串口 和 设置串口 函数获取和设置调制解调器的当前配置，这两个函数都使用 <a href="#串口配置类">串口配置类</a> 结构。 
此结构既包含适用于所有通信设备的常规部分，又包含特定于每个提供程序子类型的部分。 对于调制解调器设备， 串口配置类 结构的提供程序特定部分是 <a href="#猫功能类">猫功能类</a> 结构。

配置调制解调器后，应用程序可以使用电话应用程序编程接口 (TAPI) 来实际建立连接。

调制解调器配置功能不提供调制解调器的长期管理和维护。 调制解调器服务提供商应为此提供调制解调器配置对话框。</pre>
<a name="串口程序类">串口程序类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>串口程序类</td><td>COMMPROP</td><td>64+</td><td>包含有关通信驱动程序的信息。</td></tr>
<tr><th colspan=4>串口程序类——成员表</th></tr>
<tr><td>大小</td><td>wPacketLength_wPacketVersion</td><td>整数</td><td>数据包大小，高16位是版本</td></tr>
<tr><td>服务</td><td>dwServiceMask</td><td>整数</td><td>一个位掩码，指示此提供程序实现哪些服务。写1</td></tr>
<tr><td>预留</td><td>dwReserved1</td><td>整数</td><td>保留值；请勿使用。</td></tr>
<tr><td>输出</td><td>dwMaxTxQueue</td><td>整数</td><td>驱动程序的内部输出缓冲区的最大大小（以字节为单位）。 值为零表示串行提供程序未施加任何最大值。</td></tr>
<tr><td>输入</td><td>dwMaxRxQueue</td><td>整数</td><td>驱动程序的内部输入缓冲区的最大大小（以字节为单位）。 值为零表示串行提供程序未施加任何最大值。</td></tr>
<tr><td>速率</td><td>dwMaxBaud</td><td>整数</td><td>允许的最大波特率（以位/秒为单位） (bps) 。 此成员可以是以下<a href="#串口波特率">波特率</a>之一。</td></tr>
<tr><td>设备</td><td>dwProvSubType</td><td>整数</td><td>通信提供程序类型。 此成员可以是以下<a href="#串口程序类型">程序类型</a>之一。</td></tr>
<tr><td>功能</td><td>dwProvCapabilities</td><td>整数</td><td>指示提供程序提供的功能的位掩码。此成员可以是以下<a href="#串口功能位">功能位</a>的组合。</td></tr>
<tr><td>参数</td><td>dwSettableParams</td><td>整数</td><td>一个位掩码，指示可以更改的通信参数。此成员可以是以下<a href="#串口通信参数">通信参数</a>的组合。</td></tr>
<tr><td>可用</td><td>dwSettableBaud</td><td>整数</td><td>可以使用的波特率。此成员可以是以下<a href="#串口波特率">波特率</a>之一。</td></tr>
<tr><td>数位</td><td>wSettableData_wSettableStopParity</td><td>整数</td><td>低16位是<a href="#串口数据位">数据位</a>的组合;高16位是<a href="#串口奇偶校验">停止位和奇偶校验</a>的组合</td></tr>
<tr><td>出口</td><td>dwCurrentTxQueue</td><td>整数</td><td>驱动程序的内部输出缓冲区的大小（以字节为单位）。 如果值为零，则表示该值不可用。</td></tr>
<tr><td>入口</td><td>dwCurrentRxQueue</td><td>整数</td><td>驱动程序的内部输入缓冲区的大小（以字节为单位）。 如果值为零，则表示该值不可用。</td></tr>
<tr><td>特定</td><td>dwProvSpec1</td><td>整数</td><td>任何特定于提供程序的数据。应用程序应忽略此成员，除非它们具有有关提供程序所需数据格式的详细信息。</td></tr>
<tr><td>特殊</td><td>dwProvSpec2</td><td>整数</td><td>任何特定于提供程序的数据。应用程序应忽略此成员，除非它们具有有关提供程序所需数据格式的详细信息。</td></tr>
<tr><td>数据</td><td>wcProvChar[1]</td><td>字节</td><td>任何特定于提供程序的数据。应用程序应忽略此成员，除非它们具有有关提供程序所需数据格式的详细信息。</td></tr>
</table><a name="串口波特率">串口波特率</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>BAUD_075</td><td>0x00000001</td><td>75 bps</td></tr>
<tr><td>BAUD_110</td><td>0x00000002</td><td>110 bps</td></tr>
<tr><td>BAUD_134_5</td><td>0x00000004</td><td>134.5 bps</td></tr>
<tr><td>BAUD_150</td><td>0x00000008</td><td>150 bps</td></tr>
<tr><td>BAUD_300</td><td>0x00000010</td><td>300 bps</td></tr>
<tr><td>BAUD_600</td><td>0x00000020</td><td>600 bps</td></tr>
<tr><td>BAUD_1200</td><td>0x00000040</td><td>1200 bps</td></tr>
<tr><td>BAUD_1800</td><td>0x00000080</td><td>1800 bps</td></tr>
<tr><td>BAUD_2400</td><td>0x00000100</td><td>2400 bps</td></tr>
<tr><td>BAUD_4800</td><td>0x00000200</td><td>4800 bps</td></tr>
<tr><td>BAUD_7200</td><td>0x00000400</td><td>7200 bps</td></tr>
<tr><td>BAUD_9600</td><td>0x00000800</td><td>9600 bps</td></tr>
<tr><td>BAUD_14400</td><td>0x00001000</td><td>14400 bps</td></tr>
<tr><td>BAUD_19200</td><td>0x00002000</td><td>19200 bps</td></tr>
<tr><td>BAUD_38400</td><td>0x00004000</td><td>38400 bps</td></tr>
<tr><td>BAUD_56K</td><td>0x00008000</td><td>56K bps</td></tr>
<tr><td>BAUD_57600</td><td>0x00040000</td><td>57600 bps</td></tr>
<tr><td>BAUD_115200</td><td>0x00020000</td><td>115200 bps</td></tr>
<tr><td>BAUD_128K</td><td>0x00010000</td><td>128K bps</td></tr>
<tr><td>BAUD_USER</td><td>0x10000000</td><td>可编程波特率。</td></tr>
</table><a name="串口程序类型">串口程序类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PST_FAX</td><td>0x00000021</td><td>FAX 设备</td></tr>
<tr><td>PST_LAT</td><td>0x00000101</td><td>LAT 协议</td></tr>
<tr><td>PST_MODEM</td><td>0x00000006</td><td>调制解调器设备</td></tr>
<tr><td>PST_NETWORK_BRIDGE</td><td>0x00000100</td><td>未指定的网桥</td></tr>
<tr><td>PST_PARALLELPORT</td><td>0x00000002</td><td>并行端口</td></tr>
<tr><td>PST_RS232</td><td>0x00000001</td><td>RS-232 串行端口</td></tr>
<tr><td>PST_RS422</td><td>0x00000003</td><td>RS-422 端口</td></tr>
<tr><td>PST_RS423</td><td>0x00000004</td><td>RS-423 端口</td></tr>
<tr><td>PST_RS449</td><td>0x00000005</td><td>RS-449 端口</td></tr>
<tr><td>PST_SCANNER</td><td>0x00000022</td><td>扫描仪设备</td></tr>
<tr><td>PST_TCPIP_TELNET</td><td>0x00000102</td><td>TCP/IP Telnet 协议</td></tr>
<tr><td>PST_UNSPECIFIED</td><td>0x00000000</td><td>未指定</td></tr>
<tr><td>PST_X25</td><td>0x00000103</td><td>X.25 标准</td></tr>
</table><a name="串口功能位">串口功能位</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PCF_16BITMODE</td><td>0x0200</td><td>支持特殊 16 位模式</td></tr>
<tr><td>PCF_DTRDSR</td><td>0x0001</td><td>支持 DTR (data-terminal-ready) /DSR (data-set-ready)</td></tr>
<tr><td>PCF_INTTIMEOUTS</td><td>0x0080</td><td>支持的间隔超时</td></tr>
<tr><td>PCF_PARITY_CHECK</td><td>0x0008</td><td>支持奇偶校验检查</td></tr>
<tr><td>PCF_RLSD</td><td>0x0004</td><td>支持 RLSD (receive-line-signal-detect)</td></tr>
<tr><td>PCF_RTSCTS</td><td>0x0002</td><td>RTS (请求发送) /CTS (支持明文发送)</td></tr>
<tr><td>PCF_SETXCHAR</td><td>0x0020</td><td>支持可设置的 XON/XOFF</td></tr>
<tr><td>PCF_SPECIALCHARS</td><td>0x0100</td><td>提供特殊字符支持</td></tr>
<tr><td>PCF_TOTALTIMEOUTS</td><td>0x0040</td><td>支持的总已用 () 超时</td></tr>
<tr><td>PCF_XONXOFF</td><td>0x0010</td><td>支持 XON/XOFF 流控制</td></tr>
</table><a name="串口通信参数">串口通信参数</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SP_BAUD</td><td>0x0002</td><td>波特率</td></tr>
<tr><td>SP_DATABITS</td><td>0x0004</td><td>数据位</td></tr>
<tr><td>SP_HANDSHAKING</td><td>0x0010</td><td>握手 (流控制)</td></tr>
<tr><td>SP_PARITY</td><td>0x0001</td><td>奇偶校验</td></tr>
<tr><td>SP_PARITY_CHECK</td><td>0x0020</td><td>奇偶校验检查</td></tr>
<tr><td>SP_RLSD</td><td>0x0040</td><td>RLSD (receive-line-signal-detect)</td></tr>
<tr><td>SP_STOPBITS</td><td>0x0008</td><td>停止位</td></tr>
</table><a name="串口数据位">串口数据位</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DATABITS_5</td><td>0x0001</td><td>5 个数据位</td></tr>
<tr><td>DATABITS_6</td><td>0x0002</td><td>6 个数据位</td></tr>
<tr><td>DATABITS_7</td><td>0x0004</td><td>7 个数据位</td></tr>
<tr><td>DATABITS_8</td><td>0x0008</td><td>8 数据位</td></tr>
<tr><td>DATABITS_16</td><td>0x0010</td><td>16 个数据位</td></tr>
<tr><td>DATABITS_16X</td><td>0x0020</td><td>通过串行硬件线的特殊宽路径</td></tr>
</table><a name="串口奇偶校验">串口奇偶校验</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>STOPBITS_10</td><td>0x0001</td><td>1 停止位</td></tr>
<tr><td>STOPBITS_15</td><td>0x0002</td><td>1.5 个停止位</td></tr>
<tr><td>STOPBITS_20</td><td>0x0004</td><td>2 个停止位</td></tr>
<tr><td>PARITY_NONE</td><td>0x0100</td><td>无奇偶校验位</td></tr>
<tr><td>PARITY_ODD</td><td>0x0200</td><td>奇数奇偶校验</td></tr>
<tr><td>PARITY_EVEN</td><td>0x0400</td><td>偶等奇偶校验</td></tr>
<tr><td>PARITY_MARK</td><td>0x0800</td><td>标记奇偶校验</td></tr>
<tr><td>PARITY_SPACE</td><td>0x1000</td><td>空间奇偶校验</td></tr>
</table>
<a name="猫功能类">猫功能类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>猫功能类</td><td>MODEMDEVCAPS</td><td>64+</td><td>包含有关调制解调器功能的信息。</td></tr>
<tr><th colspan=4>猫功能类——成员表</th></tr>
<tr><td>实长</td><td>dwActualSize</td><td>整数</td><td>实际返回给应用程序的数据的大小（以字节为单位）。如果没有分配足够的空间，则此成员可能小于 全长 成员。</td></tr>
<tr><td>全长</td><td>dwRequiredSize</td><td>整数</td><td>整个结构所需的字节数，包括可变长度部分。</td></tr>
<tr><td>定偏</td><td>dwDevSpecificOffset</td><td>整数</td><td>结构的提供程序定义部分的偏移量，以字节为单位，相对于结构的开头。</td></tr>
<tr><td>定长</td><td>dwDevSpecificSize</td><td>整数</td><td>结构的提供程序定义部分的大小（以字节为单位）。</td></tr>
<tr><td>版本</td><td>dwModemProviderVersion</td><td>整数</td><td>服务提供程序的版本。 此成员的格式和用法取决于服务提供商。</td></tr>
<tr><td>名偏</td><td>dwModemManufacturerOffset</td><td>整数</td><td>包含调制解调器制造商名称的文本字符串的偏移量，以字节为单位，相对于结构开头。</td></tr>
<tr><td>名长</td><td>dwModemManufacturerSize</td><td>整数</td><td>调制解调器制造商名称的长度（以字节为单位）。 字符串不是以 null 结尾的。</td></tr>
<tr><td>模偏</td><td>dwModemModelOffset</td><td>整数</td><td>包含调制解调器模型的文本字符串的偏移量，以字节为单位，相对于结构开头。</td></tr>
<tr><td>模长</td><td>dwModemModelSize</td><td>整数</td><td>模型名称的长度（以字节为单位）。 字符串不是以 null 结尾的。</td></tr>
<tr><td>版偏</td><td>dwModemVersionOffset</td><td>整数</td><td>提供附加调制解调器的版本和修订版本的文本字符串的偏移量（如果提供程序可以确定信息）。 相对于结构的开头，偏移量以字节为单位指定。</td></tr>
<tr><td>版长</td><td>dwModemVersionSize</td><td>整数</td><td>调制解调器版本字符串的长度（以字节为单位）。 字符串不是以 null 结尾的。</td></tr>
<tr><td>拨号</td><td>dwDialOptions</td><td>整数</td><td>调制解调器设备支持的拨号选项。0x40等计费音，0x80等待静音，0x100等拨号音。</td></tr>
<tr><td>呼叫</td><td>dwCallSetupFailTimer</td><td>整数</td><td>调制解调器支持的最大呼叫设置超时时间（以秒为单位）。</td></tr>
<tr><td>挂断</td><td>dwInactivityTimeout</td><td>整数</td><td>调制解调器支持的最大非活动超时，以十分之一秒为单位。</td></tr>
<tr><td>音量</td><td>dwSpeakerVolume</td><td>整数</td><td>调制解调器支持的扬声器音量设置。1低，2中等，4高。</td></tr>
<tr><td>模式</td><td>dwSpeakerMode</td><td>整数</td><td>调制解调器支持的扬声器模式设置。1关声音，2拨号音，4开声音，8呼叫音。</td></tr>
<tr><td>选项</td><td>dwModemOptions</td><td>整数</td><td>调制解调器选项。此成员可以是<a href="#猫功能选项">以下值</a>的零个或多个。</td></tr>
<tr><td>终端</td><td>dwMaxDTERate</td><td>整数</td><td>最大 DTE 速率（以位/秒为单位）。</td></tr>
<tr><td>通信</td><td>dwMaxDCERate</td><td>整数</td><td>最大 DCE 速率（以位/秒为单位）。</td></tr>
<tr><td>数据</td><td>abVariablePortion[1]</td><td>文本</td><td>可变长度信息，包括字符串和任何提供程序定义的信息。</td></tr>
</table><a name="猫功能选项">猫功能选项</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>MDM_BLIND_DIAL</td><td>0x200</td><td>MDM_BLIND_DIAL</td></tr>
<tr><td>MDM_CCITT_OVERRIDE</td><td>0x040</td><td>设置后，将针对 V.21 和 V.22 或 V.23 启用 CCITT 调制。清除时，为 103 和 212A 启用钟式调制。</td></tr>
<tr><td>MDM_CELLULAR</td><td>0x008</td><td>MDM_CELLULAR</td></tr>
<tr><td>MDM_COMPRESSION</td><td>0x001</td><td>MDM_COMPRESSION</td></tr>
<tr><td>MDM_DIAGNOSTICS</td><td>0x0800</td><td>MDM_DIAGNOSTICS</td></tr>
<tr><td>MDM_ERROR_CONTROL</td><td>0x002</td><td>MDM_ERROR_CONTROL</td></tr>
<tr><td>MDM_FLOWCONTROL_HARD</td><td>0x010</td><td>MDM_FLOWCONTROL_HARD</td></tr>
<tr><td>MDM_FLOWCONTROL_SOFT</td><td>0x020</td><td>MDM_FLOWCONTROL_SOFT</td></tr>
<tr><td>MDM_FORCED_EC</td><td>0x004</td><td>MDM_FORCED_EC</td></tr>
<tr><td>MDM_SPEED_ADJUST</td><td>0x080</td><td>MDM_SPEED_ADJUST</td></tr>
<tr><td>MDM_TONE_DIAL</td><td>0x100</td><td>MDM_TONE_DIAL</td></tr>
<tr><td>MDM_V23_OVERRIDE</td><td>0x400</td><td>设置后，为 V.23 启用 CCITT 调制。清除后，会为 V.21 和 V.22 启用 CCITT 调制。</td></tr>
</table>
<h2>读取和写入操作</h2><pre>
Windows 支持同步和异步 (串行通信资源上的重叠) 文件 I/O 操作。 重叠操作使调用线程能够在后台执行操作时执行其他任务。
线程使用 读取文件 或 读入文件 函数从通信资源读取数据，并使用 写出文件 或 写入文件 函数写入通信资源。
读取文件 和 写出文件 可以同步或异步执行。 读入文件 和 写入文件 只能异步执行。
这些读取和写入函数的行为受是否作为重叠操作执行、超时参数是否与句柄关联以及流控制参数是否与句柄关联的影响。
线程还可以使用 串口寄送 函数写入通信资源，该函数在输出缓冲区中任何挂起的数据之前传输指定的字符。
此函数可用于将高优先级信号字符传输到接收系统。 高优先级字符的传输仍受流控制和写入超时的限制，并且操作是同步执行的。
线程可以使用 串口缓冲 函数放弃设备输出或输入缓冲区中的所有字符。 串口缓冲 还可以终止挂起的读取或写入操作，即使操作尚未完成。
如果线程使用 串口缓冲 刷新输出缓冲区，则不会传输已删除的字符。 若要在确保传输内容的同时清空输出缓冲区，线程可以调用 刷新文件 函数 (同步操作) 。
但请注意， 刷新文件 受流控制，但不受写入超时，在传输所有挂起的写入操作之前，它不会返回。
<b>重叠操作</b>
重叠操作使线程能够在后台执行耗时的I/O操作，使线程可以自由执行其他任务。若要在通信资源上启用重叠 I/O 操作，线程必须在创建文件中指定0x40000000标志。
若要将 读取文件 或 写出文件 函数作为重叠操作运行，调用线程必须指定指向<a href="#重叠类">重叠类</a>结构的指针。<a href="#重叠类">重叠类</a>结构必须包含手动重置 (非自动) 事件对象的句柄。
当对 I/O 函数的调用在操作完成之前返回时，系统会将事件对象的状态设置为未发出信号。系统将事件对象的状态设置为在操作完成时发出信号。
线程使用等待函数来检查事件对象的当前状态或等待其状态发出信号。读入文件 和 写入文件 函数只能作为重叠操作执行。
 调用线程指定指向 <a href="#文件传输回调">文件传输回调</a> 函数的指针，该函数在重叠操作完成时执行。 仅当调用线程执行可警报操作时，才会执行完成例程。
有关事件对象、等待函数、可警报等待和完成例程的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/about-synchronization">关于同步</a>。
<b>超时</b>
通信资源的句柄具有一组关联的超时参数，这些参数会影响读取和写入操作的行为。 超时可能会导致 读取文件、读入文件、写出文件或写入文件 操作在超时间隔过后结束，
即使指定数量的字符尚未读取或写入。 在读取或写入操作期间发生超时 (，即读取或写入函数的返回值指示) 成功时，不会将其视为错误。 实际读取或写入的字节计数由
读取文件或写出文件 (或 操作结果 或 <a href="#文件传输回调">文件传输回调</a> 函数报告（如果 I/O 作为重叠操作执行) ）。

当应用程序打开通信资源时，系统会将资源的超时值设置为上次使用该资源时生效的值。 如果从未打开过通信资源，系统会将超时值设置为某个默认值。
在任一情况下，应用程序都应始终在打开资源后确定当前超时值，然后显式设置这些值以满足其要求。若要获取或更改通信资源的当前超时值，请使用 串口超时和超时串口 函数。

超时参数支持两种类型的超时。 当收到任意两个字符之间的时间间隔超过指定的毫秒数时，将发生间隔超时。 计时在收到第一个字符时开始，在收到每个新字符时重启。
当读取操作花费的总时间超过计算的毫秒数时，将发生总超时。当I/O操作开始时，计时会立即开始。写入操作仅支持总超时。读取操作支持间隔和总超时可以单独使用或组合使用。

读取或写入操作的总超时时间是使用 串口超时 或 超时串口 函数中指定的 <a href="#串口超时类">串口超时类</a> 结构的乘数和常量值计算的，以毫秒为单位。
使用乘数和常量可使总超时期限发生变化，具体取决于请求的数据量。应用程序只能通过将乘数或者常量设置为零来单独使用常量或乘数。如果常量和乘数均为零，则不使用总超时。
如果所有读取超时参数均为零，则不会使用读取超时，并且读取操作在读取请求的字节数或发生错误之前不会完成。同样所有写入超时参数均为零，则在写入之前，写入操作不会完成。
如果读取间隔超时参数是0xffffffff，并且两个读取超时总参数均为零，则读取输入缓冲区中可用的任何字符后，读取操作将立即完成，即使为空也是如此。

当接收中出现平静时，间隔计时会强制读取操作返回。 使用间隔超时的进程可以设置相当短的间隔参数，因此它可以快速响应一个或多个字符的小型隔离突发，
但当在稳定流中接收数据时，它仍可以通过单个调用收集大型字符缓冲区。当某种流控制阻止传输或调用 串口暂停 函数以暂停字符传输时，写入操作的超时非常有用。

下表根据为总超时和间隔超时指定的值汇总了读取操作的行为。</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>总计</td><td>间隔</td><td>行为</td></tr>
<tr><td>0</td><td>0</td><td>完全填充缓冲区时返回 。 不使用超时。</td></tr>
<tr><td>T</td><td>0</td><td>当缓冲区已完全填充或自操作开始以来经过 T 毫秒时返回 。</td></tr>
<tr><td>0</td><td>Y</td><td>当缓冲区已完全填充或 Y 毫秒在收到任意两个字符之间时返回 。 在收到第一个字符之前，计时不会开始。</td></tr>
<tr><td>T</td><td>Y</td><td>当缓冲区完全填充或发生任一类型的超时时返回 。</td></tr>
</table>
<a name="串口超时类">串口超时类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>串口超时类</td><td>COMMTIMEOUTS</td><td>20</td><td>包含通信设备的超时参数。确定设备上 读取文件、读入文件、写出文件或写入文件 操作的行为。</td></tr>
<tr><th colspan=4>串口超时类——成员表</th></tr>
<tr><td>间隔</td><td>ReadIntervalTimeout</td><td>整数</td><td>通信线路上下一个字节到达之前允许经过的最长时间（以毫秒为单位）。 值为零表示不使用间隔超时。</td></tr>
<tr><td>读乘</td><td>ReadTotalTimeoutMultiplier</td><td>整数</td><td>用于计算读取操作的总超时周期的乘数（以毫秒为单位）。 对于每个读取操作，此值乘以要读取的请求字节数。</td></tr>
<tr><td>读超</td><td>ReadTotalTimeoutConstant</td><td>整数</td><td>一个常量，用于计算读取操作的总超时时间（以毫秒为单位）。对于每个读取操作，此值将添加到 读乘 成员的乘积和请求的字节数中。</td></tr>
<tr><td>写乘</td><td>WriteTotalTimeoutMultiplier</td><td>整数</td><td>用于计算写入操作的总超时周期的乘数（以毫秒为单位）。 对于每个写入操作，此值乘以要写入的字节数。</td></tr>
<tr><td>写超</td><td>WriteTotalTimeoutConstant</td><td>整数</td><td>一个常量，用于计算写入操作的总超时时间（以毫秒为单位）。 对于每个写入操作，此值将添加到 写乘 成员的乘积和要写入的字节数。</td></tr>
</table>
<b>通信错误</b><pre>
在其他情况下，读取或写入操作可以用少于请求的字符数完成，即使尚未发生超时。 以下是一些示例：

某些驱动程序支持使用特殊字符，这些字符可立即完成读取操作，只使用已读到时已读到的字符。
可以调用 串口缓冲 函数以提前终止挂起的读取或写入操作。 此函数还可以删除输出缓冲区或输入缓冲区的内容，或者删除这两者。
如果在读取或写入操作期间发生通信错误，则会终止通信资源上的所有 I/O 操作。 中断条件、奇偶校验错误或帧错误就是此类错误的示例。
发生错误时，进程必须调用 串口刷新 函数以清除错误标志，然后才能开始其他 I/O 操作。 串口刷新 报告发生的特定错误和设备当前状态。
 </pre>
 <h2>通信事件</h2>
 进程可以监视通信资源中发生的一组事件。 例如，应用程序可以使用事件监视来确定 CTS 何时 (明确发送) 和 DSR (数据集就绪) 信号更改状态。

进程可以使用 掩码串口 函数创建事件掩码来监视给定通信资源上的事件。要确定通信资源的当前事件掩码，可以使用 串口掩码 函数。 以下值指定可监视的事件。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>EV_RXCHAR</td><td>1</td><td>接收到了一个字符并将其放入了输入缓冲区。</td></tr>
<tr><td>EV_RXFLAG</td><td>2</td><td>事件字符已收到并放置在输入缓冲区中。 事件字符在设备的 DCB 结构中指定，该结构使用 状态串口 函数应用于串行端口。</td></tr>
<tr><td>EV_TXEMPTY</td><td>4</td><td>输出缓冲区中的最后一个字符已发送。</td></tr>
<tr><td>EV_CTS</td><td>8</td><td>CTS (清除发送) 信号更改状态。</td></tr>
<tr><td>EV_DSR</td><td>0x0010</td><td>DSR (数据准备好) 信号更改状态。</td></tr>
<tr><td>EV_RLSD</td><td>0x0020</td><td>RLSD (接收线路信号检测) 信号更改状态。</td></tr>
<tr><td>EV_BREAK</td><td>0x0040</td><td>在输入上检测到一个中断。</td></tr>
<tr><td>EV_ERR</td><td>0x0080</td><td>发生行状态错误。 行状态错误CE_FRAME、CE_OVERRUN和CE_RXPARITY。</td></tr>
<tr><td>EV_RING</td><td>0x0100</td><td>检测到振铃指示。</td></tr>
<tr><td>EV_PERR</td><td>0x0200</td><td>发生打印机错误</td></tr>
<tr><td>EV_RX80FULL</td><td>0x0400</td><td>接收缓冲区已满80%</td></tr>
<tr><td>EV_EVENT1</td><td>0x0800</td><td>提供程序特定事件1。</td></tr>
<tr><td>EV_EVENT2</td><td>0x1000</td><td>提供程序特定事件2。</td></tr>
</table><pre>
指定一组事件后，进程使用 串口等待 函数等待其中一个事件发生。 串口等待 可以同步使用，也可以作为重叠操作使用。 有关以重叠操作的形式执行函数的其他信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows/desktop/Sync/synchronization">同步</a>。
发生事件掩码中指定的事件之一时，进程将完成等待操作，并设置事件掩码变量以指示检测到的事件类型。如果在等待该资源等待时为通信资源调用掩码串口。

串口等待 函数检测自上次调用 掩码串口 或 串口等待 以来发生的事件。 例如将 EV_RXCHAR 事件指定为满足等待的事件，则如果驱动程序的输入缓冲区中自上次调用
串口等待 或 掩码串口 以来存在字符，则将满足对 串口等待 的调用。 因此，给定以下伪代码，在 T1 和 T2 之间接收的任何字符都将满足对 串口等待 的下一次调用。
循环(完成)
{串口等待(参数)
T1:
//读取数据过程
T2:}
</pre>
监视当信号 (CTS、DSR 等) 更改状态时发生的事件时， 串口等待 报告更改，但不会报告当前状态。 若要查询 CTS (明确发送) 、DSR (数据集就绪) 、RLSD (接收线路信号检测) 和环形指示器信号的当前状态，进程可以使用 串口调制 函数。
<h2>扩展函数</h2><pre>
可以使用 串口信号 函数为设备调用某些通信函数。 此函数发送代码以指示设备执行扩展功能。
例如，应用程序可以使用 SETBREAK 代码暂停字符传输，并使用 CLRBREAK 代码恢复传输。
还可以通过调用 串口暂停 和 串口还原 函数来启动这些特定操作。 串口信号 还可用于实现手动调制解调器控制。
例如，CLRDTR 和 SETDTR 代码可用于实现手动 DTR (数据终端就绪) 流控制。 但请注意，如果进程在设备配置为启用
 DTR 握手时使用 串口信号 操作 DTR 行，或者 RTS (请求发送) 行（如果启用了 RTS 握手），则会发生错误。</pre>
 <a name="串口扩展">串口扩展</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>SETXOFF</td><td>1</td><td>模拟接收到XOFF</td></tr>
<tr><td>SETXON</td><td>2</td><td>模拟接收到XON</td></tr>
<tr><td>SETRTS</td><td>3</td><td>设置RTS高</td></tr>
<tr><td>CLRRTS</td><td>4</td><td>设置RTS低</td></tr>
<tr><td>SETDTR</td><td>5</td><td>设置DTR高</td></tr>
<tr><td>CLRDTR</td><td>6</td><td>设置DTR低</td></tr>
<tr><td>RESETDEV</td><td>7</td><td>如果可能，重置设备</td></tr>
<tr><td>SETBREAK</td><td>8</td><td>设置设备断线。</td></tr>
<tr><td>CLRBREAK</td><td>9</td><td>清除设备断线。</td></tr>
</table>
硬件控制 函数使进程能够将扩展函数代码直接发送到指定的设备驱动程序，从而使设备执行给定的操作。 硬件控制 为设备提供与标准串行通信函数不支持的通信资源功能关联的设备。<br>
它使应用程序能够使用该设备特有的参数配置设备，以及调用任何特定于设备的函数。
<h2>配置通信资源</h2><font color="#0000FF"><pre>
整数 串口;串口通讯类 通讯(总长度=28,数据位=8)重叠类 异步
//申请全局变量通讯类时候，指定数据位=8，校验位默认是0，这些通常不用修改
程序段 开关串口
如果(串口=0){
串口 = 创建文件("COM1",$C0000000,0,0,3,$40000000,0)
//$C0000000 读写，0以独占访问权限打开，0默认安全属性
//3仅当文件或设备存在时才打开它。$40000000已启用重叠模式。
如果(串口<=0){信息框(0,"串口打开失败","提示",错误图标)串口=0}
否则{
串口状态(串口, 通讯)
//首先检索所有当前配置来构建当前配置设置。
通讯.波特率=9600
//波特率需要自行设定，可以用 取控件数(窗体,4,0,0) 读取文本框里数字
如果(状态串口(串口, 通讯)=0){信息框(0,"串口设置错误","提示",惊叹图标)返回}
改窗口字(窗体,"串口已打开")改窗口字(启动,"关闭")开启线程(@监视)}
//串口正常打开，开户线程：监视
}否则{关闭对象(串口)串口=0
改窗口字(窗体,"串口已关闭")
改窗口字(启动,"打开")}
结束
程序段 监视
循环{读取}(串口=0)
结束
//监视这段程序是循环执行读取函数
程序段 读取
整数 剩余,收数,事件,错误;文本 内容[16]
//这里用三个整数变量的数据用来获取接收字节数和剩余字节数
掩码串口(串口,0x19)//掩码=1（收到数据）+8（清除发送）+0x10（数据准备好）
事件=创建事件(0,1,0,0)
//0默认安全属性，1手动重置事件，0无信号，0无名称
如果(串口等待(串口,@事件,异步))
{//等待异步事件返回结果不等于0
	如果(事件 & 1)//收到数据EV_RXCHAR
	{串口刷新(串口,@错误,@事件)
	如果(收数=0)返回;接收字节数小于0不处理
	读取文件(串口,内容,收数,@剩余,异步)
	如果(最后错误=997)操作结果(串口,异步,@剩余, 真)
	//如果IO结束获取重叠操作的结果
	}
	如果(事件 & 8)清除发送//EV_CTS
	如果(事件 & 16)数据就绪//EV_DSR
}
否则{//提示错误
	}
结束</pre>
串口通信 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>串口命令</td><td>BuildCommDCBA</td><td>串口命令(内容,<a href="#串口通讯类">通讯类</a>)</td><td>使用设备控制字符串中指定的值填充指定的 <a href="#串口通讯类">串口通讯类</a> 结构。</td></tr>
<tr><td>设备定义</td><td>BuildCommDCBAndTimeoutsA</td><td>设备定义(内容,<a href="#串口通讯类">通讯类</a>,超时类)</td><td>将设备定义字符串转换为适当的设备控制块代码，并将其置于设备控制块中。</td></tr>
<tr><td>串口还原</td><td>ClearCommBreak</td><td>串口还原(串口)</td><td>还原指定通信设备的字符传输，并将传输线置于非中断状态。</td></tr>
<tr><td>串口刷新</td><td>ClearCommError</td><td>串口刷新(串口,<a href="#串口错误状态">@错误</a>,@<a href="#串口状态类">状态</a>)</td><td>检索有关通信错误的信息，并报告通信设备的当前状态。 </td></tr>
<tr><td>串口设置</td><td>CommConfigDialogA</td><td>串口设置(串口名,窗口,<a href="#串口配置类">配置类</a>)</td><td>显示驱动程序提供的配置对话框。 </td></tr>
<tr><td>串口信号</td><td>EscapeCommFunction</td><td>串口信号(串口,<a href="#串口扩展">扩展</a>)</td><td>向指定串口执行扩展功能,如DTR RTS信号</td></tr>
<tr><td>查询串口</td><td>GetCommConfig</td><td>查询串口(串口,配置,长度)</td><td>获取通信设备的当前配置<a href="#串口配置类">串口配置类</a></td></tr>
<tr><td>串口掩码</td><td>GetCommMask</td><td>串口掩码(串口,@掩码)</td><td>检索指定通信设备的事件掩码值</td></tr>
<tr><td>串口调制</td><td>GetCommModemStatus</td><td>串口调制(串口,@状态)</td><td>检索调制解调器控制寄存器值</td></tr>
<tr><td>串口属性</td><td>GetCommProperties</td><td>串口属性(串口,属性)</td><td>获取指定通信设备的通信属性信息<a href="#串口程序类">串口程序类</a></td></tr>
<tr><td>串口状态</td><td>GetCommState</td><td>串口状态(串口,设置)</td><td>获取指定通信设备的当前控制设置(DCB结构)</td></tr>
<tr><td>串口超时</td><td>GetCommTimeouts</td><td>串口超时(串口,超时)</td><td>检索指定通信设备的读写操作的超时参数<a href="#串口超时类">串口超时类</a></td></tr>
<tr><td>串口默认</td><td>GetDefaultCommConfigA</td><td>串口默认(设备名,配置,长度)</td><td>获取通信设备的默认配置</td></tr>
<tr><td>串口缓冲</td><td>PurgeComm</td><td>串口缓冲(串口,动作)</td><td>清空串口的输出或输入缓冲区,动作组合1终止写,2终止读,4清输出,8清输入</td></tr>
<tr><td>串口暂停</td><td>SetCommBreak</td><td>串口暂停(串口)</td><td>暂停指定通信设备的字符传输，并将传输线路置于中断状态，直到取消暂停</td></tr>
<tr><td>设置串口</td><td>SetCommConfig</td><td>设置串口(串口,配置,长度)</td><td>修改通信设备的当前配置<a href="#串口配置类">串口配置类</a></td></tr>
<tr><td>掩码串口</td><td>SetCommMask</td><td>掩码串口(串口,掩码)</td><td>修改指定通信设备的事件掩码值</td></tr>
<tr><td>状态串口</td><td>SetCommState</td><td>状态串口(串口,设置)</td><td>修改指定通信设备的当前控制设置(DCB结构)</td></tr>
<tr><td>超时串口</td><td>SetCommTimeouts</td><td>超时串口(串口,超时)</td><td>修改指定通信设备的读写操作的超时参数<a href="#串口超时类">串口超时类</a></td></tr>
<tr><td>默认串口</td><td>SetDefaultCommConfigA</td><td>默认串口(串口,超时)</td><td>检索指定通信设备的读写操作的超时参数<a href="#串口超时类">串口超时类</a></td></tr>
<tr><td>串口大小</td><td>SetupComm</td><td>串口大小(串口,输入,输出)</td><td>修改指定通信设备的读写缓冲区大小</td></tr>
<tr><td>串口寄送</td><td>TransmitCommChar</td><td>串口寄送(串口,字符)</td><td>在指定通信设备的输出缓冲区中的待处理数据发送之前先传送指定的字符</td></tr>
<tr><td>串口等待</td><td>WaitCommEvent</td><td>串口等待(串口,@事件,重叠类)</td><td>等待指定通信设备发生事件。事件发生时,传递到事件整数变量中</td></tr>
<tr><td>操作结果</td><td>GetOverlappedResult</td><td>操作结果(文件,重叠类,@长度,等待)</td><td>检索指定文件、命名管道或通信设备上的重叠操作的结果。</td></tr>
</table><a name="串口状态类">串口状态类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>串口状态类</td><td>COMSTAT</td><td>12</td><td>包含了串口通讯时间设置的结构</td></tr>
<tr><th colspan=4>串口状态类——成员表</th></tr>
<tr><td>信号</td><td>fCtsHold</td><td>整数</td><td>如果此成员为 TRUE，则传输正在等待 CTS (明确发送) 信号发送。</td></tr>
<tr><td></td><td>fDsrHold</td><td>整数</td><td>如果此成员为 TRUE，则传输正在等待 DSR (数据集就绪) 信号发送。</td></tr>
<tr><td></td><td>fRlsdHold</td><td>整数</td><td>如果此成员为 TRUE，则传输正在等待 RLSD (接收线路信号检测) 信号发送。</td></tr>
<tr><td></td><td>fXoffHold</td><td>整数</td><td>如果此成员为 TRUE，则传输正在等待，因为已收到 XOFF 字符。</td></tr>
<tr><td></td><td>fXoffSent</td><td>整数</td><td>如果此成员为 TRUE，则传输正在等待，因为 XOFF 字符已传输。 (传输 XOFF 字符到采用下一个字符作为 XON 的系统时，传输将停止，而不考虑实际字符。)</td></tr>
<tr><td></td><td>fEof</td><td>整数</td><td>如果此成员为 TRUE，则已收到文件末尾 (EOF) 字符。</td></tr>
<tr><td></td><td>fTxim</td><td>整数</td><td>如果此成员为 TRUE，则会有一个字符排队等待传输，该字符已通过 串口寄送 函数来到通信设备。 通信设备先于设备输出缓冲区中的其他字符传输此类字符。</td></tr>
<tr><td></td><td>fReserved</td><td>整数</td><td>保留值；请勿使用。以上英文名代表不同功能位,都对应中文名信号这一个成员</td></tr>
<tr><td>收数</td><td>cbInQue</td><td>整数</td><td>串行提供程序接收但尚未由 ReadFile 操作读取的字节数。</td></tr>
<tr><td>剩余</td><td>cbOutQue</td><td>整数</td><td>所有写入操作要传输的用户数据的剩余字节数。 对于未重叠的写入，此值将为零。</td></tr>
</table><a name="串口错误状态">串口错误状态</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>CE_BREAK</td><td>0x0010</td><td>硬件检测到中断条件。</td></tr>
<tr><td>CE_FRAME</td><td>0x0008</td><td>硬件检测到一个组帧错误。</td></tr>
<tr><td>CE_OVERRUN</td><td>0x0002</td><td>发生字符缓冲区溢出。 下一个字符将丢失。</td></tr>
<tr><td>CE_RXOVER</td><td>0x0001</td><td>发生输入缓冲区溢出。 输入缓冲区空间不足，或在文件尾 (EOF) 字符之后接收到字符。</td></tr>
<tr><td>CE_RXPARITY</td><td>0x0004</td><td>硬件检测到奇偶校验错误。</td></tr>
</table><br>
<font color="#0000FF"><a name="进程线程">进程线程</a>——使用示例</font><br>
应用程序由一个或多个进程组成。 用最简单的术语来说， 进程是一个执行程序。 一个或多个线程在进程的上下文中运行。<br>
线程是操作系统分配处理器时间的基本单元。 线程可以执行进程代码的任何部分，包括当前由另一个线程执行的部件。<br>

作业对象允许将进程组作为一个单元进行管理。 作业对象是可活动、安全、可共享的对象，用于控制与其关联的进程的属性。 对作业对象执行的操作会影响与作业对象关联的所有进程。<br>

线程池是代表应用程序高效执行异步回调的工作线程集合。 线程池主要用于减少应用程序线程数并提供工作线程的管理。<br>

纤程是必须由应用程序手动安排的执行单元。 光纤在计划它们的线程的上下文中运行。<br>

用户模式计划 (UMS) 是一种轻型机制，应用程序可以使用该机制来计划自己的线程。 UMS 线程与 光纤 的不同之处在于，每个 UMS 线程都有自己的线程上下文，而不是共享单个线程的线程上下文。<br>
每个 进程 都提供执行程序所需的资源。 进程具有虚拟地址空间、可执行代码、系统对象的开放句柄、安全上下文、唯一进程标识符、环境变量、优先级类、最小和最大工作集大小以及至少一个执行线程。<br>
每个进程都使用单个线程（通常称为 主线程）启动，但可以从其任何线程创建其他线程。<br>

线程是进程内可计划执行的实体。 进程的所有线程共享其虚拟地址空间和系统资源。 此外，每个线程都维护异常处理程序、计划优先级、线程本地存储、唯一线程标识符以及系统将用于保存线程上下文的一组结构，<br>
直到计划线程上下文为止。线程上下文包括线程的计算机寄存器集、内核堆栈、线程环境块以及线程进程的地址空间中的用户堆栈。 线程还可以有自己的安全上下文，可用于模拟客户端。<br>

Microsoft Windows 支持 抢占式多任务处理，这会产生同时执行多个进程中多个线程的效果。 在多处理器计算机上，系统可以同时执行与计算机上存在处理器一样多的线程。<br>

作业对象允许将进程组作为一个单元进行管理。 作业对象是可访问的、安全的、可共享的对象，用于控制与其关联的进程的属性。 对作业对象执行的操作会影响与作业对象关联的所有进程。<br>

应用程序可以使用 线程池 来减少应用程序线程数并提供工作线程的管理。 应用程序可以对工作项进行排队、将工作与可等待句柄相关联、基于计时器自动排队，并使用 I/O 绑定。<br>

用户模式计划 (UMS) 是一种轻型机制，应用程序可以使用该机制来计划自己的线程。 应用程序可以在用户模式下的 UMS 线程之间切换，而无需涉及 系统计划程序 ，<br>
并在内核中阻止 UMS 线程时重新获得对处理器的控制。 每个 UMS 线程都有自己的线程上下文，而不是共享单个线程的线程上下文。 <br>
在用户模式下在线程之间切换的功能使 UMS 比线程池更高效，适合需要少量系统调用的短持续时间工作项。<br>

光纤是必须由应用程序手动安排的执行单元。 光纤在计划它们的线程的上下文中运行。 每个线程可以计划多个光纤。 通常，与设计良好的多线程应用程序不一样，光纤没有优势。<br>
但是，使用光纤可以更轻松地移植设计为计划其自己的线程的应用程序。<br>
<font color="#0000FF">线程纤程 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=68>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>远程线程</td><td>CreateRemoteThread</td><td>远程线程(进程,属性,堆栈,@函数,参数,标志,标识)</td><td>创建一个在指定进程的地址空间内运行的线程</td></tr>
<tr><td>创建线程</td><td>CreateThread</td><td>创建线程(属性,堆栈,@函数,参数,标志,标识)</td><td>创建一个在调用进程的地址空间内执行的线程</td></tr>
<tr><td>创建纤程</td><td>CreateFiber</td><td>创建纤程(堆栈,@函数,地址)</td><td>分配一个光纤对象，为其分配一个堆栈，并设置执行以从指定的起始地址开始，通常是光纤函数。</td></tr>
<tr><td>线程转纤</td><td>ConvertThreadToFiber</td><td>线程转纤(指针地址)</td><td>将当前线程转换为光纤。 必须先将线程转换为光纤，然后才能计划其他光纤。</td></tr>
<tr><td>端口关联</td><td>CreateIoCompletionPort</td><td>端口关联(文件,端口,键,线程数)</td><td>创建完成端口并将其与指定的文件句柄关联</td></tr>
<tr><td>删除纤程</td><td>DeleteFiber</td><td>删除纤程(指针)</td><td>删除现有纤程</td></tr>
<tr><td>退出线程</td><td>ExitThread</td><td>退出线程(0)</td><td>强制结束一个线程</td></tr>
<tr><td>当前线程</td><td>GetCurrentThread</td><td>tid=当前线程</td><td>获得当前线程的句柄</td></tr>
<tr><td>线程标识</td><td>GetCurrentThreadId</td><td>tid=线程标识</td><td>获得当前线程的标识符</td></tr>
<tr><td>切换线程</td><td>SwitchToThread</td><td>切换线程</td><td>使系统进程切换到其它线程执行</td></tr>
<tr><td>重置线程</td><td>ResumeThread</td><td>重置线程(线程)</td><td>减少线程的挂起计数。当暂停计数递减到零时，线程的执行被恢复</td></tr>
<tr><td>查找线程</td><td>Thread32First</td><td>查找线程(快照,线程类)</td><td>检索进程快照第一个线程的信息</td></tr>
<tr><td>下个线程</td><td>Thread32Next</td><td>下个线程(快照,线程类)</td><td>检索进程快照下一个线程的信息</td></tr>
<tr><td>分配线程</td><td>TlsAlloc</td><td>索引=分配线程</td><td>分配线程本地存储 (TLS) 索引。 进程的任何线程随后都可以使用此索引来存储和检索线程本地的值</td></tr>
<tr><td>释放线程</td><td>TlsFree</td><td>释放线程(索引)</td><td>(TLS) 索引发布线程本地存储，使其可供重复使用。并不释放线程已分配的内存空间</td></tr>
<tr><td>取线程值</td><td>TlsGetValue</td><td>取线程值(索引)</td><td>检索调用线程的线程本地存储中的值</td></tr>
<tr><td>改线程值</td><td>TlsSetValue</td><td>改线程值(索引)</td><td>将值存储在调用线程的线程本地存储 (指定 TLS 索引的 TLS) 槽中。</td></tr>
<tr><td>终止线程</td><td>TerminateThread</td><td>终止线程(线程,退出码)</td><td>终止指定的线程</td></tr>
<tr><td>优先开关</td><td>SetProcessPriorityBoost</td><td>优先开关(进程,禁用)</td><td>禁用或启用系统暂时提升指定进程的线程优先级的功能。</td></tr>
<tr><td>线程状态</td><td>GetExitCodeThread</td><td>线程状态(线程,@状态)</td><td>获得指定线程的终止状态</td></tr>
<tr><td>创建进程</td><td>CreateProcessA</td><td>创建进程(名称,命令,<a href="#安全属性类">进继,线继</a>,全继,标志,<br>环境,目录,<a href="#启动信息类">启动</a>,<a href="#进程信息类">进程</a>)</td><td>创建新进程及其主线程的继承属性。全继为真都由新进程继承。</td></tr>
<tr><td>线程禁示</td><td>DisableThreadLibraryCalls</td><td>线程禁示(模块)</td><td>禁用指定动态链接库的线程创建和线程结束通知。这可以减少某些应用程序的工作集的大小。</td></tr>
<tr><td>消息调试</td><td>FatalAppExitA</td><td>消息调试(0,内容)</td><td>显示一个消息框，并在消息框关闭时终止应用程序。调试版可能返回应用程序</td></tr>
<tr><td>转移调试</td><td>FatalExit</td><td>转移调试(退出码)</td><td>将执行控制权转移到调试程序。 此后调试器的行为特定于所使用的调试器类型。</td></tr>
<tr><td>进程掩码</td><td>GetProcessAffinityMask</td><td>进程掩码(进程,@进程掩码,@系统掩码)</td><td>检索指定进程的进程关联掩码和系统的系统关联掩码。</td></tr>
<tr><td>取优先态</td><td>GetProcessPriorityBoost</td><td>取优先态(进程,@状态)</td><td>检索指定进程的优先级提升控制状态。状态为真禁用动态提升,为假正常</td></tr>
<tr><td>进程关参</td><td>GetProcessShutdownParameters</td><td>进程关参(进程,@进程掩码,@系统掩码)</td><td>检索当前调用进程的关闭参数。</td></tr>
<tr><td>进程计时</td><td>GetProcessTimes</td><td>进程计时(进程,@创建,@退出,@内核,@用户)</td><td>检索指定进程的<a href="#文件时间类">计时信息</a>。</td></tr>
<tr><td>进程版本</td><td>GetProcessVersion</td><td>进程版本(进程)</td><td>检索预期运行指定进程的系统的高字主版本号和低字次版本号。</td></tr>
<tr><td>进程工作</td><td>GetProcessWorkingSetSize</td><td>进程工作(进程,@最小,@最大)</td><td>检索指定进程的最小和最大工作集大小（以字节为单位）。</td></tr>
<tr><td>工作进程</td><td>SetProcessWorkingSetSize</td><td>工作进程(进程,最小,最大)</td><td>设置指定进程的最小和最大工作集大小（以字节为单位）。</td></tr>
<tr><td>线程取文</td><td>GetThreadContext</td><td>线程取文(线程,@上下文)</td><td>检索指定线程的上下文。</td></tr>
<tr><td>线程改文</td><td>SetThreadContext</td><td>线程改文(线程,@上下文)</td><td>设置指定线程的上下文。</td></tr>
<tr><td>线程地区</td><td>GetThreadLocale</td><td>线程地区</td><td>返回调用线程的当前区域设置的区域设置 标识符 。</td></tr>
<tr><td>地区线程</td><td>SetThreadLocale</td><td>地区线程(地区)</td><td>设置调用线程的当前区域设置。</td></tr>
<tr><td>线程优先</td><td>GetThreadPriority</td><td>线程优先(线程)</td><td>检索指定线程的优先级值。</td></tr>
<tr><td>优先线程</td><td>SetThreadPriority</td><td>优先线程(线程,优先级)</td><td>设置指定线程的优先级值。</td></tr>
<tr><td>线程提升</td><td>GetThreadPriorityBoost</td><td>线程提升(线程,@状态)</td><td>检索指定线程的优先级提升控制状态。状态为真表示已禁用动态提升。为假表示正常行为。</td></tr>
<tr><td>提升线程</td><td>SetThreadPriorityBoost</td><td>提升线程(线程,禁用)</td><td>禁用或启用系统临时提升线程优先级的功能。</td></tr>
<tr><td>首选线程</td><td>SetThreadIdealProcessor</td><td>首选线程(线程,首选处理器)</td><td>设置线程的首选处理器。系统尽可能在其首选处理器上计划线程。</td></tr>
<tr><td>线程选择</td><td>GetThreadSelectorEntry</td><td>线程选择(线程,选择器,@条目)</td><td>检索指定的选择器和线程的描述符表条目。</td></tr>
<tr><td>线程计时</td><td>GetThreadTimes</td><td>线程计时(线程,@创建,@退出,@内核,@用户)</td><td>检索指定线程的<a href="#文件时间类">计时信息</a>。</td></tr>
<tr><td>加载库</td><td>LoadLibraryA</td><td>地址=加载库("jh.dll")</td><td>获取或者加载某个链接库dll的地址空间</td></tr>
<tr><td>加载程序</td><td>LoadModule</td><td>加载程序(程序名,运行参数)</td><td>载入一个windows应用程序，并在指定的环境中运行</td></tr>
<tr><td>加载模块</td><td>LoadLibraryExA</td><td>加载模块(文件名,0,<a href="#加载模块">操作</a>)</td><td>将指定的模块加载到调用进程的地址空间中。指定的模块可能会导致加载其他模块。</td></tr>
<tr><td>用户异步</td><td>QueueUserAPC</td><td>用户异步(回调,线程,附加)</td><td>将用户模式 <a href="#异步回调">异步过程调用</a> (APC) 对象添加到指定线程的 APC 队列。</td></tr>
<tr><td>线程异步</td><td>QueueUserAPC2</td><td>线程异步(回调,线程,附加,标志)</td><td>将用户模式 <a href="#异步回调">异步过程调用</a> 对象添加到指定线程的 APC 队列。标志:0无,1特模式,2定向到中断</td></tr>
<tr><td>进程全名</td><td>QueryFullProcessImageNameA</td><td>进程全名(进程,标志,@映像名,@大小)</td><td>检索指定进程的可执行映像的全名。标志:0=Win32路径,1=本机系统路径</td></tr>
<tr><td>引发异常</td><td>RaiseException</td><td>引发异常(异常代码,标志,组数,参数组)</td><td>在调用线程中引发异常。标志:0连续异常,1不连续</td></tr>
<tr><td>请求唤醒</td><td>RequestWakeupLatency</td><td>请求唤醒(延迟)</td><td>请求唤醒计算机。所需的时间的延迟要求：0正常，1低延迟。</td></tr>
<tr><td>取错模式</td><td>GetErrorMode</td><td>取错模式</td><td>检索当前进程的<a href="#错误模式">错误模式</a>。</td></tr>
<tr><td>改错模式</td><td>SetErrorMode</td><td>改错模式(<a href="#错误模式">模式</a>)</td><td>控制系统是处理指定类型的严重错误，还是进程将处理这些错误。</td></tr>
<tr><td>限制作业</td><td>SetInformationJobObject</td><td>限制作业(作业,<a href="#作业分类">分类</a>,信息,大小)</td><td>设置作业对象的限制。</td></tr>
<tr><td>线程正用</td><td>SetThreadExecutionState</td><td>线程正用(<a href="#执行状态">状态</a>)</td><td>使应用程序能够通知系统它正在使用中，从而防止系统在应用程序运行时进入睡眠状态或关闭显示器。</td></tr>
<tr><td>异常处理</td><td>SetUnhandledExceptionFilter</td><td>异常处理(筛选器)</td><td>使应用程序能够取代进程每个线程的顶级异常处理程序。筛选器:0正常执行,1执行异常处理,0xffffffff从异常点继续执行</td></tr>
<tr><td>异常传递</td><td>UnhandledExceptionFilter</td><td>异常传递(异常记录)</td><td>异常处理程序定义的函数，它将未经处理的异常传递给调试器。返回0正在调试,1已经执行</td></tr>
<tr><td>进程内存</td><td>Toolhelp32ReadProcessMemory</td><td>进程内存(进程ID,基址,内容,长度,@已读)</td><td>读取指定进程PID和地址的内存数据</td></tr>
<tr><td>已被调试</td><td>IsDebuggerPresent</td><td>值=已被调试</td><td>判断本进程是否处于调试模式</td></tr>
<tr><td>调试断点</td><td>DebugBreak</td><td>调试断点</td><td>功能暂停程序执行，打开调试器，进入调试模式。</td></tr>
<tr><td>调试进程</td><td>DebugActiveProcess</td><td>调试进程(进程ID)</td><td>调试某一个运行的进程</td></tr>
<tr><td>继续调试</td><td>ContinueDebugEvent</td><td>继续调试(进程ID,线程ID,选项)</td><td>继续报告调试事件。选项$10002停止异常,$80010001继续异常</td></tr>
<tr><td>调试输出</td><td>OutputDebugStringA</td><td>调试输出(内容)</td><td>向当前应用程序的调试器发送一个字符串</td></tr>
<tr><td>调试事件</td><td>WaitForDebugEvent</td><td>调试事件(结构,毫秒)</td><td>等待调试事件发生在被调试的进程中,DEBUG_EVENT结构包含调试信息</td></tr>
<tr><td>调用展开</td><td>RtlUnwind</td><td>调用展开(调用帧,延续,结构,回值)</td><td>启动过程调用帧的展开。</td></tr>
<tr><td>停止</td><td>ExitProcess</td><td>停止(0)</td><td>指定进程的退出代码以及由于此调用而终止的所有线程</td></tr>
<tr><td>刷新指令</td><td>FlushInstructionCache</td><td>刷新指令(进程,基址,大小)</td><td>刷新指定进程的指令高速缓存，让CPU加载新的指令</td></tr>
<tr><td>释放引用</td><td>FreeLibrary</td><td>释放引用(模块句柄)</td><td>减少加载的动态链接库（DLL）模块的引用计数,为零时取消Dll的映射</td></tr>
<tr><td>释放模块</td><td>FreeLibraryAndExitThread</td><td>释放模块(模块,退出码)</td><td>将加载的动态链接库(DLL) 的引用计数递减一，然后调用 退出线程 以终止调用线程。</td></tr>
<tr><td>查找模块</td><td>Module32First</td><td>查找模块(快照,模块类)</td><td>检索与进程相关联的快照第一个模块的信息</td></tr>
<tr><td>下个模块</td><td>Module32Next</td><td>下个模块(快照,模块类)</td><td>检索与进程相关联的快照下一个模块的信息</td></tr>
<tr><td>查找进程</td><td>Process32First</td><td>查找进程(快照,进程类)</td><td>检索进程快照第一个进程的信息</td></tr>
<tr><td>下个进程</td><td>Process32Next</td><td>下个进程(快照,进程类)</td><td>检索进程快照下一个进程的信息</td></tr>
<tr><td>打开进程</td><td>OpenProcess</td><td>打开进程(访问,继承,pid)</td><td>返回现有进程对象pid的句柄</td></tr>
<tr><td>当前进程</td><td>GetCurrentProcess</td><td>pro=当前进程</td><td>获得当前进程的句柄</td></tr>
<tr><td>进程标识</td><td>GetCurrentProcessId</td><td>pid=进程标识</td><td>获得当前进程的标识符PID</td></tr>
<tr><td>终止进程</td><td>TerminateProcess</td><td>终止进程(进程,退出码)</td><td>终止指定的进程及其所有线程</td></tr>
<tr><td>模块名称</td><td>GetModuleFileNameA</td><td>长度=模块名称(模块,路径,长度)</td><td>获取指定模块的可执行文件的完整路径和文件名,模块为0获取本进程</td></tr>
<tr><td>模块地址</td><td>GetModuleHandleA</td><td>模块=模块地址(模块名)</td><td>获取指定模块(dll)的模块句柄,模块名为0获取本进程句柄</td></tr>
<tr><td>函数地址</td><td>GetProcAddress</td><td>函数1=函数地址(模块,函数名)</td><td>获取指定的动态链接库（DLL）函数的地址,可使用 调用 函数1(参数..)来执行</td></tr>
<tr><td>进程状态</td><td>GetExitCodeProcess</td><td>进程状态(进程,@状态)</td><td>获得指定进程的终止状态</td></tr>
<tr><td>取优先级</td><td>GetPriorityClass</td><td>lv=取优先级(进程)</td><td>获取指定进程的优先级</td></tr>
<tr><td>改优先级</td><td>SetPriorityClass</td><td>改优先级(进程,lv)</td><td>设置指定进程的优先级</td></tr>
<tr><td>最后错误</td><td>GetLastError</td><td>错误=最后错误</td><td>返回调用线程的最后一个错误代码值</td></tr>
<tr><td>设置错误</td><td>SetLastError</td><td>设置错误(错误号)</td><td>设置本程序的最后一个错误代码</td></tr>
<tr><td>运行</td><td>WinExec</td><td>运行(命令,显示)</td><td>命令是程序路径,若有参数加空格.显示参见窗口显示方式</td></tr>
</table><a name="运行类">运行类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>运行类</td><td>LOADPARMS32</td><td>16</td><td>用来运行一个外部程序。相关函数LoadModule</td></tr>
<tr><th colspan=4>运行类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>环境</td><td>lpEnvAddress</td><td>整数</td><td>指向运行环境的字符串。为空则与调用进程相同的环境启动</td></tr>
<tr><td>参数</td><td>lpCmdLine</td><td>整数</td><td>指向运行程序的命令行参数字符串</td></tr>
<tr><td>显示</td><td>lpCmdShow</td><td>整数</td><td>运行程序显示的模式</td></tr>
<tr><td>备用</td><td>dwReserved</td><td>整数</td><td>必须是0</td></tr>
</table><a name="进程类">进程类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>进程类</td><td>PROCESSENTRY32</td><td>296</td><td>用来获取系统进程的相关信息。</td></tr>
<tr><th colspan=4>进程类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>dwSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>引用</td><td>cntUsage</td><td>整数</td><td>此进程的引用计数（已不再使用，总是零。）</td></tr>
<tr><td>编号</td><td>th32ProcessID</td><td>整数</td><td>进程ID（任务管理器里进程的PID）</td></tr>
<tr><td>默认</td><td>th32DefaultHeapID</td><td>整数</td><td>进程默认堆ID（已不再使用，总是零。）</td></tr>
<tr><td>模块</td><td>th32ModuleID</td><td>整数</td><td>进程模块ID（已不再使用，总是零。）</td></tr>
<tr><td>线程</td><td>cntThreads</td><td>整数</td><td>此进程开启的线程计数</td></tr>
<tr><td>父进程</td><td>th32ParentProcessID</td><td>整数</td><td>父进程的ID</td></tr>
<tr><td>优先级</td><td>pcPriClassBase</td><td>整数</td><td>线程优先权</td></tr>
<tr><td>标识</td><td>dwFlags</td><td>整数</td><td>已不再使用，总是零。</td></tr>
<tr><td>名称</td><td>szexeFile</td><td>文本</td><td>260字节长度的进程名称（不含路径）</td></tr>
</table><a name="模块类">模块类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>模块类</td><td>MODULEENTRY32</td><td>1316</td><td>用来获取指定进程加载模块(dll)的相关信息。</td></tr>
<tr><th colspan=4>模块类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>dwSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>模组</td><td>th32ModuleID</td><td>整数</td><td>（已不再使用，总是1。）</td></tr>
<tr><td>进程</td><td>th32ProcessID</td><td>整数</td><td>进程ID（任务管理器里进程的PID）</td></tr>
<tr><td>载入</td><td>GlblcntUsage</td><td>整数</td><td>全局模块的载入次数（已不再使用，总是-1。）</td></tr>
<tr><td>引用</td><td>ProccntUsage</td><td>整数</td><td>当前模块的引用次数（已不再使用，总是-1。）</td></tr>
<tr><td>基址</td><td>modBaseAddr</td><td>整数</td><td>模块的基址，在其所属的进程范围内。</td></tr>
<tr><td>大小</td><td>modBaseSize</td><td>整数</td><td>模块的大小，单位字节。</td></tr>
<tr><td>模块</td><td>hModule</td><td>整数</td><td>所属进程的范围内，模块句柄。</td></tr>
<tr><td>名称</td><td>szModule</td><td>文本</td><td>256字节长度的模块名称</td></tr>
<tr><td>路径</td><td>szExePath</td><td>文本</td><td>1024字节长度的模块完整路径</td></tr>
</table><a name="进程基址类">进程基址类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>进程基址类</td><td>PROCESS_BASIC_INFORMATION</td><td>24</td><td>包含了某个进程的相关信息。函数NtQueryInformationProcess</td></tr>
<tr><th colspan=4>进程基址类——成员表</th></tr>
<tr><td>状态</td><td>ExitStatus</td><td>整数</td><td>进程终止状态</td></tr>
<tr><td>基址</td><td>PebBaseAddress</td><td>整数</td><td>进程环境块地址</td></tr>
<tr><td>掩码</td><td>AffinityMask</td><td>整数</td><td>进程关联掩码</td></tr>
<tr><td>优先级</td><td>BasePriority</td><td>整数</td><td>进程的优先级</td></tr>
<tr><td>进程</td><td>UniqueProcessId</td><td>整数</td><td>进程ID</td></tr>
<tr><td>父进程</td><td>InheritedFromUniqueProcessId</td><td>整数</td><td>父进程ID</td></tr>
</table><a name="加载模块">加载模块操作标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DONT_RESOLVE_DLL_REFERENCES</td><td>0x00000001</td><td>如果使用此值，并且可执行模块是 DLL，则系统不会调用 DllMain 进行进程和线程初始化和终止。 此外，系统不会加载指定模块引用的其他可执行模块。</td></tr>
<tr><td>LOAD_IGNORE_CODE_AUTHZ_LEVEL</td><td>0x00000010</td><td>如果使用此值，则系统不会检查 AppLocker 规则或对 DLL 应用软件限制策略。 此操作仅适用于正在加载的 DLL，不适用于其依赖项。 建议在安装程序中使用此值，这些安装程序必须在安装过程中运行提取的 DLL。</td></tr>
<tr><td>LOAD_LIBRARY_AS_DATAFILE</td><td>0x00000002</td><td>如果使用此值，系统会将文件映射到调用进程的虚拟地址空间，就像它是数据文件一样。 执行或准备执行映射文件没有任何操作。 因此，不能使用此 DLL 调用 GetModuleFileName、 GetModuleHandle 或 GetProcAddress 等函数。 使用此值会导致写入只读内存引发访问冲突。 如果只想加载 DLL 以从中提取消息或资源，请使用此标志。</td></tr>
<tr><td>LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE</td><td>0x00000040</td><td>与 LOAD_LIBRARY_AS_DATAFILE类似，只不过 DLL 文件是使用调用进程的独占写入访问权限打开的。 其他进程在使用 DLL 文件时无法打开该文件进行写入访问。 但是，DLL 仍可由其他进程打开。</td></tr>
<tr><td>LOAD_LIBRARY_AS_IMAGE_RESOURCE</td><td>0x00000020</td><td>如果使用此值，系统会将文件作为图像文件映射到进程的虚拟地址空间中。 但是，加载程序不会加载静态导入或执行其他常规初始化步骤。 如果只想加载 DLL 以从中提取消息或资源，请使用此标志。</td></tr>
<tr><td>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</td><td>0x00000200</td><td>如果使用此值，则会在应用程序的安装目录中搜索 DLL 及其依赖项。 不搜索标准搜索路径中的目录。 此值不能与 LOAD_WITH_ALTERED_SEARCH_PATH组合使用。</td></tr>
<tr><td>LOAD_LIBRARY_SEARCH_DEFAULT_DIRS</td><td>0x00001000</td><td>此值是 LOAD_LIBRARY_SEARCH_APPLICATION_DIR、 LOAD_LIBRARY_SEARCH_SYSTEM32和 LOAD_LIBRARY_SEARCH_USER_DIRS的组合。 不搜索标准搜索路径中的目录。 此值不能与 LOAD_WITH_ALTERED_SEARCH_PATH组合使用。</td></tr>
<tr><td>LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR</td><td>0x00000100</td><td>如果使用此值，则包含 DLL 的目录将暂时添加到要搜索 DLL 依赖项的目录列表的开头。 不搜索标准搜索路径中的目录。</td></tr>
<tr><td>LOAD_LIBRARY_SEARCH_SYSTEM32</td><td>0x00000800</td><td>如果使用此值，则会搜索 %windows%\system32 来查找 DLL 及其依赖项。 不搜索标准搜索路径中的目录。 此值不能与 LOAD_WITH_ALTERED_SEARCH_PATH组合使用。</td></tr>
<tr><td>LOAD_LIBRARY_SEARCH_USER_DIRS</td><td>0x00000400</td><td>如果使用此值，则使用 AddDllDirectory 或 SetDllDirectory 函数添加的目录将搜索 DLL 及其依赖项。 如果已添加多个目录，则未指定搜索目录的顺序。 不搜索标准搜索路径中的目录。 此值不能与 LOAD_WITH_ALTERED_SEARCH_PATH组合使用。</td></tr>
<tr><td>LOAD_WITH_ALTERED_SEARCH_PATH</td><td>0x00000008</td><td>如果使用此值并且 lpFileName 指定绝对路径，则系统会使用“备注”部分中讨论的备用文件搜索策略来查找指定模块导致加载的关联可执行模块。 如果使用此值，并且 lpFileName 指定相对路径，则行为未定义。</td></tr>
<tr><td>LOAD_LIBRARY_REQUIRE_SIGNED_TARGET</td><td>0x00000080</td><td>指定必须在加载时检查二进制映像的数字签名。</td></tr>
<tr><td>LOAD_LIBRARY_SAFE_CURRENT_DIRS</td><td>0x00002000</td><td>如果使用此值，则仅当 DLL 位于“安全加载”列表中的某个目录下时，才允许从当前目录加载要执行</td></tr>
</table><a name="进程信息类">进程信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>进程信息类</td><td>PROCESS_INFORMATION</td><td>16</td><td>包含有关新创建的进程及其主线程的信息。</td></tr>
<tr><th colspan=4>进程信息类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>进程</td><td>hProcess</td><td>整数</td><td>新创建进程的句柄。句柄用于指定对进程对象执行操作的所有函数中的进程。</td></tr>
<tr><td>线程</td><td>hThread</td><td>整数</td><td>新创建的进程的主线程的句柄。句柄用于指定对线程对象执行操作的所有函数中的线程。</td></tr>
<tr><td>进程号</td><td>dwProcessId</td><td>整数</td><td>一个值，可用于标识进程。 值从创建进程时起有效，直到关闭进程的所有句柄并释放进程对象;此时，可以重复使用标识符。</td></tr>
<tr><td>线程号</td><td>dwThreadId</td><td>整数</td><td>可用于标识线程的值。值从创建线程时起有效，直到关闭线程的所有句柄并释放线程对象;此时，可以重复使用标识符。</td></tr>
</table><a name="启动进程类">启动进程类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>启动进程类</td><td>STARTUPINFOEXA</td><td>72</td><td>指定新进程的窗口工作站、桌面、标准句柄和属性。</td></tr>
<tr><th colspan=4>启动进程类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>信息</td><td>StartupInfo</td><td>启动信息类</td><td>STARTUPINFO 结构。</td></tr>
<tr><td>属性</td><td>lpAttributeList</td><td>整数</td><td>属性列表。此列表由 InitializeProcThreadAttributeList 函数创建。</td></tr>
</table><a name="启动信息类">启动信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>启动信息类</td><td>STARTUPINFOA</td><td>68</td><td>指定创建时进程的窗口工作站、桌面、标准句柄和main窗口的外观。</td></tr>
<tr><th colspan=4>启动信息类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cb</td><td>整数</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>预留</td><td>lpReserved</td><td>整数</td><td>保留;必须为 0。</td></tr>
<tr><td>桌面</td><td>lpDesktop</td><td>整数</td><td>桌面的名称，或此过程的桌面和窗口工作站的名称。字符串中的反斜杠指示字符串同时包含桌面和窗口工作站名称。</td></tr>
<tr><td>标题</td><td>lpTitle</td><td>整数</td><td>对于控制台进程，这是在创建新的控制台窗口时显示在标题栏中的标题。</td></tr>
<tr><td>左</td><td>dwX</td><td>整数</td><td>如果 标志 指定4，则此成员是创建新窗口时窗口左上角的 x 偏移量（以像素为单位）。</td></tr>
<tr><td>顶</td><td>dwY</td><td>整数</td><td>如果 标志 指定4，则此成员是创建新窗口时窗口左上角的 y 偏移量（以像素为单位）。</td></tr>
<tr><td>宽</td><td>dwXSize</td><td>整数</td><td>如果 标志 指定2，则此成员是创建新窗口时窗口的宽度（以像素为单位）。</td></tr>
<tr><td>高</td><td>dwYSize</td><td>整数</td><td>如果 标志 指定2，则此成员是创建新窗口时窗口的高度（以像素为单位）。</td></tr>
<tr><td>列</td><td>dwXCountChars</td><td>整数</td><td>如果 标志 指定8，如果在控制台进程中创建新的控制台窗口，则此成员以字符列为单位指定屏幕缓冲区宽度。</td></tr>
<tr><td>行</td><td>dwYCountChars</td><td>整数</td><td>如果 标志 指定8，如果在控制台进程中创建新的控制台窗口，则此成员以字符行为单位指定屏幕缓冲区高度。</td></tr>
<tr><td>属性</td><td>dwFillAttribute</td><td>整数</td><td>如果 标志 指定0x10，则如果在控制台应用程序中创建新的控制台窗口，则此成员为初始文本和背景色。</td></tr>
<tr><td>标志</td><td>标志</td><td>整数</td><td>确定进程创建窗口时是否使用某些成员的<a href="#启动信息标志">信息标志</a>位域。</td></tr>
<tr><td>显示</td><td>wShowWindow</td><td>整数</td><td>如果 标志 指定1，则此成员可以是SW_SHOWDEFAULT除外的任何窗口显示模式。否则，将忽略此成员。</td></tr>
<tr><td>备用</td><td>lpReserved2</td><td>整数</td><td>保留供 C 运行时使用;必须为零。</td></tr>
<tr><td>输入</td><td>hStdInput</td><td>整数</td><td>如果 标志 指定0x100，则此成员是进程的标准输入句柄。如果 标志 指定0x200，则此成员将指定一个热键值</td></tr>
<tr><td>输出</td><td>hStdOutput</td><td>整数</td><td>如果 标志 指定0x100，则此成员是进程的标准输出句柄。 否则，将忽略此成员，标准输出的默认值为控制台窗口的缓冲区。</td></tr>
<tr><td>错误</td><td>hStdError</td><td>整数</td><td>如果 标志 指定0x100，则此成员是进程的标准错误句柄。 否则，将忽略此成员，标准错误的默认值为控制台窗口的缓冲区。</td></tr>
</table><a name="启动信息标志">启动信息标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>STARTF_FORCEONFEEDBACK</td><td>0x00000040</td><td>指示在调用 创建进程 后光标处于反馈模式两秒钟。 显示“在后台工作”光标 (查看鼠标控制面板实用工具) 中的“指针”选项卡。如果在这两秒内进程进行第一次 GUI 调用，则系统会再给进程 5 秒。 如果在这五秒内进程显示一个窗口，则系统再给进程 5 秒以完成绘制窗口。系统在第一次调用 获取消息 后关闭反馈光标，无论进程是否正在绘制。</td></tr>
<tr><td>STARTF_FORCEOFFFEEDBACK</td><td>0x00000080</td><td>指示在进程启动时强制关闭反馈光标。 将显示“普通选择”光标。</td></tr>
<tr><td>STARTF_PREVENTPINNING</td><td>0x00002000</td><td>指示进程创建的任何窗口都不能固定在任务栏上。此标志必须与 STARTF_TITLEISAPPID 组合使用。</td></tr>
<tr><td>STARTF_RUNFULLSCREEN</td><td>0x00000020</td><td>指示进程应在全屏模式下运行，而不是在窗口模式下运行。此标志仅对 x86 计算机上运行的控制台应用程序有效。</td></tr>
<tr><td>STARTF_TITLEISAPPID</td><td>0x00001000</td><td>lpTitle 成员包含 AppUserModelID。 此标识符控制任务栏和 “开始” 菜单呈现应用程序的方式，并使它能够与正确的快捷方式和跳转列表相关联。 通常，应用程序将使用 SetCurrentProcessExplicitAppUserModelID 和 GetCurrentProcessExplicitAppUserModelID 函数，而不是设置此标志。 有关详细信息，请参阅 应用程序用户模型 ID。如果使用STARTF_PREVENTPINNING，则应用程序窗口不能固定在任务栏上。 应用程序使用与 AppUserModelID 相关的任何窗口属性仅覆盖该窗口的此设置。此标志不能与STARTF_TITLEISLINKNAME一起使用。</td></tr>
<tr><td>STARTF_TITLEISLINKNAME</td><td>0x00000800</td><td>lpTitle 成员包含用户为启动此过程而调用的快捷方式文件 (.lnk) 的路径。 这通常是在调用指向已启动应用程序的 .lnk 文件时由 shell 设置的。 大多数应用程序不需要设置此值。此标志不能与STARTF_TITLEISAPPID一起使用。</td></tr>
<tr><td>STARTF_UNTRUSTEDSOURCE</td><td>0x00008000</td><td>命令行来自不受信任的源。 有关详细信息，请参阅“备注”。</td></tr>
<tr><td>STARTF_USECOUNTCHARS</td><td>0x00000008</td><td>dwXCountChars 和 dwYCountChars 成员包含其他信息。</td></tr>
<tr><td>STARTF_USEFILLATTRIBUTE</td><td>0x00000010</td><td>dwFillAttribute 成员包含其他信息。</td></tr>
<tr><td>STARTF_USEHOTKEY</td><td>0x00000200</td><td>hStdInput 成员包含其他信息。此标志不能与 STARTF_USESTDHANDLES一起使用。</td></tr>
<tr><td>STARTF_USEPOSITION</td><td>0x00000004</td><td>dwX 和 dwY 成员包含其他信息。</td></tr>
<tr><td>STARTF_USESHOWWINDOW</td><td>0x00000001</td><td>wShowWindow 成员包含其他信息。</td></tr>
<tr><td>STARTF_USESIZE</td><td>0x00000002</td><td>dwXSize 和 dwYSize 成员包含其他信息。</td></tr>
<tr><td>STARTF_USESTDHANDLES</td><td>0x00000100</td><td>hStdInput、hStdOutput 和 hStdError 成员包含其他信息。如果在调用其中一个进程创建函数时指定此标志，则句柄必须是可继承的，并且函数的 bInheritHandles 参数必须设置为 TRUE。 有关详细信息，请参阅 处理继承。如果在调用 GetStartupInfo 函数时指定此标志，则这些成员要么是在进程创建期间指定的句柄值，要么INVALID_HANDLE_VALUE。当不再需要句柄时，必须使用 CloseHandle 关闭这些句柄。此标志不能与 STARTF_USEHOTKEY一起使用。</td></tr>
</table><a name="执行状态">线程执行状态</a>。可使用以下一个或多个值。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ES_AWAYMODE_REQUIRED</td><td>0x00000040</td><td>启用离开模式。 必须使用 ES_CONTINUOUS 指定此值。离开模式只能由媒体录制和媒体分发应用程序使用，这些应用程序必须在计算机似乎处于睡眠状态时在台式计算机上执行关键后台处理。</td></tr>
<tr><td>ES_CONTINUOUS</td><td>0x80000000</td><td>通知系统正在设置的状态应保持有效，直到使用 ES_CONTINUOUS 的下一次调用和清除其他状态标志之一。</td></tr>
<tr><td>ES_DISPLAY_REQUIRED</td><td>0x00000002</td><td>通过重置显示空闲计时器强制显示处于打开状态。</td></tr>
<tr><td>ES_SYSTEM_REQUIRED</td><td>0x00000001</td><td>通过重置系统空闲计时器强制系统处于工作状态。</td></tr>
<tr><td>ES_USER_PRESENT</td><td>0x00000004</td><td>不支持此值。 如果 ES_USER_PRESENT 与其他值组合使用，则调用将失败，并且不会设置任何指定的状态。</td></tr>
</table><font color="#0000FF"><a name="错误模式">进程错误模式</a>。可使用以下一个或多个值。</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>所有错误</td><td>0</td><td>使用系统默认值，即显示所有错误对话框。</td></tr>
<tr><td>SEM_FAILCRITICALERRORS</td><td>0x0001</td><td>系统不显示严重错误处理程序消息框。 相反，系统会将错误发送到调用进程。最佳做法是，所有应用程序在启动时调用参数为 SEM_FAILCRITICALERRORS 的进程范围的 SetErrorMode 函数。 这是为了防止错误模式对话框挂起应用程序。</td></tr>
<tr><td>SEM_NOALIGNMENTFAULTEXCEPT</td><td>0x0004</td><td>系统自动修复内存对齐错误，并使它们对应用程序不可见。 它为调用进程和任何后代进程执行此操作。 此功能仅受某些处理器体系结构支持。为进程设置此值后，将忽略后续尝试清除该值。</td></tr>
<tr><td>SEM_NOGPFAULTERRORBOX</td><td>0x0002</td><td>系统不显示Windows 错误报告对话框。</td></tr>
<tr><td>SEM_NOOPENFILEERRORBOX</td><td>0x8000</td><td>OpenFile 函数在找不到文件时不显示消息框。 相反，错误将返回到调用方。 此错误模式将替代 OF_PROMPT 标志。</td></tr>
</table><font color="#0000FF"><a name="命名管道">命名管道</a>、邮槽、作业</font><br>
管道是进程用于通信的共享内存的一部分。 创建管道的过程是 管道服务器。 连接到管道的进程是 管道客户端。 一个进程将信息写入管道，另一个进程从管道读取信息。<br> 
有两种类型的管道： 匿名管道 和 命名管道。 与命名管道相比，匿名管道所需的开销更少，但服务有限。

此处使用的术语管道意味着管道用作信息管道。 从概念上讲，管道有两端。 单向管道允许一端的进程写入管道，并允许另一端的进程从管道中读取数据。 双向 (或双工) 管道允许进程从管道端读取和写入。<br> 
<h2>匿名管道</h2>
匿名管道是一种未命名的单向管道，通常在父进程和子进程之间传输数据。 匿名管道始终是本地管道;它们不能用于通过网络进行通信。<br> 
<pre>
<b>匿名管道操作</b>
创建管道 函数创建匿名管道并返回两个句柄：管道的读取句柄和管道的写入句柄。 读取句柄对管道具有只读访问权限，写入句柄对管道具有只读访问权限。
若要使用管道进行通信，管道服务器必须将管道句柄传递给另一个进程。 通常，这是通过继承完成的;也就是说，进程允许子进程继承句柄。 
进程还可以使用 复制对象 函数复制管道句柄，并使用某种形式的进程间通信（例如 DDE 或共享内存）将其发送到不相关的进程。

管道服务器可以将读取句柄或写入句柄发送到管道客户端，具体取决于客户端是应使用匿名管道发送信息还是接收信息。
若要从管道读取数据，请在调用 读取文件 函数时使用管道的读取句柄。 当另一个进程写入管道时， 读取文件 调用将返回。
如果管道的所有写入句柄都已关闭，或者在读取操作完成之前发生错误， 读取文件 调用也可以返回 。

若要写入管道，请在调用 写入文件 函数时使用管道的写入句柄。 写入文件 调用在将指定字节数写入管道或发生错误之前不会返回。
如果管道缓冲区已满，并且有更多字节要写入， 则 写入文件 不会返回，直到另一个进程从管道读取，从而提供更多的缓冲区空间。
管道服务器在调用 创建管道 时指定管道的缓冲区大小。

匿名管道不支持异步 (重叠) 读取和写入操作。 这意味着不能将 读入文件 和 写出文件 函数用于匿名管道。
此外，当这些函数与匿名管道一起使用时，将忽略 读取文件 和 写入文件 的 重叠类 参数。

匿名管道存在，直到所有管道句柄（读取和写入）都已关闭。 进程可以使用 关闭对象 函数关闭其管道句柄。 当进程终止时，所有管道句柄也会关闭。

匿名管道是使用具有唯一名称的命名管道实现的。 因此，通常可以将匿名管道的句柄传递给需要命名管道句柄的函数。

<b>管道句柄继承</b>
管道服务器控制是否可以通过以下方式继承其句柄：

创建管道 函数接收<a href="#安全属性类">安全属性类</a>结构。 如果管道服务器将此结构的 继承 成员设置为 真，则可以继承 创建管道 创建的句柄。
管道服务器可以使用 复制对象 函数更改管道句柄的继承。 管道服务器可以创建可继承管道句柄的不可继承副本或不可继承管道句柄的可继承副本。
创建进程 函数使管道服务器能够指定子进程是继承其可继承的所有句柄还是不继承任何句柄。
当子进程继承管道句柄时，系统将允许该进程访问管道。 但是，父进程必须将句柄值传达给子进程。 
父进程通常通过将标准输出句柄重定向到子进程来执行此操作，如以下步骤所示：

调用 取控制台 函数以获取当前标准输出句柄;保存此句柄，以便在创建子进程后还原原始标准输出句柄。
调用 改控制台 函数，将标准输出句柄设置为管道的写入句柄。 现在，父进程可以创建子进程。
调用 关闭对象 函数以关闭管道的写入句柄。 子进程继承写入句柄后，父进程不再需要其副本。
调用 改控制台 以还原原始标准输出句柄。
子进程使用 取控制台 函数获取其标准输出句柄，该句柄现在是管道写入端的句柄。 然后，子进程使用 写入文件 函数将其输出发送到管道。
当子项完成管道处理后，它应通过调用 关闭对象 或通过终止（自动关闭句柄）来关闭管道句柄。

父进程使用 读取文件 函数从管道接收输入。 数据作为字节流写入匿名管道。 这意味着，从管道读取的父进程无法区分在单独的写入操作中写入的字节，
除非父进程和子进程都使用协议来指示写入操作的结束位置。 关闭管道的所有写入句柄时， 读取文件 函数将返回零。 在调用 读取文件 之前，
父进程必须将其句柄关闭到管道的写入端。 如果未完成此操作， 读取文件 操作将无法返回零，因为父进程具有指向管道写入端的打开句柄。

重定向标准输入句柄的过程与重定向标准输出句柄的过程类似，只不过管道的读取句柄用作子级的标准输入句柄。 在这种情况下，父进程必须确保子进程
不会继承管道的写入句柄。 如果未完成此操作，则子进程执行的 读取文件 操作无法返回零，因为子进程具有指向管道写入端的打开句柄。

<b>匿名管道安全性和访问权限</b>
Windows 安全性使你能够控制对匿名管道的访问。 有关安全性的详细信息，请参阅 访问控制模型。

调用 创建管道 函数时，可以为管道指定安全描述符。 安全描述符控制对管道读取和写入端的访问。
如果指定 NULL，管道将获取默认安全描述符。 管道的默认安全描述符中的 ACL 来自创建者的主要令牌或模拟令牌。

若要检索管道的安全描述符，请调用 取安全符 函数。 若要更改管道的安全描述符，请调用 改安全符 函数。

创建管道 函数向匿名管道返回两个句柄：具有0x80100000 访问权限的读取句柄;以及具有0x40100000 访问权限的写入句柄。
GENERIC_READ和GENERIC_WRITE访问使用与命名管道相同的访问权限映射。

匿名管道GENERIC_READ访问权限结合了从管道读取数据、读取管道属性、读取扩展属性和读取管道的 DACL 的权限。

匿名管道的GENERIC_WRITE访问权限结合了将数据写入管道、向其追加数据、写入管道属性、写入扩展属性和读取管道 DACL 的权限。
</pre>
<h2>命名管道</h2>
<pre>
命名管道是用于管道服务器与一个或多个管道客户端之间通信的命名、单向或双工管道。 命名管道的所有实例共享相同的管道名称，
但每个实例都有自己的缓冲区和句柄，并为客户端/服务器通信提供单独的管道。 通过使用实例，多个管道客户端可以同时使用同一个命名管道。

任何进程都可以访问命名管道，受到安全检查，使命名管道成为相关或不相关进程之间通信的简单形式。

任何进程都可以充当服务器和客户端，使对等通信成为可能。 在此处使用，术语管道服务器是指创建命名管道的进程，术语管道客户端是指连接到命名管道实例的进程。
用于实例化命名管道的服务器端函数是 创建名管。 用于接受连接的服务器端函数是 连接管道。 客户端进程使用 创建文件 或 调用管道 函数连接到命名管道。

命名管道可用于在同一台计算机上的进程之间或网络上不同计算机上的进程之间提供通信。 如果服务器服务正在运行，则所有命名管道都可以远程访问。
如果打算仅在本地使用命名管道，请拒绝对 NT AUTHORITY\NETWORK 的访问或切换到本地 RPC。
<b>管道名称</b>
每个命名管道都有一个唯一的名称，用于将其与系统命名对象列表中的其他命名管道区分开来。 管道服务器在调用 创建名管 函数以创建命名管道
的一个或多个实例时指定管道的名称。 管道客户端在调用 创建文件 或 调用管道 函数以连接到命名管道实例时指定管道名称。

在 创建文件、等待管道 或 调用管道 函数中指定管道的名称时，请使用以下形式：

\\ServerName\pipe\PipeName

其中 ，ServerName 是远程计算机的名称或句点，以指定本地计算机。 PipeName 指定的管道名称字符串可以包含反斜杠以外的任何字符，
包括数字和特殊字符。整个管道名称字符串的长度最多为 256 个字符。 管道名称不区分大小写。

管道服务器不能在另一台计算机上创建管道，因此 创建名管 必须为服务器名称使用句点，如以下示例所示。

\\.\pipe\PipeName

管道服务器可以向其管道客户端提供管道名称，以便它们可以连接到管道。 管道客户端从某些永久性源
（例如注册表项、文件或其他应用程序）中发现管道名称。 否则，客户端必须在编译时知道管道名称。
<b>命名管道打开模式</b>
管道服务器在 创建名管 函数的 dwOpenMode 参数中指定管道访问、重叠和写通模式。 管道客户端可以使用 创建文件 函数为其管道句柄指定这些打开模式。

<b>访问模式</b>
设置管道访问模式等效于指定与管道服务器的句柄关联的读取或写入访问权限。 下表显示了可使用 创建名管 指定的每个访问模式的等效泛型访问权限。
</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>访问模式</td><td>等效的泛型访问权限</td></tr>
<tr><td>PIPE_ACCESS_INBOUND</td><td>	GENERIC_READ</td></tr>
<tr><td>PIPE_ACCESS_OUTBOUND</td><td>	GENERIC_WRITE</td></tr>
<tr><td>PIPE_ACCESS_DUPLEX</td><td>GENERIC_READ |GENERIC_WRITE</td></tr>
</table> 
<pre>
如果管道服务器使用 PIPE_ACCESS_INBOUND 创建管道，则管道服务器为只读管道，管道客户端为只读。 如果管道服务器使用PIPE_ACCESS_OUTBOUND创建管道，
则管道服务器为只读管道，管道客户端为只读。 使用 PIPE_ACCESS_DUPLEX 创建的管道对于管道服务器和管道客户端都是可读/写的。

使用 创建文件 连接到命名管道的管道客户端必须在 读写 参数中指定与管道服务器指定的访问模式兼容的访问权限。
例如，客户端必须指定GENERIC_READ访问权限才能打开管道服务器使用 PIPE_ACCESS_OUTBOUND 创建的管道的句柄。对于管道的所有实例，访问模式必须相同。

若要读取管道属性（如读取模式或阻止模式），管道句柄必须具有FILE_READ_ATTRIBUTES访问权限;若要写入管道属性，管道句柄必须具有FILE_WRITE_ATTRIBUTES访问权限。
这些访问权限可以与适用于管道的通用访问权限组合使用：GENERIC_READ具有只读管道的FILE_WRITE_ATTRIBUTES，或对只读管道使用FILE_READ_ATTRIBUTES GENERIC_WRITE。
以这种方式限制访问权限可为管道提供更好的安全性。

<b>重叠模式</b>
在重叠模式下，执行长时间读取、写入和连接操作的函数可以立即返回。 这使线程能够在后台执行耗时操作时执行其他操作。
若要指定重叠模式，请使用 FILE_FLAG_OVERLAPPED 标志。 有关详细信息，请参阅 同步和重叠输入和输出。

创建文件 函数允许管道客户端使用 属性 参数为其管道句柄设置重叠模式 (FILE_FLAG_OVERLAPPED) 。

<b>Write-Through模式</b>
使用 FILE_FLAG_WRITE_THROUGH 指定写通模式。 此模式仅影响对不同计算机上的管道客户端和管道服务器之间的字节类型管道的写入操作。
在写通模式下，写入命名管道的函数在数据通过网络传输并进入远程计算机上的管道缓冲区之前不会返回。 对于每个写入操作需要同步的应用程序，写通模式非常有用。

如果未启用写通模式，系统会通过缓冲数据来提高网络操作的效率，直到累积最小字节数或最长时间段已过。 缓冲使系统能够将多个写入操作合并到单个网络传输中。
这意味着，在系统将数据放入出站缓冲区之后，但在系统通过网络传输数据之前，写入操作可以成功完成。

创建文件 函数允许管道客户端使用 属性 参数为其管道句柄设置写通模式 (FILE_FLAG_WRITE_THROUGH) 。
创建管道句柄后，无法更改管道句柄的写通模式。 对于同一管道实例的服务器和客户端句柄，写通模式可能不同。
管道客户端可以使用 名管模式 函数来控制禁用写通模式的管道的字节数和传输前的超时期限。
对于只读管道，必须使用GENERIC_READ打开管道句柄，并FILE_WRITE_ATTRIBUTES访问权限。
</pre>
<font color="#0000FF">命名管道 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>复制对象</td><td>DuplicateHandle</td><td>复制对象(源进程,源对象,目标进程,<br>@目标对象,权限,继承,选项)</td><td>复制对象句柄。继承为真新进程可以继承目标对象;选项:1关闭源对象,2忽略权限</td></tr>
<tr><td>对象属性</td><td>GetHandleInformation</td><td>对象属性(对象,@属性)</td><td>检索对象句柄的某些属性。1子进程继承,2不能关闭对象</td></tr>
<tr><td>对象改性</td><td>SetHandleInformation</td><td>对象改性(对象,掩码,属性)</td><td>检索对象句柄的某些属性。掩码和属性相同:1子进程继承,2不能关闭对象</td></tr>
<tr><td>创建作业</td><td>CreateJobObjectA</td><td>创建作业(属性结构,作业名)</td><td>创建或打开作业对象命名空间。</td></tr>
<tr><td>终止作业</td><td>TerminateJobObject</td><td>终止作业(作业,退出码)</td><td>终止当前与作业关联的所有进程。 </td></tr>
<tr><td>创建管道</td><td>CreatePipe</td><td>创建管道(@读取,@写入,<a href="#安全属性类">继承</a>,大小)</td><td>创建匿名管道，并将句柄返回到管道的读取端和写入端。</td></tr>
<tr><td>创建名管</td><td>CreateNamedPipeA</td><td>创建名管(\\.\pipe\名称,<a href="#打开模式">打开</a>,<a href="#管道模式">管道</a>,实例数,<br>输入量,输出量,超时,<a href="#安全属性类">继承</a>)</td><td>创建命名管道的实例，并返回后续管道操作的句柄。超时:毫秒数</td></tr>
<tr><td>调用管道</td><td>CallNamedPipeA</td><td>调用管道(名称,数据,大小,@缓冲,长度,@已读,超时)</td><td>连接到消息类型管道，并在管道实例不可用时等待，对管道进行写入和读取，然后关闭管道。超时:毫秒数,0默认,1不等待,0xffffffff无限等</td></tr>
<tr><td>连接管道</td><td>ConnectNamedPipe</td><td>连接管道(管道,<a href="#重叠类">重叠类</a>)</td><td>允许命名管道服务器进程等待客户端进程连接到命名管道的实例。</td></tr>
<tr><td>创建邮槽</td><td>CreateMailslotA</td><td>创建邮槽(\\.\mailslot\名称,大小,超时,<a href="#安全属性类">继承</a>)</td><td>使用指定名称创建邮件槽，并返回邮件槽服务器可用于对邮件槽执行操作的句柄。超时:毫秒数,-1永远</td></tr>
<tr><td>断开名管</td><td>DisconnectNamedPipe</td><td>断开名管(模块)</td><td>断开命名管道实例的服务器端与客户端进程的连接。</td></tr>
<tr><td>邮槽信息</td><td>GetMailslotInfo</td><td>邮槽信息(邮槽,@最大,@下条消息长,<br>@待收,@超时)</td><td>检索有关标识符指定的区域设置的信息。</td></tr>
<tr><td>邮槽超时</td><td>SetMailslotInfo</td><td>邮槽超时(邮槽,超时)</td><td>设置指定邮槽用于读取操作的超时值。毫秒:0立即返回,-1永远等待</td></tr>
<tr><td>名管机名</td><td>GetNamedPipeClientComputerNameA</td><td>名管机名(命名管道,@名称,大小)</td><td>检索指定命名管道的客户端计算机名称。</td></tr>
<tr><td>名管进程</td><td>GetNamedPipeClientProcessId</td><td>名管进程(命名管道,@进程编号)</td><td>检索指定命名管道的客户端进程标识符。</td></tr>
<tr><td>名管会话</td><td>GetNamedPipeClientSessionId</td><td>名管会话(命名管道,@会话编号)</td><td>检索指定命名管道的客户端会话标识符。</td></tr>
<tr><td>名管状态</td><td>GetNamedPipeHandleStateA</td><td>名管状态(命名,@状态,@例数,@长度,<br>@时间,@用户,@名长)</td><td>检索有关指定命名管道的信息。状态:1非阻塞,2消息读取(否则字节读取)</td></tr>
<tr><td>名管远程</td><td>GetNamedPipeServerProcessId</td><td>名管远程(命名管道,@进程编号)</td><td>检索指定命名管道的服务器进程标识符。</td></tr>
<tr><td>名管对话</td><td>GetNamedPipeServerSessionId</td><td>名管对话(命名管道,@会话编号)</td><td>检索指定命名管道的服务器会话标识符。</td></tr>
<tr><td>名管信息</td><td>GetNamedPipeInfo</td><td>名管信息(名管,@类型,@传出,@传入,@例数)</td><td>检索有关指定命名管道的信息。类型:1服务端,4消息管道(否则字节管道)</td></tr>
<tr><td>名管读取</td><td>PeekNamedPipe</td><td>名管读取(名管,@数据,大小,@已读,@总长,@剩余)</td><td>将数据从命名管道或匿名管道复制到缓冲区中，而不将其从管道中删除。</td></tr>
<tr><td>名管模式</td><td>SetNamedPipeHandleState</td><td>名管模式(名管,模式,最大,超时)</td><td>设置指定命名管道的读取模式和阻止模式。0字节流,2消息流,1非阻止</td></tr>
<tr><td>名管读写</td><td>TransactNamedPipe</td><td>名管读写(名管,输入,大小,@接收,长度,@已读,<a href="#重叠类">重叠类</a>)</td><td>将向指定命名管道写入消息并从中读取消息的函数合并为单个操作。</td></tr>
<tr><td>作业信息</td><td>QueryInformationJobObject</td><td>作业信息(作业,<a href="#作业分类">分类</a>,@信息,大小,@已收)</td><td>从作业对象检索限制和作业状态信息。</td></tr>
<tr><td>改句柄数</td><td>SetHandleCount</td><td>改句柄数(数量)</td><td>更改进程可用的文件句柄数。DOS进程可用的默认最大文件句柄数为20。Windows系统不起作用。</td></tr>
<tr><td>等待管道</td><td>WaitNamedPipeA</td><td>等待管道(名称,毫秒)</td><td>等待超时间隔过去或指定命名管道的实例可用于连接;超时为0是默认,-1是无限等待</td></tr>
</table><font color="#0000FF"><a name="打开模式">命名管道打开模式</a>——使用标志</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><th colspan=3>此参数必须指定以下管道访问模式之一。 必须为管道的每个实例指定相同的模式。</th></tr>
<tr><td>PIPE_ACCESS_DUPLEX</td><td>0x00000003</td><td>管道是双向的;服务器和客户端进程都可以从管道读取和写入管道。 此模式为服务器提供 对管道的等效GENERIC_READ 和 GENERIC_WRITE 访问权限。 当客户端使用 CreateFile 函数连接到管道时，可以指定GENERIC_READ或GENERIC_WRITE，或者同时指定这两者。</td></tr>
<tr><td>PIPE_ACCESS_INBOUND</td><td>0x00000001</td><td>管道中的数据流仅从客户端流向服务器。 此模式为服务器提供对管道 的等效GENERIC_READ 访问权限。 连接到管道时，客户端必须指定 GENERIC_WRITE 访问。 如果客户端必须通过调用 GetNamedPipeInfo 或 GetNamedPipeHandleState 函数来读取管道设置，则客户端必须在连接到管道时指定 GENERIC_WRITE 并 FILE_READ_ATTRIBUTES 访问。</td></tr>
<tr><td>PIPE_ACCESS_OUTBOUND</td><td>0x00000002</td><td>管道中的数据流仅从服务器流向客户端。 此模式为服务器提供等效于 GENERIC_WRITE 访问管道的权限。 连接到管道时，客户端必须指定 GENERIC_READ 访问。 如果客户端必须通过调用 SetNamedPipeHandleState 函数更改管道设置，则客户端必须在连接到管道时指定 GENERIC_READ 和 FILE_WRITE_ATTRIBUTES 访问。</td></tr>
<tr><th colspan=3>此参数还可以包括以下一个或多个标志，这些标志启用写通模式和重叠模式。</th></tr>
<tr><td>FILE_FLAG_FIRST_PIPE_INSTANCE</td><td>0x00080000</td><td>如果尝试使用此标志创建管道的多个实例，则创建第一个实例会成功，但创建下一个实例会失败并 ERROR_ACCESS_DENIED。</td></tr>
<tr><td>FILE_FLAG_WRITE_THROUGH</td><td>0x80000000</td><td>已启用写通模式。 此模式仅影响对字节类型管道的写入操作，并且仅当客户端和服务器进程位于不同计算机上时才影响写入操作。 如果启用此模式，则写入命名管道的函数不会返回，直到写入的数据通过网络传输并且位于远程计算机上的管道缓冲区中。 如果未启用此模式，系统会通过缓冲数据，直到最小字节数累积或最长时间结束，来提高网络操作的效率。</td></tr>
<tr><td>FILE_FLAG_OVERLAPPED</td><td>0x40000000</td><td>已启用重叠模式。 如果启用此模式，执行读取、写入和连接操作（可能需要很长时间才能完成）的函数会立即返回。 此模式使启动操作的线程能够在后台执行耗时操作时执行其他操作。 例如，在重叠模式下，线程可以处理同时输入和输出 (多个管道实例上的 I/O) 操作，或在同一管道句柄上同时执行读取和写入操作。 如果未启用重叠模式，则在操作完成之前，对管道句柄执行读取、写入和连接操作的函数不会返回。 ReadFileEx 和 WriteFileEx 函数只能与重叠模式下的管道句柄一起使用。 ReadFile、WriteFile、ConnectNamedPipe 和 TransactNamedPipe 函数可以同步执行，也可以作为重叠操作执行。</td></tr>
<tr><th colspan=3>此参数可以包括以下安全访问模式的任意组合。 对于同一管道的不同实例，这些模式可能不同。</th></tr>
<tr><td>WRITE_DAC</td><td>0x00040000</td><td>调用方将具有对命名管道的任意访问控制列表 (ACL) 的写入访问权限。</td></tr>
<tr><td>WRITE_OWNER</td><td>0x00080000</td><td>调用方将具有对命名管道所有者的写入访问权限。</td></tr>
<tr><td>ACCESS_SYSTEM_SECURITY</td><td>0x01000000</td><td>调用方将具有对命名管道的 SACL 的写入访问权限。 有关详细信息，请参阅 访问控制列表 (ACL) 和 SACL 访问权限。</td></tr>
</table><font color="#0000FF"><a name="管道模式">管道模式</a>——使用标志</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><th colspan=3>可以指定以下类型模式之一。 必须为管道的每个实例指定相同的类型模式。</th></tr>
<tr><td>PIPE_TYPE_BYTE</td><td>0x00000000</td><td>数据作为字节流写入管道。 此模式不能与PIPE_READMODE_MESSAGE一起使用。 管道不区分在不同写入操作期间写入的字节。</td></tr>
<tr><td>PIPE_TYPE_MESSAGE</td><td>0x00000004</td><td>数据作为消息流写入管道。 管道将每次写入操作期间写入的字节视为消息单元。 GetLastError 函数在未完全读取消息时返回ERROR_MORE_DATA。 此模式可与 PIPE_READMODE_MESSAGE 或 PIPE_READMODE_BYTE 一起使用。</td></tr>
<tr><th colspan=3>可以指定以下读取模式之一。同一管道的不同实例可以指定不同的读取模式。</th></tr>
<tr><td>PIPE_READMODE_BYTE</td><td>0x00000000</td><td>数据作为字节流从管道中读取。 此模式可用于 PIPE_TYPE_MESSAGE 或 PIPE_TYPE_BYTE。</td></tr>
<tr><td>PIPE_READMODE_MESSAGE</td><td>0x00000002</td><td>数据作为消息流从管道中读取。 仅当还指定 了PIPE_TYPE_MESSAGE 时，才能使用此模式。</td></tr>
<tr><th colspan=3>可以指定以下等待模式之一。 同一管道的不同实例可以指定不同的等待模式。</th></tr>
<tr><td>PIPE_WAIT</td><td>0x00000000</td><td>启用阻止模式。 在 ReadFile、 WriteFile 或 ConnectNamedPipe 函数中指定管道句柄时，在有要读取的数据、写入所有数据或连接客户端之前，这些操作不会完成。 在某些情况下，使用此模式意味着无限期等待客户端进程执行操作。</td></tr>
<tr><td>PIPE_NOWAIT</td><td>0x00000001</td><td>启用非阻止模式。 在此模式下， ReadFile、 WriteFile 和 ConnectNamedPipe 始终立即返回。</td></tr>
<tr><th colspan=3>可以指定以下远程客户端模式之一。 同一管道的不同实例可以指定不同的远程客户端模式。</th></tr>
<tr><td>PIPE_ACCEPT_REMOTE_CLIENTS</td><td>0x00000000</td><td>可以接受来自远程客户端的连接，并对照管道的安全描述符进行检查。</td></tr>
<tr><td>PIPE_REJECT_REMOTE_CLIENTS</td><td>0x00000008</td><td>来自远程客户端的连接将自动被拒绝。</td></tr>
</table><a name="作业分类">作业要查询的限制的信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>JobObjectBasicAccountingInformation</td><td>1</td><td>信息 参数是指向JOBOBJECT_BASIC_ACCOUNTING_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectBasicAndIoAccountingInformation</td><td>8</td><td>信息 参数是指向JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectBasicLimitInformation</td><td>2</td><td>信息 参数是指向JOBOBJECT_BASIC_LIMIT_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectBasicProcessIdList</td><td>3</td><td>信息 参数是指向JOBOBJECT_BASIC_PROCESS_ID_LIST结构的指针。</td></tr>
<tr><td>JobObjectBasicUIRestrictions</td><td>4</td><td>信息 参数是指向JOBOBJECT_BASIC_UI_RESTRICTIONS结构的指针。</td></tr>
<tr><td>JobObjectCpuRateControlInformation</td><td>15</td><td>信息 参数是指向JOBOBJECT_CPU_RATE_CONTROL_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectEndOfJobTimeInformation</td><td>6</td><td>信息 参数是指向JOBOBJECT_END_OF_JOB_TIME_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectExtendedLimitInformation</td><td>9</td><td>信息 参数是指向JOBOBJECT_EXTENDED_LIMIT_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectGroupInformation</td><td>11</td><td>信息 参数是指向接收作业当前分配到的处理器组列表的缓冲区的指针。 lpReturnLength 参数指向的变量设置为组数据的大小。 将此值除以 sizeof(USHORT) 可确定组数。</td></tr>
<tr><td>JobObjectGroupInformationEx</td><td>14</td><td>信息 参数是指向缓冲区的指针，该缓冲区接收GROUP_AFFINITY结构数组，这些结构指示作业当前分配到的处理器组中作业的相关性。 lpReturnLength 参数指向的变量设置为组相关性数据的大小。 将此值除以结构长度可确定组数。</td></tr>
<tr><td>JobObjectLimitViolationInformation</td><td>13</td><td>信息 参数是指向JOBOBJECT_LIMIT_VIOLATION_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectLimitViolationInformation2</td><td>34</td><td>信息 参数是指向JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2结构的指针。</td></tr>
<tr><td>JobObjectNetRateControlInformation</td><td>32</td><td>信息 参数是指向JOBOBJECT_NET_RATE_CONTROL_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectNotificationLimitInformation</td><td>12</td><td>信息 参数是指向JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION结构的指针。</td></tr>
<tr><td>JobObjectNotificationLimitInformation2</td><td>33</td><td>信息 参数是指向JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2结构的指针。</td></tr>
<tr><td>JobObjectSecurityLimitInformation</td><td>5</td><td>不支持此标志。 应用程序必须为每个进程单独设置安全限制。 Windows Server 2003 和 Windows XP： 信息 参数是指向JOBOBJECT_SECURITY_LIMIT_INFORMATION结构的指针。</td></tr>
</table><font color="#0000FF"><a name="同步异步">同步异步</a>——使用简介</font><br><pre>
若要同步对资源的访问，请在其中一个等待函数中使用其中一个同步对象。 同步对象的状态为 已发出信号 或 未签名。
等待函数允许线程阻止自身的执行，直到指定的未签名对象设置为信号状态。 有关详细信息，请参阅 进程间同步。
<h2>等待函数</h2>
等待函数允许线程阻止其自己的执行。在满足指定条件之前不会返回。等待函数的类型确定所使用的条件集。调用时会检查是否已满足等待条件。
如果未满足条件，则调用线程将进入等待状态，直到满足等待条件的条件或指定的超时间隔已过。
<b>单对象等待函数</b>
对象等单、等单对象 和 等待对象 函数需要一个同步对象的句柄。 发生以下任一情况时，这些函数将返回：
指定的对象处于已发出信号的状态。
超时间隔已过。 超时间隔可以设置为0xFFFFFFFF，以指定等待不会超时。

对象等单 函数使调用线程能够以原子方式将对象的状态设置为信号，并等待另一个对象的状态设置为信号。
<b>多对象等待函数</b>
等多对象、等列对象、等多消息 和 等列消息 函数使调用线程能够指定包含一个或多个同步对象句柄的数组。 发生以下任一情况时，这些函数将返回：

任何一个指定对象的状态都设置为“已发出信号”，或者所有对象的状态都已设置为“已发出信号”。 你可以控制在函数调用中使用一种还是所有状态。
超时间隔已过。 超时间隔可以设置为 0xFFFFFFFF ，以指定等待不会超时。
使用 等多消息 和 等列消息 函数，可以在对象句柄数组中指定输入事件对象。 这是在线程的输入队列中指定要等待的输入类型时完成的。例如，线程可以使用
 等多消息 阻止其执行，直到指定对象的状态设置为已发出信号，并且线程的输入队列中有可用的鼠标输入。可以使用 获取消息 或 查探消息 函数来检索输入。

当等待所有对象的状态设置为信号时，这些多对象函数不会修改指定对象的状态，直到所有对象的状态都已设置信号。 例如，可以向互斥对象的状态发出信号，
但在数组中指定的其他对象的状态也设置为信号之前，调用线程不会获得所有权。 同时，其他一些线程可能会获得互斥对象的所有权，从而将其状态设置为非签名。

在等待单个对象的状态设置为信号时，这些多对象函数检查数组中的句柄，从索引 0 开始，直到向其中一个对象发出信号。
如果多个对象被发出信号，函数将返回数组中第一个句柄的索引，该句柄已发出对象信号。

<b>可警报等待函数</b>
等列消息、对象等单、等列对象 和 等待对象 函数与其他等待函数不同，因为它们可以选择执行可警报的等待操作。 在可发出警报的等待操作中，
函数可以在满足指定条件时返回，但如果系统将 I/O 完成例程或 APC 排队等待线程执行，函数也可以返回。 

<b>已注册的等待函数</b>
列线程池 函数与其他等待函数的不同之处在于，等待操作由线程池中的线程执行。 满足指定条件时，回调函数由线程池中的工作线程执行。
默认情况下，已注册的等待操作是多等待操作。 每次向事件发出信号时，系统都会重置计时器 (或超时间隔) ，直到调用 注销等待 函数来取消操作。
若要指定等待操作应只执行一次，请将 列线程池 的 标志 参数设置为 8。如果线程调用使用 APC 的函数，请将 列线程池 的 标志 参数设置为 0x80。

<b>正在等待地址</b>
线程可以使用 WaitOnAddress 函数来等待目标地址的值从某些不需要的值更改为任何其他值。 这使线程能够等待值更改，
而无需旋转或处理线程捕获不需要的值但值更改后线程可以等待时可能出现的同步问题。

当修改目标值的代码通过调用 WakeByAddressSingle 来唤醒单个等待线程或调用 WakeByAddressAll 来唤醒所有等待线程来发出更改信号时，WaitOnAddress 将返回。
如果使用 WaitOnAddress 指定了超时间隔，并且没有线程调用唤醒函数，则当超时间隔过后，该函数将返回。 如果未指定超时间隔，则线程将无限期等待。

<b>等待函数和超时间隔</b>
指定超时间隔的准确性取决于系统时钟的分辨率。系统时钟以恒定速率“滴答”。如果超时间隔小于系统时钟的分辨率，则等待可能会少于指定的时间长度。
如果超时间隔大于一个刻度，但小于两个刻度周期，则等待时间可以是介于 1 和 2 个刻度之间的任意位置，依此类比。

若要提高等待函数超时间隔的准确性，请调用 timeGetDevCaps 函数来确定支持的最小计时器分辨率，并调用 timeBeginPeriod 函数将计时器分辨率设置为其最小值。
调用 timeBeginPeriod 时请谨慎，因为频繁调用可能会显著影响系统时钟、系统电源使用情况和计划程序。
如果调用 timeBeginPeriod，请在应用程序早期调用一次，并确保在应用程序最末尾调用 timeEndPeriod 函数。

<b>等待函数和同步对象</b>
等待函数可以修改某些类型的 同步对象的状态。 仅针对其信号状态导致函数返回的对象或对象进行修改。等待函数可以修改同步对象的状态，如下所示：

信号灯对象的计数将减少一个，如果信号量计数为零，则信号灯的状态将设置为无信号。
互斥、自动重置事件和更改通知对象的状态设置为不对齐。
同步计时器的状态设置为“未签名”。
手动重置事件、手动重置计时器、进程、线程和控制台输入对象的状态不受等待函数的影响。
<b>等待函数和创建窗口</b>
使用直接或间接创建窗口的等待函数和代码时必须小心。 如果线程创建任何窗口，它必须处理消息。 消息广播将发送到系统中的所有窗口。
如果有一个线程使用没有超时间隔的等待函数，系统会死锁。 间接创建窗口的两个代码示例是 DDE 和 初始化库 函数。
因此，如果你有创建窗口的线程，请使用 等多消息 和 等列消息，而不是其他等待函数。</pre>
<h2>同步对象</h2>
同步对象是一个对象，可以在其中一个等待函数中指定其句柄，以协调多个线程的执行。多个进程可以具有同一同步对象的句柄，使进程间同步成为可能。<br>
以下对象类型专用于同步。<br>
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>类型</th><th>说明</th></tr></thead>
<tbody>
<tr>
<td>事件</td>
<td>通知一个或多个正在等待的线程已发生事件。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/sync/event-objects" target="_blank">事件对象</a>。</td>
</tr>
<tr>
<td>Mutex</td>
<td>一次只能由一个线程拥有，使线程能够协调对共享资源的互斥访问。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/sync/mutex-objects" target="_blank">互斥对象</a>。</td>
</tr>
<tr>
<td>Semaphore</td>
<td>维护零和某个最大值之间的计数，从而限制同时访问共享资源的线程数。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/sync/semaphore-objects" target="_blank">Semaphore 对象</a>。</td>
</tr>
<tr>
<td>可等待计时器</td>
<td>通知一个或多个等待线程已到达指定时间。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/sync/waitable-timer-objects" target="_blank">可等待计时器对象</a>。</td>
</tr>
</tbody>
</table>
<p>以下对象虽然可用于其他用途，但也可用于同步。</p>
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>对象</th><th>说明</th></tr></thead>
<tbody>
<tr>
<td>更改通知</td>
<td>由 初改通知 函数创建，其状态设置为在指定目录或目录树中发生指定类型的更改时发出信号。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/obtaining-directory-change-notifications" target="_blank">获取目录更改通知</a>。</td>
</tr>
<tr>
<td>控制台输入</td>
<td>在创建控制台时创建。 指定 CONIN$ 时，创建文件 函数或 取控制台 函数返回控制台输入的句柄。 当主机的输入缓冲区中存在未读输入时，<br>
其状态设置为信号;当输入缓冲区为空时，其状态设置为“未对齐”。 有关控制台的详细信息，请参阅 <a href="/zh-cn/windows/console/character-mode-applications" data-linktype="absolute-path">字符模式应用程序</a></td>
</tr>
<tr>
<td>作业</td>
<td>通过调用 创建作业 函数创建。 作业对象的状态设置为在终止其所有进程时发出信号，因为已超出指定的作业结束时间限制。 有关作业对象的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/job-objects" target="_blank">作业对象</a>。</td>
</tr>
<tr>
<td>内存资源通知</td>
<td>由 内存通知 函数创建。 其状态设置为在物理内存中发生指定类型的更改时发出信号。 有关内存的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/memory/memory-management" target="_blank">内存管理</a>。</td>
</tr>
<tr>
<td>进程</td>
<td>通过调用 创建进程 函数创建。 进程运行时，其状态设置为“未对齐”，并在进程终止时设置为“已发出信号”。 有关进程的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/processes-and-threads" target="_blank">进程和线程</a>。</td>
</tr>
<tr>
<td>线程</td>
<td>通过调用 创建进程、 创建线程 或 远程线程 函数创建新线程时创建。 当线程运行时，其状态设置为“非对齐”，并在线程终止时设置为“已发出信号”。 有关线程的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/processes-and-threads" target="_blank">进程和线程</a>。</td>
</tr>
</tbody>
</table>
在某些情况下，还可以使用文件、命名管道或通信设备作为同步对象;但是，不建议将其用于此目的。 请改用异步 I/O 并等待 在 OVERLAPPED 结构中设置的事件对象。<br>
使用事件对象更安全，因为在同一文件、命名管道或通信设备上执行多个同时重叠操作时，可能会出现混淆。 在这种情况下，无法知道哪个操作导致对象状态被发出信号。<br>
<h2>事件对象</h2><pre>
事件对象是一个同步对象，其状态可以通过使用 修改事件 函数显式设置为发出信号。 下面是两种类型的事件对象。
手动重置事件对象，其状态在 重置事件 函数显式重置为非信号之前保持信号。 发出信号时，可以释放任意数量的等待线程或随后在其中一个 等待函数中指定相同事件对象的线程。
自动重置事件对象，其状态一直保持信号，直到释放单个等待线程，此时系统会自动将状态设置为未签名。 如果没有线程在等待，则事件对象的状态将保持已发信号状态。
如果有多个线程正在等待，则选择一个等待线程。 不要假设先入先出 (FIFO) 顺序。 外部事件（如内核模式 APC）可以更改等待顺序。
事件对象在向线程发送指示已发生特定事件的信号时很有用。 例如，在重叠的输入和输出中，当重叠操作完成时，系统会将指定的事件对象设置为信号状态。
单个线程可以在多个同时重叠的操作中指定不同的事件对象，然后使用其中一个多对象 等待函数 来等待任何一个事件对象的状态被发出信号。

线程使用 创建事件 或 新建事件 函数创建事件对象。 创建线程指定对象的初始状态，以及它是手动重置事件对象还是自动重置事件对象。创建线程还可以指定事件对象的名称。
 其他进程中的线程可以通过在对 打开事件 函数的调用中指定其名称来打开现有事件对象的句柄。 有关互斥体、事件、信号灯和计时器对象的名称的其他信息，请参阅 进程间同步。
 </pre>
<h2>互斥对象</h2><pre>
互斥对象是一个同步对象，当它不受任何线程拥有时，其状态设置为信号;当它拥有时，状态设置为信号。 一次只有一个线程可以拥有互斥对象，
该对象的名称来自这样一个事实，即它有助于协调对共享资源的互斥访问。 例如，为了防止两个线程同时写入共享内存，
每个线程先等待互斥对象的所有权，然后再执行访问内存的代码。 写入共享内存后，线程释放互斥对象。

线程使用 创建互斥 或 新建互斥 函数创建互斥对象。 创建线程可以请求互斥对象的即时所有权，还可以指定互斥对象的名称。
它还可以创建未命名的互斥体。 有关互斥体、事件、信号量和计时器对象的名称的其他信息，请参阅 进程间同步。

其他进程中的线程可以通过在调用 打开互斥 函数时指定其名称来打开现有命名互斥对象句柄。
若要将句柄传递给未命名的互斥体到另一个进程，请使用 复制对象 函数或父子句柄继承。

具有互斥对象句柄的任何线程都可以使用 等待函数 之一来请求互斥对象的所有权。 如果互斥对象由另一个线程拥有，则等待函数会阻止请求线程，
直到拥有的线程使用 释放互斥 函数释放互斥对象。等待函数的返回值指示函数是否返回的原因，而不是设置为信号的互斥状态。

如果多个线程正在等待互斥体，则会选择一个正在等待的线程。 不要假定先入先出 (FIFO) 顺序。 外部事件（如内核模式 APC）可以更改等待顺序。

线程获得互斥体的所有权后，它可以在对等待函数的重复调用中指定相同的互斥，而不会阻止其执行。 这可以防止线程在等待它已拥有的互斥体时自行死锁。
若要在此类情况下释放其所有权，每次互斥体满足等待函数的条件时，线程都必须调用 释放互斥 一次。

如果线程终止而不释放其互斥对象的所有权，则互斥对象被视为已放弃。 等待线程可以获取已放弃互斥对象的所有权，但等待函数将返回 0x80 指示互斥对象已放弃。
放弃的互斥对象表示发生了错误，并且受互斥对象保护的任何共享资源都处于未定义状态。如果线程未放弃互斥对象，在线程释放其所有权后，不再将其视为已放弃。
如果随后在等待函数中指定互斥对象的句柄将还原正常行为。请注意关键节对象 提供的同步类似于互斥对象提供的同步，只是关键节对象只能由单个进程的线程使用。
</pre>
<h2>信号灯对象</h2><pre></pre>
信号灯对象是保持零和指定最大值之间的计数的同步对象。 每次线程完成等待信号灯对象时，计数都会递减，每次线程释放信号灯时计数都会递增。当计数达到零时，
没有更多的线程可以成功等待信号灯对象状态变为信号。当计数大于零时，会将信号量的状态设置为已发出信号；当计数为零时，会将信号量的状态设置为未发出信号。

信号灯对象可用于控制可支持有限数量的用户的共享资源。 它充当一个入口，将共享资源的线程数限制为指定的最大数目。 例如，应用程序可能会限制其创建的窗口数。
它使用最大计数等于窗口限制的信号灯，每次创建窗口时递减计数，并在窗口关闭时递增。 应用程序在创建每个窗口之前，在调用其中一个等待函数 时指定信号灯对象。
当计数为零（指示已达到窗口限制）时，等待函数将阻止执行窗口创建代码。

线程使用 创建信号 或 新建信号 函数创建信号灯对象。 创建线程指定对象的初始计数和最大值。 初始计数不能小于零，也不能大于最大值。
创建线程还可以指定信号灯对象的名称。 其他进程中的线程可以通过在调用 打开信号 函数时指定其名称来打开现有信号灯对象的句柄。 

如果多个线程正在一个信号灯上等待，则会选择一个等待的线程。 不要假设先入先出 (FIFO) 顺序。 外部事件（如内核模式 APC）可以更改等待顺序。

每当一个 等待函数 返回时，由于信号灯的状态设置为信号，信号灯的计数将减少 1。 信号增量 函数将信号灯的计数增加指定的量。 计数不能小于零或大于最大值。

信号灯的初始计数通常设置为最大值。随着受保护资源的消耗，计数将从该级别递减。可以创建初始计数为零的信号灯，以在初始化应用程序时阻止对受保护资源的访问。
初始化后，可以使用 信号增量 将计数递增到最大值。

拥有互斥对象的线程可以重复等待同一互斥对象成为信号，而不会阻止其执行。 但是，如果线程重复等待同一信号灯对象，则每次完成等待操作时都会递减信号灯的计数;
当计数为零时，线程被阻止。 同样，只有拥有互斥体的线程才能成功调用 释放互斥 函数，但任何线程都可以使用 信号增量 来增加信号灯对象的计数。

线程可以在调用任何 等待函数时重复指定同一信号灯对象，从而多次递减信号灯的计数。但使用包含同一信号灯的多个句柄的数组调用其中一个多对象等待函数不会导致多次递减。

使用完信号灯对象后，调用 关闭对象 函数以关闭句柄。 信号灯对象在其最后一个句柄已关闭时被销毁。 关闭句柄不会影响信号灯计数;
因此，请确保在关闭句柄之前或进程终止之前调用 信号增量 。 否则，挂起的等待操作将超时或无限期地继续，具体取决于是否已指定超时值。
</pre>
<h2>可等待计时器对象</h2><pre>
可等待计时器对象是同步对象，其状态设置为在指定的到期时间到达时发出信号。 可以创建两种类型的可等待计时器：手动重置和同步。计时器也可以是定期计时器。
手动重置计时器，其状态在调用 设置延时 以建立新的到期时间之前保持信号。
同步计时器	在线程完成对计时器对象的等待操作之前，其状态保持信号的计时器。
定期计时器，该计时器在每次指定的时间段过期时重新激活，直到计时器重置或取消。是定期手动重置计时器或定期同步计时器。
<b>备注</b>
当计时器发出信号时，处理器必须运行 来处理关联的指令。 高频率定期计时器使处理器持续繁忙，从而防止系统在任何有意义的时间内保持低功耗 状态 。
这可能对便携式计算机的电池使用时间和依赖于有效电源管理的方案（如大型数据中心）产生负面影响。为了提高能效，请考虑在应用程序中使用基于事件的通知，
而不是基于时间的通知。如果需要计时器，请使用发出一次信号的计时器而不是定期计时器，或将间隔设置为大于 1 秒的值。

线程使用 创建延时 或 新建延时 函数创建计时器对象。 创建线程指定计时器是手动重置计时器还是同步计时器。 创建线程可以指定计时器对象的名称。
其他进程中的线程可以通过在对打开延时函数的调用中指定其名称来打开现有计时器的句柄。具有计时器对象句柄的任何线程都可以使用等待计时器状态设置为信号。

线程调用 设置延时 函数来激活计时器。 请注意， 设置延时 使用以下参数：
使用 时间 参数指定计时器设置为信号状态的时间。 当手动重置计时器设置为信号状态时，它将保持此状态，直到 设置延时 建立新的到期时间。
当同步计时器设置为信号状态时，它将保持此状态，直到线程完成对计时器对象的等待操作。
使用 设置延时 函数的 周期 参数指定计时器周期。如果句点不为零，则计时器为定期计时器;每次期限到期时，都会重新激活该计时器，直到计时器重置或取消。
如果周期为零，则计时器不是定期计时器;它发出一次信号，然后停用。线程可以使用 取消延时 函数将计时器设置为非活动状态。
 若要重置计时器，请调用 设置延时。 完成计时器对象后，调用 关闭对象 以关闭计时器对象的句柄。

可等待计时器的行为可以汇总如下：

设置计时器时，如果计时器已处于活动状态，计时器状态为未签名，并且计时器放置在内核计时器队列中，则会取消该计时器。
当计时器过期时，计时器将设置为信号状态。如果计时器具有完成例程，则会将其排队到设置计时器的线程。完成例程保留在线程的异步过程调用 (APC) 队列中，
直到线程进入可发出警报的等待状态。 此时，将调度 APC 并调用完成例程。 如果计时器是定期的，则将其放回内核计时器队列中。
取消计时器后，如果某个计时器处于挂起状态，则会将其从内核计时器队列中删除。如果计时器已过期，
并且仍有 APC 排队到设置计时器的线程，则 APC 将从该线程的 APC 队列中删除。 计时器的信号状态不受影响。
</pre>
<h2>同步对象安全性和访问权限</h2><pre>
使用 Windows 安全模型可以控制对事件、互斥体、信号灯和可等待计时器对象的访问。 计时器队列、互锁变量和关键节对象是不安全的。
调用 创建事件、创建互斥、创建信号 或 创建延时 函数时，可以为进程间同步对象指定安全描述符。 如果指定0，则对象将获取默认的安全描述符。
同步对象的默认安全描述符中 ) 访问控制列表 (ACL 来自创建者的主令牌或模拟令牌。

若要获取或设置事件、互斥体、信号灯或可等待计时器对象的安全描述符，请调用 取名安全、改名安全、取安全符 或 改安全符 函数。
创建事件、创建互斥、创建信号 或 创建延时 返回的句柄对新对象具有完全访问权限。 调用 打开事件、打开互斥、打开信号 或 打开延时 函数时，
系统会根据对象的安全描述符检查请求的访问权限。进程间同步对象的有效访问权限包括 标准访问权限 和某些特定于对象的访问权限。
下表列出了所有对象使用的标准访问权限。</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>DELETE</td><td>0x00010000</td><td>删除对象所必需的。</td></tr>
<tr><td>READ_CONTROL</td><td>0x00020000</td><td>需要读取对象的安全描述符中的信息，不包括 SACL 中的信息。 若要读取或写入 SACL，必须请求 0x01000000 访问权限。</td></tr>
<tr><td>WRITE_DAC</td><td>0x00040000</td><td>需要修改对象的安全描述符中的 DACL。</td></tr>
<tr><td>WRITE_OWNER</td><td>0x00080000</td><td>需要更改对象的安全描述符中的所有者。</td></tr>
<tr><td>SYNCHRONIZE</td><td>0x00100000</td><td>将对象用于同步的权限。 这使线程能够等待对象处于信号状态。</td></tr>
</table>下表列出了事件对象的特定对象访问权限。 除了标准访问权限外，还支持这些权限。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>EVENT_ALL_ACCESS</td><td>0x1F0003</td><td>事件对象的所有可能访问权限。 仅当应用程序需要超出标准访问权限和2 EVENT_MODIFY_STATE授予的访问权限时，才使用此权限。 使用此访问权限会增加必须由管理员运行应用程序的可能性。</td></tr>
<tr><td>EVENT_MODIFY_STATE</td><td>0x0002</td><td>修改 SetEvent、ResetEvent 和 PulseEvent 函数所需的状态访问。</td></tr>
</table>下表列出了互斥对象的特定对象访问权限。 除了标准访问权限外，还支持这些权限。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>MUTEX_ALL_ACCESS</td><td>0x1F0001</td><td>互斥对象的所有可能访问权限。 仅当应用程序需要超出标准访问权限授予的访问权限时，才使用此权限。 使用此访问权限会增加必须由管理员运行应用程序的可能性。</td></tr>
<tr><td>MUTEX_MODIFY_STATE</td><td>0x0001</td><td>保留供将来使用。</td></tr>
</table>下表列出了信号灯对象的特定于对象的访问权限。 除了标准访问权限外，还支持这些权限。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>SEMAPHORE_ALL_ACCESS</td><td>0x1F0003</td><td>信号灯对象的所有可能访问权限。 仅当应用程序需要超出标准访问权限和 SEMAPHORE_MODIFY_STATE授予的访问权限时，才使用此权限。 使用此访问权限会增加必须由管理员运行应用程序的可能性。</td></tr>
<tr><td>SEMAPHORE_MODIFY_STATE</td><td>0x0002</td><td>修改 信号增量 函数所需的状态访问。</td></tr>
</table>下表列出了可等待计时器对象的特定于对象的访问权限。 除了标准访问权限外，还支持这些权限。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>TIMER_ALL_ACCESS</td><td>0x1F0003</td><td>可等待计时器对象的所有可能访问权限。 仅当应用程序需要超出标准访问权限和 TIMER_MODIFY_STATE授予的访问权限时，才使用此权限。 使用此访问权限会增加必须由管理员运行应用程序的可能性。</td></tr>
<tr><td>TIMER_MODIFY_STATE</td><td>0x0002</td><td>修改 设置延时 和 取消延时 函数所需的状态访问。</td></tr>
<tr><td>TIMER_QUERY_STATE</td><td>0x0001</td><td>保留供将来使用。</td></tr>
</table>
<h2>进程间同步</h2><pre>
多个进程可以具有同一事件、互斥体、信号量或计时器对象的句柄，因此这些对象可用于完成进程间同步。 创建对象的过程可以使用 
创建事件、创建互斥、创建信号 或 创建延时 函数返回的句柄。 其他进程可以使用对象名称或通过继承或复制来打开对象的句柄。
<b>对象名称</b>
命名对象为进程提供了一种简单的方法来共享对象句柄。 进程创建命名事件、互斥体、信号灯或计时器对象后，其他进程可以使用名称调用相应的函数，
(打开事件、打开互斥、打开信号 或 打开延时) 打开对象的句柄。 名称比较区分大小写。

事件、信号灯、互斥体、可等待计时器、文件映射和作业对象的名称共享相同的命名空间。 如果尝试使用由另一种类型的对象使用的名称创建对象，该函数将失败，
并且 最后错误 将返回 6。 因此，创建命名对象时，请使用唯一名称，并确保检查重复名称错误的函数返回值。

如果尝试使用同类型对象正在使用的名称创建对象，则函数会成功，返回现有对象的句柄， 最后错误 将返回 183。 例如，如果在对 创建互斥 函数的调用中指定的名称
与现有互斥对象的名称匹配，则函数将返回现有对象的句柄。 在这种情况下，对 创建互斥 的调用等效于对 打开互斥 函数的调用。 因此，让多个进程对同一互斥使用 
创建互斥 等效于让一个进程调用 创建互斥 ，而另一个进程调用 打开互斥，只不过它不需要确保先启动创建过程。 但是，当将此技术用于互斥对象时，
任何调用进程都不应立即请求互斥体的所有权。 如果多个进程确实请求即时所有权，则很难预测哪个进程实际获得初始所有权。

终端服务环境具有事件、信号灯、互斥体、可等待计时器、文件映射对象和作业对象的全局命名空间。对于这些对象，每个终端服务客户端会话都有其自己的单独命名空间。
终端服务客户端进程可以使用带有“Global\”或“Local\”前缀的对象名称在全局命名空间或会话命名空间中显式创建对象。 有关详细信息，请参阅 内核对象命名空间。
使用终端服务会话实现快速用户切换， (每个用户登录到不同的会话) 。 内核对象名称必须遵循终端服务概述的准则，以便应用程序可以支持多个用户。
可以在专用命名空间中创建同步对象。 有关详细信息，请参阅 对象命名空间。
<b>对象命名空间</b>
对象命名空间保护命名对象免受未经授权的访问。 创建专用命名空间使应用程序和服务能够构建更安全的环境。
进程可以使用 创建私名 函数创建专用命名空间。 此函数要求指定一个边界，该 边界 定义如何隔离命名空间中的对象。
调用方必须在指定的边界内才能成功执行创建操作。 若要指定边界，请使用 创建边字 和 安号边字 函数。
创建私名 的 前缀 参数用作命名空间的名称。 每个命名空间都由其名称和边界唯一标识。 只要指定不同的边界，系统就支持多个同名的专用命名空间。

假设某个进程请求创建命名空间 NS1，该命名空间定义包含两个元素的边界：管理员 SID 和当前会话编号。 如果进程在指定会话中的管理员帐户下运行，
则会创建命名空间。另一个进程可以使用 打开私名 函数访问此命名空间。 如果此进程要打开由第一个进程创建的命名空间，则指定的名称和边界必须匹配。
请注意，进程可以打开现有命名空间，即使它不在边界内，除非创建者使用 安属 参数限制对命名空间的访问。

在此命名空间中创建的对象的名称采用 前缀\对象名 的形式。 前缀是由 创建私名 的 前缀 参数指定的命名空间名称。
例如，若要在 NS1 命名空间中创建名为 MyEvent 的事件对象，请调用 创建事件 函数，并将 名称 参数设置为 NS1\MyEvent。

创建命名空间的进程可以使用 关闭私名 函数关闭命名空间的句柄。 创建命名空间的进程终止时，句柄也会关闭。
关闭命名空间句柄后，对 打开私名 的后续调用将失败，但对命名空间中的对象执行的所有操作都会成功。
<b>对象继承</b>
使用 创建进程 函数创建进程时，可以使用 <a href="#安全属性类">安全属性类</a> 结构指定进程继承互斥、事件、信号灯或计时器对象的句柄。
进程继承的句柄对 对象具有与原始句柄相同的访问权限。 继承的句柄显示在已创建进程的句柄表中，但您必须将句柄值传达给创建的进程。
可以通过在调用 创建进程 时将值指定为命令行参数来执行此操作。 然后，创建的进程使用 启动参数 函数检索命令行字符串，
并将 句柄 参数转换为可用句柄。 有关详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/inheritance">继承</a>。
<b>对象重复</b>
复制对象 函数创建可由另一个指定进程使用的重复句柄。这种共享对象句柄的方法比使用命名对象或继承更为复杂。它需要创建过程和在其中复制句柄的进程之间的通信。 
(句柄值和进程标识符) 的必要信息可以通过任何进程间通信方法（如命名管道或命名共享内存）进行通信。</pre>
<h2>同步和多处理器问题</h2><pre>
应用程序在多处理器系统上运行时可能会遇到问题，因为他们所做的假设仅在单处理器系统上有效。

<b>线程优先级</b>
想象一下具有两个线程的程序，一个线程优先级高于另一个线程。 在单处理器系统上，高优先级线程不会将控制权让与低优先级线程，
因为计划程序会将优先权赋予优先级较高的线程。 在多处理器系统上，两个线程都可以同时运行，每个线程在其自己的处理器上运行。
应用程序应同步对数据结构的访问，以避免争用情况。 假定高优先级线程不受较优先级线程干扰的代码将在多处理器系统上失败。

<b>内存排序</b>
当处理器写入内存位置时，将缓存该值以提高性能。 同样，处理器会尝试满足缓存中的读取请求以提高性能。 
此外，处理器开始从内存中提取值，然后再由应用程序请求这些值。 这可能在推理执行过程中发生，也可能是由于缓存行问题造成的。

CPU 缓存可以进行分区以分为多个可以并行访问的库。 这意味着内存操作可能会无序完成。 为了确保内存操作有序完成，大多数处理器都提供内存屏障指令。
完整内存屏障可确保内存屏障指令之前出现的内存读取和写入操作在内存屏障指令之后出现的任何内存读取和写入操作之前提交到内存。读取内存屏障只对内存
读取操作进行排序，而写入内存屏障只对内存写入操作进行排序。 这些指令还可确保编译器禁用可能会跨屏障进行内存操作重新排序的任何优化。

处理器可以支持具有获取、释放和围栏语义的内存屏障指令。 这些语义描述了操作结果变得可用的顺序。使用获取语义，该操作的结果会在代码中后出现的
任何操作的结果之前可用。使用释放语义，该操作的结果会在代码中先出现的任何操作的结果之后可用。 围栏语义结合了获取和释放语义。
具有围栏语义的操作的结果在代码中后出现的任何操作的结果之前以及先出现的任何操作的结果之后可用。

在支持 SSE2 的 x86 和 x64 处理器上，指令是 mfence（内存围栏）、lfence（负载围栏）和 sfence（存储围栏）。 在 ARM 处理器上，指令是 dmb 和 dsb。 
以下同步函数使用适当的屏障来确保内存排序：
进入或离开关键部分的函数
获取或释放 SRW 锁的函数
一次性初始化开始和完成
等待屏障 函数
向同步对象发出信号的函数
等待函数
互锁函数（具有 NoFence 后缀的函数或具有 _nf 后缀的内部函数除外）

<b>修复争用条件</b>
以下代码在多处理器系统上存在争用条件，因为首次执行 缓存计算值 的处理器可能会在将 值 写入主内存之前将 已计算值 写入主内存。
因此，同时执行 获取计算值 的第二个处理器会将 已计算值 读取为 真，但 值 的新值仍位于第一个处理器的缓存中，并且尚未写入内存。
<font color="#0000FF">
整数 值,已计算值,算值;

程序段 缓存计算值
  如果(已计算值=0) 
  {
    值 = 算值
    计算 = 真
  }
结束
 
程序段 获取计算值(反馈)
  如果(已计算值) 
  {
    反馈& = 值
    返回(真)
  } 
  否则 返回(假)
结束</font>
可以使用 原子更改 函数修复上述争用条件，以确保所有处理器在 计算 的值设置为 真 之前已更新 值 的值。
<font color="#0000FF">
整数 值,已计算值,算值;

程序段 缓存计算值
  如果(原子比较(@已计算值,假,假)=0) 
  {
    原子更改(@值,算值)
    原子更改(@已计算值,真)
  }
结束
 
程序段 获取计算值(反馈)
  如果(原子比较(@计算,真,真)) 
  {
    原子更改(反馈&,值)
    返回(真)
  } 
  否则 返回(假)
结束</font></pre>
<h2>同步和重叠输入和输出</h2><pre>
可以在文件、命名管道和串行通信设备上执行同步或异步 (也称为重叠) I/O 操作。 写出文件、读取文件、硬件控制、串口等待、连接管道
和 名管读写 函数可以同步或异步执行。 读入文件 和 写入文件 函数只能异步执行。

当函数同步执行时，该函数在操作完成之前不会返回。 这意味着，在等待耗时的操作完成时，调用线程的执行可能会无限期地被阻止。
为重叠操作调用的函数可以立即返回，即使操作尚未完成。 这样，当调用线程可以自由执行其他任务时，就可以在后台执行耗时的 I/O 操作。
例如，单个线程可以在不同的句柄上同时执行 I/O 操作，甚至可以在同一句柄上同时执行读取和写入操作。若要将其执行与重叠操作的完成同步，
调用线程使用 操作结果 函数、 重叠结果 函数或 等待函数 之一来确定重叠操作何时完成。 还可以使用 重叠类.状态!=0x103 轮询完成。

若要取消所有挂起的异步 I/O 操作，请使用 取消传输 函数并提供用于指定要取消的请求的 <a href="#重叠类">重叠类</a> 结构。
使用 取消操作 函数可取消由指定文件句柄的调用线程发出的挂起异步 I/O 操作。

重叠操作需要使用 0x40000000 标志创建的文件、命名管道或通信设备。 当线程调用函数 (（如 读取文件 函数) ）来执行重叠操作时，
调用线程必须指定指向 <a href="#重叠类">重叠类</a> 结构的指针。 (如果此指针为 NULL，则函数返回值可能会错误地指示操作已完成。) 
除非使用事件来指示 I/O 操作完成，否则 必须将 <a href="#重叠类">重叠类</a> 结构的所有成员初始化为零。 如果使用事件，则 <a href="#重叠类">重叠类</a>
 结构的 事件 成员将指定已分配事件对象的句柄。 当对 I/O 函数的调用在操作完成之前返回时，系统会将事件对象的状态设置为非签名。
 系统将事件对象的状态设置为在操作完成时发出信号。 仅当同时有多个未完成的 I/O 操作时，才需要事件。
 如果未使用事件，则每个已完成的 I/O 操作都将向文件、命名管道或通信设备发出信号。

调用函数以执行重叠操作时，该操作可能在函数返回之前完成。 发生这种情况时，将像同步执行操作一样处理结果。
但是，如果操作未完成，则函数的返回值为 0， 最后错误 函数返回 997。线程可以通过以下两种方法之一管理重叠操作：

1.使用 操作结果 或 重叠结果 函数等待重叠操作完成。 如果使用 重叠结果 ，则调用线程可以为重叠操作指定超时，或执行可发出警报的等待。
2.在其中一个等待函数中指定 <a href="#重叠类">重叠类</a> 结构的手动重置事件对象的句柄，然后在等待函数返回后调用 操作结果 或 重叠结果。
函数返回已完成的重叠操作的结果，对于适合此类信息的函数，它将报告已传输的实际字节数。

在单个线程上同时执行多个重叠操作时，调用线程必须为每个操作指定 <a href="#重叠类">重叠类</a> 结构。 每个 <a href="#重叠类">重叠类</a> 结构必须指定
不同手动重置事件对象的句柄。为了等待任何一个重叠的操作完成，线程会将所有手动重置事件句柄指定为其中一个多对象 等待函数中的等待条件。
多对象等待函数的返回值指示向哪个手动重置事件对象发出信号，以便线程可以确定哪个重叠操作导致等待操作完成。

对每个重叠操作使用单独的事件对象更安全，而不是不指定任何事件对象或将同一事件对象用于多个操作。 如果未在 <a href="#重叠类">重叠类</a> 结构中
指定任何事件对象，则当重叠操作完成时，系统会向文件、命名管道或通信设备的状态发出信号。 因此，可以在等待函数中将这些句柄指定为同步对象，
尽管它们用于此目的可能难以管理，因为在同一文件、命名管道或通信设备上同时执行重叠操作时，无法知道哪个操作导致对象状态被发出信号。

线程不应重复使用某个事件，前提是该事件仅由该线程的重叠操作发出信号。 事件在与正在完成的重叠操作相同的线程上发出信号。
在多个线程上使用相同的事件可能会导致争用条件，在该条件下，对于操作首先完成的线程，对于使用该事件的其他线程，该事件会正确发出事件信号。
然后，在下一个重叠操作完成时，将针对使用该事件的所有线程再次向事件发出信号，依此进行，直到所有重叠操作完成。

有关说明如何使用重叠操作、完成例程和 操作结果 函数的示例，请参阅 <a href="#命名管道">命名管道</a>。

Windows Vista、Windows Server 2003 和 Windows XP：
重用 <a href="#重叠类">重叠类</a> 结构时要小心。 如果在多个线程上重复使用 <a href="#重叠类">重叠类</a> 结构，并在 等待 参数设置为 真 的情况下调用 操作结果，
则调用线程必须确保在重用结构之前发出关联的事件信号。 这可以通过在调用 操作结果 后使用 等单对象 函数来强制线程等待操作完成。
请注意，事件对象必须是手动重置事件对象。 如果使用 自动重置事件对象，则调用将 等待 参数设置为 真 的 操作结果 会导致无限期阻止该函数。
对于在应用程序清单中将 Windows 7 指定为支持的操作系统的应用程序，从 Windows 7 和 Windows Server 2008 R2 开始，此行为发生了变化。</pre>
<h2>异步过程调用</h2><pre>
异步 过程调用 (APC) 是在特定线程的上下文中异步执行的函数。 当 APC 排队到线程时，系统会发出软件中断。 下次计划线程时，它将运行 APC 函数。
系统生成的 APC 称为 内核模式 APC。 应用程序生成的 APC 称为 用户模式 APC。 线程必须处于可警报状态才能运行用户模式 APC。

每个线程都有自己的APC队列。应用程序通过调用 用户异步 函数将APC排队到线程。调用线程在对 用户异步 的调用中指定APC函数的地址。APC的队列是线程调用APC函数的请求。

当用户模式 APC 排队时，它排队的线程不会定向到调用 APC 函数，除非它处于可警报状态。 线程在调用 异步延时、对象等单、等列消息、等列对象 或 等待对象 函数时进入可警报状态。
如果在 APC 排队之前满足等待，则线程不再处于可警报等待状态，因此不会执行 APC 函数。 但是，APC 仍处于排队状态，因此当线程调用另一个可警报等待函数时，将执行 APC 函数。

读入文件、设置延时、指定延时 和 写入文件 函数使用 APC 作为完成通知回调机制来实现。

如果使用 线程池，请注意，APC 不与其他信号机制一样工作，因为系统控制线程池线程的生存期，因此线程有可能在传递通知之前终止。
不要使用基于 APC 的信号机制（如 设置延时 或 指定延时 的 回调 参数），而是使用可等待的对象，
例如使用 新建计时 创建的计时器。 对于 I/O，请使用使用 新建进出 创建的 I/O 完成对象或基于事件的 <a href="#重叠类">重叠类</a> 结构，其中事件可以传递给 设置等待 函数。

同步内部
发出 I/O 请求时，将分配一个结构来表示请求。 此结构称为 I/O 请求数据包 (IRP) 。 使用同步 I/O 时，线程生成 IRP，将其发送到设备堆栈，
并在内核中等待 IRP 完成。 使用异步 I/O，线程生成 IRP 并将其发送到设备堆栈。 堆栈可能会立即完成 IRP，也可能返回挂起状态，指示请求正在进行。
发生这种情况时，IRP 仍与线程关联，因此，如果线程终止或调用 取消操作 等函数，IRP 将被取消。 在此期间，线程可以继续执行其他任务，同时设备堆栈继续处理 IRP。

系统可通过多种方式指示 IRP 已完成：
使用操作的结果更新重叠结构，以便线程可以轮询以确定操作是否已完成。
向重叠结构中的事件发出信号，以便线程可以在事件上同步并在操作完成时被唤醒。
将 IRP 排队到线程的挂起的 APC，以便线程在进入可警报等待状态时执行 APC 例程，并从等待操作返回，状态指示它执行了一个或多个 APC 例程。
将 IRP 排队到 I/O 完成端口，在该端口上等待的下一个线程将执行该端口。

在 I/O 完成端口上等待的线程不会处于可警报状态。 因此，如果这些线程向线程发出设置为作为 APC 完成的 IRP，
则这些 IPC 完成不会及时发生;仅当线程从 I/O 完成端口获取请求，然后碰巧进入可警报等待时，才会发生这些请求。</pre>
<font color="#0000FF">同步异步 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>嘀</td><td>Beep</td><td>嘀(声音频率,持续时间)</td><td>在扬声器上产生简单的音调,频率在37到32767之间,时间为毫秒数</td></tr>
<tr><td>重叠结果</td><td>GetOverlappedResultEx</td><td>重叠结果(文件,重叠类,@实传,超时,等待)</td><td>检索指定文件、命名管道或通信设备上的重叠操作的结果。</td></tr>
<tr><td>创建信号</td><td>CreateSemaphoreA</td><td>创建信号(继承,初数,最大数,名称)</td><td>创建或打开命名或未命名的信号灯对象。</td></tr>
<tr><td>创建事件</td><td>CreateEventA</td><td>事件=创建事件(属性,复位,状态,名称)</td><td>创建一个事件,返回事件对象的句柄。</td></tr>
<tr><td>新建事件</td><td>CreateEventExA</td><td>事件=新建事件(<a href="#安全属性类">安属</a>,名称,标志,访问)</td><td>创建一个事件,返回事件对象的句柄。标志：1手动重置，2已发信号</td></tr>
<tr><td>新建互斥</td><td>CreateMutexExA</td><td>新建互斥(<a href="#安全属性类">安属</a>,名称,标志,访问)</td><td>创建或打开一个命名或未命名的互斥体对象。标志:1创建者所有</td></tr>
<tr><td>新建信号</td><td>CreateSemaphoreExA</td><td>新建信号(<a href="#安全属性类">安属</a>,初数,最大,名称,0,访问)</td><td>创建或打开命名或未命名的信号灯对象。</td></tr>
<tr><td>内存通知</td><td>CreateMemoryResourceNotification</td><td>内存通知(条件)</td><td>创建内存资源通知对象。条件:0内存不足,1内存较高</td></tr>
<tr><td>新建延时</td><td>CreateWaitableTimerExA</td><td>新建延时(<a href="#安全属性类">安属</a>,名称,标志,访问)</td><td>创建或打开可等待的计时器对象。标志:1手动重置,2高分辨率</td></tr>
<tr><td>创建互斥</td><td>CreateMutexA</td><td>创建互斥(访问,继承,对象名)</td><td>创建一个互斥体,可判断程序是否重复运行</td></tr>
<tr><td>关闭进出</td><td>CloseThreadpoolIo</td><td>关闭进出(进出)</td><td>释放指定的I/O完成对象。</td></tr>
<tr><td>新建进出</td><td>CreateThreadpoolIo</td><td>新建进出(文件,<a href="#进出回调">回调</a>,附加,回调环境)</td><td>创建新的I/O完成对象。</td></tr>
<tr><td>开始进出</td><td>StartThreadpoolIo</td><td>开始进出(进出)</td><td>通知线程池，I/O 操作可能会针对指定的 I/O 完成对象开始。</td></tr>
<tr><td>关闭等待</td><td>CloseThreadpoolWait</td><td>关闭等待(等待)</td><td>释放指定的等待对象。</td></tr>
<tr><td>新建等待</td><td>CreateThreadpoolWait</td><td>新建等待(<a href="#等待回调">回调</a>,附加,回调环境)</td><td>创建新的等待器对象。</td></tr>
<tr><td>设置等待</td><td>SetThreadpoolWait</td><td>设置等待(等待,对象,超时)</td><td>设置等待对象。<a href="#文件时间类">超时</a>为正值代表UTC绝对时间，负值表示相对时间(单位100 纳秒)</td></tr>
<tr><td>指定等待</td><td>SetThreadpoolWaitEx</td><td>指定等待(等待,对象,超时)</td><td>设置等待对象。<a href="#文件时间类">超时</a>为正值代表UTC绝对时间，负值表示相对时间(单位100 纳秒)</td></tr>
<tr><td>关闭计时</td><td>CloseThreadpoolTimer</td><td>关闭计时(计时器)</td><td>释放指定的计时器对象。</td></tr>
<tr><td>新建计时</td><td>CreateThreadpoolTimer</td><td>新建计时(<a href="#计时回调">回调</a>,附加,回调环境)</td><td>创建新的计时器对象。</td></tr>
<tr><td>是计时器</td><td>IsThreadpoolTimerSet</td><td>是计时器(计时器)</td><td>确定当前是否设置了指定的计时器对象。</td></tr>
<tr><td>设置计时</td><td>SetThreadpoolTimer</td><td>设置计时(计时器,时间,周期,延时)</td><td>设置计时器对象。<a href="#文件时间类">时间</a>为正值代表UTC绝对时间，负值表示相对时间(单位100 纳秒)</td></tr>
<tr><td>指定计时</td><td>SetThreadpoolTimerEx</td><td>指定计时(计时器,时间,周期,延时)</td><td>设置计时器对象。<a href="#文件时间类">时间</a>为正值代表UTC绝对时间，负值表示相对时间(单位100 纳秒)</td></tr>
<tr><td>关闭工作</td><td>CloseThreadpoolWork</td><td>关闭工作(工作)</td><td>释放指定的工作对象。</td></tr>
<tr><td>新建工作</td><td>CreateThreadpoolWork</td><td>新建工作(<a href="#工作回调">回调</a>,附加,回调环境)</td><td>创建新的工作器对象。</td></tr>
<tr><td>发布工作</td><td>SubmitThreadpoolWork</td><td>发布工作(工作)</td><td>将工作对象发布到线程池。 工作线程调用工作对象的回调函数。</td></tr>
<tr><td>安号边符</td><td>AddSIDToBoundaryDescriptor</td><td>安号边符(边符,SID)</td><td>将安全标识符 (SID) 添加到指定的边界描述符。</td></tr>
<tr><td>创建边符</td><td>CreateBoundaryDescriptorA</td><td>创建边符(名称,标志)</td><td>创建边界描述符。标志：1无论生成者或使用者都要创建。</td></tr>
<tr><td>删除边符</td><td>DeleteBoundaryDescriptor</td><td>删除边符(边符)</td><td>删除指定的边界描述符。</td></tr>
<tr><td>创建私名</td><td>CreatePrivateNamespaceA</td><td>创建私名(<a href="#安全属性类">安属</a>,隔离边字,前缀)</td><td>创建专用命名空间。</td></tr>
<tr><td>打开私名</td><td>OpenPrivateNamespaceA</td><td>打开私名(隔离边字,前缀)</td><td>打开专用命名空间。</td></tr>
<tr><td>关闭私名</td><td>ClosePrivateNamespace</td><td>关闭私名(命名空间,标志)</td><td>关闭打开的命名空间句柄。标志：1销毁</td></tr>
<tr><td>取消延时</td><td>CancelWaitableTimer</td><td>取消延时(计时器)</td><td>取消由指定文件的调用线程颁发的所有挂起输入和输出 (I/O) 操作。</td></tr>
<tr><td>创建延时</td><td>CreateWaitableTimerA</td><td>创建延时(计时结构,手动,名称)</td><td>创建或打开可等待的计时器对象。</td></tr>
<tr><td>删除资源</td><td>DeleteCriticalSection</td><td>删除资源(对象)</td><td>删除关键节对象释放由该对象使用的所有系统资源。</td></tr>
<tr><td>等关键节</td><td>EnterCriticalSection</td><td>等关键节(节对象)</td><td>等待指定关键部分对象的所有权。此函数将在授予调用线程所有权时返回。</td></tr>
<tr><td>删除屏障</td><td>DeleteSynchronizationBarrier</td><td>删除屏障(屏障)</td><td>删除同步屏障。</td></tr>
<tr><td>等待屏障</td><td>EnterSynchronizationBarrier</td><td>等待屏障(屏障,<a href="#同步屏障阻塞">标志</a>)</td><td>导致调用线程在同步屏障处等待，直到最大线程数进入该屏障。</td></tr>
<tr><td>初始屏障</td><td>InitializeSynchronizationBarrier</td><td>初始屏障(@屏障,线程数,旋转数)</td><td>初始化新的同步屏障。旋转数为-1，则线程旋转2000次。</td></tr>
<tr><td>初始条件</td><td>InitializeConditionVariable</td><td>初始条件(@条件变量)</td><td>初始化条件变量。</td></tr>
<tr><td>初始化节</td><td>InitializeCriticalSection</td><td>初始化节(@关键节)</td><td>初始化关键节对象。</td></tr>
<tr><td>初始节数</td><td>InitializeCriticalSectionAndSpinCount</td><td>初始节数(@关键节,计数)</td><td>初始化关键节对象并设置关键节的旋转计数。 </td></tr>
<tr><td>释放节权</td><td>LeaveCriticalSection</td><td>释放节权(@关键节)</td><td>释放指定关键节对象的所有权。</td></tr>
<tr><td>进关键节</td><td>TryEnterCriticalSection</td><td>进关键节(关键节)</td><td>尝试进入关键部分而不发生阻塞。如果调用成功，调用线程将获取关键部分的所有权。</td></tr>
<tr><td>原子比较</td><td>InterlockedCompareExchange</td><td>原子比较(@输入,更新,值)</td><td>执行原子操作，将两个输入值进行比较。更新非零输入参数输出结果</td></tr>
<tr><td>原子递减</td><td>InterlockedDecrement</td><td>原子递减(@变量)</td><td>将调用方提供的整数类型变量递减为原子操作。</td></tr>
<tr><td>原子更改</td><td>InterlockedExchange</td><td>原子更改(@变量,数值)</td><td>将整数变量设置为作为原子操作的给定值。</td></tr>
<tr><td>原子添加</td><td>InterlockedExchangeAdd</td><td>原子添加(@变量,数值)</td><td>将值作为原子操作添加到给定整数中，并返回给定整数的原始值。</td></tr>
<tr><td>原子递增</td><td>InterlockedIncrement</td><td>原子递增(@变量)</td><td>递增调用方提供的变量作为原子操作。</td></tr>
<tr><td>内存可用</td><td>IsBadCodePtr</td><td>内存可用(内存)</td><td>确定调用进程是否具有对指定地址的内存的读取访问权限。</td></tr>
<tr><td>内存字串</td><td>IsBadStringPtrA</td><td>内存字串(内存)</td><td>验证调用进程是否对指定的内存范围具有读取访问权限。</td></tr>
<tr><td>一次初始</td><td>InitOnceComplete</td><td>一次初始(@一次)</td><td>初始化一次性初始化结构。</td></tr>
<tr><td>一次开始</td><td>InitOnceBeginInitialize</td><td>一次开始(一次,标志,@状态,@数据)</td><td>开始一次性初始化。标志:0初始化,1只查状态,2允许多次初始化</td></tr>
<tr><td>一次完成</td><td>InitOnceComplete</td><td>一次完成(一次,标志,数据)</td><td>完成一次性初始化。标志:2异步模式,4尝试失败</td></tr>
<tr><td>一次执行</td><td>InitOnceExecuteOnce</td><td>一次执行(一次,回调,附加,@数据)</td><td>当多个线程调用同一个此函数时，只有一个线程将执行<a href="#一次回调"></a>回调函数</a>。其余线程将阻塞，直到回调函数完成。 </td></tr>
<tr><td>打开互斥</td><td>OpenMutexA</td><td>打开互斥(访问,继承,对象名)</td><td>打开一个互斥体,可判断程序是否重复运行</td></tr>
<tr><td>打开信号</td><td>OpenSemaphoreA</td><td>打开信号(访问,继承,信号名)</td><td>打开现有的命名信号灯对象。</td></tr>
<tr><td>精确计数</td><td>QueryPerformanceCounter</td><td>精确计数(文件时间类)</td><td>检索性能计数器的当前值，这是一个高分辨率 (小于1us) 时间戳，可用于时间间隔度量。</td></tr>
<tr><td>计数频率</td><td>QueryPerformanceFrequency</td><td>计数频率(文件时间类)</td><td>检索性能计数器的频率。性能计数器的频率在系统启动时固定，并且在所有处理器中保持一致。 </td></tr>
<tr><td>释放互斥</td><td>ReleaseMutex</td><td>释放互斥(对象)</td><td>释放指定的互斥对象的所有权</td></tr>
<tr><td>信号增量</td><td>ReleaseSemaphore</td><td>信号增量(对象)</td><td>按指定量增加指定的信号灯对象的计数。</td></tr>
<tr><td>打开延时</td><td>OpenWaitableTimerA</td><td>打开延时(访表,继承,名称)</td><td>打开现有的命名可等待计时器对象。</td></tr>
<tr><td>打开事件</td><td>OpenEventA</td><td>打开事件(访问,继承,事件名)</td><td>$1F0003全权访问,2允许修改和重置事件,$100000允许事件同步</td></tr>
<tr><td>脉冲事件</td><td>PulseEvent</td><td>脉冲事件(事件)</td><td>发出脉冲信号释放等待线程,无信号后将其重置</td></tr>
<tr><td>重置事件</td><td>ResetEvent</td><td>重置事件(事件)</td><td>将指定的事件对象设置为非信号状态</td></tr>
<tr><td>修改事件</td><td>SetEvent</td><td>修改事件(事件)</td><td>将指定的事件对象的状态设置为发信号</td></tr>
<tr><td>列线程池</td><td>RegisterWaitForSingleObject</td><td>列线程池(等待,对象,<a href="#超时回调">回调</a>,附加,超时,<a href="#线程池回调">标志</a>)</td><td>指示线程池中的等待线程等待对象。发出信号或超时等待线程会将指定的回调函数排队到线程池</td></tr>
<tr><td>取消等待</td><td>UnregisterWait</td><td>取消等待(等待)</td><td>取消 列线程池 函数发出的已注册等待操作。</td></tr>
<tr><td>注销等待</td><td>UnregisterWaitEx</td><td>注销等待(等待,事件)</td><td>取消 列线程池 函数发出的已注册等待操作。</td></tr>
<tr><td>延时</td><td>Sleep</td><td>延时(毫秒)</td><td>暂停执行当前线程指定的毫秒数</td></tr>
<tr><td>异步延时</td><td>SleepEx</td><td>异步延时(毫秒,异步)</td><td>挂起当前线程，直到满足指定条件。</td></tr>
<tr><td>对象等单</td><td>SignalObjectAndWait</td><td>对象等单(对象,等对象,毫秒,排队)</td><td>向一个对象发出信号，并等待另一个对象作为单个操作。排队为假不返回无回调</td></tr>
<tr><td>等多对象</td><td>WaitForMultipleObjects</td><td>等多对象(对象数,对象组,等所有,超时)</td><td>等待一个或所有指定的对象处于信号状态或超时间隔已过。</td></tr>
<tr><td>等列对象</td><td>WaitForMultipleObjectsEx</td><td>等列对象(对象数,对象组,等所有,超时,排队)</td><td>等待一个或所有指定的对象处于信号状态、I/O 完成例程或异步过程调用 (APC) 排队到线程，或超时间隔已过。</td></tr>
<tr><td>等单对象</td><td>WaitForSingleObject</td><td>等单对象(对象,毫秒)</td><td>等待指定的对象处于信号状态或超时间隔已过。</td></tr>
<tr><td>等待对象</td><td>WaitForSingleObjectEx</td><td>等待对象(对象,毫秒,排队)</td><td>等待指定的对象处于信号状态、I/O 完成例程或异步过程调用 (APC) 排队到线程，或超时间隔已过。</td></tr>
<tr><td>设置延时</td><td>SetWaitableTimer</td><td>设置延时(计时,时间,周期,<a href="#计时回调">回调</a>,附加,还原)</td><td>激活指定的可等待计时器。<a href="#文件时间类">时间</a>为正值代表UTC绝对时间，负值表示相对时间(单位100 纳秒)。周期为毫秒。还原为真可唤醒节能模式。</td></tr>
<tr><td>指定延时</td><td>SetWaitableTimerEx</td><td>指定延时(计时,时间,周期,<a href="#计时回调">回调</a>,附加,<a href="#电源请求类">请求</a>,延时)</td><td>激活指定的可等待计时器。<a href="#文件时间类">时间</a>为正值代表UTC绝对时间，负值表示相对时间(单位100 纳秒)。周期和延时为毫秒。</td></tr>
</table><a name="进出回调">进出回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>进出回调</td><td>IoCompletionCallback</td><td>6</td><td>如果应用程序启动 I/O 完成对象的工作线程，则实现此回调。</td></tr>
<tr><th colspan=4>进出回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>实例</td><td>Instance</td><td>整数</td><td>定义回调实例的TP_CALLBACK_INSTANCE结构。应用程序不会修改此结构的成员。</td></tr>
<tr><td>附加</td><td>Context</td><td>整数</td><td>应用程序定义的数据。</td></tr>
<tr><td>重叠</td><td>Overlapped</td><td>整数</td><td><a href="#重叠类">重叠类</a></td></tr>
<tr><td>结果</td><td>IoResult</td><td>整数</td><td>I/O 操作的结果。如果 I/O 成功，则此参数为0。否则，此参数是<a href="https://msdn.microsoft.com/en-us/library/ms681381(v=vs.85)">系统错误代码</a>之一。</td></tr>
<tr><td>字数</td><td>NumberOfBytesTransferred</td><td>整数</td><td>在已完成的 I/O 操作期间传输的字节数。</td></tr>
<tr><td>进出</td><td>Io</td><td>整数</td><td>一个TP_IO结构，用于定义生成回调的 I/O 完成对象。</td></tr>
</table><a name="计时回调">计时回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>计时回调</td><td>Ptimerapcroutine</td><td>3</td><td>应用程序定义的计时器完成例程。</td></tr>
<tr><th colspan=4>计时回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>附加</td><td>lpArgToCompletionRoutine</td><td>整数</td><td>传递给回调函数的附加参数。</td></tr>
<tr><td>低时</td><td>dwTimerLowValue</td><td>整数</td><td>发出计时器信号的基于 UTC 的时间的低序部分。</td></tr>
<tr><td>高时</td><td>dwTimerHighValue</td><td>整数</td><td>计时器发出信号的基于 UTC 的时间的高阶部分。</td></tr>
</table><a name="工作回调">工作回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>工作回调</td><td>WorkCallback</td><td>3</td><td>应用程序启动工作对象的工作线程，则实现此回调。</td></tr>
<tr><th colspan=4>工作回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>实例</td><td>Instance</td><td>整数</td><td>定义回调实例的TP_CALLBACK_INSTANCE结构。应用程序不会修改此结构的成员。</td></tr>
<tr><td>附加</td><td>Context</td><td>整数</td><td>应用程序定义的数据。</td></tr>
<tr><td>工作</td><td>Work</td><td>整数</td><td>一个TP_WORK结构，用于定义生成回调的工作对象。</td></tr>
</table><a name="等待回调">等待回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>等待回调</td><td>WorkCallback</td><td>4</td><td>应用程序启动工作对象的工作线程，则实现此回调。</td></tr>
<tr><th colspan=4>等待回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>实例</td><td>Instance</td><td>整数</td><td>定义回调实例的TP_CALLBACK_INSTANCE结构。应用程序不会修改此结构的成员。</td></tr>
<tr><td>附加</td><td>Context</td><td>整数</td><td>应用程序定义的数据。</td></tr>
<tr><td>等待</td><td>Wait</td><td>整数</td><td>一个TP_WAIT结构，用于定义生成回调的等待对象。</td></tr>
<tr><td>结果</td><td>WaitResult</td><td>整数</td><td>等待操作的结果。0结果对象,0x102超时</td></tr>
</table><a name="超时回调">超时回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>超时回调</td><td>WaitOrTimerCallback</td><td>3</td><td>应用程序定义的函数，用作计时器回调或已注册等待回调的起始地址。</td></tr>
<tr><th colspan=4>超时回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>附加</td><td>lpParameter</td><td>整数</td><td>传递给回调函数的线程数据。</td></tr>
<tr><td>超时</td><td>TimerOrWaitFired</td><td>整数</td><td>如果此参数为 TRUE，则等待超时。如果此参数为 FALSE，则表示已发出等待事件信号。（对于计时器回调，此参数始终为 TRUE。</td></tr>
</table><a name="异步回调">异步回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>异步回调</td><td>APCProc</td><td>1</td><td>应用程序定义的完成例程。</td></tr>
<tr><th colspan=4>异步回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>附加</td><td>Parameter</td><td>整数</td><td>传递给回调函数的可选参数。</td></tr>
</table><a name="一次回调">一次回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>一次回调</td><td>InitOnceCallback</td><td>3</td><td>返回真，则块标记为已初始化。</td></tr>
<tr><th colspan=4>一次回调 参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>一次</td><td>InitOnce</td><td>整数</td><td>指向一次性初始化结构的指针。</td></tr>
<tr><td>附加</td><td>Parameter</td><td>整数</td><td>传递给回调函数的可选参数。</td></tr>
<tr><td>数据</td><td>Context</td><td>整数</td><td>要使用一次性初始化结构存储的数据。</td></tr>
</table><a name="电源请求类">电源请求类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>电源请求类</td><td>REASON_CONTEXT</td><td>16</td><td>包含有关电源请求的信息。</td></tr>
<tr><th colspan=4>电源请求类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>版本</td><td>Version</td><td>整数</td><td>结构的版本号。此参数必须设置为 0。</td></tr>
<tr><td>格式</td><td>Flags</td><td>整数</td><td>电源请求原因的格式。1=包含一个简单的不可本地化字符串,2标识可本地化的字符串资源</td></tr>
<tr><td>本地</td><td>Reason.Detailed</td><td>整数</td><td>用于标识可本地化的字符串资源，用于描述电源请求的原因。<br>
Reason.Detailed.LocalizedReasonModule包含字符串资源的模块。<br>
Reason.Detailed.LocalizedReasonId字符串资源的 ID。<br>
Reason.Detailed.ReasonStringCount ReasonStrings 参数中的字符串数。<br>
Reason.Detailed.ReasonStrings运行时字符串资源中要替换的字符串数组。</td></tr>
<tr><td>非本</td><td>Reason.SimpleReasonString</td><td>整数</td><td>描述电源请求原因的非本地化字符串。</td></tr>
</table><a name="线程池回调">线程池回调标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>WT_EXECUTEDEFAULT</td><td>0x00000000</td><td>默认情况下，回调函数将排队到非 I/O 工作线程。</td></tr>
<tr><td>WT_EXECUTEINIOTHREAD</td><td>0x00000001</td><td>未使用此标志。</td></tr>
<tr><td>WT_EXECUTEINPERSISTENTTHREAD</td><td>0x00000080</td><td>回调函数将排队到永不终止的线程。 它不保证每次都使用相同的线程。 此标志应仅用于短任务，否则可能会影响其他等待操作。</td></tr>
<tr><td>WT_EXECUTEINWAITTHREAD</td><td>0x00000004</td><td>回调函数由等待线程本身调用。 此标志应仅用于短任务，否则可能会影响其他等待操作。</td></tr>
<tr><td>WT_EXECUTELONGFUNCTION</td><td>0x00000010</td><td>回调函数可以执行长时间的等待。 此标志可帮助系统确定是否应创建新线程。</td></tr>
<tr><td>WT_EXECUTEONLYONCE</td><td>0x00000008</td><td>调用回调函数一次后，线程将不再等待句柄。 否则，每次等待操作完成时，计时器都会重置，直到取消等待操作。</td></tr>
<tr><td>WT_TRANSFER_IMPERSONATION</td><td>0x00000100</td><td>回调函数将使用当前访问令牌，无论是进程令牌还是模拟令牌。 如果未指定此标志，则回调函数仅使用进程令牌执行。</td></tr>
</table><a name="同步屏障阻塞">同步屏障阻塞</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY</td><td>1</td><td>指定进入屏障的线程应立即阻塞，直到最后一个线程进入屏障。。</td></tr>
<tr><td>SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY</td><td>2</td><td>指定进入屏障的线程应旋转，直到最后一个线程进入屏障，即使旋转线程超过屏障的最大旋转计数。</td></tr>
<tr><td>SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE</td><td>4</td><td>指定函数可以跳过所需的工作，以确保安全删除屏障，从而提高性能。仅当永远不会删除屏障时，才应使用此标志。</td></tr>
</table><font color="#0000FF"><a name="磁盘分区">磁盘分区</a>——使用示例</font><br>
<font color="#0000FF">磁盘分区 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>定义盘符</td><td>DefineDosDeviceA</td><td>定义盘符(<a href="#定义盘符">标志</a>,盘符,路径)</td><td>定义、重新定义或删除 MS-DOS 设备名称。</td></tr>
<tr><td>硬件控制</td><td>DeviceIoControl</td><td>硬件控制(文件流,代码,输入,大小,<br>@输出,长度,已收,<a href="#重叠类">重叠类</a>)</td><td>将控制代码直接发送到指定的设备驱动程序，导致相应的设备执行相应的操作。</td></tr>
<tr><td>擦除磁盘</td><td>EraseTape</td><td>擦除磁盘(硬件,技术,立即)</td><td>可擦除磁盘(创建文件句柄)的全部或部分内容。技术:0在当前位置写入擦除间隙或数据结束标记,1清除从当前位置到当前分区末尾</td></tr>
<tr><td>设备列表</td><td>QueryDosDeviceA</td><td>设备列表(名称,@内容,大小)</td><td>检索有关 MS-DOS 设备名称的当前映射或名称列表。名称为0获取名称列表</td></tr>
<tr><td>磁盘参数</td><td>GetTapeParameters</td><td>磁盘参数(文件,类型,@大小,@信息)</td><td>检索描述磁盘或磁盘驱动器的<a href="#磁盘参数类">信息</a>。类型:0分区,1驱动器</td></tr>
<tr><td>磁盘定位</td><td>GetTapePosition</td><td>磁盘定位(文件,类型,@区号,@低位,@高位)</td><td>以逻辑块或绝对块形式检索磁带的当前地址。类型:0设备块,1逻辑块</td></tr>
<tr><td>磁盘状态</td><td>GetTapeStatus</td><td>磁盘状态(文件)</td><td>确定磁带设备是否已准备好处理磁带命令。<a href="#磁盘状态">返回值</a>0=无错误</td></tr>
<tr><td>磁盘准备</td><td>PrepareTape</td><td>磁盘准备(文件,准备,立即)</td><td>准备要访问或删除的磁带。<a href="#磁盘准备">准备</a>0=开头,1起始,2末尾,3锁定,4解锁,5低格</td></tr>
<tr><td>启动参数</td><td>GetCommandLineA</td><td>参数=启动参数</td><td>返回一个指向当前进程的命令行字符串的指针</td></tr>
<tr><td>取本机名</td><td>GetComputerNameA</td><td>长度=取本机名(名称,长度)</td><td>获取当前系统的计算机名称,返回计算机名的长度</td></tr>
<tr><td>改本机名</td><td>SetComputerNameA</td><td>长度=改本机名(名称)</td><td>修改当前系统的计算机名称,失败返回0</td></tr>
<tr><td>创建分区</td><td>CreateTapePartition</td><td>创建分区(设备,分类,区数,大小)</td><td>重新格式化磁盘分区。分类0默认1指定区数，2指定区数和大小（MB）</td></tr>
<tr><td>分区空间</td><td>GetDiskFreeSpaceA</td><td>分区空间(目录,扇区数,扇区大小,可用群集,用户配额)</td><td>检索有关指定磁盘的信息，包括磁盘上的可用空间量。</td></tr>
<tr><td>分区容量</td><td>GetDiskFreeSpaceExA</td><td>分区容量(目录,你可用,你可用总数,可用总数</td><td>检索有关磁盘卷上可用空间量的信息</td></tr>
<tr><td>磁盘类型</td><td>GetLogicalDrives</td><td>类型=磁盘类型(盘符)</td><td>判断磁盘类型。类型=2可移动盘 3硬盘 4网络盘 5光驱 6 RAM磁盘</td></tr>
<tr><td>可用磁盘</td><td>GetLogicalDrives</td><td>磁盘=可用磁盘</td><td>返回表示当前可用磁盘驱动器的位掩码</td></tr>
<tr><td>可用盘符</td><td>GetLogicalDriveStringsA</td><td>长度=可用盘符(长度,内容)</td><td>返回指定系统中有效驱动器的字符串长度</td></tr>
<tr><td>取卷信息</td><td>GetVolumeInformationA</td><td>取卷信息(卷,@卷名,大小,@序列号,@名长,<br><a href="#文件关联">关联</a>,@文系名,长度)</td><td>检索与指定根目录关联的文件系统和卷的相关信息。</td></tr>
<tr><td>改卷标签</td><td>SetVolumeLabelA</td><td>改卷标签(卷名,标签)</td><td>设置文件系统卷的标签。</td></tr>
</table><a name="磁盘参数类">磁盘参数类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>磁盘参数类</td><td>TAPE_GET_MEDIA_PARAMETERS</td><td>28</td><td>描述磁带驱动器中的磁带。 </td></tr>
<tr><th colspan=4>磁盘参数类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>分区低数</td><td>Capacity.LowPart</td><td>整数</td><td>当前磁带分区上的字节总数。</td></tr>
<tr><td>分区高数</td><td>Capacity.HighPart</td><td>整数</td><td>当前磁带分区上的字节总数。</td></tr>
<tr><td>剩余低数</td><td>Remaining.LowPart</td><td>整数</td><td>当前位置与当前磁带分区结束之间的字节数。</td></tr>
<tr><td>剩余高数</td><td>Remaining.HighPart</td><td>整数</td><td>当前位置与当前磁带分区结束之间的字节数。</td></tr>
<tr><td>分块</td><td>BlockSize</td><td>整数</td><td>每个块的字节数。</td></tr>
<tr><td>区数</td><td>PartitionCount</td><td>整数</td><td>磁带上的分区数。</td></tr>
<tr><td>写保护</td><td>WriteProtected</td><td>整数</td><td>如果此成员为 TRUE，则磁带受写保护。 否则，就不是架构拥有的。</td></tr>
</table><a name="磁盘准备">磁盘准备</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>TAPE_FORMAT</td><td>5</td><td>执行磁带的低级别格式。 目前，只有 QIC117 设备支持此功能。</td></tr>
<tr><td>TAPE_LOAD</td><td>0</td><td>加载磁带并将磁带移到开头。</td></tr>
<tr><td>TAPE_LOCK</td><td>3</td><td>锁定磁带弹出机制，以便不会意外弹出磁带。</td></tr>
<tr><td>TAPE_TENSION</td><td>2</td><td>通过将磁带移到磁带的末尾并移回开头来调整紧张度。 并非所有设备都支持此选项。 如果不支持此值，则忽略此值。</td></tr>
<tr><td>TAPE_UNLOAD</td><td>1</td><td>将磁带移到开始处，以便从设备中删除。 成功卸载操作后，设备会将错误返回给尝试访问磁带的应用程序，直到再次加载磁带。</td></tr>
<tr><td>TAPE_UNLOCK</td><td>4</td><td>解锁磁带弹出机制。</td></tr>
</table>
<font color="#0000FF"><a name="定义盘符">定义盘符</a>——使用标志</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>DDD_EXACT_MATCH_ON_REMOVE</td><td>0x00000004</td><td>如果此值与 DDD_REMOVE_DEFINITION一起指定，则函数将使用完全匹配来确定要删除的映射。 使用此值可确保不会删除未定义的内容。</td></tr>
<tr><td>DDD_NO_BROADCAST_SYSTEM</td><td>0x00000008</td><td>不要广播 WM_SETTINGCHANGE 消息。 默认情况下，将广播此消息以通知 shell 和应用程序更改。</td></tr>
<tr><td>DDD_RAW_TARGET_PATH</td><td>0x00000001</td><td>按原样使用 lpTargetPath 字符串。 否则，它将从 MS-DOS 路径转换为路径。</td></tr>
<tr><td>DDD_REMOVE_DEFINITION</td><td>0x00000002</td><td>删除指定设备的指定定义。 为了确定要删除的定义，函数将遍查设备的映射列表，查找 lpTargetPath 与与此设备关联的每个映射的前缀的匹配项。 匹配的第一个映射是删除的映射，然后函数返回。</td></tr>
</table><a name="文件关联">文件系统关联标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FILE_CASE_SENSITIVE_SEARCH</td><td>0x00000001</td><td>指定的卷支持区分大小写的文件名。</td></tr>
<tr><td>FILE_CASE_PRESERVED_NAMES</td><td>0x00000002</td><td>指定卷在磁盘上放置名称时支持保留文件名大小写。</td></tr>
<tr><td>FILE_UNICODE_ON_DISK</td><td>0x00000004</td><td>指定的卷支持在磁盘上显示的文件名中的 Unicode。</td></tr>
<tr><td>FILE_PERSISTENT_ACLS</td><td>0x00000008</td><td>指定的卷保留并强制实施 ACL) (访问控制列表。 例如，NTFS 文件系统保留并强制实施 ACL，而 FAT 文件系统则不保留。</td></tr>
<tr><td>FILE_FILE_COMPRESSION</td><td>0x00000010</td><td>指定的卷支持基于文件的压缩。</td></tr>
<tr><td>FILE_VOLUME_QUOTAS</td><td>0x00000020</td><td>指定的卷支持磁盘配额。</td></tr>
<tr><td>FILE_SUPPORTS_SPARSE_FILES</td><td>0x00000040</td><td>指定的卷支持稀疏文件。</td></tr>
<tr><td>FILE_SUPPORTS_REPARSE_POINTS</td><td>0x00000080</td><td>指定的卷支持重新分析点。</td></tr>
<tr><td>FILE_SUPPORTS_REMOTE_STORAGE</td><td>0x00000100</td><td>文件系统支持远程存储。</td></tr>
<tr><td>FILE_RETURNS_CLEANUP_RESULT_INFO</td><td>0x00000200</td><td>在成功的清理操作后，文件系统将返回描述清理期间执行的其他操作的信息，例如删除文件。 文件系统筛选器可以在其清理后回调中检查此信息。</td></tr>
<tr><td>FILE_SUPPORTS_POSIX_UNLINK_RENAME</td><td>0x00000400</td><td>文件系统支持 POSIX 样式的删除和重命名操作。</td></tr>
<tr><td>FILE_VOLUME_IS_COMPRESSED</td><td>0x00008000</td><td>指定的卷是压缩卷，例如 DoubleSpace 卷。</td></tr>
<tr><td>FILE_SUPPORTS_OBJECT_IDS</td><td>0x00010000</td><td>指定的卷支持对象标识符。</td></tr>
<tr><td>FILE_SUPPORTS_ENCRYPTION</td><td>0x00020000</td><td>指定的卷支持加密文件系统 (EFS) 。 有关详细信息，请参阅 文件加密。</td></tr>
<tr><td>FILE_NAMED_STREAMS</td><td>0x00040000</td><td>指定的卷支持命名流。</td></tr>
<tr><td>FILE_READ_ONLY_VOLUME</td><td>0x00080000</td><td>指定的卷是只读的。</td></tr>
<tr><td>FILE_SEQUENTIAL_WRITE_ONCE</td><td>0x00100000</td><td>指定的卷支持单个顺序写入。</td></tr>
<tr><td>FILE_SUPPORTS_TRANSACTIONS</td><td>0x00200000</td><td>指定的卷支持事务。 有关详细信息，请参阅 关于 KTM。</td></tr>
<tr><td>FILE_SUPPORTS_HARD_LINKS</td><td>0x00400000</td><td>指定的卷支持硬链接。 有关详细信息，请参阅 硬链接和交汇点。</td></tr>
<tr><td>FILE_SUPPORTS_EXTENDED_ATTRIBUTES</td><td>0x00800000</td><td>指定的卷支持扩展属性。 扩展属性是应用程序特定的元数据片段，应用程序可与文件关联，并且不属于文件数据。</td></tr>
<tr><td>FILE_SUPPORTS_OPEN_BY_FILE_ID</td><td>0x01000000</td><td>文件系统支持通过 FileID 打开。 有关详细信息，请参阅 FILE_ID_BOTH_DIR_INFO。</td></tr>
<tr><td>FILE_SUPPORTS_USN_JOURNAL</td><td>0x02000000</td><td>指定的卷支持更新序列号 (USN) 日志。 有关详细信息，请参阅 更改日记记录。</td></tr>
<tr><td>FILE_SUPPORTS_INTEGRITY_STREAMS</td><td>0x04000000</td><td>文件系统支持 完整性流。</td></tr>
<tr><td>FILE_SUPPORTS_BLOCK_REFCOUNTING</td><td>0x08000000</td><td>指定的卷支持在同一卷上的文件之间共享逻辑群集。 文件系统在写入共享群集时重新分配。 指示 FSCTL_DUPLICATE_EXTENTS_TO_FILE 是受支持的操作。</td></tr>
<tr><td>FILE_SUPPORTS_SPARSE_VDL</td><td>0x10000000</td><td>文件系统跟踪文件的每个群集是否包含来自显式文件写入或自动零的有效数据 () 或无效数据 (尚未写入或归零) 。 使用稀疏的有效数据长度 (VDL) 的文件系统不会存储有效的数据长度，也不需要有效数据在文件中连续。</td></tr>
<tr><td>FILE_DAX_VOLUME</td><td>0x20000000</td><td>指定的卷是 DAX) 卷 (直接访问。</td></tr>
<tr><td>FILE_SUPPORTS_GHOSTING</td><td>0x40000000</td><td>文件系统支持重影。</td></tr>
</table><font color="#0000FF"><a name="系统时间">系统时间</a>——使用示例</font><br>
<font color="#0000FF">系统时间 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>枚举日历</td><td>EnumCalendarInfoA</td><td>枚举日历(@回调,区域,日历,类型)</td><td>枚举指定区域设置的日历信息。</td></tr>
<tr><td>列举日历</td><td>EnumCalendarInfoExA</td><td>列举日历(@回调,区域,日历,类型)</td><td>枚举由标识符指定的区域设置的日历信息。</td></tr>
<tr><td>枚举日期</td><td>EnumDateFormatsA</td><td>枚举日期(@回调,区域,标志)</td><td>枚举可用于指定区域设置的长日期、短日期或年/月格式。标志:1长日期,2短日期,8年/月,0x80月/日</td></tr>
<tr><td>列举日期</td><td>EnumDateFormatsExA</td><td>列举日期(@回调,区域,标志)</td><td>枚举可用于指定区域设置的长日期、短日期或年/月格式。标志:1长日期,2短日期,8年/月,0x80月/日</td></tr>
<tr><td>枚举时间</td><td>EnumTimeFormatsA</td><td>枚举时间(@回调,区域,标志)</td><td>枚举可用于由标识符指定的区域设置的时间格式。标志:0当前长时间,2当前短时间</td></tr>
<tr><td>枚举码页</td><td>EnumSystemCodePagesA</td><td>枚举码页(@回调,标志)</td><td>枚举安装在操作系统上或受操作系统支持的代码页。标志:1已安装的代码页,2所有代码页</td></tr>
<tr><td>枚举地区</td><td>EnumSystemLocalesA</td><td>枚举地区(@回调,标志)</td><td>枚举安装在操作系统上或受操作系统支持的区域设置。标志:1已安装,2所有区域,4仅备用排序区域</td></tr>
<tr><td>当前时间</td><td>GetLocalTime</td><td>当前时间(时间类)</td><td>获取当前系统日期和时间,系统时间结构体得到的是当前时间</td></tr>
<tr><td>设置时间</td><td>SetLocalTime</td><td>设置时间(时间体)</td><td>设置当前的本地时间和日期</td></tr>
<tr><td>修改时间</td><td>SetSystemTime</td><td>修改时间(时间体)</td><td>修改当前系统日期和时间,系统时间结构体是世界时（UTC）</td></tr>
<tr><td>国标时间</td><td>GetSystemTime</td><td>国标时间(时间类)</td><td>获取当前系统日期和时间,系统时间结构体得到的是世界时（UTC）</td></tr>
<tr><td>开机毫秒</td><td>GetTickCount</td><td>计数=开机毫秒</td><td>获取当前系统启动以来经过的毫秒数</td></tr>
<tr><td>格式时间</td><td>GetDateFormatA</td><td>格式时间(区域,选项,日期,格式,内容,长度)</td><td>把系统时间结构体转换为指定格式的字符串</td></tr>
<tr><td>电源状态</td><td>GetDevicePowerState</td><td>电源状态(设备,@状态)</td><td>获得设备是处于工作状态还是低功耗状态</td></tr>
<tr><td>关闭系统</td><td>SetSystemPowerState</td><td>关闭系统(挂机,0)</td><td>通过关闭电源挂起系统。挂起为真则关机,为假则休眠.</td></tr>
<tr><td>退出系统</td><td>ExitWindowsEx</td><td>退出系统(方式,0)</td><td>方式:1安全关机,2重启,4注销，8关系统和电源</td></tr>
<tr><td>平台目录</td><td>GetWindowsDirectoryA</td><td>长度=平台目录(路径,大小)</td><td>获取操作系统平台所在的目录C:\WINDOWS</td></tr>
<tr><td>系统目录</td><td>GetSystemDirectoryA</td><td>长度=系统目录(路径,大小)</td><td>获取系统所在的目录C:\WINDOWS\SYSTEM</td></tr>
<tr><td>转文时间</td><td>DosDateTimeToFileTime</td><td>转文时间(日期,时间,文件时间)</td><td>将 MS-DOS <a href="#DOS日期">日期</a>和<a href="#DOS时间">时间</a>值转换为<a href="#文件时间类">文件时间</a>。</td></tr>
<tr><td>文转旧时</td><td>FileTimeToDosDateTime</td><td>文转旧时(文件时间,@日期,@时间)</td><td>将<a href="#文件时间类">文件时间</a>转换为 MS-DOS <a href="#DOS日期">日期</a>和<a href="#DOS时间">时间</a>值。</td></tr>
<tr><td>文转本地</td><td>FileTimeToLocalFileTime</td><td>文转本地(文件时间,本地时间)</td><td>将<a href="#文件时间类">文件时间</a>转换为本地<a href="#文件时间类">文件时间</a>。</td></tr>
<tr><td>本地转文</td><td>LocalFileTimeToFileTime</td><td>本地转文(本地时间,文件时间)</td><td>根据协调世界时 (UTC)将本地<a href="#文件时间类">文件时间</a>转换为<a href="#文件时间类">文件时间</a>。</td></tr>
<tr><td>文转时间</td><td>FileTimeToSystemTime</td><td>文转时间(文件时间,时间类)</td><td>根据协调世界时 (UTC)将<a href="#文件时间类">文件时间</a>转换为<a href="#时间类">系统时间</a>格式。</td></tr>
<tr><td>时间转文</td><td>SystemTimeToFileTime</td><td>时间转文(文件时间,时间类)</td><td>根据协调世界时 (UTC)将<a href="#时间类">系统时间</a>转换为<a href="#文件时间类">文件时间</a>格式。</td></tr>
<tr><td>时间转区</td><td>SystemTimeToTzSpecificLocalTime</td><td>时间转区(时区类,时间类,@时间类)</td><td>将协调世界时 (UTC) 的<a href="#时间类">时间</a>转换为指定<a href="#时区类">时区</a>的相应<a href="#时间类">本地时间</a>格式。</td></tr>
<tr><td>比较时间</td><td>CompareFileTime</td><td>比较时间(文件时间1,文件时间2)</td><td>比较两个<a href="#文件时间类">文件时间</a>。</td></tr>
<tr><td>系统信息</td><td>GetSystemInfo</td><td>系统信息(系统信息类)</td><td>检索有关当前系统的 <a href="#系统信息类">系统信息类</a> 结构的信息。</td></tr>
<tr><td>系统电源</td><td>GetSystemPowerStatus</td><td>系统电源(电源状态类)</td><td>检索系统的<a href="#电源状态类">电源状态</a>。</td></tr>
<tr><td>时钟调整</td><td>GetSystemTimeAdjustment</td><td>时钟调整(@调值,@周期,@是否)</td><td>确定系统是否对其时间时钟应用定期时间调整，并获取任何此类调整的值和周期(单位100纳秒)。</td></tr>
<tr><td>调整时钟</td><td>SetSystemTimeAdjustment</td><td>调整时钟(定时,启用)</td><td>启用或禁用对系统时间时钟的定期时间(单位100纳秒)调整。</td></tr>
<tr><td>世界时间</td><td>GetSystemTimeAsFileTime</td><td>世界时间(文件时间类)</td><td>检索当前系统日期和时间。信息采用协调世界时 (UTC) 格式。</td></tr>
<tr><td>当前时区</td><td>GetTimeZoneInformation</td><td>当前时区(时区类)</td><td>检索当前<a href="#时区类">时区</a>设置。这些设置控制协调世界时 (UTC) 和本地时间之间的转换。</td></tr>
<tr><td>设置时区</td><td>SetTimeZoneInformation</td><td>设置时区(时区类)</td><td>设置当前<a href="#时区类">时区</a>设置。这些设置控制协调世界时 (UTC) 和本地时间之间的转换。</td></tr>
<tr><td>启动信息</td><td>GetStartupInfoA</td><td>启动信息(启动信息类)</td><td>检索创建调用进程时指定的 <a href="#启动信息类">启动信息类</a> 结构的内容。</td></tr>
<tr><td>系统版本</td><td>GetVersion</td><td>系统版本</td><td>返回低序字中操作系统的主版本号和次版本号，以及高序字中有关操作系统平台的信息。</td></tr>
<tr><td>获取版本</td><td>GetVersionExA</td><td>获取版本(版本信息类)</td><td>获取操作系统信息的<a href="#版本信息类">版本信息类</a>结构数据。</td></tr>
</table><a name="文件时间类">文件时间类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文件时间类</td><td>FILETIME</td><td>8</td><td>包含一个 64 位值，表示自 1601 年 1 月 1 日 (UTC) 以来的 100 纳秒间隔数。</td></tr>
<tr><th colspan=4>文件时间类——成员表</th></tr>
<tr><td>低值</td><td>dwLowDateTime</td><td>整数</td><td>文件时间的低序部分。</td></tr>
<tr><td>高值</td><td>dwHighDateTime</td><td>整数</td><td>文件时间的高序部分。</td></tr>
</table><a name="货币类">货币类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>货币类</td><td>CURRENCYFMTA</td><td>32</td><td>包含定义货币字符串格式的信息。 </td></tr>
<tr><th colspan=4>货币类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>点数</td><td>NumDigits</td><td>整数</td><td>小数位数。最大字符数为2</td></tr>
<tr><td>前零</td><td>LeadingZero</td><td>整数</td><td>指示是否应在十进制字段中使用前导零的值。0无前导零;1前导零</td></tr>
<tr><td>分组</td><td>Grouping</td><td>整数</td><td>指定的小数分隔符左侧每组数字中(紧邻和后续)的位数。 0将数字分组为 123456789.00; 3分组为123,456,789.00; 32将数字分组为 12,34,56,789.00。</td></tr>
<tr><td>十分</td><td>lpDecimalSep</td><td>整数</td><td>指向以0结尾的十进制分隔符字符串的指针。</td></tr>
<tr><td>千分</td><td>lpThousandSep</td><td>整数</td><td>指向以0结尾的千位分隔符字符串的指针。</td></tr>
<tr><td>负序</td><td>NegativeOrder</td><td>整数</td><td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Intl/locale-ineg-constants"></a>负货币模式。</a> </td></tr>
<tr><td>正序</td><td>PositiveOrder</td><td>整数</td><td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Intl/locale-icurrency"></a>正货币模式。</a> </td></tr>
<tr><td>符号</td><td>lpCurrencySymbol</td><td>整数</td><td>指向以0结尾的货币符号字符串的指针。</td></tr>
</table><a name="DOS日期">DOS日期</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>位</td><td>数值</td><td>说明</td></tr>
<tr><td>0-4</td><td>1-31</td><td>月中的某一天</td></tr>
<tr><td>5-8</td><td>1-12</td><td>月份</td></tr>
<tr><td>9-15</td><td>0-127</td><td>从1980年算起的年数</td></tr>
</table><a name="DOS时间">DOS时间</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>位</td><td>数值</td><td>说明</td></tr>
<tr><td>0-4</td><td>0-30</td><td>秒除以 2</td></tr>
<tr><td>5-10</td><td>0-59</td><td>分钟</td></tr>
<tr><td>11-15</td><td>0-23</td><td>24小时制</td></tr>
</table><a name="时区类">时区类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>时区类</td><td>TIME_ZONE_INFORMATION</td><td>108</td><td>指定时区的设置。</td></tr>
<tr><th colspan=4>时区类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>时差</td><td>Bias</td><td>整数</td><td>此计算机上本地时间转换的当前偏差（以分钟计）。UTC = 本地时间 + 偏差</td></tr>
<tr><td>标名</td><td>StandardName[32]</td><td>文本</td><td>标准时间的说明。 例如，“EST”可能表示东部标准时间。</td></tr>
<tr><td>标时</td><td>StandardDate</td><td>时间类</td><td>一个 <a href="#时间类">时间类</a> 结构，包含从夏令时到标准时间在此操作系统上发生转换的日期和本地时间。 </td></tr>
<tr><td>标差</td><td>StandardBias</td><td>整数</td><td>在标准时间发生的本地时间转换期间使用的偏差值。在大多数时区中，此成员的值为零。</td></tr>
<tr><td>夏名</td><td>DaylightName[32]</td><td>文本</td><td>夏令时的说明。 例如，“PDT”可能表示太平洋夏令时。</td></tr>
<tr><td>夏时</td><td>DaylightDate</td><td>时间类</td><td>一个 SYSTEMTIME 结构，包含从标准时间到夏令时在此操作系统上发生转换的日期和本地时间。</td></tr>
<tr><td>夏差</td><td>DaylightBias</td><td>整数</td><td>在夏令时发生的本地时间转换期间使用的偏差值。在大多数时区中，此成员的值为 –60。</td></tr>
</table><a name="时间类">时间类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>时间类</td><td>SYSTEMTIME</td><td>16</td><td>用来存储日期时间的一种结构数据，对应函数：GetLocalTime、SetLocalTime</td></tr>
<tr><th colspan=4>时间类——成员表</th></tr>
<tr><td>年</td><td>wYear</td><td>整形</td><td>公元年份</td></tr>
<tr><td>月</td><td>wMonth</td><td>整形</td><td>每年的月份，取值[1-12]</td></tr>
<tr><td>星期</td><td>wDayOfWeek</td><td>整形</td><td>每周的第几天，取值[0-6]</td></tr>
<tr><td>日</td><td>wDay</td><td>整形</td><td>每月的第几天，取值[1-31]</td></tr>
<tr><td>时</td><td>wHour</td><td>整形</td><td>每天的第几小时，取值[0-23]</td></tr>
<tr><td>分</td><td>wMinute</td><td>整形</td><td>每小时的第几分，取值[0-59]</td></tr>
<tr><td>秒</td><td>wSecond</td><td>整形</td><td>每分钟的第几秒，取值[0-59]</td></tr>
<tr><td>毫秒</td><td>wMilliseconds</td><td>整形</td><td>每秒的毫秒数，取值[0-999]</td></tr>
</table><a name="电源状态类">电源状态类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>电源状态类</td><td>SYSTEM_POWER_STATUS</td><td>12</td><td>包含有关系统电源状态的信息。 </td></tr>
<tr><th colspan=4>电源状态类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>电源</td><td>ACLineStatus</td><td>字节</td><td>交流电源状态。0脱机1联机255未知</td></tr>
<tr><td>充电</td><td>BatteryFlag</td><td>字节</td><td>电池充电状态。1超过66%;2小于33%;4小于5%;8充电中;128无电池;255无法读取电池标志信息</td></tr>
<tr><td>电量</td><td>BatteryLifePercent</td><td>字节</td><td>剩余电池电量的百分比。此成员可以是 0 到 100 范围内的值;如果状态未知，则为 255。</td></tr>
<tr><td>节电</td><td>SystemStatusFlag</td><td>字节</td><td>节电模式的状态。0关闭1打开</td></tr>
<tr><td>可用</td><td>BatteryLifeTime</td><td>整数</td><td>剩余电池使用时间的秒数;如果剩余秒未知或设备连接到交流电源，则为 –1。</td></tr>
<tr><td>充满</td><td>BatteryFullLifeTime</td><td>整数</td><td>充满电时的电池使用时间的秒数;如果电池完整使用时间未知或设备连接到交流电源，则为 –1。</td></tr>
</table><a name="系统信息类">系统信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>系统信息类</td><td>SYSTEMINFO</td><td>36</td><td>包含了当前计算机的信息。函数GetSystemInfo</td></tr>
<tr><th colspan=4>系统信息类——成员表</th></tr>
<tr><td>处理器</td><td>wProcessorArchitecture</td><td>整数</td><td>指定系统中的中央处理器的体系结构</td></tr>
<tr><td>页面大小</td><td>dwPageSize</td><td>整数</td><td>指定页面的大小和页面保护和委托的颗粒。</td></tr>
<tr><td>最低内存</td><td>lpMinimumApplicationAddress</td><td>整数</td><td>指向应用程序和动态链接库(DLL)可以访问的最低内存地址。</td></tr>
<tr><td>最高内存</td><td>lpMaximumApplicationAddress</td><td>整数</td><td>指向应用程序和动态链接库(DLL)可以访问的最高内存地址。</td></tr>
<tr><td>掩码</td><td>dwActiveProcessorMask</td><td>整数</td><td>指定一个用来代表这个系统中装配了的中央处理器的掩码。</td></tr>
<tr><td>数目</td><td>dwNumberOfProcessors</td><td>整数</td><td>指定系统中的处理器的数目。</td></tr>
<tr><td>种类</td><td>dwProcessorType</td><td>整数</td><td>指定系统中中央处理器的类型。</td></tr>
<tr><td>分配</td><td>dwAllocationGranularity</td><td>整数</td><td>指定已经被分配的虚拟内存空间的粒度。分配内存时最小值</td></tr>
<tr><td>级别</td><td>wProcessorLevel</td><td>整形</td><td>指定系统体系结构依赖的处理器级别。例如：3=Intel 80386，4=Intel 80486，5=Pentium</td></tr>
<tr><td>修订</td><td>wProcessorRevision</td><td>整形</td><td>指定系统体系结构依赖的处理器修订版本号。</td></tr>
</table><a name="版本信息类">版本信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>版本信息类</td><td>OSVERSIONINFO</td><td>148</td><td>载入与平台和操作系统有关的版本信息。函数GetVersionExA</td></tr>
<tr><th colspan=4>版本信息类——成员表</th></tr>
<tr><td>长度</td><td>dwOSVersionInfoSize</td><td>整数</td><td>初始化为结构的大小</td></tr>
<tr><td>主版本</td><td>dwMajorVersion</td><td>整数</td><td>系统主版本号</td></tr>
<tr><td>次版本</td><td>dwMinorVersion</td><td>整数</td><td>系统次版本号</td></tr>
<tr><td>构建号</td><td>dwBuildNumber</td><td>整数</td><td>系统构建号</td></tr>
<tr><td>平台号</td><td>dwPlatformId</td><td>整数</td><td>系统支持的平台号。2=WinNT</td></tr>
<tr><td>系统平台</td><td>szCSDVersion</td><td>文本</td><td>128字节的系统支持的平台名称</td></tr>
</table><a name="处理器功能">处理器功能</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PF_ARM_64BIT_LOADSTORE_ATOMIC</td><td>25</td><td>可以使用 64 位加载/存储原子指令。</td></tr>
<tr><td>PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE</td><td>24</td><td>可以使用除法指令。</td></tr>
<tr><td>PF_ARM_EXTERNAL_CACHE_AVAILABLE</td><td>26</td><td>外部缓存可用。</td></tr>
<tr><td>PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE</td><td>27</td><td>浮点乘积指令可用。</td></tr>
<tr><td>PF_ARM_VFP_32_REGISTERS_AVAILABLE</td><td>18</td><td>VFP/Neon：存在 32 x 64 位寄存器库。</td></tr>
<tr><td>PF_3DNOW_INSTRUCTIONS_AVAILABLE</td><td>7</td><td>3D-Now 指令集可用。</td></tr>
<tr><td>PF_CHANNELS_ENABLED</td><td>16</td><td>处理器通道已启用。</td></tr>
<tr><td>PF_COMPARE_EXCHANGE_DOUBLE</td><td>2</td><td>可以使用 (cmpxchg) 的原子比较和交换操作。</td></tr>
<tr><td>PF_COMPARE_EXCHANGE128</td><td>14</td><td>可以使用 128 位原子比较和交换操作 (cmpxchg16b) 。</td></tr>
<tr><td>PF_COMPARE64_EXCHANGE128</td><td>15</td><td>可以使用原子比较 64 和交换 128 位操作 (cmp8xchg16) 。</td></tr>
<tr><td>PF_FASTFAIL_AVAILABLE</td><td>23</td><td>_fastfail () 可用。</td></tr>
<tr><td>PF_FLOATING_POINT_EMULATED</td><td>1</td><td>浮点运算是使用软件模拟器模拟的。</td></tr>
<tr><td>PF_FLOATING_POINT_PRECISION_ERRATA</td><td>0</td><td>在Pentium上，在极少数情况下可能会出现浮点精度误差。</td></tr>
<tr><td>PF_MMX_INSTRUCTIONS_AVAILABLE</td><td>3</td><td>MMX 指令集可用。</td></tr>
<tr><td>PF_NX_ENABLED</td><td>12</td><td>已启用数据执行防护 。</td></tr>
<tr><td>PF_PAE_ENABLED</td><td>9</td><td>处理器已启用 PAE。对于此功能，所有 x64 处理器始终返回非零值。</td></tr>
<tr><td>PF_RDTSC_INSTRUCTION_AVAILABLE</td><td>8</td><td>RDTSC 指令可用。</td></tr>
<tr><td>PF_RDWRFSGSBASE_AVAILABLE</td><td>22</td><td>提供 RDFSBASE、RDGSBASE、WRFSBASE 和 WRGSBASE 指令。</td></tr>
<tr><td>PF_SECOND_LEVEL_ADDRESS_TRANSLATION</td><td>20</td><td>硬件支持二级地址转换。</td></tr>
<tr><td>PF_SSE3_INSTRUCTIONS_AVAILABLE</td><td>13</td><td>SSE3 指令集可用。</td></tr>
<tr><td>PF_SSSE3_INSTRUCTIONS_AVAILABLE</td><td>36</td><td>SSSE3 指令集可用。</td></tr>
<tr><td>PF_SSE4_1_INSTRUCTIONS_AVAILABLE</td><td>37</td><td>SSE4_1指令集可用。</td></tr>
<tr><td>PF_SSE4_2_INSTRUCTIONS_AVAILABLE</td><td>38</td><td>SSE4_2指令集可用。</td></tr>
<tr><td>PF_AVX_INSTRUCTIONS_AVAILABLE</td><td>39</td><td>AVX 指令集可用。</td></tr>
<tr><td>PF_AVX2_INSTRUCTIONS_AVAILABLE</td><td>40</td><td>AVX2 指令集可用。</td></tr>
<tr><td>PF_AVX512F_INSTRUCTIONS_AVAILABLE</td><td>41</td><td>AVX512F 指令集可用。</td></tr>
<tr><td>PF_VIRT_FIRMWARE_ENABLED</td><td>21</td><td>虚拟化在固件中启用，并由操作系统提供。</td></tr>
<tr><td>PF_XMMI_INSTRUCTIONS_AVAILABLE</td><td>6</td><td>SSE 指令集可用。</td></tr>
<tr><td>PF_XMMI64_INSTRUCTIONS_AVAILABLE</td><td>10</td><td>SSE2 指令集可用。</td></tr>
<tr><td>PF_XSAVE_ENABLED</td><td>17</td><td>处理器实现 XSAVE 和 XRSTOR 指令。</td></tr>
<tr><td>PF_ARM_V8_INSTRUCTIONS_AVAILABLE</td><td>29</td><td>此 Arm 处理器实现 Arm v8 指令集。</td></tr>
<tr><td>PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE</td><td>30</td><td>此 Arm 处理器实现 Arm v8 的额外加密指令 (例如 AES、SHA1 和 SHA2) 。</td></tr>
<tr><td>PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE</td><td>31</td><td>此 Arm 处理器实现 Arm v8 额外的 CRC32 指令。</td></tr>
<tr><td>PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE</td><td>34</td><td>此 Arm 处理器实现 Arm v8.1 原子指令 (例如 CAS、SWP) 。</td></tr>
<tr><td>PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE</td><td>43</td><td>此 Arm 处理器实现 Arm v8.2 DP 指令 (例如 SDOT、UDOT) 。 此功能在 Arm v8.2 实现中是可选的，在 Arm v8.4 实现中是必需的。</td></tr>
<tr><td>PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE</td><td>44</td><td>此 Arm 处理器实现 Arm v8.3 JSCVT 指令 (例如 FJCVTZS) 。</td></tr>
<tr><td>PF_ARM_V83_LRCPC_INSTRUCTIONS_AVAILABLE</td><td>45</td><td>此 Arm 处理器实现 Arm v8.3 LRCPC 指令 (例如 LDAPR) 。 请注意，某些 Arm v8.2 CPU 可以选择性地支持 LRCPC 指令。</td></tr>
<tr><td>ERROR_BEGINNING_OF_MEDIA</td><td>1102</td><td>尝试在中开始标记之前访问数据失败。</td></tr>
<tr><td>ERROR_BUS_RESET</td><td>1111</td><td>在总线上检测到重置条件。</td></tr>
<tr><td>ERROR_DEVICE_NOT_PARTITIONED</td><td>1107</td><td>加载磁带时找不到分区信息。</td></tr>
<tr><td>ERROR_DEVICE_REQUIRES_CLEANING</td><td>1165</td><td>磁带机能够报告它需要清洁，并报告它确实需要清洁。</td></tr>
<tr><td>ERROR_END_OF_MEDIA</td><td>1100</td><td>操作期间到达了磁带结束标记。</td></tr>
<tr><td>ERROR_FILEMARK_DETECTED</td><td>1101</td><td>操作期间已达到文件标记。</td></tr>
<tr><td>ERROR_INVALID_BLOCK_LENGTH</td><td>1106</td><td>在多卷分区中的新磁带上，块大小不正确。</td></tr>
<tr><td>ERROR_MEDIA_CHANGED</td><td>1110</td><td>已更换或删除驱动器中的磁带。</td></tr>
<tr><td>ERROR_NO_DATA_DETECTED</td><td>1104</td><td>操作期间到达了数据结束标记。</td></tr>
<tr><td>ERROR_NO_MEDIA_IN_DRIVE</td><td>1112</td><td>驱动器中没有媒体。</td></tr>
<tr><td>ERROR_NOT_SUPPORTED</td><td>50</td><td>磁带驱动程序不支持请求的函数。</td></tr>
<tr><td>ERROR_PARTITION_FAILURE</td><td>1105</td><td>无法对磁带进行分区。</td></tr>
<tr><td>ERROR_SETMARK_DETECTED</td><td>1103</td><td>操作期间已达到设置标记。</td></tr>
<tr><td>ERROR_UNABLE_TO_LOCK_MEDIA</td><td>1108</td><td>尝试锁定弹出机制失败。</td></tr>
<tr><td>ERROR_UNABLE_TO_UNLOAD_MEDIA</td><td>1109</td><td>尝试卸载磁带失败。</td></tr>
<tr><td>ERROR_WRITE_PROTECT</td><td>19</td><td>介质受写入保护。</td></tr>
</table><a name="语言版本类">语言版本类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>语言版本类</td><td>NLSVERSIONINFOEX</td><td>32</td><td>包含有关 NLS 功能的版本信息。</td></tr>
<tr><th colspan=4>语言版本类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>dwNLSVersionInfoSize</td><td>整数</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>版本</td><td>dwNLSVersion</td><td>整数</td><td>版本。 此值用于跟踪对具有特定区域设置的指定功能的代码点集的更改和添加。 该值特定于区域设置，并在功能更改时递增。</td></tr>
<tr><td>定义</td><td>dwDefinedVersion</td><td>整数</td><td>定义的版本。 此值用于跟踪 Unicode 码位的更改。</td></tr>
<tr><td>顺序</td><td>dwEffectiveId</td><td>整数</td><td>用于表示版本的输入区域设置的排序顺序的标识符。</td></tr>
<tr><td>行为</td><td>guidCustomVersion[16]</td><td>文本</td><td>表示所表示版本的区域设置使用的自定义排序行为的唯一 GUID。</td></tr>
</table><font color="#0000FF"><a name="区域比较">区域文字比较</a>——使用标志</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>LINGUISTIC_IGNORECASE</td><td>0x10</td><td>在语言上适当时忽略大小写。</td></tr>
<tr><td>LINGUISTIC_IGNOREDIACRITIC</td><td>0x10</td><td>在语言上适当时忽略非节奏字符。</td></tr>
<tr><td>NORM_IGNORECASE</td><td>1</td><td>忽略大小写。 对于许多脚本 (尤其是拉丁语脚本) 。</td></tr>
<tr><td>NORM_IGNOREKANATYPE</td><td>0x10000</td><td>不要区分平假名和片假名字符。 对应的平假名和片假名字符比较相等。</td></tr>
<tr><td>NORM_IGNORENONSPACE</td><td>2</td><td>忽略非节奏字符。 对于许多脚本 (尤其是拉丁语脚本) 。</td></tr>
<tr><td>NORM_IGNORESYMBOLS</td><td>4</td><td>忽略符号和标点。</td></tr>
<tr><td>NORM_IGNOREWIDTH</td><td>0x20000</td><td>忽略半角字符和全角字符之间的差异。 全角窗体是中文和日文脚本中使用的格式差异。</td></tr>
<tr><td>NORM_LINGUISTIC_CASING</td><td>0x08000000</td><td>使用默认语言规则进行大小写，而不是文件系统规则。</td></tr>
<tr><td>SORT_DIGITSASNUMBERS</td><td>8</td><td>Windows 7：在排序过程中，将数字视为数字，例如，在“10”前排序“2”。</td></tr>
<tr><td>SORT_STRINGSORT</td><td>0x1000</td><td>将标点视为符号。</td></tr>
</table><font color="#0000FF"><a name="配置文件">配置文件</a>——使用示例</font><br>
<font color="#0000FF">配置文件 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>读取整数</td><td>GetPrivateProfileIntA</td><td>数值=读取整数(段名,键名,默认值,文件名)</td><td>获取配置文件的指定键相关的整数,未找到时返回默认值</td></tr>
<tr><td>读取区段</td><td>GetPrivateProfileSectionA</td><td>长度=读取区段(段名,内容,大小,文件名)</td><td>获取配置文件的指定区段(中括号里的名字)所有键名和值</td></tr>
<tr><td>读取段名</td><td>GetPrivateProfileSectionNamesA</td><td>长度=读取段名(内容,大小,文件名)</td><td>获取配置文件的所有区段名称</td></tr>
<tr><td>读取文字</td><td>GetPrivateProfileStringA</td><td>长度=读取文字(段,键,默认,内容,大小,文件名)</td><td>获取配置文件的指定键对应的内容(等号右边)</td></tr>
<tr><td>读取结构</td><td>GetPrivateProfileStructA</td><td>长度=读取结构(段,键,内容,大小,文件名)</td><td>获取配置文件的指定键对应的结构数据</td></tr>
<tr><td>写入段名</td><td>WritePrivateProfileSectionA</td><td>长度=写入段名(段名,内容,文件名)</td><td>创建配置文件的区段名称</td></tr>
<tr><td>写入文字</td><td>WritePrivateProfileStringA</td><td>长度=写入文字(段,键,内容,文件名)</td><td>写入配置文件的指定键对应的内容(等号右边)</td></tr>
<tr><td>写入结构</td><td>WritePrivateProfileStructA</td><td>长度=写入结构(段,键,内容,大小,文件名)</td><td>写入配置文件的指定键对应的结构数据</td></tr>
<tr><td>系统整数</td><td>GetProfileIntA</td><td>系统整数(节名,键名,默认值)</td><td>从 Win.ini 文件的指定节中的键中检索整数。检索不到返回默认值。</td></tr>
<tr><td>系统全节</td><td>GetProfileSectionA</td><td>系统全节(节名,@内容,大小)</td><td>检索 Win.ini 文件的指定节的所有键和值。最大32767</td></tr>
<tr><td>系统键值</td><td>GetProfileStringA</td><td>系统键值(节名,键名,默认,@内容,大小)</td><td>检索 Win.ini 文件的指定节的所有键和值。</td></tr>
<tr><td>系统改节</td><td>WriteProfileSectionA</td><td>系统改节(节名,键值内容)</td><td>将 Win.ini 文件中指定节的内容替换为指定的键和值。</td></tr>
<tr><td>系统改键</td><td>WriteProfileStringA</td><td>系统改键(节名,键名,内容)</td><td>将字符串复制到 Win.ini 文件的指定节的键中。</td></tr>
</table><font color="#0000FF"><a name="内存读写">内存读写</a>——使用示例</font><br>
<font color="#0000FF">内存读写 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>全局计数</td><td>GlobalFlags</td><td>全局计数(内存)</td><td>检索有关指定全局内存对象的分配值和锁定计数。</td></tr>
<tr><td>全局指针</td><td>GlobalHandle</td><td>全局指针(内存)</td><td>检索与指向全局内存块的指定指针关联的句柄。</td></tr>
<tr><td>堆块首个</td><td>Heap32First</td><td>堆块首个(<a href="#堆块类">堆块类</a>,进程号,堆号)</td><td>检索有关进程分配的堆的第一个块的信息。</td></tr>
<tr><td>堆存首个</td><td>Heap32ListFirst</td><td>堆存首个(快照,<a href="#堆表类">堆表类</a>)</td><td>检索有关指定进程分配的第一个堆的信息。</td></tr>
<tr><td>堆存下个</td><td>Heap32ListNext</td><td>堆存下个(快照,<a href="#堆表类">堆表类</a>)</td><td>检索有关指定进程分配的第一个堆的信息。</td></tr>
<tr><td>堆块下个</td><td>Heap32First</td><td>堆块下个(<a href="#堆块类">堆块类</a>)</td><td>检索有关进程已分配的堆的下一个块的信息。</td></tr>
<tr><td>局部分配</td><td>LocalAlloc</td><td>局部分配(方式,大小)</td><td>从堆中分配指定的字节数。方式:0固定,2可移动,0x40初始化为零</td></tr>
<tr><td>局部计数</td><td>LocalFlags</td><td>局部计数(内存)</td><td>检索有关指定局部内存对象的分配值和锁定计数。</td></tr>
<tr><td>局部指针</td><td>LocalHandle</td><td>局部指针(内存)</td><td>检索与指向局部内存块的指定指针关联的句柄。</td></tr>
<tr><td>局部释放</td><td>LocalFree</td><td>局部释放(内存)</td><td>释放指定的局部内存对象并使其空间无效</td></tr>
<tr><td>局部锁定</td><td>LocalLock</td><td>buf=局部锁定(内存)</td><td>返回指定的局部内存对象第一个字节的指针</td></tr>
<tr><td>局部更改</td><td>LocalReAlloc</td><td>局部更改(内存,大小,方式)</td><td>更改指定的局部内存对象的大小或方式:0固定,2可移动,0x40初始化为零</td></tr>
<tr><td>局部大小</td><td>LocalSize</td><td>ln=局部大小(内存)</td><td>获取指定的局部内存对象的当前大小</td></tr>
<tr><td>局部解锁</td><td>LocalUnlock</td><td>局部解锁(内存)</td><td>取消指定的局部内存对象关联的内存分配空间</td></tr>
<tr><td>全局内存</td><td>GlobalMemoryStatus</td><td>全局内存(内存信息类)</td><td>获取当前可用的物理和虚拟内存信息</td></tr>
<tr><td>全局分配</td><td>GlobalAlloc</td><td>内存=全局分配(方式,大小)</td><td>从堆中分配指定的字节数内存。0固定,2可移动,$40初始化零</td></tr>
<tr><td>全局释放</td><td>GlobalFree</td><td>全局释放(内存)</td><td>释放指定的全局内存对象并使其空间无效</td></tr>
<tr><td>全局锁定</td><td>GlobalLock</td><td>buf=全局锁定(内存)</td><td>返回指定的全局内存对象第一个字节的指针</td></tr>
<tr><td>全局更改</td><td>GlobalReAlloc</td><td>全局更改(内存,大小,方式)</td><td>更改指定的全局内存对象的大小或属性</td></tr>
<tr><td>全局大小</td><td>GlobalSize</td><td>长度=全局大小(内存)</td><td>获取指定的全局内存对象的当前大小</td></tr>
<tr><td>全局解锁</td><td>GlobalUnlock</td><td>全局解锁(内存)</td><td>取消指定的全局内存对象关联的内存分配空间</td></tr>
<tr><td>进程堆址</td><td>GetProcessHeap</td><td>堆=进程内存</td><td>获取本进程使用的堆对象</td></tr>
<tr><td>进程全堆</td><td>GetProcessHeaps</td><td>进程全堆(堆数,数组)</td><td>获取本进程有效的所有堆的句柄</td></tr>
<tr><td>内存创建</td><td>HeapCreate</td><td>堆=内存创建(方式,大小,最大)</td><td>创建本进程使用的堆对象，用来分配物理内存,方式1不互斥,4报告异常</td></tr>
<tr><td>内存分配</td><td>HeapAlloc</td><td>内存=内存分配(堆,方式,大小)</td><td>从堆中分配一个不可移动的内存块。方式1不互斥,8初始化零,4报告异常</td></tr>
<tr><td>内存压缩</td><td>HeapCompact</td><td>内存压缩(堆,方式)</td><td>尝试压缩指定的堆。合并相邻空闲内存，并消除大的可用内存块,方式1不互斥</td></tr>
<tr><td>内存销毁</td><td>HeapDestroy</td><td>内存销毁(堆)</td><td>销毁指定的堆对象及其内存页面</td></tr>
<tr><td>内存释放</td><td>HeapFree</td><td>内存释放(堆,方式,内存)</td><td>释放指定堆的内存页面</td></tr>
<tr><td>内存锁定</td><td>HeapLock</td><td>内存锁定(堆)</td><td>锁定堆只有调用线程才能从堆中分配或释放内存</td></tr>
<tr><td>内存重建</td><td>HeapReAlloc</td><td>内存重建(堆,方式,内存,大小)</td><td>从堆中重新分配一块内存,方式1不互斥,8初始化零,4报告异常,$10保留原数据</td></tr>
<tr><td>内存大小</td><td>HeapSize</td><td>大小=内存大小(堆,方式,内存)</td><td>获取堆分配的内存块的大小</td></tr>
<tr><td>内存解锁</td><td>HeapUnlock</td><td>内存解锁(堆)</td><td>解除指定堆相关联的关键部分对象的锁定</td></tr>
<tr><td>内存验证</td><td>HeapValidate</td><td>内存验证(堆,方式,内存)</td><td>用来验证堆的完整性(内存为0)或堆中某块内存的完整性,方式1不互斥</td></tr>
<tr><td>内存枚举</td><td>HeapWalk</td><td>内存枚举(堆,信息)</td><td>枚举指定堆中的内存块</td></tr>
<tr><td>内存摘要</td><td>HeapDestroy</td><td>内存销毁(堆,方式,摘要)</td><td>汇总指定的堆</td></tr>
<tr><td>内存可读</td><td>IsBadReadPtr</td><td>内存可读(内存,大小)</td><td>判断指定范围内存地址是否可读</td></tr>
<tr><td>内存可写</td><td>IsBadWritePtr</td><td>内存可写(内存,大小)</td><td>判断指定范围内存地址是否可写</td></tr>
<tr><td>内存填充</td><td>RtlFillMemory</td><td>内存填充(地址,长度,值)</td><td>使用指定的数值填充内存块。</td></tr>
<tr><td>传送内存</td><td>RtlMoveMemory</td><td>传送内存(目的,原址,n)</td><td>在原址复制 n 个字节到目的地址中,两者可以有重叠</td></tr>
<tr><td>内存清零</td><td>RtlZeroMemory</td><td>内存清零(地址,长度)</td><td>用0来填充一块内存区域</td></tr>
<tr><td>虚拟内存</td><td>VirtualAlloc</td><td>地址=虚拟内存(地址,大小,分类,保护)<br>申请内存,内存申请,堆申请,全局/局部分配<br>这些申请内存的方法,并没有本质上的不同</td><td>在虚拟地址空间中保留或提交一个页面区域。分配的内存将自动初始化为零
<tr><td>虚拟空间</td><td>VirtualAllocEx</td><td>地址=虚拟空间(进程,地址,大小,分类,保护)</td><td>在指定进程虚拟地址空间中保留或提交一个页面区域。分配的内存将自动初始化为零
<br>新申请地址写0,扩充时可保留原数据.分类=分配类型$1000新分配,$2000保留<br>保护1禁用2只读4读写$10可执行$20执行读$40执行读写</td></tr>
<tr><td>虚拟释放</td><td>VirtualFree</td><td>虚拟释放(地址,大小,操作)</td><td>虚拟地址空间中释放或分解内存,操作$4000分解$8000释放(大小为0)</td></tr>
<tr><td>空间释放</td><td>VirtualFreeEx</td><td>空间释放(进程,地址,大小,操作)</td><td>在指定进程的虚拟地址空间中释放或分解内存,操作$4000分解$8000释放(大小为0)</td></tr>
<tr><td>虚拟锁定</td><td>VirtualLock</td><td>虚拟锁定(地址,大小)</td><td>虚拟地址空间的指定区域锁定到内存中</td></tr>
<tr><td>虚拟保护</td><td>VirtualProtect</td><td>虚拟保护(地址,大小,保护,@旧)</td><td>更改调用进程虚拟地址空间中已提交页面的访问保护(读写权限)</td></tr>
<tr><td>空间保护</td><td>VirtualProtectEx</td><td>空间保护(进程,地址,大小,保护,@旧)</td><td>更改指定进程虚拟地址空间中已提交页面的访问保护(读写权限)</td></tr>
<tr><td>虚拟查询</td><td>VirtualQuery</td><td>虚拟查询(地址,结构,大小)</td><td>查询虚拟地址空间中的一系列页面的信息</td></tr>
<tr><td>空间查询</td><td>VirtualQueryEx</td><td>空间查询(地址,结构,大小)</td><td>查询虚拟地址空间中的一系列页面的信息</td></tr>
<tr><td>虚拟解锁</td><td>VirtualUnlock</td><td>虚拟解锁(地址,大小)</td><td>解锁进程的虚拟地址空间中的指定范围的页面</td></tr>
<tr><td>读取内存</td><td>ReadProcessMemory</td><td>读取内存(进程,地址,内容,长度,@已读)</td><td>读取指定进程地址的内存数据</td></tr>
<tr><td>写入内存</td><td>WriteProcessMemory</td><td>写入内存(进程,地址,内容,长度,@已写)</td><td>把数据写入指定进程的指定地址</td></tr>
</table> <a name="内存信息类">内存信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>内存信息类</td><td>MEMORYSTATUS</td><td>32</td><td>包含了当前计算机的信息。函数GlobalMemoryStatus</td></tr>
<tr><th colspan=4>内存信息类——成员表</th></tr>
<tr><td>长度</td><td>dwiLength</td><td>整数</td><td>结构的大小，初始设置为32长度</td></tr>
<tr><td>使用率</td><td>dwMemoryLoad</td><td>整数</td><td>返回一个介于0～100之间的值，用来指示当前系统内存的使用率。</td></tr>
<tr><td>物理内存</td><td>dwTotalPhys</td><td>整数</td><td>返回总的物理内存大小，以字节(byte)为单位。</td></tr>
<tr><td>可用内存</td><td>dwAvailPhys</td><td>整数</td><td>返回可用的物理内存大小，以字节(byte)为单位。</td></tr>
<tr><td>交换文件</td><td>dwTotalPageFile</td><td>整数</td><td>显示可以存在页面文件中的字节数。</td></tr>
<tr><td>空闲文件</td><td>dwAvailPageFile</td><td>整数</td><td>返回可用的页面文件大小，以字节(byte)为单位。</td></tr>
<tr><td>可用地址</td><td>dwTotalVirtual</td><td>整数</td><td>返回调用进程的用户模式部分的全部可用虚拟地址空间</td></tr>
<tr><td>空闲地址</td><td>dwAvailVirtual</td><td>整数</td><td>返回调用进程的用户模式部分的实际自由可用的虚拟地址空间</td></tr>
</table><a name="堆表类">堆表类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>堆表类</td><td>HEAPLIST32</td><td>16</td><td>描述列表中枚举指定进程使用的堆的条目。 </td></tr>
<tr><th colspan=4>堆表类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>程号</td><td>th32ProcessID</td><td>整数</td><td>使用堆的进程标识符。</td></tr>
<tr><td>堆号</td><td>th32HeapID</td><td>整数</td><td>堆标识符。这不是句柄，仅对工具帮助函数有意义。</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>1默认堆。</td></tr>
</table><a name="堆块类">堆块类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>堆块类</td><td>HEAPENTRY32</td><td>36</td><td>描述堆(块)正在检查的堆的一个条目。</td></tr>
<tr><th colspan=4>堆块类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>指针</td><td>hHandle</td><td>整数</td><td>堆块的句柄。</td></tr>
<tr><td>地址</td><td>dwAddress</td><td>整数</td><td>块开头的线性地址。</td></tr>
<tr><td>块长</td><td>dwBlockSize</td><td>整数</td><td>堆块的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td></td>1固定 (不可移动)。2不使用内存块。4可以移动。</tr>
<tr><td>锁数</td><td>dwLockCount</td><td>整数</td><td>此成员不再使用，并且始终设置为零。</td></tr>
<tr><td>预留</td><td>dwResvd</td><td>整数</td><td>保留;请勿使用或更改。</td></tr>
</table><font color="#0000FF"><a name="语言文字">语言文字</a>——使用示例</font><br>
<font color="#0000FF">字符文本 ——相关函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>展开环境</td><td>ExpandEnvironmentStringsA</td><td>展开环境(环境名,@数据,大小)</td><td>展开环境变量字符串，并将其替换为为当前用户定义的值。</td></tr>
<tr><td>释放环境</td><td>FreeEnvironmentStringsA</td><td>释放环境(字块)</td><td>释放环境字符串块。</td></tr>
<tr><td>取环境字</td><td>GetEnvironmentStringsA</td><td>取环境字</td><td>检索当前进程的环境变量。返回值是指向当前进程的环境块的指针。</td></tr>
<tr><td>取环境量</td><td>GetEnvironmentVariableA</td><td>取环境量(环境名,@数据,大小)</td><td>从调用进程的环境块检索指定变量的内容。</td></tr>
<tr><td>改环境字</td><td>SetEnvironmentStringsA</td><td>改环境字(环境变量)</td><td>设置调用进程的环境字符串 (当前进程的系统和用户环境变量) 。</td></tr>
<tr><td>改环境量</td><td>SetEnvironmentVariableA</td><td>改环境量(环境名,内容)</td><td>设置当前进程的指定环境变量的内容。</td></tr>
<tr><td>转换文字</td><td>FoldStringA</td><td>转换文字(转换,源字,源长,@内容,大小)</td><td>将一个 Unicode 字符串映射到另一个，执行指定的<a href="#映射转换">转换</a>。 </td></tr>
<tr><td>格式消息</td><td>FormatMessageA</td><td>格式消息(<a href="#格式选项">选项</a>,<a href="#格式位置">来源</a>,消息号<br>,语言,@数据,大小,格式组)</td><td>按照消息定义设置消息字符串的格式。 </td></tr>
<tr><td>代码标识</td><td>GetACP</td><td>代码标识</td><td>检索操作系统的当前 Windows ANSI 代码页标识符。</td></tr>
<tr><td>厂商代码</td><td>GetOEMCP</td><td>厂商代码</td><td>返回操作系统的当前原始设备制造商 (OEM) 代码页标识符。</td></tr>
<tr><td>代码信息</td><td>GetCPInfo</td><td>代码信息(代码页,<a href="#代码类">代码类</a>)</td><td>检索有关任何有效的已安装或可用代码页的信息。0=ANSI,1=OEM,2=MAC,3当前线程</td></tr>
<tr><td>码页信息</td><td>GetCPInfoExA</td><td>码页信息(代码页,0,<a href="#代码页类">代码页类</a>)</td><td>检索有关任何有效的已安装或可用代码页的信息。0=ANSI,1=OEM,2=MAC,3当前线程</td></tr>
<tr><td>货币格式</td><td>GetCurrencyFormatA</td><td>货币格式(区域,选项,数字串,<a href="#货币类">格式</a>,@内容,大小)</td><td>将数字字符串格式化为标识符指定的区域设置的货币字符串。格式为0时选项=0x80000000,否则选项=0</td></tr>
<tr><td>货币形式</td><td>GetCurrencyFormatExA</td><td>货币形式(区域,选项,数字串,<a href="#货币类">格式</a>,@内容,大小)</td><td>将数字字符串格式化为标识符指定的区域设置的货币字符串。格式为0时选项=0x80000000,否则选项=0</td></tr>
<tr><td>数字格式</td><td>GetNumberFormatA</td><td>数字格式(区域,选项,数字串,<a href="#数字类">格式</a>,@内容,大小)</td><td>将数字字符串的格式设置为指定的区域设置自定义的数字字符串。格式为0时选项=0x80000000,否则选项=0</td></tr>
<tr><td>比较区字</td><td>CompareStringA</td><td>比较区字(区域,<a href="#区域比较">标志</a>,字1,长1,字2,长2)</td><td>比较标识符指定的 区域设置 的两个字符串。</td></tr>
<tr><td>比较宽字</td><td>CompareStringExA</td><td>比较宽字(区域,<a href="#区域比较">标志</a>,字1,长1,字2,长2,<a href="#语言版本类">版本</a>,0,0)</td><td>比较两个Unicode (宽字符) 字符串，以用于名称指定的 区域设置 。</td></tr>
<tr><td>转换语言</td><td>ConvertDefaultLocale</td><td>转换语言(区域)</td><td>将默认区域设置值转换为实际的 区域设置标识符。</td></tr>
<tr><td>地区信息</td><td>GetLocaleInfoA</td><td>地区信息(区域,类型,@内容,大小)</td><td>检索有关标识符指定的区域设置的信息。</td></tr>
<tr><td>地区改项</td><td>SetLocaleInfoA</td><td>地区改项(区域,类型,内容)</td><td>设置当前区域设置的用户替代部分中的信息项。此函数不设置系统默认值。</td></tr>
<tr><td>系统地区</td><td>GetSystemDefaultLCID</td><td>系统地区</td><td>返回系统区域设置的区域设置标识符 。</td></tr>
<tr><td>系统区名</td><td>GetSystemDefaultLocaleName</td><td>系统区名(@名称,大小)</td><td>检索系统默认区域设置名称。</td></tr>
<tr><td>时间转字</td><td>GetTimeFormatA</td><td>时间转字(地区,选项,时间类,格式,@内容,大小)</td><td>将时间格式化为由标识符指定的区域设置的时间字符串。选项:1不用分和秒,2不用秒,4不用标记,8不用24小时;"hh':'mm':'ss tt"</td></tr>
<tr><td>用户地区</td><td>GetUserDefaultLCID</td><td>用户地区</td><td>返回用户默认区域设置的区域设置标识符。</td></tr>
<tr><td>用户语言</td><td>GetUserDefaultLangID</td><td>用户语言</td><td>返回当前用户的“区域格式”设置的语言标识符 。</td></tr>
<tr><td>用户区名</td><td>GetUserDefaultLocaleName</td><td>用户区名(@名称,大小)</td><td>检索用户默认区域设置名称。</td></tr>
<tr><td>是前导字</td><td>IsDBCSLeadByte</td><td>是前导字(值)</td><td>确定指定的字符是否是系统默认ANSI代码页的前导字节。 </td></tr>
<tr><td>前导字符</td><td>IsDBCSLeadByteEx</td><td>前导字符(代码页,值)</td><td>确定指定的字符是否可能是前导字节。代码:0=ANSI,1=OEM,2=MAC,3当前线程</td></tr>
<tr><td>处理功能</td><td>IsProcessorFeaturePresent</td><td>处理功能(功能)</td><td>确定当前计算机是否支持指定的<a href="#处理器功能">处理器功能</a>。 </td></tr>
<tr><td>有效码页</td><td>IsValidCodePage</td><td>有效码页(代码页)</td><td>确定指定的代码页是否有效。</td></tr>
<tr><td>验语言组</td><td>IsValidLanguageGroup</td><td>验语言组(语言组,标志)</td><td>确定操作系统上是安装还是支持语言组。标志:1支持安装,2支持语言组</td></tr>
<tr><td>支持地区</td><td>IsValidLocale</td><td>支持地区(区域,标志)</td><td>确定操作系统上是安装还是支持指定的区域设置。标志:1支持安装,2支持区域设置</td></tr>
<tr><td>支持区名</td><td>IsValidLocaleName</td><td>支持区名(区名)</td><td>确定指定的 区域设置名称 对于操作系统上安装或支持的区域设置是否有效。</td></tr>
<tr><td>地区转名</td><td>LCIDToLocaleName</td><td>地区转名(区域,@名称,大小,标志)</td><td>将 区域设置标识符转换为区域设置名称。标志:0x08000000非特定名称</td></tr>
<tr><td>映射文字</td><td>LCMapStringA</td><td>映射文字(区域,<a href="#映射转换">标志</a>,源字,大小,@目标,长度)</td><td>使用指定的转换将输入字符串映射到另一个字符串，或者生成排序键。</td></tr>
<tr><td>映射转换</td><td>LCMapStringEx</td><td>映射转换(区域,<a href="#映射转换">标志</a>,源字,大小,@目标,长度,<a href="#语言版本类">版本</a>,0,0)</td><td>使用指定的转换将输入字符串映射到另一个字符串，或者生成排序键。</td></tr>
<tr><td>转系统页</td><td>SetFileApisToANSI</td><td>转系统页</td><td>使文件 I/O 函数对当前进程使用 ANSI 字符集代码页。此函数适用于 8 位控制台输入和输出操作。</td></tr>
<tr><td>转厂商页</td><td>SetFileApisToOEM</td><td>转厂商页</td><td>使文件 I/O 函数对当前进程使用  OEM 字符集代码页。此函数适用于 8 位控制台输入和输出操作。</td></tr>
<tr><td>语言说明</td><td>VerLanguageNameA</td><td>语言说明(语言,@说明,大小)</td><td>检索与指定的二进制微软语言标识符关联的语言的说明字符串。</td></tr>
<tr><td>附加文字</td><td>lstrcatA</td><td>附加文字(文字1,"好")</td><td>给文字1的字符串末尾增加文字</td></tr>
<tr><td>比较文字</td><td>lstrcmpA</td><td>比较文字(文字1,文字2)</td><td>文字1和文字2进行比较,区分大小写</td></tr>
<tr><td>比较字母</td><td>lstrcmpiA</td><td>比较字母(文字1,文字2)</td><td>文字1和文字2进行比较,不区分大小写</td></tr>
<tr><td>复制文字</td><td>lstrcpyA</td><td>复制文字(文字1,文字2)</td><td>把文字2复制到文字1的内存位置</td></tr>
<tr><td>复制前字</td><td>lstrcpynA</td><td>复制前字(文字1,文字2,n)</td><td>把文字2的前n个字符复制到文字1的内存中</td></tr>
<tr><td>字串长度</td><td>lstrlenA</td><td>字串长度(文字)</td><td>获取文字的长度,英文1字节,汉字2字节</td></tr>
<tr><td>乘除</td><td>MulDiv</td><td>乘除(被乘数,乘数,除数)</td><td>返回(被乘数 * 乘数 / 除数)的结果,四舍五入取整</td></tr>
<tr><td>到宽字符</td><td>MultiByteToWideChar</td><td>到宽字符(编码,选项,原文,长度,缓冲,大小)</td><td>将字符串映射到UTF-16宽字符串。</td></tr>
<tr><td>到多字符</td><td>WideCharToMultiByte</td><td>到多字符(编码,选项,原文,长度,缓冲,大小,默认,是否)</td><td>将UTF-16宽字符串映射到新字符串。</td></tr>
</table><a name="数字类">数字类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>数字类</td><td>CURRENCYFMTA</td><td>24</td><td>包含定义数字字符串格式的信息。 </td></tr>
<tr><th colspan=4>数字类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>点数</td><td>NumDigits</td><td>整数</td><td>小数位数。最大字符数为2</td></tr>
<tr><td>前零</td><td>LeadingZero</td><td>整数</td><td>指示是否应在十进制字段中使用前导零的值。0无前导零;1前导零</td></tr>
<tr><td>分组</td><td>Grouping</td><td>整数</td><td>指定的小数分隔符左侧每组数字中(紧邻和后续)的位数。 0将数字分组为 123456789.00; 3分组为123,456,789.00; 32将数字分组为 12,34,56,789.00。</td></tr>
<tr><td>十分</td><td>lpDecimalSep</td><td>整数</td><td>指向以0结尾的十进制分隔符字符串的指针。</td></tr>
<tr><td>千分</td><td>lpThousandSep</td><td>整数</td><td>指向以0结尾的千位分隔符字符串的指针。</td></tr>
<tr><td>负序</td><td>NegativeOrder</td><td>整数</td><td><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Intl/locale-ineg-constants"></a>负数模式。</a> </td></tr>
</table><a name="代码类">代码类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>代码类</td><td>CPINFO</td><td>18</td><td>包含有关代码页的信息。 </td></tr>
<tr><th colspan=4>代码类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>字长</td><td>MaxCharSize</td><td>整数</td><td>代码页中字符的最大长度（以字节为单位）。SBCS=1 DBCS=2 </td></tr>
<tr><td>默认</td><td>DefaultChar[2]</td><td>文本</td><td>将字符串转换为特定代码页时使用的默认字符。 </td></tr>
<tr><td>前导</td><td>LeadByte[12]</td><td>文本</td><td>前导字节范围的固定长度数组，前导字节范围的数量是可变的。</td></tr>
</table><a name="代码页类">代码页类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>代码页类</td><td>CPINFOEXA</td><td>284</td><td>包含有关代码页的信息。 </td></tr>
<tr><th colspan=4>代码页类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>字长</td><td>MaxCharSize</td><td>整数</td><td>代码页中字符的最大长度（以字节为单位）。SBCS=1 DBCS=2 </td></tr>
<tr><td>默认</td><td>DefaultChar[2]</td><td>文本</td><td>将字符串转换为特定代码页时使用的默认字符。 </td></tr>
<tr><td>前导</td><td>LeadByte[12]</td><td>文本</td><td>前导字节范围的固定长度数组，前导字节范围的数量是可变的。</td></tr>
<tr><td>默字</td><td>UnicodeDefaultChar</td><td>整形</td><td>特定代码页的翻译中使用的 Unicode 默认字符。 默认值通常是“？”字符或片假名中间点字符。=</td></tr>
<tr><td>码页</td><td>CodePage</td><td>整数</td><td>代码页值。</td></tr>
<tr><td>名称</td><td>CodePageName[260]</td><td>文本</td><td>代码页的全名。 </td></tr>
</table><a name="映射转换">映射转换类型标志</a><br>
指定在字符串映射期间使用的转换类型或要生成的排序键类型的标志。此参数可以具有以下值。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>LCMAP_BYTEREV</td><td>0x00000800</td><td>使用字节反转。 例如，如果应用程序传入0x3450 0x4822，则结果为0x5034 0x2248。</td></tr>
<tr><td>LCMAP_FULLWIDTH</td><td>0x00800000</td><td>如果适用，请使用 Unicode (宽) 字符。 此标志和LCMAP_HALFWIDTH是互斥的。 使用此标志时，即使输入字符已经是全角字符，映射也可以使用规范化形式。</td></tr>
<tr><td>LCMAP_HALFWIDTH</td><td>0x00400000</td><td>在适用的情况下使用窄字符。 此标志和LCMAP_FULLWIDTH互斥。</td></tr>
<tr><td>LCMAP_HIRAGANA</td><td>0x00100000</td><td>将所有片假名字符映射到平假名。 此标志和LCMAP_KATAKANA是互斥的。</td></tr>
<tr><td>LCMAP_KATAKANA</td><td>0x00200000</td><td>将所有平假名字符映射到片假名。 此标志和LCMAP_HIRAGANA是互斥的。</td></tr>
<tr><td>LCMAP_LINGUISTIC_CASING</td><td>0x01000000</td><td>使用语言规则进行大小写，而不是文件系统规则 (默认) 。 此标志仅对 LCMAP_LOWERCASE 或 LCMAP_UPPERCASE 有效。</td></tr>
<tr><td>LCMAP_LOWERCASE</td><td>0x00000100</td><td>对于能够处理大写和小写的区域设置和脚本，请将所有字符映射到小写。</td></tr>
<tr><td>LCMAP_HASH</td><td>0x00040000</td><td>返回字符串的原始排序权重的哈希。要求输出缓冲区的大小为 (int)</td></tr>
<tr><td>LCMAP_SIMPLIFIED_CHINESE</td><td>0x02000000</td><td>将繁体中文映射到简体中文字符。 此标志和LCMAP_TRADITIONAL_CHINESE是互斥的。</td></tr>
<tr><td>LCMAP_TRADITIONAL_CHINESE</td><td>0x04000000</td><td>将简体中文字符映射到繁体中文。 此标志和LCMAP_SIMPLIFIED_CHINESE是互斥的。</td></tr>
<tr><td>LCMAP_SORTHANDLE</td><td>0x20000000</td><td>返回表示区域设置的标记，以便将来的调用可以传递 NULL 排序名称，并将以前查询的排序句柄作为最后一个参数传递。要求输出缓冲区的大小为 (lparam)</td></tr>
<tr><td>LCMAP_SORTKEY</td><td>0x00000400</td><td>生成规范化排序键。 如果未指定LCMAP_SORTKEY标志，函数将执行字符串映射。 有关排序键生成和字符串映射的详细信息，请参阅备注部分。</td></tr>
<tr><td>LCMAP_TITLECASE</td><td>0x00000300</td><td>Windows 7： 将所有字符映射到标题大写，其中每个主要单词的第一个字母都大写。</td></tr>
<tr><td>LCMAP_UPPERCASE</td><td>0x00000200</td><td>对于能够处理大写和小写的区域设置和脚本，将所有字符映射到大写。</td></tr>
<tr><th colspan=3>以下标志可以单独或相互使用，也可以与LCMAP_SORTKEY和/或LCMAP_BYTEREV标志一起使用。</th></tr>
<tr><td>NORM_IGNORENONSPACE</td><td>0x00000002</td><td>忽略非节奏字符。对于许多脚本 (尤其是拉丁语脚本) ，与LINGUISTIC_IGNOREDIACRITIC一致。</td></tr>
<tr><td>NORM_IGNORESYMBOLS</td><td>0x00000004</td><td>忽略符号和标点。</td></tr>
<tr><th colspan=3>下面列出的标志仅与 LCMAP_SORTKEY 标志一起使用。</th></tr>
<tr><td>LINGUISTIC_IGNORECASE</td><td>0x00000010</td><td>在语言上适当时忽略大小写。</td></tr>
<tr><td>LINGUISTIC_IGNOREDIACRITIC</td><td>0x00000020</td><td>在语言上适当时忽略非节奏字符。</td></tr>
<tr><td>NORM_IGNORECASE</td><td>0x00000001</td><td>忽略大小写。 对于许多脚本 (尤其是拉丁语脚本) ，NORM_IGNORECASE与LINGUISTIC_IGNORECASE一致。</td></tr>
<tr><td>NORM_IGNOREKANATYPE</td><td>0x00010000</td><td>不要区分平假名和片假名字符。 对应的平假名和片假名字符比较相等。</td></tr>
<tr><td>NORM_IGNOREWIDTH</td><td>0x00020000</td><td>忽略半角字符和全角字符之间的差异，例如 C a t == cat。 全角窗体是中文和日文脚本中使用的格式差异。</td></tr>
<tr><td>NORM_LINGUISTIC_CASING</td><td>0x08000000</td><td>使用语言规则进行大小写，而不是文件系统规则 (默认) 。</td></tr>
<tr><td>SORT_DIGITSASNUMBERS</td><td>0x00000008</td><td>Windows 7：在排序过程中，将数字视为数字，例如，在“10”前排序“2”。</td></tr>
<tr><td>SORT_STRINGSORT</td><td>0x00001000</td><td>将标点视为符号。</td></tr>
</table><a name="映射转换">映射转换类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>MAP_COMPOSITE</td><td>0x00000040</td><td>将重音字符映射到分解字符，即基字符和一个或多个非节奏字符各自具有不同的码位值的字符。 例如，&#xC4 由 A + &#x0308：拉丁文大写字母 A (U+0041) + 组合分音 (U+0308) 。 此标志等效于 Windows Vista 中的规范化形式 D。 请注意，此标志不能与MB_PRECOMPOSED一起使用。</td></tr>
<tr><td>MAP_EXPAND_LIGATURES</td><td>0x00002000</td><td>展开所有连字字符，使其由两个字符等效表示。 例如，连字“&#xE6” (U+00e6) 扩展为两个字符“a” (U+0061) + “e” (U+0065) 。 此值不能与MAP_PRECOMPOSED或MAP_COMPOSITE结合使用。</td></tr>
<tr><td>MAP_FOLDCZONE</td><td>0x00000010</td><td>将兼容区域字符折叠到标准 Unicode 等效项中。 如果还设置了MAP_COMPOSITE标志，则此标志等效于 Windows Vista 中的规范化形式 KD。 如果未 (默认) 设置组合标志，则此标志等效于 Windows Vista 中的规范化形式 KC。</td></tr>
<tr><td>MAP_FOLDDIGITS</td><td>0x00000080</td><td>将所有数字映射到 Unicode 字符 0 到 9。</td></tr>
<tr><td>MAP_PRECOMPOSED</td><td>0x00000020</td><td>将重音字符映射到预组合字符，其中重音符和基字符合并为单个字符值。 此标志等效于 Windows Vista 中的规范化形式 C。 此值不能与 MAP_COMPOSITE 组合使用。</td></tr>
</table><a name="格式选项">格式消息设置选项</a><br>
格式设置选项以及如何解释 来源 参数。 选项 的低序字节指定函数如何处理输出缓冲区中的换行符。<br>
低序字节可以指定格式化输出行的最大宽度。 下面是低序字节的可能值。<br>
0 没有输出行宽度限制。 函数将消息定义文本中的换行符存储在输出缓冲区中。<br>
0xFF 函数忽略消息定义文本中的常规换行符。 函数将消息定义文本中的硬编码换行符存储在输出缓冲区中。 该函数不生成新的换行符。<br>
此参数可使用以下一个或多个值。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FORMAT_MESSAGE_ALLOCATE_BUFFER</td><td>0x00000100</td><td>函数分配一个足够大的缓冲区(最大128K) 来保存格式化的消息，并将指向分配的缓冲区的指针放在 lpBuffer 指定的地址处。 lpBuffer 参数是指向 LPTSTR 的指针;必须将指针强制转换为 LPTSTR (例如， (LPTSTR)&lpBuffer) 。 nSize 参数指定要为输出消息缓冲区分配的最小 TCHAR 数。 调用方应使用 LocalFree 函数在不再需要缓冲区时释放缓冲区。</td></tr>
<tr><td>FORMAT_MESSAGE_ARGUMENT_ARRAY</td><td>0x00002000</td><td>Arguments 参数不是va_list结构，而是指向表示参数的值数组的指针。此标志不能与 64 位整数值一起使用。 如果使用 64 位整数，则必须使用 va_list 结构。</td></tr>
<tr><td>FORMAT_MESSAGE_FROM_HMODULE</td><td>0x00000800</td><td>lpSource 参数是一个模块句柄，其中包含要搜索的消息表资源 () 。 如果此 lpSource 句柄为 NULL，则将搜索当前进程的应用程序映像文件。 此标志不能与 FORMAT_MESSAGE_FROM_STRING 一起使用。</td></tr>
<tr><td>FORMAT_MESSAGE_FROM_STRING</td><td>0x00000400</td><td>lpSource 参数是指向包含消息定义的以 null 结尾的字符串的指针。 消息定义可能包含插入序列，就像消息表资源中的消息文本一样。 此标志不能与 FORMAT_MESSAGE_FROM_HMODULE 或 FORMAT_MESSAGE_FROM_SYSTEM一起使用。</td></tr>
<tr><td>FORMAT_MESSAGE_FROM_SYSTEM</td><td>0x00001000</td><td>函数应搜索系统消息表资源 () 请求的消息。 如果使用 FORMAT_MESSAGE_FROM_HMODULE 指定此标志，则函数在 lpSource 指定的模块中找不到该消息时搜索系统消息表。 此标志不能与 FORMAT_MESSAGE_FROM_STRING 一起使用。</td></tr>
<tr><td>FORMAT_MESSAGE_IGNORE_INSERTS</td><td>0x00000200</td><td>消息定义中的插入序列（如 %1）将被忽略，并传递到未更改的输出缓冲区。 此标志可用于提取消息以供以后进行格式设置。 如果设置了此标志，则忽略 Arguments 参数。</td></tr>
</table><a name="格式位置">格式消息定义的位置</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FORMAT_MESSAGE_FROM_HMODULE</td><td>0x00000800</td><td>包含要搜索的消息表的模块的句柄。</td></tr>
<tr><td>FORMAT_MESSAGE_FROM_STRING</td><td>0x00000400</td><td>指向由未格式化消息文本组成的字符串的指针。 将扫描它以进行插入并相应地设置格式。</td></tr>
</table><br><pre>
格式组，这些值在格式化的消息中用作插入值。 格式字符串中的 %1 指示 格式组 数组中的第一个值;%2 指示第二个参数;等等。

每个值的解释取决于与消息定义中的插入关联的格式信息。 默认值是将每个值视为指向以 null 结尾的字符串的指针。

默认情况下， 格式组 参数的类型为 va_list*，这是一种特定于语言和实现的数据类型，用于描述可变数量的参数。返回时va_list 参数的状态未定义。
若要再次使用 va_list ，请使用 va_end 销毁变量参数列表指针，并使用 va_start重新初始化它。

如果没有 va_list*类型的指针，请指定 0x2000 标志并将指针传递到 DWORD_PTR 值的数组;这些值被输入到格式为插入值的消息中。每个插入都在数组中具有相应元素。
在消息文本中，支持多个用于动态设置消息格式的转义序列。 下表显示了这些转义序列及其含义。 所有转义序列以百分比字符 (%) 开头。
%0	终止消息文本行，不带尾随新行字符。 此转义序列可用于生成长行或终止消息本身，而无需尾随新行字符。 这对于提示消息很有用。
%n!字符串!	标识插入序列。 n 的值可以介于 1 到 99 的范围内。 格式字符串 (，必须用感叹号括起来，) 是可选的，默认为 ！s！ 如果未指定，则为 。
格式字符串可以包含字符串的宽度和精度说明符，以及整数的宽度说明符。 使用星号 () 指定宽度和精度。例如，%1！。*s！ 或 %1！*u！。

如果不使用宽度和精度说明符，则插入数字直接对应于输入参数。例如源字符串为"%1 %2 %1"，输入参数为"Bill"和"Bob"，则输出字符串为"Bill Bob Bill"。

但是，如果使用宽度和精度说明符，则插入数字不直接对应于输入参数。 例如，上一示例中的插入编号可能会更改为"%1!*.*s! %4 %5!*s!"。

但是，如果使用宽度和精度说明符，则插入数字不直接对应于输入参数。 例如，上一示例中的插入编号可能会更改为"%1! *.*s! %4 %5! *s!"。
插入数字取决于是使用参数数组 (0x2000) 还是 va_list。对于参数数组，如果上一个格式字符串包含一个星号则下一个插入编号为n+2 ;如两个星号则为n+3 。
对于 va_list，如果上一个格式字符串包含一个星号，则下一个插入号为 n+1 ;如果指定了两个星号，则为 n+2 。

如果要重复Bill，参数必须包含Bill两次。例如"%1! *.*s!  %4 %5! *s!"，参数可以是 4、2、Bill、Bob、6、Bill 。 然后，格式化的字符串将为"Bi Bob Bill"

当源字符串包含宽度和精度说明符时重复插入数字可能不会生成预期结果。 如果将 %5 替换为 %1，则函数将尝试在地址 6 打印字符串， (可能导致访问冲突) 。

不支持浮点格式说明符（e、E、f 和 g）。 解决方法是使用 StringCchPrintf 函数将浮点数格式化为临时缓冲区，然后使用该缓冲区作为插入字符串。

使用 I64 前缀的插入被视为两个 32 位参数。 在使用后续参数之前，必须使用它们。 请注意，使用 StringCchPrintf 而不是此前缀可能更容易。

 
百分比字符后的任何其他非数字字符在输出消息中设置格式，不带百分比字符。 下面是一些示例。

格式字符串	生成的输出
%%	单个百分号。
%space	单个空间。 此格式字符串可用于确保消息文本行中尾随空格的相应数目。
%.	单个句点。 此格式字符串可用于在行开头包含单个句点，而不会终止消息文本定义。
%!	单个感叹号。 此格式字符串可用于在插入后立即包含感叹号，而不会将其误认为是格式字符串的开头。
%n	格式字符串出现在行尾时的硬换行符。 当 FormatMessage 提供常规换行符以便邮件适合特定宽度时，此格式字符串非常有用。
%r	不带尾随换行符的硬回车符。
%t	单个选项卡。
</pre><br>
<font color="#0000FF">Win32常用函数-user32库</font><br>
<font color="#0000FF"><a name="键盘鼠标">键盘鼠标</a>——使用示例</font><br>
应用程序应接受来自键盘和鼠标的用户输入。系统会把输入事件以消息的形式发布到其窗口过程。初级程序默认在“窗体消息”这个程序段接收键盘和鼠标输入。<br>
<b>键盘输入模型</b><br>
系统通过使用用户或应用程序当前选择的特定于语言的键盘布局，提供与语言无关的键盘支持。 键盘设备驱动程序从键盘接收扫描代码，这些代码将发送到键盘布局，在键盘布局中，扫描代码将转换为消息并发布到应用程序中的相应窗口。<br>

分配给键盘上每个键的唯一值称为扫描代码，是键盘上键的设备相关标识符。 当用户键入某个键时，键盘会生成两个扫描代码，一个在用户按下该键时生成，另一个在用户松开该键时生成。<br>

键盘设备驱动程序解释扫描代码并将其转换（映射）为虚拟键代码，这是一个由系统定义的独立于设备的值，用于标识键的用途。 转换扫描代码后，键盘布局会创建一条消息，其中包含扫描代码、虚拟键代码和有关击键的其他信息，<br>然后将该消息置于系统消息队列中。 系统将该消息从系统消息队列中删除，并将其发布到相应线程的消息队列。 最终，线程的消息循环会删除该消息，并将其传递给相应的窗口过程进行处理。 <br>
<b>键盘焦点和激活</b><br>
系统将键盘消息发布到创建具有键盘焦点的窗口的前台线程的消息队列。 键盘焦点是窗口的临时属性。 系统将键盘焦点从一个窗口移动到另一个窗口，从而在显示器上的所有窗口之间共享键盘。<br>
 具有键盘焦点的窗口（从创建它的线程的消息队列）接收所有键盘消息，直到焦点更改为其他窗口。线程可以调用 焦点窗口 函数来确定哪个窗口（如果有）当前具有键盘焦点。<br>

 线程可以通过调用 设置焦点 函数将键盘焦点赋予其中一个窗口。 将键盘焦点从一个窗口更改为另一个窗口时，系统会向失去焦点的窗口发送 失去焦点 消息，然后向获得焦点的窗口发送 获得焦点 消息。<br>

键盘焦点的概念与活动窗口的概念相关。 活动窗口是用户当前正在使用的顶级窗口。 具有键盘焦点的窗口要么是活动窗口，要么是活动窗口的子窗口。 为了帮助用户识别活动窗口，系统会将其置于 Z 顺序的顶部并突出显示其标题栏（如果有）和边框。<br>

用户可以通过单击顶级窗口、使用 ALT+TAB 或 Alt+ESC 组合键选择它或从“任务列表”中选择它来激活该窗口。 线程可以使用 激活窗口 函数激活顶级窗口。 它可以使用 活动窗口 函数确定所创建的顶级窗口是否处于活动状态。<br>

当一个窗口停用而另一个窗口被激活时，系统会发送 窗口激活 消息。 如果正在停用窗口，则 ③参数 参数的低序字为零，如果正在激活窗口，则为非零。 默认窗口过程收到 窗口激活 消息后，便会将键盘焦点设置到活动窗口。<br>

若要阻止键盘和鼠标输入事件到达应用程序，请使用 阻塞输入。 请注意，阻塞输入 函数不会干扰异步键盘输入状态表。 这意味着在输入被阻止时调用 发送输入 函数将更改异步键盘输入状态表。<br>
<b>系统和非系统击键消息</b><br>
按下键会使 键盘按下 或 ALT键按下 消息被放入附加到具有键盘焦点的窗口的线程消息队列中。 松开键会使 键盘按下 或 ALT键松开 消息被放入队列中。<br>

按下键和松开键消息通常是相伴发生的，但如果用户长按一个键，以致键盘的自动重复功能启动，则系统会连续生成许多 键盘按下 或 ALT键按下 消息。 然后，当用户松开键时，它会生成一条 键盘按下 或 ALT键松开 消息。<br>
系统区分系统击键和非系统击键。 系统击键会生成系统击键消息 ALT键按下 和 ALT键松开。系统击键消息主要供系统而不是应用程序使用，过程将其传递给 处理窗口 函数进行处理。<br>
非系统击键会生成非系统击键消息 键盘按下 和 键盘松开。非系统击键消息供应用程序窗口使用；处理窗口 函数不对其执行任何操作。 窗口过程可以丢弃它不需要的任何非系统击键消息。<br>
<b>描述的虚拟键代码</b><br>
击键消息的 ③参数 包含按下或松开的键的虚拟键代码。 窗口过程根据虚拟键代码的值处理或忽略击键消息。<br>

典型的窗口过程仅处理它接收到的击键消息的一小部分，而忽略其余部分。 典型的窗口过程不处理来自字符键的击键消息。 <br>
判断(消息) <font color="#0000FF">为 键盘按下 获取键值(参数)<br>
&emsp;&emsp;为 键盘松开 获取键值(参数)</font><br>
&emsp;&emsp;为 键入字符 获取键值(参数)</font><br>
在键盘按下的动作事件里,把参数提交给获取键值的程序段,也就是键值<br>
<font color="#0000FF">程序段 获取键值(键码)<br>
&emsp;&emsp;判断(键码)为 37 左方向键<br>
&emsp;&emsp;为 38 上方向键 为 65 字母A键</font><br>
<b>击键消息标志</b><br>
击键消息的 ④数据 参数包含有关生成该消息的击键的附加信息。 此信息包括重复计数、扫描代码、扩展键标志、上下文代码、上一个键状态标志和转换状态标志。应用程序可以从 ④数据 的高位字中获取以下击键标志。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>常量数值</td><td>释义</td></tr>
<tr><td>KF_EXTENDED</td><td>0x0100</td><td>操作扩展键标志。</td></tr>
<tr><td>KF_DLGMODE</td><td>0x0800</td><td>操作对话框模式标志，该标志指示对话框是否处于活动状态。</td></tr>
<tr><td>KF_MENUMODE</td><td>0x1000</td><td>操作菜单模式标志，该标志指示菜单是否处于活动状态。</td></tr>
<tr><td>KF_ALTDOWN</td><td><tr><td>0x2000</td><td>操作上下文代码标志。</td></tr>
<tr><td>KF_REPEAT</td><td>0x4000</td><td>操作上一个键状态标志。</td></tr>
<tr><td>KF_UP</td><td>0x8000</td><td>操作转换状态标志。</td></tr>
</table>
<b>键盘输入通知</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>窗口激活</td><td>6</td><td>WM_ACTIVATE</td><td>一个窗口被激活或失去激活状态。③参数:0关闭,1非鼠标激活,2鼠标激活;④数据:参数为0是激活窗口,非0是停用的窗口</td></tr>
<tr><td>获得焦点</td><td>7</td><td>WM_SETFOCUS</td><td>将键盘焦点转向一个窗口。③参数:失去焦点的窗口,可为0;④数据:0</td></tr>
<tr><td>失去焦点</td><td>8</td><td>WM_KILLFOCUS</td><td>使一个窗口失去焦点。③参数:接收焦点的窗口,可为0;④数据:0</td></tr>
<tr><td>键盘按下</td><td>$0100</td><td>WM_KEYDOWN</td><td>当一个非系统按键被按下时(<ALT>键没有被按下),会发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>键盘松开</td><td>$0101</td><td>WM_KEYUP</td><td>当一个非系统按键被释放弹起时(<ALT>键没有被按下),会发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>键入字符</td><td>$0102</td><td>WM_CHAR</td><td>按下某按键,并已发出按下、松开消息,本消息包含被按下的按键的字符码。③参数:字码;④数据:扫描码</td></tr>
<tr><td>敲击按键</td><td>$0103</td><td>WM_DEADCHAR</td><td>\"死字符\"消息,当使用<a href="#翻译消息">翻译消息</a>函数翻译WM_KEYUP消息时,发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT键按下</td><td>$0104</td><td>WM_SYSKEYDOWN</td><td>当用户按住<ALT>键的同时又按下其它键时,发送本消息给拥有焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT键松开</td><td>$0105</td><td>WM_SYSKEYUP</td><td>当用户释放一个按键的同时<ALT>键还按着时,发送本消息给拥有焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT键字符</td><td>$0106</td><td>WM_SYSCHAR</td><td>当WM_SYSKEYDOWN消息被<a href="#翻译消息">翻译消息</a>函数翻译后,发送本消息给拥有焦点的窗口,注:<ALT>键被按下。③参数:键码;④数据:扫描码</td></tr>
<tr><td>ALT敲字符</td><td>$0107</td><td>WM_SYSDEADCHAR</td><td>\"死字符\"消息,当使用<a href="#翻译消息">翻译消息</a>函数翻译WM_SYSKEYDOWN消息时,发送本消息给拥有键盘焦点的窗口。③参数:键码;④数据:扫描码</td></tr>
<tr><td>键入宽字</td><td>$0109</td><td>WM_UNICHAR</td><td>此消息包含按下的键的字符代码。类似于键入字符，但它使用宽字符转换格式UTF-32，而键入字符使用 UTF-16。③参数:键码;④数据:扫描码</td></tr>
<tr><td>系统命令</td><td>$0112</td><td>WM_SYSCOMMAND</td><td>当用户选择一条系统菜单命令、用户最大化或最小化或还原或关闭时。③参数:命令;④数据:点菜单时鼠标位置</td></tr>
<tr><td>热键消息</td><td>$312</td><td>WM_HOTKEY</td><td>当用户按下由<a href="#注册热键">注册热键</a>函数注册的热键时。③参数:-1窗口,-2桌面;④数据:低字=1Alt,2CTRL,4SHIFT,8WIN;高字=键码</td></tr>
<tr><td>程序命令</td><td>$319</td><td>WM_APPCOMMAND</td><td>用户点击应用程序命令按钮或键盘命令键(如导航刷新搜索)③参数:窗口;④数据:命令/设备/按键</td></tr>
</table>
<b>鼠标光标</b><br>
当用户移动鼠标时，系统会在屏幕上移动一个称为鼠标光标的位图。 鼠标光标包含一个称为热点的单像素点，系统跟踪该点并将其识别为光标的位置。 <br>
当鼠标事件发生时，包含热点的窗口通常会接收到事件生成的鼠标消息。 窗口不需要处于活动状态或具有键盘焦点来接收鼠标消息。<br>

<font color="#0000FF">整数 光标=载入光标(0,32649)</font>;//加载系统固有的光标，32649是手形光标<br>
<font color="#0000FF">修改类值(按钮1,窗类光标,光标)</font>;//修改按钮1的光标为手形光标<br>
<font color="#0000FF">删除对象(光标)</font>;//删除加载的光标对象,从而释放读取光标使用的内存<br>
系统维护一个控制鼠标速度的变量，即光标在用户移动鼠标时移动的距离。 可以使用带有 SPI_GETMOUSE 或 SPI_SETMOUSE 标志的 SystemParametersInfo 函数来检索或设置鼠标速度。<br>
<b>消息参数</b><br>
工作区鼠标消息的 ④数据 参数指示光标热点的位置。 低序字(16位)表示热点的 x 坐标，高序字(16位)表示 y 坐标。在工作区坐标系中，屏幕上的所有点都是相对于工作区左上角的坐标 (0,0) 指定的。<br>
在窗体消息程序段里 判断(消息)<br>
<font color="#0000FF">为 鼠标移动,按下左键,按下右键</font>;//客户区的鼠标消息都可以通过④数据得到坐标值<br>
<font color="#0000FF">{左=数据 & 0xFFFF</font>;//获取数据的低16位x坐标值<br>
<font color="#0000FF">上=数据 >> 16}</font>;//数据右移16位得到y坐标值<br>
③参数 参数包含指示其他鼠标按钮以及 CTRL 和 SHIFT 键在鼠标事件发生时的状态的标志。 可以是以下值的组合。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>释义</td></tr>
<tr><td>MK_LBUTTON</td><td>1</td>按下了鼠标左键。</td></tr>
<tr><td>MK_RBUTTON</td><td>2</td>按下了鼠标右键。</td></tr>
<tr><td>MK_SHIFT</td><td>4</td>按下了 Shift 键。</td></tr>
<tr><td>MK_CONTROL</td><td>8</td>按下了 Ctrl 键。</td></tr>
<tr><td>MK_MBUTTON</td><td>16</td>按下了鼠标中键。</td></tr>
<tr><td>MK_XBUTTON1</td><td>32</td>按下了第一个 X 按钮。</td></tr>
<tr><td>MK_XBUTTON2</td><td>64</td>按下了第二个 X 按钮。</td></tr>
</table>
<b>非工作区鼠标消息</b>
当鼠标事件发生在窗口的任何部分（工作区除外）时，窗口会收到非工作区鼠标消息。 窗口的非工作区由边框、菜单栏、标题栏、滚动条、窗口菜单、最小化按钮和最大化按钮组成。<br>

系统生成非工作区消息，主要供其自身使用。 例如，当光标热点移动到窗口的边框时，系统使用非工作区消息将光标更改为双向箭头。 窗口必须将非工作区鼠标消息传递到 处理窗口 函数，才能利用内置鼠标接口。<br>

非工作区鼠标消息的 ④数据 参数是一个包含光标热点的 x 和 y 坐标的结构。 与工作区鼠标消息的坐标不同，坐标以屏幕坐标而不是工作区坐标指定。 在屏幕坐标系中，屏幕上的所有点都是相对于屏幕左上角坐标 (0,0) 指定。<br>
③参数 参数包含一个命中测试值，该值指示鼠标事件在非工作区中发生的位置。每当发生鼠标事件时，系统都会向包含光标热点的窗口或捕获鼠标的窗口发送 光标离开 消息。<br>
③参数:命中测试值可以是以下值之一。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>释义</td></tr>
<tr><td>HTERROR</td><td-2</td><td>在屏幕背景上或窗口之间的分割线上（处理窗口 函数会生成系统蜂鸣音以指示错误）。</td></tr>
<tr><td>HTTRANSPARENT</td><td>-1</td><td>在当前被同一线程中的另一窗口覆盖的窗口中。</td></tr>
<tr><td>HTNOWHERE</td><td>0</td><td>在屏幕背景上，或在窗口之间的分隔线上。</td></tr>
<tr><td>HTCLIENT</td><td>1</td><td>在工作区中。</td></tr>
<tr><td>HTCAPTION</td><td>2</td><td>在标题栏中。</td></tr>
<tr><td>HTSYSMENU</td><td>3</td><td>在子窗口的“系统”菜单或“关闭”按钮中。</td></tr>
<tr><td>HTGROWBOX</td><td>4</td><td>在大小框中（与 HTSIZE 相同）。</td></tr>
<tr><td>HTSIZE</td><td>4</td><td>在大小框中（与 HTGROWBOX 相同）。</td></tr>
<tr><td>HTMENU</td><td>5</td><td>在菜单中。</td></tr>
<tr><td>HTHSCROLL</td><td>6</td><td>在水平滚动条中。</td></tr>
<tr><td>HTVSCROLL</td><td>7</td><td>在垂直滚动条中。</td></tr>
<tr><td>HTMINBUTTON</td><td>8</td><td>在“最小化”按钮中。</td></tr>
<tr><td>HTREDUCE</td><td>8</td><td>在“最小化”按钮中。</td></tr>
<tr><td>HTZOOM</td><td>9</td><td>在“最大化”按钮中。</td></tr>
<tr><td>HTMAXBUTTON</td><td>9</td><td>在“最大化”按钮中。</td></tr>
<tr><td>HTLEFT</td><td>10</td><td>在窗口的左边框中。</td></tr>
<tr><td>HTRIGHT</td><td>11</td><td>在窗口的右边框中。</td></tr>
<tr><td>HTTOP</td><td>12</td><td>在窗口的上水平边框中。</td></tr>
<tr><td>HTTOPLEFT</td><td>13</td><td>在窗口边框的左上角。</td></tr>
<tr><td>HTTOPRIGHT</td><td>14</td><td>在窗口边框的右上角。</td></tr>
<tr><td>HTBOTTOM</td><td>15</td><td>在窗口的下水平边框中。</td></tr>
<tr><td>HTBOTTOMLEFT</td><td>16</td><td>在窗口边框的左下角。</td></tr>
<tr><td>HTBOTTOMRIGHT</td><td>17</td><td>在窗口边框的右下角。</td></tr>
<tr><td>HTBORDER</td><td>18</td><td>在没有大小调整边框的窗口边框中。</td></tr>
<tr><td>HTOBJECT</td><td>19</td><td>对象。</td></tr>
<tr><td>HTCLOSE</td><td>20</td><td>在“关闭”按钮中。</td></tr>
<tr><td>HTHELP</td><td>21</td><td>在“帮助”按钮中。</td></tr>
</table>

<b>鼠标输入通知</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量数值</td><td>英文名称</td><td>释义</td></tr>
<tr><td>捕获光标</td><td>$0020</td><td>WM_SETCURSOR</td><td>若鼠标光标在某窗口内移动且鼠标没被捕获时,就会发送本消息给某个窗口。③参数:窗口;④数据:命中消息</td></tr>
<tr><td>拖曳后窗</td><td>$0021</td><td>WM_MOUSEACTIVATE</td><td>当鼠标光标在某个未激活窗口内,而用户正按着鼠标的某个键时,会发送本消息给当前窗口。③参数:父窗;④数据:命中消息；<br>返回值：1激活窗口不丢弃鼠标，2激活丢弃鼠标，3不激活不丢弃，4不激活丢弃鼠标</td></tr>
<tr><td>点击右键</td><td>$007B</td><td>WM_CONTEXTMENU</td><td>当用户在某窗口中点击右键就发送本消息给该窗口,设置右键菜单。③参数:窗口;④数据:屏幕坐标x/y</td></tr>
<tr><td>命令事件</td><td>$0111</td><td>WM_COMMAND</td><td>用户选择一条菜单命令项或某控件发送一条通知消息给其父窗,或某快捷键被翻译时,本消息被发送。③参数:低位=编号,高位=事件;④数据:控件;菜单高位0,快捷键高位1,两者数据都是0</td></tr>
<tr><td>系统命令</td><td>$0112</td><td>WM_SYSCOMMAND</td><td>当用户选择一条系统菜单命令、用户最大化或最小化或还原或关闭时。③参数:命令;④数据:点菜单时鼠标位置</td></tr>
<tr><td>程序命令</td><td>$319</td><td>WM_APPCOMMAND</td><td>用户点击应用程序命令按钮或键盘命令键(如导航刷新搜索)③参数:窗口;④数据:命令/设备/按键</td></tr>
<tr><td>鼠标移动</td><td>$0200</td><td>WM_MOUSEMOVE</td><td>当鼠标在窗口客户区移动时。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>按下左键</td><td>$0201</td><td>WM_LBUTTONDOWN</td><td>当鼠标左键在窗口客户区按下。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>释放左键</td><td>$0202</td><td>WM_LBUTTONUP</td><td>当鼠标左键在窗口客户区放开。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>双击左键</td><td>$0203</td><td>WM_LBUTTONDBLCLK</td><td>当鼠标左键在窗口客户区双击。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>按下右键</td><td>$0204</td><td>WM_RBUTTONDOWN</td><td>当鼠标右键在窗口客户区按下。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>释放右键</td><td>$0205</td><td>WM_RBUTTONUP</td><td>当鼠标右键在窗口客户区放开。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>双击右键</td><td>$0206</td><td>WM_RBUTTONDBLCLK</td><td>当鼠标右键在窗口客户区双击。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>按下中键</td><td>$0207</td><td>WM_MBUTTONDOWN</td><td>当鼠标中键在窗口客户区按下。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>释放中键</td><td>$0208</td><td>WM_MBUTTONUP</td><td>当鼠标中键在窗口客户区放开。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>双击中键</td><td>$0209</td><td>WM_MBUTTONDBLCLK</td><td>当鼠标中键在窗口客户区双击。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>滚轮转动</td><td>$020A</td><td>WM_MOUSEWHEEL</td><td>当滚动鼠标滚轮时发送。③参数:高位120向后,-120向前;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>侧键按下</td><td>$020B</td><td>WM_XBUTTONDOWN</td><td>用户按下X按钮时发布。③参数:高位1第一个X按钮,2第二个X按钮;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>侧键松开</td><td>$020C</td><td>WM_XBUTTONUP</td><td>用户松开X按钮时发布。③参数:高位1第一个X按钮,2第二个X按钮;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>侧键双击</td><td>$020D</td><td>WM_XBUTTONDBLCLK</td><td>用户双击X按钮时发布。③参数:高位1第一个X按钮,2第二个X按钮;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>鼠标滚轮</td><td>$020E</td><td>WM_MOUSEHWHEEL</td><td>当鼠标的水平滚轮倾斜或旋转时发送。③参数:高位120向后,-120向前;低位1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>失去鼠标</td><td>$215</td><td>WM_CAPTURECHANGED</td><td>当它失去捕获的鼠标时,发送本消息给窗口。③参数:0;④数据:窗口</td></tr>
<tr><td>移动消息</td><td>$216</td><td>WM_MOVING</td><td>当用户在移动窗口时发送本消息,通过本消息应用程序以监视窗口大小和位置,也可修改它们。③参数:0;④数据:矩形类</td></tr>
<tr><td>拖放文件</td><td>$233</td><td>WM_DROPFILES</td><td>鼠标拖放时,放下事件产生时发送本消息,比如:文件拖放功能。③参数:文件;④数据:0</td></tr>
<tr><td>鼠标经外</td><td>$2A0</td><td>WM_NCMOUSEHOVER</td><td>当光标悬停在窗口的非工作区上的达到指定时间发送本消息。③参数:命中值;④数据:坐标类;</td></tr>
<tr><td>鼠标经过</td><td>$2A1</td><td>WM_MOUSEHOVER</td><td>当光标悬停在窗口的工作区上的达到指定时间发送本消息。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
<tr><td>鼠标离外</td><td>$2A2</td><td>WM_NCMOUSELEAVE</td><td>当光标离开之前调用 TrackMouseEvent 中指定的窗口的非工作区时发送本消息。③参数:0;④数据:0;</td></tr>
<tr><td>鼠标离开</td><td>$2A3</td><td>WM_MOUSELEAVE</td><td>鼠标离开控件时,触发发送本消息。③参数:1左键,2右键,4SHIFT,8CTRL,$10中键,$20=X1,$40=X2;④数据:坐标x/y;</td></tr>
</table>
<b>键盘鼠标——结构类型</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>鼠标点类</td><td>MOUSEINPUT</td><td>24</td><td>用来表示鼠标点位置。</td></tr>
<tr><th colspan=4>鼠标点类——成员表</th></tr>
<tr><td>左</td><td>dx</td><td>整数</td><td>鼠标的 x 坐标或移动的像素数。</td></tr>
<tr><td>顶</td><td>dy</td><td>整数</td><td>鼠标的 y 坐标或移动的像素数。</td></tr>
<tr><td>方向</td><td>mouseData</td><td>整数</td><td>取按键时1是左键,2是右键,取滚轮时正值向前滚动,负数向后滚动</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>一组位标志。1鼠标移动,2按下左键,4松开左键,8按下右键,16松开右键,32按下中键,64松开是中键,<br>128按下X键,256松开X键,$800滚轮移动,$1000滚轮水平移动,$4000桌面坐标,$8000绝对坐标</td></tr>
<tr><td>时间</td><td>time</td><td>整数</td><td>鼠标坐标的时间戳。（以毫秒为单位）</td></tr>
<tr><td>扩展</td><td>dwExtraInfo</td><td>整数</td><td>与此坐标关联的其他信息。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>移动点类</td><td>MOUSEMOVEPOINT</td><td>16</td><td>用来表示鼠标移动位置。</td></tr>
<tr><th colspan=4>移动点类——成员表</th></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>鼠标的 x 坐标。</td></tr>
<tr><td>顶</td><td>y</td><td>整数</td><td>鼠标的 y 坐标。</td></tr>
<tr><td>时间</td><td>time</td><td>整数</td><td>鼠标坐标的时间戳。（以毫秒为单位）</td></tr>
<tr><td>扩展</td><td>dwExtraInfo</td><td>整数</td><td>与此坐标关联的其他信息。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>键盘类</td><td>KEYBDINPUT</td><td>16</td><td>包含有关模拟键盘事件的信息。</td></tr>
<tr><th colspan=4>键盘类——成员表</th></tr>
<tr><td>键码</td><td>wVkScan</td><td>整数</td><td>虚拟密钥代码和密钥的硬件扫描代码。如果 标志 指定 4或8 则低位是0,高位宽字符</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>指定击键的各个方面。1扫描码两字节(E0xx),2释放密钥(否则按键),4合成宽字符键,8扫描码</td></tr>
<tr><td>时间</td><td>time</td><td>整数</td><td>鼠标坐标的时间戳。（以毫秒为单位）</td></tr>
<tr><td>扩展</td><td>dwExtraInfo</td><td>整数</td><td>与此坐标关联的其他信息。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>硬件输入类</td><td>HARDWAREINPUT</td><td>8</td><td>包含有关由键盘或鼠标以外的输入设备生成的模拟消息的信息。</td></tr>
<tr><th colspan=4>硬件输入类——成员表</th></tr>
<tr><td>消息</td><td>uMsg</td><td>整数</td><td>输入硬件生成的消息。</td></tr>
<tr><td>参数</td><td>wParam</td><td>整数</td><td>消息的参数值。</td></tr>
</table>
<b>键盘鼠标——功能函数</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>激活布局</td><td>ActivateKeyboardLayout</td><td>激活布局(处理,标志)</td><td>接受输入法区域标识，用于标识语言环境以及键盘的物理布局。处理=1下个;0上个;标志=8开头排序 $40000000重置 $10000大写锁定 $100激活窗口焦点</td></tr>
<tr><td>阻塞输入</td><td>BlockInput</td><td>阻塞输入(真)</td><td>阻塞键盘及鼠标事件到达应用程序。参数为真将被阻塞,参数为假不被阻塞。</td></tr>
<tr><td>原始输入</td><td>DefRawInputProc</td><td>原始输入(0,0,大小)</td><td>仅检查原始输入结构的预期大小。</td></tr>
<tr><td>拖曳检测</td><td>DragDetect</td><td>拖曳检测(窗口,初始坐标)</td><td>捕获鼠标并跟踪其移动，直到用户释放左键、按 ESC 键或将鼠标移动到拖动矩形外的指定点。</td></tr>
<tr><td>控制窗口</td><td>EnableWindow</td><td>控制窗口(窗口,真)</td><td>启用或禁用鼠标和键盘输入到指定的窗口或控件</td></tr>
<tr><td>活动窗口</td><td>GetActiveWindow</td><td>窗口=活动窗口</td><td>获得与当前进程的活动窗口</td></tr>
<tr><td>激活窗口</td><td>SetActiveWindow</td><td>激活窗口(窗口)</td><td>激活一个位于前台的窗口,并置顶.后台窗口无效.</td></tr>
<tr><td>鼠标窗口</td><td>GetCapture</td><td>窗口=鼠标窗口</td><td>取得捕获了鼠标的窗口（如果存在）的句柄</td></tr>
<tr><td>捕获鼠标</td><td>SetCapture</td><td>捕获鼠标(窗口)</td><td>让指定窗口捕获鼠标,所有的鼠标输入都被定向到该窗口</td></tr>
<tr><td>焦点窗口</td><td>GetFocus</td><td>窗口=焦点窗口</td><td>获取具有键盘焦点的窗口句柄</td></tr>
<tr><td>设置焦点</td><td>SetFocus</td><td>设置焦点(窗口)</td><td>将键盘焦点设置为指定的窗口</td></tr>
<tr><td>取代码页</td><td>GetKBCodePage</td><td>页码=取代码页</td><td>返回当前代码页。</td></tr>
<tr><td>按键开关</td><td>GetAsyncKeyState</td><td>状态=按键开关(键码)</td><td>确定在调用函数时键是打开还是关闭</td></tr>
<tr><td>键名密钥</td><td>GetKeyNameTextA</td><td>键名密钥(键值,名称,长度)</td><td>检索表示键名称的字符串。</td></tr>
<tr><td>按键状态</td><td>GetKeyState</td><td>状态=按键状态(键码)</td><td>检索指定虚拟键的状态。状态指定键是向上、向下还是切换</td></tr>
<tr><td>取输入法</td><td>GetKeyboardLayout</td><td>标识=取输入法(线程)</td><td>检索活动输入法区域设置标识符（以前称为键盘布局）</td></tr>
<tr><td>输入法表</td><td>GetKeyboardLayoutList</td><td>输入法表(数量,表组)</td><td>检索输入法区域设置标识符到指定的缓冲区。</td></tr>
<tr><td>输入法名</td><td>GetKeyboardLayoutNameA</td><td>输入法名(名称)</td><td>检索系统的活动输入法区域设置标识符的名称。</td></tr>
<tr><td>键盘状态</td><td>GetKeyboardState</td><td>键盘状态(键表)</td><td>将 256 个虚拟密钥的状态复制到指定的缓冲区。</td></tr>
<tr><td>输入键盘</td><td>SetKeyboardState</td><td>输入键盘(键表)</td><td>将键盘键状态数组复制到调用线程的键盘输入状态表中。</td></tr>
<tr><td>输入时间</td><td>GetLastInputInfo</td><td>输入时间(信息)</td><td>检索上次输入事件的时间。</td></tr>
<tr><td>键盘类型</td><td>GetKeyboardType</td><td>信息=键盘类型(种类)</td><td>检索有关当前键盘的信息。种类0=键盘 1子键盘 2功能键</td></tr>
<tr><td>双击时间</td><td>GetDoubleClickTime</td><td>毫秒=双击时间</td><td>获得鼠标当前的双击时间间隔的毫秒数</td></tr>
<tr><td>设置双击</td><td>SetDoubleClickTime</td><td>设置双击(毫秒)</td><td>设置鼠标当前的双击时间间隔的毫秒数</td></tr>
<tr><td>鼠标轨迹</td><td>GetMouseMovePoints</td><td>鼠标轨迹(大小,结构,缓冲,点数,方式)</td><td>用来最多 64 个鼠标或笔的先前坐标的历史记录。方式=1分辨率 2像素点</td></tr>
<tr><td>开输入法</td><td>LoadKeyboardLayoutA</td><td>开输入法(名称,标识)</td><td>将新的输入法区域设置标识符加载到系统中。标识=1激活当前 2放到首选 8放到开头 $80激活刚才 $10替换已有</td></tr>
<tr><td>关输入法</td><td>UnloadKeyboardLayout</td><td>关输入法(标识)</td><td>卸载输入法区域设置标识符</td></tr>
</td></tr>
<tr><td>转换键码</td><td>MapVirtualKeyA</td><td>值=转换键码(代码,翻译)</td><td>将虚拟键代码映射为扫描代码或字符值，或将扫描代码转换为虚拟键代码。翻译=0虚拟密钥转扫描码 1扫描码转虚拟键码 2虚拟键码转字符值加密钥 3扫描码转虚拟键码分左右键</td></tr>
<tr><td>模拟按键</td><td>keybd_event</td><td>模拟按键(键码,硬码,动作,附加)</td><td>合成击键。系统会生成键盘按下和键盘松开的动作消息。已被淘汰请改用 发送输入</td></tr>
<tr><td>模拟鼠标</td><td>mouse_event</td><td>模拟鼠标(动作,左,上,数据,附加)</td><td>合成鼠标运动和按钮单击。功能已被取代。请改用 发送输入</td></tr>
<tr><td>键值扫描</td><td>OemKeyScan</td><td>键值扫描(字符值)</td><td>将 OEMASCII 代码 0 到 0x0FF 映射到 OEM 扫描代码(低序字)和偏移状态(高序字)。</td></tr>
<tr><td>发送输入</td><td>SendInput</td><td>发送输入(数量,数组,大小)</td><td>合成击键、鼠标动作和按钮单击。</td></tr>
<tr><td>工具通知</td><td>RegisterForTooltipDismissNotification</td><td>工具通知(窗口,标志)</td><td>注册或注销窗口以接收关闭其工具提示窗口的通知。标志:0=注册,1注销</td></tr>
<tr><td><a name="注册热键">注册热键</a></td><td>RegisterHotKey</td><td>注册热键(窗口,标识,修饰,键码)</td><td>定义当前线程的热键</td></tr>
<tr><td>注销热键</td><td>UnregisterHotKey</td><td>注销热键(窗口,标识)</td><td>释放当前线程的热键</td></tr>
<tr><td>释放鼠标</td><td>ReleaseCapture</td><td>释放鼠标</td><td>从当前线程中的窗口释放鼠标捕获，并恢复正常的鼠标输入处理</td></tr>
<tr><td>换左右键</td><td>SwapMouseButton</td><td>换左右键(真)</td><td>反转(真)或恢复(假)鼠标左键和右键的含义。</td></tr>
<tr><td>鼠标事件</td><td>TrackMouseEvent</td><td>鼠标事件(事件类)</td><td>当鼠标指针离开窗口或将鼠标悬停在窗口上一段指定时间时寄送消息。</td></tr>
<tr><td>键转字符</td><td>ToAscii</td><td>键转字符(键码,扫描,状态,@字符,标志)</td><td>将指定的虚拟键代码和键盘状态转换为相应的字符。标志:1菜单处于活动,0不活动</td></tr>
<tr><td>键转多字</td><td>ToAscii</td><td>键转多字(键码,扫描,状态,@字符,标志,区域)</td><td>将指定的虚拟键代码和键盘状态转换为相应的字符。标志:1菜单处于活动,0不活动</td></tr>
<tr><td>键转宽字</td><td>ToAscii</td><td>键转宽字(键码,扫描,状态,@宽字,大小,标志)</td><td>将指定的虚拟键代码和键盘状态转换为相应的宽字符。标志:1菜单处于活动,0不活动</td></tr>
<tr><td>键码宽字</td><td>ToAscii</td><td>键码宽字(键码,扫描,状态,@宽字,大小,标志,区域)</td><td>将指定的虚拟键代码和键盘状态转换为相应的宽字符。标志:1菜单处于活动,0不活动</td></tr>
<tr><td>转虚拟键</td><td>VkKeyScanA</td><td>键码=转虚拟键(字符)</td><td>将字符转换为当前键盘的相应虚拟键代码和 shift 状态。</td></tr>
<tr><td>字转键码</td><td>VkKeyScanExA</td><td>键码=转虚拟键(字符,输入法)</td><td>将字符转换为当前键盘的相应虚拟键代码和 shift 状态。由输入法标识的物理键盘布局来转换字符。</td></tr>
<tr><td>等待输入</td><td>WaitForInputIdle</td><td>等待输入(进程,毫秒)</td><td>等待指定的进程完成对其初始输入以及用户输入，直到超时间隔过去。</td></tr>
</table>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>坐标类</td><td>POINT</td><td>8</td><td>用来存储坐标位置的信息</td></tr>
<tr><th colspan=4>坐标类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>水平坐标位置。</td></tr>
<tr><td>顶</td><td>y</td><td>整数</td><td>垂直坐标位置。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>矩形类</td><td>RECT</td><td>16</td><td>用来表示一个矩形框的四条边位置。</td></tr>
<tr><th colspan=4>矩形类——成员表</th></tr>
<tr><td>左</td><td>left</td><td>整数</td><td>指定矩形框左上角的x坐标</td></tr>
<tr><td>顶</td><td>top</td><td>整数</td><td>指定矩形框左上角的y坐标</td></tr>
<tr><td>宽</td><td>right</td><td>整数</td><td>指定矩形框右下角的x坐标</td></tr>
<tr><td>高</td><td>bottom</td><td>整数</td><td>指定矩形框右下角的y坐标</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>快捷键类</td><td>ACCEL</td><td>6</td><td>包含有显示一个消息（对话框信息）的数据结构。</td></tr>
<tr><th colspan=4>快捷键类——成员表</th></tr>
<tr><td>行为</td><td>fVirt</td><td>整形</td><td>加速器行为。$10同时按住 ALT 键，8同时按住 CTRL 键，4同时按住 Shift 键，2不突出显示顶级菜单</td></tr>
<tr><td>键值</td><td>key</td><td>整形</td><td>可以是虚拟键代码或字符代码。</td></tr>
<tr><td>标识</td><td>cmd</td><td>整形</td><td>快捷键标识符。</td></tr>
</table><br>
<font size="6" color="#0000FF"><a name="窗口消息">窗口消息</a>——功能函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>调整窗口</td><td>AdjustWindowRect</td><td>调整窗口(矩形,样式,菜单)</td><td>依据所需客户矩形的大小以及风格样式是否有菜单，计算需要的窗口矩形的大小。</td></tr>
<tr><td>计算窗口</td><td>AdjustWindowRectEx</td><td>计算窗口(矩形,样式,菜单,扩展)</td><td>依据所需客户矩形的大小以及风格样式扩展是否有菜单，计算需要的窗口矩形的大小。</td></tr>
<tr><td>允许置顶</td><td>AllowSetForegroundWindow</td><td>允许置顶(窗口)</td><td>允许指定进程使用 窗口前台 函数设置前台窗口。调用进程必须已能够设置前台窗口。 </td></tr>
<tr><td>动画窗口</td><td>AnimateWindow</td><td>动画窗口(窗口,时间,选项)</td><td>选项有十余种动画形式,时间为毫秒</td></tr>
<tr><td>有效窗口</td><td>AnyPopup</td><td>有无=有效窗口</td><td>判断一个被属窗口，可见窗口，顶级弹出窗口，或层叠窗口是否在屏幕上存在。</td></tr>
<tr><td>处理线程</td><td>AttachThreadInput</td><td>处理线程(源线程,目标,方式)</td><td>将一个线程的处理机制附加到另一个线程。方式为真是附加,否则是分离</td></tr>
<tr><td>多窗位置</td><td>BeginDeferWindowPos</td><td>结构=多窗位置(窗口数)</td><td>返回指定数量窗口的位置结构信息</td></tr>
<tr><td>窗口置顶</td><td>BringWindowToTop</td><td>窗口置顶(窗口)</td><td>将指定的窗口置于Z顺序的顶部。如果窗口是顶级窗口，它将被激活</td></tr>
<tr><td>系统消息</td><td>BroadcastSystemMessageA</td><td>系统消息(选项,消息,标识,参数,数据)</td><td>广播系统消息。可以向应用程序，驱动程序，网络驱动，系统设备等系统组件发送消息。</td></tr>
<tr><td>消息挂钩</td><td>CallMsgFilterA</td><td>消息挂钩(消息类,代码)</td><td>将指定的消息和挂钩代码传递给相关联的钩子过程</td></tr>
<tr><td>继续挂钩</td><td>CallNextHookEx</td><td>继续挂钩(钩子,代码,参数,数据)</td><td>将钩子信息传递给当前钩子链中的下一个钩子过程</td></tr>
<tr><td>消息传递</td><td>CallWindowProc</td><td>消息传递(原址,窗口,消息,参数,数据)</td><td>将程序原来处理消息的函数信息传递到指定的窗口过程</td></tr>
<tr><td>层叠子窗</td><td>CascadeChildWindows</td><td>层叠子窗(窗口,方式)</td><td>层叠指定窗体的全部子窗口</td></tr>
<tr><td>级联窗口</td><td>CascadeWindows</td><td>级联窗口(窗口,方式,矩形,数量,数组)</td><td>将指定的窗口或指定父窗口的子窗口级联。方式2防止级联被禁子窗4按Z序排列.后三个参数可选</td></tr>
<tr><td>坐标子窗</td><td>ChildWindowFromPoint</td><td>子窗=坐标子窗(父窗,坐标)</td><td>返回父窗口中包含了指定点的第一个子窗口的句柄。</td></tr>
<tr><td>坐标某窗</td><td>ChildWindowFromPointEx</td><td>子窗=坐标某窗(父窗,坐标,跳过)</td><td>返回父窗口中包含了指定点的子窗口的句柄。0不跳1跳过隐藏,2跳过禁用4跳过透明</td></tr>
<tr><td>关闭桌面</td><td>CloseDesktop</td><td>关闭桌面(桌面名)</td><td>关闭打开的桌面对象句柄</td></tr>
<tr><td>关闭窗口</td><td>CloseWindow</td><td>关闭窗口(窗口)</td><td>关该函数最小化指定的窗口，但并不销毁该窗口。</td></tr>
<tr><td>关窗口站</td><td>CloseWindowStation</td><td>关窗口站(窗口)</td><td>关闭一个打开或创建的窗口站句柄。</td></tr>
<tr><td>创建子窗</td><td>CreateMDIWindowA</td><td>子窗=创建子窗(类名,标题,样式,</td><td>左,上,宽,高,父窗,实例,数据)</td></tr>
<tr><td>创建窗口</td><td>CreateWindowExA</td><td>窗口=创建窗口(扩展,类名,标题,样式,</td><td>左,上,宽,高,父窗,菜单/标识,实例,数据)</td></tr>
<tr><td>建窗口站</td><td>CreateWindowStationA</td><td>窗口=建窗口站(名称,0,权限,继承)</td><td>创建一个窗口站对象，将其与调用进程相关联，并将其分配给当前会话。</td></tr>
<tr><td>处理对话</td><td>DefDlgProcA</td><td>处理对话(对话,消息,参数,数据)</td><td>为程序定义的对话框类的窗口过程提供缺省的消息处理</td></tr>
<tr><td>处理框架</td><td>DefFrameProcA</td><td>处理框架(窗口,消息,参数,数据)</td><td>对任何多文档接口（MDI）框架窗口的窗口过程不处理的窗口消息提供缺省处理</td></tr>
<tr><td>处理子窗</td><td>DefMDIChildProcA</td><td>处理子窗(窗口,消息,参数,数据)</td><td>对任何多文档接口（MDI）子窗口的窗口过程不能处理的窗口消息提供缺省处理</td></tr>
<tr><td>处理窗口</td><td>DefWindowProcA</td><td>处理窗口(窗口,消息,参数,数据)</td><td>为程序没有处理的窗口消息提供缺省的处理</td></tr>
<tr><td>创建对话</td><td>CreateDialogIndirectParamA</td><td>创建对话(实例,模板,窗口,@回调,数据)</td><td>从对话框模板创建一个无模式对话框。</td></tr>
<tr><td>资源对话</td><td>CreateDialogParamA</td><td>资源对话(实例,模板,窗口,@回调,数据)</td><td>从对话框模板资源创建一个无模式对话框。</td></tr>
<tr><td>模态对话</td><td>DialogBoxIndirectParamA</td><td>模态对话(实例,模板,窗口,@回调,数据)</td><td>从对话框模板创建一个模态对话框。</td></tr>
<tr><td>资源模态</td><td>DialogBoxParamA</td><td>资源模态(实例,模板,窗口,@回调,数据)</td><td>从对话框模板资源创建一个模态对话框。</td></tr>
<tr><td>销毁窗口</td><td>DestroyWindow</td><td>销毁窗口</td><td>销毁指定的窗口。发送程序关闭消息到窗口并从中删除键盘焦点。</td></tr>
<tr><td>分派消息</td><td>DispatchMessageA</td><td>分派消息(消息类)</td><td>将消息分派给窗口过程。</td></tr>
<tr><td>控制多窗</td><td>EndDeferWindowPos</td><td>控制多窗(多窗位置(n))</td><td>在一个单一的屏幕刷新周期内同时更新一个或多个窗口的位置和大小。</td></tr>
<tr><td>枚举子窗</td><td>EnumChildWindows</td><td>枚举子窗(窗口,@回调函数,0)</td><td>枚举指定窗口的所有子窗口，并将窗口句柄传送给应用程序定义的回调函数。</td></tr>
<tr><td>枚举全窗</td><td>EnumDesktopWindows</td><td>枚举全窗(桌面,@回调函数,0)</td><td>枚举指定桌面的所有窗口，并将窗口句柄传送给应用程序定义的回调函数。</td></tr>
<tr><td>枚举桌面</td><td>EnumDesktopsA</td><td>枚举桌面(桌面,@回调函数,0)</td><td>枚举指定桌面的所有窗口，并将窗口句柄传送给应用程序定义的回调函数。</td></tr>
<tr><td>枚举线程</td><td>EnumThreadWindows</td><td>枚举线程(线程,@回调函数,0)</td><td>枚举指定线程的相关窗口，并将窗口句柄传送给应用程序定义的回调函数。</td></tr>
<tr><td>枚举窗口</td><td>EnumWindows</td><td>枚举窗口(@回调函数,0)</td><td>枚举所有屏幕上的顶层窗口，并将窗口句柄传送给应用程序定义的回调函数。</td></tr>
<tr><td>枚举属性</td><td>EnumPropsA</td><td>枚举属性(窗口,@回调函数)</td><td>枚举窗口的属性列表中的所有条目。</td></tr>
<tr><td>查找窗口</td><td>FindWindowA</td><td>窗口=查找窗口(类名,标题名)</td><td>通过类名或者标题名查找程序窗口</td></tr>
<tr><td>切换信息</td><td>GetAltTabInfoA</td><td>切换信息(窗口,索引,切换类,项名,大小)</td><td>如果指定窗口是应用程序切换 (ALT+TAB) 窗口，则检索指定窗口的状态信息。</td></tr>
<tr><td>窗口上级</td><td>GetAncestor</td><td>窗口=窗口上级(窗口,方式)</td><td>检索指定窗口的上级句柄。方式:1取父窗口,2取根窗口,3父窗口和所有者窗口链拥有的根窗口</td></tr>
<tr><td><a name="获取消息">获取消息</a></td><td>GetMessageA</td><td>获取消息(消息,窗口,首个,最后)</td><td>从调用线程的消息队列中检索消息，并将其放在指定的消息结构中。</td></tr>
<tr><td><a name="查探消息">查探消息</a></td><td>PeekMessageA</td><td>查探消息(消息,窗口,首个,最后,标志)</td><td>从调用线程的消息队列中检索消息，并将其放在指定的消息结构中。标志=0保留消息 1清除消息 2不释放空闲</td></tr>
<tr><td><a name="翻译消息">翻译消息</a></td><td>TranslateMessage</td><td>翻译消息(消息)</td><td>将虚拟密钥消息转换为字符消息。</td></tr>
<tr><td>额外消息</td><td>GetMessageExtraInfo</td><td>信息=额外消息</td><td>检索当前线程的额外消息信息。</td></tr>
<tr><td>附加消息</td><td>SetMessageExtraInfo</td><td>附加消息(信息)</td><td>设置当前线程的额外消息信息。</td></tr>
<tr><td>游标位置</td><td>GetMessagePos</td><td>位置=游标位置</td><td>检索 获取消息 函数检索的最后一条消息的游标位置。低位是x高位是y</td></tr>
<tr><td>消息时间</td><td>GetMessageTime</td><td>时间=消息时间</td><td>检索 获取消息 函数检索的最后一条消息的时间。</td></tr>
<tr><td>桌面窗口</td><td>GetDesktopWindow</td><td>桌面=桌面窗口</td><td>返回Windows桌面窗口的句柄</td></tr>
<tr><td>前台窗口</td><td>GetForegroundWindow</td><td>窗口=前台窗口</td><td>获得前台窗口的句柄（用户当前正在使用的窗口）</td></tr>
<tr><td>窗口前台</td><td>SetForegroundWindow</td><td>窗口前台(窗口)</td><td>让指定窗口的线程放入前台并激活该窗口</td></tr>
<tr><td>界面信息</td><td>GetGUIThreadInfo</td><td>界面信息(线程,信息)</td><td>获得有关活动窗口或指定 GUI 线程的信息。</td></tr>
<tr><td>取类信息</td><td>GetClassInfoA</td><td>取类信息(实例,类名,信息)</td><td>获取有关窗口类的信息。</td></tr>
<tr><td>取类数据</td><td>GetClassInfoExA</td><td>取类数据(实例,类名,信息)</td><td>检索有关窗口类的信息，包括与窗口类关联的小图标的句柄。</td></tr>
<tr><td>获取类值</td><td>GetClassLongA</td><td>值=获取类值(窗口,位置)</td><td>获取指定窗口所属类结构的指定偏移位置的数值</td></tr>
<tr><td>修改类值</td><td>SetClassLongA</td><td>修改类值(窗口,位置,新值)</td><td>修改指定窗口所属类结构的指定偏移位置的数值</td></tr>
<tr><td>获取类名</td><td>GetClassNameA</td><td>值=获取类名(窗口,名称,长度)</td><td>获取指定窗口所属类结构的类名</td></tr>
<tr><td>取客户区</td><td>GetClientRect</td><td>取客户区(窗口,坐标)</td><td>获取窗口的客户区域的矩形坐标。</td></tr>
<tr><td>最后活动</td><td>GetLastActivePopup</td><td>窗口=最后活动(窗口)</td><td>确定指定窗口拥有的哪个弹出窗口最近处于活动状态。</td></tr>
<tr><td>取透明度</td><td>GetLayeredWindowAttributes</td><td>取透明度(窗口,@颜色,@透明度,@方式)</td><td>检索分层窗口的不透明度和透明度颜色键。方式:1透明颜色2透明度</td></tr>
<tr><td>设置透明</td><td>SetLayeredWindowAttributes</td><td>设置透明(窗口,颜色,透明度,方式)</td><td>用于设置分层窗口透明度，方式:0颜色无效1透明无效2均有效</td></tr>
<tr><td>输入状态</td><td>GetInputState</td><td>状态=输入状态</td><td>确定调用线程的消息队列中是否存在鼠标按钮或键盘消息。</td></tr>
<tr><td>取父窗口</td><td>GetParent</td><td>窗口=取父窗口(窗口)</td><td>检索指定窗口的父窗口或所有者的句柄。</td></tr>
<tr><td>改父窗口</td><td>SetParent</td><td>改父窗口(子窗,父窗)</td><td>更改指定子窗口的父窗口。</td></tr>
<tr><td>取窗口站</td><td>GetProcessWindowStation</td><td>站=取窗口站</td><td>返回与调用进程相关联的窗口工作站的句柄。</td></tr>
<tr><td>改窗口站</td><td>SetProcessWindowStation</td><td>改窗口站(站)</td><td>将指定的窗口站分配给调用进程。</td></tr>
<tr><td>默认布局</td><td>GetProcessDefaultLayout</td><td>默认布局(@布局)</td><td>检索在创建没有父级或所有者的窗口时使用的默认布局。</td></tr>
<tr><td>窗口属性</td><td>GetPropA</td><td>属性=窗口属性(窗口,名称)</td><td>从给定窗口的属性列表中检索指定原子或名称的数据句柄。</td></tr>
<tr><td>属性窗口</td><td>SetPropA</td><td>属性窗口(窗口,名称,数值)</td><td>在指定窗口的属性列表中添加新条目或更改现有条目。已存在则替换</td></tr>
<tr><td>删除属性</td><td>RemovePropA</td><td>删除属性(窗口,名称)</td><td>从指定窗口的属性列表中删除条目。</td></tr>
<tr><td>队列消息</td><td>GetQueueStatus</td><td>消息=队列消息(标志)</td><td>返回指示在调用线程的消息队列中找到的消息类型的标志。高位是当前消息,低位是之前消息</td></tr>
<tr><td>系统配置</td><td>GetSystemMetrics</td><td>数值=系统配置(参数)</td><td>检索各种系统指标和系统配置设置。</td></tr>
<tr><td>顶部窗口</td><td>GetTopWindow</td><td>窗口=顶部窗口(窗口)</td><td>窗口参数为0时返回Z序顶部的窗口,否则返回指定窗口的顶序子窗口.</td></tr>
<tr><td>获取窗口</td><td>GetWindow</td><td>窗口=获取窗口(窗口,关系)</td><td>返回与指定窗口有特定关系的窗口句柄,如同级首个,同级最后,同级下个等</td></tr>
<tr><td>取窗口值</td><td>GetWindowLongA</td><td>值=取窗口值(窗口,偏移)</td><td>获得指定窗口结构指定偏移位置的数值</td></tr>
<tr><td>改窗口值</td><td>SetWindowLongA</td><td>改窗口值(窗口,偏移,数值)</td><td>修改结构指定偏移位置的数值</td></tr>
<tr><td>取窗口字</td><td>GetWindowTextA</td><td>长度=取窗口字(窗口,内容,长度)</td><td>获得指定窗口标题文字</td></tr>
<tr><td>改窗口字</td><td>SetWindowTextA</td><td>长度=改窗口字(窗口,内容)</td><td>修改指定窗口的标题文字</td></tr>
<tr><td>窗口字长</td><td>GetWindowTextLengthA</td><td>长度=窗口字长(窗口)</td><td>获得指定窗口的标题栏文本或者控件文本的长度</td></tr>
<tr><td>窗口路径</td><td>GetWindowModuleFileNameA</td><td>窗口路径(窗口,路径,长度)</td><td>获得指定窗口的运行程序的完整路径和文件名称。</td></tr>
<tr><td>窗口边界</td><td>GetWindowRect</td><td>窗口边界(窗口,矩形)</td><td>获得指定窗口边界矩形的尺寸</td></tr>
<tr><td>线程桌面</td><td>GetThreadDesktop</td><td>桌面=线程桌面(线程)</td><td>返回与指定线程关联的桌面的句柄。</td></tr>
<tr><td>窗口进程</td><td>GetWindowThreadProcessId</td><td>线程ID=窗口进程(窗口,@进程ID)</td><td>获得指定窗口的线程ID,以及进程ID(可选)</td></tr>
<tr><td>框体消息</td><td>IsDialogMessageA</td><td>框体消息(窗口,消息)</td><td>确定消息是否针对指定的对话框，如果是，则处理消息。</td></tr>
<tr><td>正发消息</td><td>InSendMessage</td><td>正发消息</td><td>确定当前窗口过程正在处理使用 发送消息 函数从另一个线程发送到它的消息，则返回真。否则返回值为零。</td></tr>
<tr><td>在发消息</td><td>InSendMessageEx</td><td>在发消息(0)</td><td>确定当前窗口过程是否正在处理另一个线程发送的消息。返回:1来自 发送消息或待回消息,2来自 发出消息,4来自 发回消息,8已处理消息</td></tr>
<tr><td>是否窗口</td><td>IsWindow</td><td>是否窗口(窗口)</td><td>判断给定的窗口句柄是否为已存在的窗口</td></tr>
<tr><td>可用窗口</td><td>IsWindowEnabled</td><td>可用窗口(窗口)</td><td>判断指定的窗口是否允许接受键盘或鼠标输入</td></tr>
<tr><td>可见窗口</td><td>IsWindowVisible</td><td>可见窗口(窗口)</td><td>判断给定的窗口句柄是否显示</td></tr>
<tr><td>是否最大</td><td>IsZoomed</td><td>是否窗口(窗口)</td><td>判断窗口是否是最大化的窗口</td></tr>
<tr><td>创建计时</td><td>CreateSystemTimer</td><td>计时=创建计时(毫秒,@回调)</td><td>创建一个指定时间的系统计时器</td></tr>
<tr><td>删除计时</td><td>KillSystemTimer</td><td>删除计时(计时)</td><td>删除指定标识的计时器</td></tr>
<tr><td>删除定时</td><td>KillTimer</td><td>删除定时(窗口,标识)</td><td>删除指定标识的定时器</td></tr>
<tr><td>设置定时</td><td>SetTimer</td><td>设置定时(窗口,标识,毫秒,@回调)</td><td>创建指定时间的定时器,无窗口可忽略标识</td></tr>
<tr><td>移动窗口</td><td>MoveWindow</td><td>移动窗口(窗口,左,顶,宽,高,重绘)</td><td>改变窗口位置和尺寸</td></tr>
<tr><td>提示音</td><td>MessageBeep</td><td>提示音(0)</td><td>播放一个提示音,16 32 48 64有文件则是不同声音,其它数字都一样声</td></tr>
<tr><td>提交消息</td><td>PostMessageA</td><td>提交消息(窗口,消息,参数,数据)</td><td>把消息提交到指定窗口的队列,不等待处理</td></tr>
<tr><td>线程消息</td><td>PostThreadMessageA</td><td>线程消息(线程,消息,参数,数据)</td><td>把消息提交到指定线程的队列,不等待处理</td></tr>
<tr><td><a name="提交退出">提交退出</a></td><td>PostQuitMessage</td><td>提交退出(码)</td><td>向程序提交退出的消息，程序在窗体消息的参数收到此退出码</td></tr>
<tr><td>定位子窗</td><td>RealChildWindowFromPoint</td><td>定位子窗(父窗,坐标)</td><td>检索指定点处子窗口的句柄。搜索仅限于直接的子窗口;孙子孙女和更深的后代窗口不会被搜索。</td></tr>
<tr><td>取窗类名</td><td>RealGetWindowClassA</td><td>取窗类名(窗口,缓冲区,长度)</td><td>检索指定窗口类型的字符串。</td></tr>
<tr><td>注册窗类</td><td>RegisterClassA</td><td>注册窗类(窗口类)</td><td>注册一个窗口类，用于"创建窗口"</td></tr>
<tr><td>注册窗体</td><td>RegisterClassExA</td><td>注册窗体(窗体类)</td><td>注册一个窗口类，用于"创建窗口"</td></tr>
<tr><td>注销窗类</td><td>UnregisterClassA</td><td>注销窗类(类名,实例)</td><td>注销窗口类，释放该类所需的内存。</td></tr>
<tr><td>注册消息</td><td>RegisterWindowMessageA</td><td>注册消息(名称)</td><td>定义一个新的窗口消息，该消息保证在整个系统中是唯一的。发送消息时可以使用消息值。</td></tr>
<tr><td>回应消息</td><td>ReplyMessage</td><td>回应消息(结果)</td><td>回应消息可以让接收消息和发送消息的线程都能继续执行</td></tr>
<tr><td>控件消息</td><td>SendDlgItemMessageA</td><td>控件消息(窗口,控件,消息,参数,数据)</td><td>在对话框中向指定的控件发送消息。</td></tr>
<tr><td>发送消息</td><td>SendMessageA</td><td>发送消息(窗口,消息,参数,数据)</td><td>将指定的消息发送到窗口或多个窗口。在窗口过程处理该消息之前不返回</td></tr>
<tr><td>发回消息</td><td>SendMessageCallbackA</td><td>发回消息(窗口,消息,参数,数据,@回调,定义)</td><td>将指定的消息发送到窗口或多个窗口。立即返回并把结果传递给回调函数</td></tr>
<tr><td>发出消息</td><td>SendNotifyMessageA</td><td>发出消息(窗口,消息,参数,数据)</td><td>将指定的消息发送到窗口或多个窗口。本线程内在窗口过程处理该消息之前不返回,发给其它线程会立即返回</td></tr>
<tr><td>待回消息</td><td>SendMessageTimeoutA</td><td>待回消息(窗口,消息,参数,数据,行为,超时,结果)</td><td>将指定的消息发送到窗口或多个窗口。并根据指定行为和超时时间返回结果</td></tr>
<tr><td><a name="设置窗口">设置窗口</a></td><td>SetWindowPos</td><td>设置窗口(窗口,排序,左,顶,宽,高,标志)</td><td>更改窗口的大小、位置和 Z 顺序。</td></tr>
<tr><td>更新分层</td><td>UpdateLayeredWindow</td><td>更新分层(窗口,设备,位置,大小,<br>表面,尺寸,颜色,透明度,方式)</td><td>更新一个分层窗口的位置，大小，形状，内容和半透明度</td></tr>
<tr><td>显隐窗口</td><td>ShowWindow</td><td>显隐窗口(窗口,方式)</td><td>显示或者隐藏指定窗口</td></tr>
<tr><td>显示方式</td><td>ShowWindowAsync</td><td>显示方式(窗口,方式)</td><td>设置窗口的显示状态，而无需等待操作完成。</td></tr>
<tr><td>切换桌面</td><td>SwitchDesktop</td><td>切换桌面(桌面)</td><td>使指定的桌面可见并激活它。</td></tr>
<tr><td>窗口挂钩</td><td>SetWindowsHookExA</td><td>窗口挂钩(钩子,@函数,模块,线程)</td><td>将应用程序定义的挂接过程安装到挂接链中。</td></tr>
<tr><td>事件挂钩</td><td>SetWinEventHook</td><td>事件挂钩(低,高,模块,@函数,进程ID,线程ID,标志)</td><td>为一系列事件设置事件挂钩函数。</td></tr>
<tr><td>事件脱钩</td><td>UnhookWinEvent</td><td>事件脱钩(事件)</td><td>删除由上一次调用 挂钩事件 创建的事件挂钩函数。</td></tr>
<tr><td>窗口脱钩</td><td>UnhookWindowsHookEx</td><td>窗口脱钩(钩链)</td><td>删除通过 窗口挂钩 函数安装在钩子链中的钩子过程。</td></tr>
<tr><td>等待消息</td><td>WaitMessage</td><td>等待消息</td><td>当一个线程的消息队列中没有其他消息时，将控制权交给其他线程。</td></tr>
<tr><td>定点窗口</td><td>WindowFromPhysicalPoint</td><td>窗口=定点窗口(坐标)</td><td>检索包含指定点的窗口的句柄。</td></tr>
<tr><td>定位窗口</td><td>WindowFromPoint</td><td>窗口=定位窗口(坐标)</td><td>检索包含指定点的窗口的句柄。</td></tr>
<tr><td>打开桌面</td><td>OpenDesktopA</td><td>打开桌面(名称,限定,继承,方式)</td><td>返回一个现有桌面的句柄。限定=1允许程序在其它账户运行</td></tr>
<tr><td>恢复窗口</td><td>OpenIcon</td><td>恢复窗口(窗口)</td><td>将最小化窗口恢复到其先前的大小和位置;然后激活窗口。</td></tr>
<tr><td>声音警告</td><td>SoundSentry</td><td>声音警告</td><td>触发视觉信号以指示正在播放声音。</td></tr>
<tr><td>切换窗口</td><td>SwitchToThisWindow</td><td>切换窗口(窗口,切换)</td><td>将焦点切换到指定窗口，并将其置于前台。切换为真使用 Alt/Ctl+Tab 键切换窗口到前台。</td></tr>
<tr><td>系统参数</td><td>SystemParametersInfoA</td><td>系统参数(范围,附加,@数据,配置)</td><td>检索或设置<a href="#系统范围">系统范围参数</a>之一的值。配置:1=写入配置文件,2=更新广播WM_SETTINGCHANGE消息。</td></tr>
<tr><td>调试级别</td><td>SetDebugErrorLevel</td><td>调试级别(级别)</td><td>用于设置调试事件的最小错误级别，并将其传递给调试器。级别=0不报告 1报告普通错误 2包括小错误 3包括警告</td></tr>
<tr><td>设定错误</td><td>SetLastErrorEx</td><td>设定错误(错误,0)</td><td>设置最后一个错误代码。第二个参数无效。</td></tr>
<tr><td>显隐弹出</td><td>ShowOwnedPopups</td><td>显隐弹出(窗口,方式)</td><td>显示或隐藏指定窗口拥有的所有弹出窗口。</td></tr>
<tr><td>平铺窗口</td><td>TileWindows</td><td>平铺窗口(窗口,平铺,矩形类,子窗数,子窗组)</td><td>平铺指定父窗口的指定子窗口。平铺:1水平,2垂直;子窗口组为0排列所有</td></tr>
</table><a name="系统范围"><b>系统参数-范围常量数值</b></a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><th colspan=3>系统参数-辅助功能参数</th></tr>
<tr><td>SPI_GETACCESSTIMEOUT</td><td>0x003C</td><td>检索有关与辅助功能关联的超时期限的信息。⑶数据 参数必须指向接收信息的 ACCESSTIMEOUT 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(ACCESSTIMEOUT)。</td></tr>
<tr><td>SPI_GETAUDIODESCRIPTION</td><td>0x0074</td><td>确定是启用还是禁用音频说明。⑶数据 参数是指向 AUDIODESCRIPTION 结构的指针。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(AUDIODESCRIPTION)。虽然有视觉障碍的用户可能会听到视频内容中的音频，但视频中有很多没有相应音频的操作。 视频中发生情况的特定音频说明可帮助这些用户更好地了解内容。 此标志使你能够确定是否启用了音频说明以及使用哪种语言。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETCLIENTAREAANIMATION</td><td>0x1042</td><td>确定是启用还是禁用动画。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用动画时接收 真，否则为 假。显示功能（如闪烁、闪烁、闪烁和移动内容）可能会导致照片敏感癫痫用户癫痫发作。 通过此标志，可以确定是否在工作区中禁用了此类动画。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETDISABLEOVERLAPPEDCONTENT</td><td>0x1040</td><td>确定是启用还是禁用重叠内容。⑶数据 参数必须指向一个 BOOL 变量（如果启用）接收 真;否则，该变量必须指向 假。背景图像、纹理背景、文档上的水印、alpha 混合和透明度等显示功能会降低前景和背景之间的对比度，使视力不佳的用户更难看到屏幕上的对象。 此标志使你能够确定此类重叠内容是否已禁用。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETFILTERKEYS</td><td>0x0032</td><td>检索有关 FilterKeys 辅助功能的信息。⑶数据 参数必须指向接收信息的 FILTERKEYS 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(FILTERKEYS)。</td></tr>
<tr><td>SPI_GETFOCUSBORDERHEIGHT</td><td>0x2010</td><td>检索使用 DrawFocusRect 绘制的焦点矩形的上边缘和下边缘的高度（以像素为单位）。⑶数据 参数必须指向 UINT 值。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETFOCUSBORDERWIDTH</td><td>0x200E</td><td>检索使用 DrawFocusRect 绘制的焦点矩形的左右边缘的宽度（以像素为单位）。⑶数据 参数必须指向 UINT。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETHIGHCONTRAST</td><td>0x0042</td><td>检索有关 HighContrast 辅助功能的信息。⑶数据 参数必须指向接收信息的 HIGHCONTRAST 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(HIGHCONTRAST)。有关一般讨论，请参阅备注。</td></tr>
<tr><td>SPI_GETLOGICALDPIOVERRIDE</td><td>0x009E</td><td>检索一个值，该值确定Windows 8是使用硬件的默认缩放平台显示应用，还是转到下一个较高的平台。 此值基于当前“放大屏幕上的所有内容”设置，该设置位于电脑设置的“轻松使用”部分：1 表示打开，0 表示关闭。应用可以为以下每种缩放平台提供文本和图像资源：100%、140% 和 180%。 提供针对特定规模优化的单独资源可避免因调整大小而失真。 Windows 8根据多种因素（包括屏幕大小和像素密度）确定适当的缩放平台。 当选择“放大屏幕上的所有内容” (SPI_GETLOGICALDPIOVERRIDE 返回值 1) 时，Windows 将使用下一个较高平台中的资源。 例如，在 Windows 确定应使用 SCALE_100_PERCENT刻度的硬件的情况下，此替代会导致 Windows 使用 SCALE_140_PERCENT 缩放值，前提是它不违反其他约束。注意 不应使用此值。 它在后续版本的 Windows 中可能已更改或不可用。 请改用 GetScaleFactorForDevice 函数或 DisplayProperties 类来检索首选比例系数。 桌面应用程序应使用桌面逻辑 DPI，而不是比例系数。 可以通过 GetDeviceCaps 函数检索桌面逻辑 DPI。 </td></tr>
<tr><td>SPI_GETMESSAGEDURATION</td><td>0x2016</td><td>检索应显示通知弹出窗口的时间（以秒为单位）。⑶数据 参数必须指向接收消息持续时间的 ULONG。有视觉障碍或认知障碍（如 ADHD 和阅读障碍）的用户可能需要更长的时间才能阅读通知消息中的文本。 此标志使你能够检索消息持续时间。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSECLICKLOCK</td><td>0x101E</td><td>检索鼠标 ClickLock 功能的状态。⑶数据 参数必须指向一个 BOOL 变量（如果启用）接收 真;否则，该变量必须指向 假。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSECLICKLOCKTIME</td><td>0x2008</td><td>检索锁定主鼠标按钮之前的时间延迟。⑶数据 参数必须指向接收时间延迟（以毫秒为单位）的 DWORD。 仅当 SPI_SETMOUSECLICKLOCK 设置为 真 时，才会启用此功能。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSEKEYS</td><td>0x0036</td><td>检索有关 MouseKeys 辅助功能的信息。⑶数据 参数必须指向接收信息的 MOUSEKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(MOUSEKEYS)。</td></tr>
<tr><td>SPI_GETMOUSESONAR</td><td>0x101C</td><td>检索鼠标声纳功能的状态。⑶数据 参数必须指向一个 BOOL 变量，如果启用，则接收 真，否则接收 假。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSEVANISH</td><td>0x1020</td><td>检索鼠标消失功能的状态。⑶数据 参数必须指向一个 BOOL 变量，如果启用，则接收 真，否则接收 假。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETSCREENREADER</td><td>0x0046</td><td>确定屏幕审阅者实用工具是否正在运行。 屏幕审阅者实用工具将文本信息定向到输出设备，例如语音合成器或盲文显示器。 设置此标志后，应用程序应在以图形方式呈现信息的情况下提供文本信息。⑶数据 参数是指向 BOOL 变量的指针，如果屏幕审阅者实用工具正在运行，则接收 真，否则接收 假。注意 Windows 附带的屏幕阅读器“讲述人”未设置 SPI_SETSCREENREADER 或 SPI_GETSCREENREADER 标志。 </td></tr>
<tr><td>SPI_GETSERIALKEYS</td><td>0x003E</td><td>不支持此参数。Windows Server 2003 和 Windows XP/2000： 用户应通过控制面板控制此设置。</td></tr>
<tr><td>SPI_GETSHOWSOUNDS</td><td>0x0038</td><td>确定“显示声音”辅助功能标志是打开还是关闭。 如果它处于打开状态，则用户要求应用程序在仅以声音形式呈现信息的情况下直观显示信息。⑶数据 参数必须指向一个 BOOL 变量，如果功能处于打开状态，则接收 真;如果关闭，则为 假。使用此值等效于使用 SM_SHOWSOUNDS 调用 GetSystemMetrics。 这是建议的调用。</td></tr>
<tr><td>SPI_GETSOUNDSENTRY</td><td>0x0040</td><td>检索有关 SoundSentry 辅助功能的信息。⑶数据 参数必须指向接收信息的 SOUNDSENTRY 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(SOUNDSENTRY)。</td></tr>
<tr><td>SPI_GETSTICKYKEYS</td><td>0x003A</td><td>检索有关 StickyKeys 辅助功能的信息。⑶数据 参数必须指向接收信息的 STICKYKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(STICKYKEYS)。</td></tr>
<tr><td>SPI_GETTOGGLEKEYS</td><td>0x0034</td><td>检索有关 ToggleKeys 辅助功能的信息。⑶数据 参数必须指向接收信息的 TOGGLEKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(TOGGLEKEYS)。</td></tr>
<tr><td>SPI_SETACCESSTIMEOUT</td><td>0x003D</td><td>设置与辅助功能关联的超时期限。⑶数据 参数必须指向包含新参数的 ACCESSTIMEOUT 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(ACCESSTIMEOUT)。</td></tr>
<tr><td>SPI_SETAUDIODESCRIPTION</td><td>0x0075</td><td>打开或关闭音频说明功能。⑶数据 参数是指向 AUDIODESCRIPTION 结构的指针。虽然有视力障碍的用户可能会听到视频内容中的音频，但视频中有很多没有相应音频的操作。 视频中发生情况的特定音频说明可帮助这些用户更好地了解内容。 通过此标志，可以启用或禁用其提供的语言的音频说明。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETCLIENTAREAANIMATION</td><td>0x1043</td><td>打开或关闭工作区动画。⑶数据 参数是 BOOL 变量。 将⑶数据 设置为 真 以在工作区中启用动画和其他暂时性效果，或 将 假 设置为禁用它们。显示功能（如闪烁、闪烁、闪烁和移动内容）可能会导致照片敏感型癫痫用户癫痫发作。 使用此标志可以启用或禁用所有此类动画。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETDISABLEOVERLAPPEDCONTENT</td><td>0x1041</td><td>打开或关闭重叠的内容 (，例如背景图像和水印) 。⑶数据 参数是 BOOL 变量。 将⑶数据 设置为 真 可禁用重叠内容，将 假 设置为启用重叠内容。背景图像、纹理背景、文档上的水印、alpha 混合和透明度等显示功能会降低前景和背景之间的对比度，使视力不佳的用户更难在屏幕上看到对象。 通过此标志，可以启用或禁用所有此类重叠内容。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETFILTERKEYS</td><td>0x0033</td><td>设置 FilterKeys 辅助功能的参数。⑶数据 参数必须指向包含新参数的 FILTERKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(FILTERKEYS)。</td></tr>
<tr><td>SPI_SETFOCUSBORDERHEIGHT</td><td>0x2011</td><td>将 使用 DrawFocusRect 绘制的焦点矩形的上边缘和下边缘的高度设置为⑶数据 参数的值。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETFOCUSBORDERWIDTH</td><td>0x200F</td><td>将 使用 DrawFocusRect 绘制的焦点矩形的左边缘和右边缘的高度设置为⑶数据 参数的值。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETHIGHCONTRAST</td><td>0x0043</td><td>设置 HighContrast 辅助功能的参数。⑶数据 参数必须指向包含新参数的 HIGHCONTRAST 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(HIGHCONTRAST)。</td></tr>
<tr><td>SPI_SETLOGICALDPIOVERRIDE</td><td>0x009F</td><td>请勿使用。</td></tr>
<tr><td>SPI_SETMESSAGEDURATION</td><td>0x2017</td><td>设置通知弹出窗口应显示的时间（以秒为单位）。⑶数据 参数指定消息持续时间。有视觉障碍或认知障碍（如 ADHD 和阅读障碍）的用户可能需要更长的时间才能阅读通知消息中的文本。 使用此标志可以设置消息持续时间。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSECLICKLOCK</td><td>0x101F</td><td>打开或关闭鼠标 ClickLock 辅助功能。 当单击鼠标主按钮并按住 SPI_SETMOUSECLICKLOCKTIME指定的时间时，此功能会暂时锁定该按钮。⑶数据 参数为真开启。 默认值为 off。 有关详细信息，请参阅备注和 AboutMouse 输入。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSECLICKLOCKTIME</td><td>0x2009</td><td>调整锁定主鼠标按钮之前的时间延迟。⑵附加 参数应设置为 0。⑶数据 参数指向指定以毫秒为单位的时间延迟的 DWORD。 例如，为 1 秒延迟指定 1000。 默认值为 1200。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSEKEYS</td><td>0x0037</td><td>设置 MouseKeys 辅助功能的参数。⑶数据 参数必须指向包含新参数的 MOUSEKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(MOUSEKEYS)。</td></tr>
<tr><td>SPI_SETMOUSESONAR</td><td>0x101D</td><td>打开或关闭 Sonar 辅助功能。 当用户按下并释放 Ctrl 键时，此功能简要显示鼠标指针周围的几个同心圆。⑶数据 参数为真开启。 默认值为 off。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSEVANISH</td><td>0x1021</td><td>打开或关闭“消失”功能。 此功能在用户键入时隐藏鼠标指针;当用户移动鼠标时，指针再次出现。⑶数据 参数为真开启。 默认值为 off。 有关详细信息，请参阅 鼠标输入概述。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETSCREENREADER</td><td>0x0047</td><td>确定屏幕评审实用工具是否正在运行。⑵附加 参数为真开启。注意 Windows 附带的屏幕阅读器“讲述人”未设置 SPI_SETSCREENREADER 或 SPI_GETSCREENREADER 标志。 </td></tr>
<tr><td>SPI_SETSERIALKEYS</td><td>0x003F</td><td>不支持此参数。Windows Server 2003 和 Windows XP/2000： 用户应通过控制面板控制此设置。</td></tr>
<tr><td>SPI_SETSHOWSOUNDS</td><td>0x0039</td><td>打开或关闭 ShowSounds 辅助功能。⑵附加 参数为真开启。</td></tr>
<tr><td>SPI_SETSOUNDSENTRY</td><td>0x0041</td><td>设置 SoundSentry 辅助功能的参数。⑶数据 参数必须指向包含新参数的 SOUNDSENTRY 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(SOUNDSENTRY)。</td></tr>
<tr><td>SPI_SETSTICKYKEYS</td><td>0x003B</td><td>设置 StickyKeys 辅助功能的参数。⑶数据 参数必须指向包含新参数的 STICKYKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(STICKYKEYS)。</td></tr>
<tr><td>SPI_SETTOGGLEKEYS</td><td>0x0035</td><td>设置 ToggleKeys 辅助功能的参数。⑶数据 参数必须指向包含新参数的 TOGGLEKEYS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(TOGGLEKEYS)。</td></tr>
<tr><th colspan=3>系统参数-桌面参数</th></tr>
<tr><td>SPI_GETCLEARTYPE</td><td>0x1048</td><td>确定是否启用 ClearType。⑶数据 参数必须指向一个 BOOL 变量，如果启用 ClearType，则接收 真;否则，该变量必须指向 假。ClearType 是一种软件技术，可提高液晶显示器 (液晶显示器) 显示器上文本的可读性。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETDESKWALLPAPER</td><td>0x0073</td><td>检索桌面壁纸的位图文件的完整路径。⑶数据 参数必须指向缓冲区才能接收以 null 结尾的路径字符串。 将⑵附加 参数设置为⑶数据 缓冲区的大小（以字符为单位）。 返回的字符串不超过 MAX_PATH 个字符。 如果没有桌面壁纸，则返回的字符串为空。</td></tr>
<tr><td>SPI_GETDROPSHADOW</td><td>0x1024</td><td>确定是否启用投影效果。⑶数据 参数必须指向一个 BOOL 变量，如果启用，则返回 真;如果禁用，则返回 假。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETFLATMENU</td><td>0x1022</td><td>确定本机用户菜单是否具有平面菜单外观。⑶数据 参数必须指向一个 BOOL 变量，如果设置了平面菜单外观，则返回 真，否则返回 假。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETFONTSMOOTHING</td><td>0x004A</td><td>确定是否启用字体平滑功能。 此功能使用字体抗锯齿，通过绘制不同灰度级别的像素，使字体曲线看起来更平滑。⑶数据 参数必须指向一个 BOOL 变量，如果启用该功能，则接收 真;如果功能未启用，则为 假。</td></tr>
<tr><td>SPI_GETFONTSMOOTHINGCONTRAST</td><td>0x200C</td><td>检索 ClearType 平滑中使用的对比度值。⑶数据 参数必须指向接收信息的 UINT。 有效的对比度值为 1000 到 2200。 默认值为 1400。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETFONTSMOOTHINGORIENTATION</td><td>0x2012</td><td>检索字体平滑方向。⑶数据 参数必须指向接收信息的 UINT。 可能的值FE_FONTSMOOTHINGORIENTATIONBGR ( 蓝-绿-红) ，FE_FONTSMOOTHINGORIENTATIONRGB (红-绿-蓝) 。Windows XP/2000： 在具有 SP2 的 Windows XP 之前，不支持此参数。</td></tr>
<tr><td>SPI_GETFONTSMOOTHINGTYPE</td><td>0x200A</td><td>检索字体平滑的类型。⑶数据 参数必须指向接收信息的 UINT。 可能的值为 FE_FONTSMOOTHINGSTANDARD 和 FE_FONTSMOOTHINGCLEARTYPE。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETWORKAREA</td><td>0x0030</td><td>检索主显示器上工作区的大小。 工作区是屏幕的一部分，系统任务栏或应用程序桌面工具栏未遮挡。⑶数据 参数必须指向接收工作区坐标的 RECT 结构，以物理像素大小表示。 调用方的任何 DPI 虚拟化模式都不会影响此输出。若要获取主显示监视器以外的监视器的工作区域，请调用 GetMonitorInfo 函数。</td></tr>
<tr><td>SPI_SETCLEARTYPE</td><td>0x1049</td><td>打开或关闭 ClearType。⑶数据 参数是 BOOL 变量。 将⑶数据 设置为 真 以启用 ClearType，或 将 假 设置为禁用它。ClearType 是一种软件技术，可提高液晶显示器上文本的可读性。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETCURSORS</td><td>0x0057</td><td>重新加载系统游标。 将⑵附加 参数设置为零，将⑶数据 参数设置为 NULL。</td></tr>
<tr><td>SPI_SETDESKPATTERN</td><td>0x0015</td><td>通过使 Windows 从 WIN.INI 文件中读取 Pattern= 设置来设置当前桌面模式。</td></tr>
<tr><td>SPI_SETDESKWALLPAPER</td><td>0x0014</td><td>注意 使用 SPI_SETDESKWALLPAPER 标志时， SystemParametersInfo 返回 真 ，除非 (错误，例如指定文件不存在时) 。 </td></tr>
<tr><td>SPI_SETDROPSHADOW</td><td>0x1025</td><td>启用或禁用投影效果。 将⑶数据 设置为 真 以启用投影效果，将 假 设置为禁用它。 还必须在窗口类样式中 CS_DROPSHADOW 。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETFLATMENU</td><td>0x1023</td><td>启用或禁用本机用户菜单的平面菜单外观。 将⑶数据 设置为 真 以启用平面菜单外观，将 设置为 假 以禁用它。启用后，菜单栏将 COLOR_MENUBAR 用于菜单栏背景， COLOR_MENU 菜单弹出背景， COLOR_MENUHILIGHT 填充当前菜单选项， COLOR_HILIGHT 当前菜单选择的轮廓。 如果禁用，则使用与 Windows 2000 中相同的指标和颜色绘制菜单。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETFONTSMOOTHING</td><td>0x004B</td><td>启用或禁用字体平滑功能，该功能使用字体抗锯齿通过绘制不同灰度级别的像素使字体曲线更平滑。若要启用该功能，请将⑵附加 参数设置为 真。 若要禁用该功能，请将⑵附加 设置为 假。</td></tr>
<tr><td>SPI_SETFONTSMOOTHINGCONTRAST</td><td>0x200D</td><td>设置 ClearType 平滑中使用的对比度值。⑶数据 参数是对比度值。 有效的对比度值为 1000 到 2200。 默认值为 1400。
SPI_SETFONTSMOOTHINGTYPE 还必须设置为 FE_FONTSMOOTHINGCLEARTYPE。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETFONTSMOOTHINGORIENTATION</td><td>0x2013</td><td>设置字体平滑方向。⑶数据 参数FE_FONTSMOOTHINGORIENTATIONBGR (蓝-绿-红) 或FE_FONTSMOOTHINGORIENTATIONRGB (红-绿-蓝) 。Windows XP/2000： 在具有 SP2 的 Windows XP 之前，不支持此参数。</td></tr>
<tr><td>SPI_SETFONTSMOOTHINGTYPE</td><td>0x200B</td><td>设置字体平滑类型。 如果使用标准抗锯齿，则⑶数据 参数为FE_FONTSMOOTHINGSTANDARD;如果使用 ClearType，则为FE_FONTSMOOTHINGCLEARTYPE。 默认值为 FE_FONTSMOOTHINGSTANDARD。还必须设置SPI_SETFONTSMOOTHING 。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETWORKAREA</td><td>0x002F</td><td>设置工作区的大小。 工作区是屏幕的一部分，系统任务栏或应用程序桌面工具栏未遮挡。⑶数据 参数是指向 RECT 结构的指针，该结构指定以虚拟屏幕坐标表示的新工作区矩形。 在具有多个显示监视器的系统中，函数设置包含指定矩形的监视器的工作区域。</td></tr>
<tr><th colspan=3>系统参数-图标参数</th></tr>
<tr><td>SPI_GETICONMETRICS</td><td>0x002D</td><td>检索与图标关联的指标。⑶数据 参数必须指向接收信息的 ICONMETRICS 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(ICONMETRICS)。</td></tr>
<tr><td>SPI_GETICONTITLELOGFONT</td><td>0x001F</td><td>检索当前图标标题字体的逻辑字体信息。⑵附加 参数指定 LOGFONT 结构的大小，⑶数据 参数必须指向要填充的 LOGFONT 结构。</td></tr>
<tr><td>SPI_GETICONTITLEWRAP</td><td>0x0019</td><td>确定是否启用图标标题环绕。⑶数据 参数必须指向一个 BOOL 变量（如果启用）接收 真;否则，该变量必须指向 假。</td></tr>
<tr><td>SPI_ICONHORIZONTALSPACING</td><td>0x000D</td><td>设置或检索图标单元格的宽度（以像素为单位）。 系统使用此矩形在大图标视图中排列图标。若要设置此值，请将⑵附加 设置为新值，并将⑶数据 设置为 NULL。 不能将此值设置为小于 SM_CXICON。若要检索此值，⑶数据 必须指向接收当前值的整数。</td></tr>
<tr><td>SPI_ICONVERTICALSPACING</td><td>0x0018</td><td>设置或检索图标单元格的高度（以像素为单位）。若要设置此值，请将⑵附加 设置为新值，并将⑶数据 设置为 NULL。 不能将此值设置为小于 SM_CYICON。若要检索此值，⑶数据 必须指向接收当前值的整数。</td></tr>
<tr><td>SPI_SETICONMETRICS</td><td>0x002E</td><td>设置与图标关联的指标。⑶数据 参数必须指向包含新参数的 ICONMETRICS 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(ICONMETRICS)。</td></tr>
<tr><td>SPI_SETICONS</td><td>0x0058</td><td>重新加载系统图标。 将⑵附加 参数设置为零，将⑶数据 参数设置为 NULL。</td></tr>
<tr><td>SPI_SETICONTITLELOGFONT</td><td>0x0022</td><td>设置用于图标标题的字体。⑵附加 参数指定 LOGFONT 结构的大小，⑶数据 参数必须指向 LOGFONT 结构。</td></tr>
<tr><td>SPI_SETICONTITLEWRAP</td><td>0x001A</td><td>打开或关闭图标标题环绕。⑵附加 参数为真开启</td></tr>
<tr><th colspan=3>系统参数-输入参数。包括与键盘、鼠标、笔、输入语言和警告蜂鸣器相关的参数。</th></tr>
<tr><td>SPI_GETBEEP</td><td>0x0001</td><td>确定警告蜂鸣器是否已打开。⑶数据 参数必须指向一个 BOOL 变量，该变量在蜂鸣器处于打开状态时接收 真;如果关闭，则为 假。</td></tr>
<tr><td>SPI_GETBLOCKSENDINPUTRESETS</td><td>0x1026</td><td>检索一个 BOOL ，指示应用程序是否可以通过调用 SendInput 函数来模拟键盘或鼠标输入来重置屏幕保护程序计时器。 如果模拟输入将被阻止，⑶数据 参数必须指向接收 真 的 BOOL 变量;否则，该变量必须指向 假。</td></tr>
<tr><td>SPI_GETCONTACTVISUALIZATION</td><td>0x2018</td><td>检索当前联系人可视化设置。⑶数据 参数必须指向接收设置的 ULONG 变量。 有关详细信息，请参阅 联系人可视化。</td></tr>
<tr><td>SPI_GETDEFAULTINPUTLANG</td><td>0x0059</td><td>检索系统默认输入语言的输入区域设置标识符。⑶数据 参数必须指向接收此值的 HKL 变量。 有关详细信息，请参阅 语言、区域设置和键盘布局。</td></tr>
<tr><td>SPI_GETGESTUREVISUALIZATION</td><td>0x201A</td><td>检索当前手势可视化设置。⑶数据 参数必须指向接收设置的 ULONG 变量。 有关详细信息，请参阅 手势可视化。</td></tr>
<tr><td>SPI_GETKEYBOARDCUES</td><td>0x100A</td><td>确定菜单访问键是否始终带有下划线。⑶数据 参数必须指向一个 BOOL 变量，该变量在菜单访问键始终带有下划线时接收 真;如果仅在键盘激活菜单时才为 假，则为 假。</td></tr>
<tr><td>SPI_GETKEYBOARDDELAY</td><td>0x0016</td><td>检索键盘重复延迟设置，该值范围为 0 (大约 250 毫秒延迟) 到 3 (大约 1 秒延迟) 。 与每个值关联的实际延迟可能因硬件而异。⑶数据 参数必须指向接收设置的整数变量。</td></tr>
<tr><td>SPI_GETKEYBOARDPREF</td><td>0x0044</td><td>确定用户是否依赖于键盘而不是鼠标，并希望应用程序显示本来隐藏的键盘界面。 如果用户依赖键盘，⑶数据 参数必须指向接收 真 的 BOOL 变量;否则为 假。</td></tr>
<tr><td>SPI_GETKEYBOARDSPEED</td><td>0x000A</td><td>检索键盘重复速度设置，该值的范围是从 0 (大约 2.5 次每秒重复) 到 31 (大约每秒 30 次重复) 。 实际重复率取决于硬件，可能与线性比例相差多达 20%。⑶数据 参数必须指向接收设置的 DWORD 变量。</td></tr>
<tr><td>SPI_GETMOUSE</td><td>0x0003</td><td>检索两个鼠标阈值和鼠标加速。⑶数据 参数必须指向接收这些值的三个整数数组。 有关详细信息 ，请参阅mouse_event 。</td></tr>
<tr><td>SPI_GETMOUSEHOVERHEIGHT</td><td>0x0064</td><td>检索矩形的高度（以像素为单位），其中鼠标指针必须停留，以便 TrackMouseEvent 生成 WM_MOUSEHOVER 消息。⑶数据 参数必须指向接收高度的 UINT 变量。</td></tr>
<tr><td>SPI_GETMOUSEHOVERTIME</td><td>0x0066</td><td>检索鼠标指针必须停留在悬停矩形中的时间（以毫秒为单位），以便 TrackMouseEvent 生成 WM_MOUSEHOVER 消息。⑶数据 参数必须指向接收时间的 UINT 变量。</td></tr>
<tr><td>SPI_GETMOUSEHOVERWIDTH</td><td>0x0062</td><td>检索鼠标指针必须保留的矩形的宽度（以像素为单位），以便 TrackMouseEvent 生成 WM_MOUSEHOVER 消息。⑶数据 参数必须指向接收宽度的 UINT 变量。</td></tr>
<tr><td>SPI_GETMOUSESPEED</td><td>0x0070</td><td>检索当前鼠标速度。 鼠标速度根据鼠标移动的距离确定指针移动的距离。⑶数据 参数必须指向一个整数，该整数接收的值范围为 1 (最慢) 到 20 (最快) 。 默认值为 10。 该值可由最终用户使用鼠标控制面板应用程序设置，也可以由使用 SPI_SETMOUSESPEED的应用程序设置。</td></tr>
<tr><td>SPI_GETMOUSETRAILS</td><td>0x005E</td><td>确定是否启用鼠标跟踪功能。 此功能通过简要显示光标的踪迹并快速擦除它们来提高鼠标光标移动的可见性。⑶数据 参数必须指向接收值的整数变量。 如果值为零或 1，则禁用该功能。 如果值大于 1，则启用该功能，该值指示在跟踪中绘制的游标数。 不使用⑵附加 参数。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSEWHEELROUTING</td><td>0x201C</td><td>检索鼠标滚轮输入的路由设置。 路由设置确定是将鼠标滚轮输入发送到具有焦点 (前台) 的应用，还是将鼠标光标下的应用发送到应用。⑶数据 参数必须指向接收路由选项的 DWORD 变量。 不使用⑵附加 参数。如果值为零 (MOUSEWHEEL_ROUTING_FOCUS) ，则鼠标滚轮输入将传送到具有焦点的应用。 如果值为 1 (MOUSEWHEEL_ROUTING_HYBRID) ，鼠标滚轮输入将传送到具有焦点的应用 (桌面应用) 或鼠标指针下的应用 (Windows 应用商店应用) 。从Windows 10开始：如果值为 2 (MOUSEWHEEL_ROUTING_MOUSE_POS) ，则鼠标滚轮输入将传送到鼠标指针下的应用。 这是新的默认值，MOUSEWHEEL_ROUTING_HYBRID在“设置”中不再可用。</td></tr>
<tr><td>SPI_GETPENVISUALIZATION</td><td>0x201E</td><td>检索当前笔手势可视化设置。⑶数据 参数必须指向接收设置的 ULONG 变量。 有关详细信息，请参阅 触控笔可视化。</td></tr>
<tr><td>SPI_GETSNAPTODEFBUTTON</td><td>0x005F</td><td>确定是否启用对齐到默认按钮功能。 如果启用，鼠标光标会自动移动到对话框的默认按钮，例如 “确定” 或 “应用”。⑶数据 参数必须指向一个 BOOL 变量，如果功能处于打开状态，则接收 真;如果关闭，则为 假。</td></tr>
<tr><td>SPI_GETSYSTEMLANGUAGEBAR</td><td>0x1050</td><td>从Windows 8开始：确定是启用或禁用系统语言栏。 如果启用语言栏，⑶数据 参数必须指向接收 真 的 BOOL 变量;否则，该变量必须指向 假。</td></tr>
<tr><td>SPI_GETTHREADLOCALINPUTSETTINGS</td><td>0x104E</td><td>从Windows 8开始：确定活动输入设置是否具有每个线程的本地 (、TRUE) 还是全局 (会话、FALSE) 范围。⑶数据 参数必须指向 BOOL 变量。</td></tr>
<tr><td>SPI_GETWHEELSCROLLCHARS</td><td>0x006C</td><td>检索移动水平鼠标滚轮时要滚动的字符数。⑶数据 参数必须指向接收行数的 UINT 变量。 默认值为 3。</td></tr>
<tr><td>SPI_GETWHEELSCROLLLINES</td><td>0x0068</td><td>检索移动垂直鼠标滚轮时要滚动的行数。⑶数据 参数必须指向接收行数的 UINT 变量。 默认值为 3。</td></tr>
<tr><td>SPI_SETBEEP</td><td>0x0002</td><td>打开或关闭警告蜂鸣器。⑵附加 参数为真开启。</td></tr>
<tr><td>SPI_SETBLOCKSENDINPUTRESETS</td><td>0x1027</td><td>通过调用 SendInput 函数来模拟键盘或鼠标输入，确定应用程序是否可以重置屏幕保护程序计时器。 如果屏幕保护程序不会通过模拟输入停用， 则⑵附加 参数指定 真 ;如果屏幕保护程序将由模拟输入停用，则指定 假 。</td></tr>
<tr><td>SPI_SETCONTACTVISUALIZATION</td><td>0x2019</td><td>设置当前联系人可视化设置。⑶数据 参数必须指向标识设置的 ULONG 变量。 有关详细信息，请参阅 联系人可视化。注意 如果禁用联系人可视化效果，则无法启用手势可视化效果。 </td></tr>
<tr><td>SPI_SETDEFAULTINPUTLANG</td><td>0x005A</td><td>设置系统 shell 和应用程序的默认输入语言。 指定的语言必须使用当前系统字符集显示。⑶数据 参数必须指向包含默认语言的输入区域设置标识符的 HKL 变量。 有关详细信息，请参阅 语言、区域设置和键盘布局。</td></tr>
<tr><td>SPI_SETDOUBLECLICKTIME</td><td>0x0020</td><td>将鼠标的双击时间设置为⑵附加 参数的值。 如果⑵附加 值大于 5000 毫秒，系统会将双击时间设置为 5000 毫秒。双击时间是双击的第一次和第二次单击之间可能发生的最大毫秒数。 还可以调用 SetDoubleClickTime 函数来设置双击时间。 若要获取当前双击时间，请调用 GetDoubleClickTime 函数。</td></tr>
<tr><td>SPI_SETDOUBLECLKHEIGHT</td><td>0x001E</td><td>将双击矩形的高度设置为⑵附加 参数的值。双击矩形是一个矩形，双击的第二次单击必须属于该矩形，才能将其注册为双击。若要检索双击矩形的高度，请使用 SM_CYDOUBLECLK 标志调用 GetSystemMetrics。</td></tr>
<tr><td>SPI_SETDOUBLECLKWIDTH</td><td>0x001D</td><td>将双击矩形的宽度设置为⑵附加 参数的值。双击矩形是一个矩形，双击的第二次单击必须属于该矩形，才能将其注册为双击。若要检索双击矩形的宽度，请使用 SM_CXDOUBLECLK 标志调用 GetSystemMetrics。</td></tr>
<tr><td>SPI_SETGESTUREVISUALIZATION</td><td>0x201B</td><td>设置当前手势可视化设置。⑶数据 参数必须指向标识设置的 ULONG 变量。 有关详细信息，请参阅 手势可视化。注意 如果禁用联系人可视化效果，则无法启用手势可视化效果。 </td></tr>
<tr><td>SPI_SETKEYBOARDCUES</td><td>0x100B</td><td>设置菜单访问键字母的下划线。⑶数据 参数是 BOOL 变量。 将⑶数据 设置为 真 以始终为菜单访问键添加下划线，将 假 设置为仅在从键盘激活菜单时为菜单访问键添加下划线。</td></tr>
<tr><td>SPI_SETKEYBOARDDELAY</td><td>0x0017</td><td>设置键盘重复延迟设置。⑵附加 参数必须指定 0、1、2 或 3，其中 0 设置最短延迟约 250 毫秒) ,3 设置最长延迟 (大约 1 秒) 。 与每个值关联的实际延迟可能因硬件而异。</td></tr>
<tr><td>SPI_SETKEYBOARDPREF</td><td>0x0045</td><td>设置键盘首选项。 如果用户依赖于键盘而不是鼠标，并且希望应用程序显示本来隐藏的键盘接口， 则⑵附加 参数指定 真 ; 否则，uiParam 为 假 。</td></tr>
<tr><td>SPI_SETKEYBOARDSPEED</td><td>0x000B</td><td>设置键盘重复速度设置。⑵附加 参数必须指定介于 0 (大约每秒 2.5 次重复) 到 31 (大约每秒 30 次重复) 范围内的值。 实际重复率取决于硬件，并且可能从线性刻度变化多达 20%。 如果⑵附加 大于 31，则 参数设置为 31。</td></tr>
<tr><td>SPI_SETLANGTOGGLE</td><td>0x005B</td><td>设置用于在输入语言之间切换的热键集。 不使用⑵附加 和⑶数据 参数。 值通过再次读取注册表来设置键盘属性表中的快捷键。 必须先设置注册表，然后才能使用此标志。 注册表中的路径为 HKEY_CURRENT_USER\键盘布局\切换. 有效值为“1”= Alt+SHIFT，“2”= CTRL+SHIFT，“3”= none。</td></tr>
<tr><td>SPI_SETMOUSE</td><td>0x0004</td><td>设置两个鼠标阈值和鼠标加速。⑶数据 参数必须指向指定这些值的三个整数数组。 有关详细信息 ，请参阅mouse_event 。</td></tr>
<tr><td>SPI_SETMOUSEBUTTONSWAP</td><td>0x0021</td><td>交换或还原鼠标左键和右键的含义。⑵附加 参数指定 真 以交换按钮的含义，或指定 假 以还原其原始含义。若要检索当前设置，请使用 SM_SWAPBUTTON 标志调用 GetSystemMetrics。</td></tr>
<tr><td>SPI_SETMOUSEHOVERHEIGHT</td><td>0x0065</td><td>设置鼠标指针必须保留的矩形的高度（以像素为单位），以便 TrackMouseEvent 生成 WM_MOUSEHOVER 消息。 将⑵附加 参数设置为新高度。</td></tr>
<tr><td>SPI_SETMOUSEHOVERTIME</td><td>0x0067</td><td>设置鼠标指针必须停留在悬停矩形中的时间（以毫秒为单位），以便 TrackMouseEvent 生成 WM_MOUSEHOVER 消息。 仅当在调用 TrackMouseEvent 时在 dwHoverTime 参数中传递HOVER_DEFAULT时，才使用此选项。 将⑵附加 参数设置为新时间。指定的时间应介于 USER_TIMER_MAXIMUM 和 USER_TIMER_MINIMUM 之间。 如果⑵附加 小于 USER_TIMER_MINIMUM，函数将使用 USER_TIMER_MINIMUM。 如果⑵附加 大于 USER_TIMER_MAXIMUM，则将 USER_TIMER_MAXIMUM函数。Windows Server 2003 和 Windows XP： 在 Windows Server 2003 SP1 和 Windows XP 与 SP2 之前，操作系统不会强制使用 USER_TIMER_MAXIMUM 和 USER_TIMER_MINIMUM 。</td></tr>
<tr><td>SPI_SETMOUSEHOVERWIDTH</td><td>0x0063</td><td>设置鼠标指针必须保留的矩形的宽度（以像素为单位），以便 TrackMouseEvent 生成 WM_MOUSEHOVER 消息。 将⑵附加 参数设置为新的宽度。</td></tr>
<tr><td>SPI_SETMOUSESPEED</td><td>0x0071</td><td>设置当前鼠标速度。⑶数据 参数是介于 1 (最慢) 到 20 (最快) 之间的整数。 默认值为 10。 此值通常是使用鼠标控制面板应用程序设置的。</td></tr>
<tr><td>SPI_SETMOUSETRAILS</td><td>0x005D</td><td>启用或禁用鼠标跟踪功能，该功能通过简要显示光标跟踪并快速擦除它们来提高鼠标光标移动的可见性。若要禁用该功能，请将⑵附加 参数设置为零或 1。 若要启用该功能，请将⑵附加 设置为大于 1 的值，以指示在跟踪中绘制的游标数。Windows 2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSEWHEELROUTING</td><td>0x201D</td><td>设置鼠标滚轮输入的路由设置。 路由设置确定是将鼠标滚轮输入发送到具有焦点 (前台) 的应用，还是将鼠标光标下的应用发送到应用。⑶数据 参数必须指向接收路由选项的 DWORD 变量。 将⑵附加 参数设置为零。如果值为零 (MOUSEWHEEL_ROUTING_FOCUS) ，则鼠标滚轮输入将传送到具有焦点的应用。 如果值为 1 (MOUSEWHEEL_ROUTING_HYBRID) ，鼠标滚轮输入将传送到具有焦点的应用 (桌面应用) 或鼠标指针下的应用 (Windows 应用商店应用) 。从Windows 10开始：如果值为 2 (MOUSEWHEEL_ROUTING_MOUSE_POS) ，则鼠标滚轮输入将传送到鼠标指针下的应用。 这是新的默认值，MOUSEWHEEL_ROUTING_HYBRID在“设置”中不再可用。</td></tr>
<tr><td>SPI_SETPENVISUALIZATION</td><td>0x201F</td><td>设置当前笔手势可视化设置。⑶数据 参数必须指向标识设置的 ULONG 变量。 有关详细信息，请参阅 触控笔可视化。</td></tr>
<tr><td>SPI_SETSNAPTODEFBUTTON</td><td>0x0060</td><td>启用或禁用快照到默认按钮功能。 如果启用，鼠标光标会自动移动到对话框的默认按钮，例如 “确定” 或 “应用”。 将⑵附加 参数设置为 真 以启用该功能，将 设置为 假 以禁用该功能。 应用程序在显示对话框时应使用 ShowWindow 函数，以便对话管理器可以定位鼠标光标。</td></tr>
<tr><td>SPI_SETSYSTEMLANGUAGEBAR</td><td>0x1051</td><td>从Windows 8开始：打开或关闭旧语言栏功能。⑶数据 参数是指向 BOOL 变量的指针。 将⑶数据 设置为 真 以启用旧语言栏，或 将 假 设置为禁用它。 Windows 8支持标志，其中旧语言栏被输入切换器替换，因此默认处于关闭状态。 打开旧语言栏是出于兼容性原因而提供的，对输入切换器没有影响。</td></tr>
<tr><td>SPI_SETTHREADLOCALINPUTSETTINGS</td><td>0x104F</td><td>从Windows 8开始：确定活动输入设置是否具有每个线程的本地 (、TRUE) 或全局 (会话、FALSE) 范围。⑶数据 参数必须是由 PVOID 强制转换的 BOOL 变量。</td></tr>
<tr><td>SPI_SETWHEELSCROLLCHARS</td><td>0x006D</td><td>设置移动水平鼠标滚轮时要滚动的字符数。 从⑵附加 参数设置字符数。</td></tr>
<tr><td>SPI_SETWHEELSCROLLLINES</td><td>0x0069</td><td>设置移动垂直鼠标滚轮时要滚动的行数。 行数是从⑵附加 参数设置的。行数是在不使用修改键的情况下滚动鼠标滚轮时建议滚动的行数。 如果数字为 0，则不应发生滚动。 如果要滚动的行数大于可查看的行数，特别是当它 被WHEEL_PAGESCROLL (#defined 为 UINT_MAX) 时，滚动操作应解释为在滚动条的页面向下或向上翻页区域中单击一次。 下面是菜单参数。菜单参数	含义</td></tr>
<tr><th colspan=3>系统参数-菜单参数。</th></tr>
<tr><td>SPI_GETMENUDROPALIGNMENT</td><td>0x001B</td><td>确定弹出菜单相对于相应的菜单栏项是左对齐还是右对齐。⑶数据 参数必须指向接收 真（如果右对齐）的 BOOL 变量;否则，该变量必须指向 假。</td></tr>
<tr><td>SPI_GETMENUFADE</td><td>0x1012</td><td>确定是否启用菜单淡化动画。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用淡出动画时接收 真，在禁用淡化动画时接收 假。 如果禁用淡化动画，菜单将使用幻灯片动画。 除非启用了菜单动画，否则将忽略此标志，可以使用 SPI_SETMENUANIMATION 标志执行此操作。 有关详细信息，请参阅 AnimateWindow。</td></tr>
<tr><td>SPI_GETMENUSHOWDELAY</td><td>0x006A</td><td>检索鼠标光标位于子菜单项上时系统在显示快捷菜单之前等待的时间（以毫秒为单位）。⑶数据 参数必须指向接收延迟时间的 DWORD 变量。</td></tr>
<tr><td>SPI_SETMENUDROPALIGNMENT</td><td>0x001C</td><td>设置弹出菜单的对齐值。⑵附加 参数指定 真 表示右对齐，为左对齐指定 假。</td></tr>
<tr><td>SPI_SETMENUFADE</td><td>0x1013</td><td>启用或禁用菜单淡化动画。 将⑶数据 设置为 真 以启用菜单淡化效果，将 设置为 假 以禁用它。 如果禁用淡化动画，菜单将使用幻灯片动画。 只有当系统的颜色深度超过 256 种颜色时，才能实现菜单淡出效果。 除非还设置了 SPI_MENUANIMATION ，否则将忽略此标志。 有关详细信息，请参阅 AnimateWindow。</td></tr>
<tr><td>SPI_SETMENUSHOWDELAY</td><td>0x006B</td><td>将⑵附加 设置为鼠标光标位于子菜单项上时系统在显示快捷菜单之前等待的时间（以毫秒为单位）。</td></tr>
<tr><th colspan=3>系统参数-电源参数。</th></tr>
<tr><td>SPI_GETLOWPOWERACTIVE</td><td>0x0053</td><td>不支持此参数。Windows Server 2003 和 Windows XP/2000： 确定是否启用屏幕保存的低功耗阶段。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用时接收 真，如果禁用，则为 假。 此标志仅支持 32 位应用程序。</td></tr>
<tr><td>SPI_GETLOWPOWERTIMEOUT</td><td>0x004F</td><td>不支持此参数。Windows Server 2003 和 Windows XP/2000： 检索屏幕保存的低功耗阶段的超时值。⑶数据 参数必须指向接收值的整数变量。 此标志仅支持 32 位应用程序。</td></tr>
<tr><td>SPI_GETPOWEROFFACTIVE</td><td>0x0054</td><td>不支持此参数。 启用屏幕保存的关机阶段时， GUID_VIDEO_POWERDOWN_TIMEOUT 电源设置大于零。Windows Server 2003 和 Windows XP/2000： 确定是否启用屏幕保存的关机阶段。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用时接收 真，如果禁用，则为 假。 此标志仅支持 32 位应用程序。</td></tr>
<tr><td>SPI_GETPOWEROFFTIMEOUT</td><td>0x0050</td><td>不支持此参数。 请改为检查GUID_VIDEO_POWERDOWN_TIMEOUT电源设置。Windows Server 2003 和 Windows XP/2000： 检索屏幕保存的关机阶段的超时值。⑶数据 参数必须指向接收值的整数变量。 此标志仅支持 32 位应用程序。</td></tr>
<tr><td>SPI_SETLOWPOWERACTIVE</td><td>0x0055</td><td>不支持此参数。Windows Server 2003 和 Windows XP/2000： 激活或停用屏幕保存的低功耗阶段。 将⑵附加 设置为 1 以激活，将设置为零以停用。⑶数据 参数必须为 NULL。 此标志仅支持 32 位应用程序。</td></tr>
<tr><td>SPI_SETLOWPOWERTIMEOUT</td><td>0x0051</td><td>不支持此参数。Windows Server 2003 和 Windows XP/2000： 为屏幕节省的低功耗阶段设置超时值（以秒为单位）。⑵附加 参数指定新值。⑶数据 参数必须为 NULL。 此标志仅支持 32 位应用程序。</td></tr>
<tr><td>SPI_SETPOWEROFFACTIVE</td><td>0x0056</td><td>不支持此参数。 请改为设置 GUID_VIDEO_POWERDOWN_TIMEOUT 电源设置。Windows Server 2003 和 Windows XP/2000： 激活或停用屏幕保存的关机阶段。 将⑵附加 设置为 1 可激活，将零设置为停用。⑶数据 参数必须为 NULL。 仅 32 位应用程序支持此标志。</td></tr>
<tr><td>SPI_SETPOWEROFFTIMEOUT</td><td>0x0052</td><td>不支持此参数。 相反，请将 GUID_VIDEO_POWERDOWN_TIMEOUT 电源设置设置为超时值。Windows Server 2003 和 Windows XP/2000： 为屏幕保存的关机阶段设置超时值（以秒为单位）。⑵附加 参数指定新值。⑶数据 参数必须为 NULL。 仅 32 位应用程序支持此标志。</td></tr>
<tr><th colspan=3>系统参数-屏幕保护程序参数。</th></tr>
<tr><td>SPI_GETSCREENSAVEACTIVE</td><td>0x0010</td><td>确定是否启用屏幕保存。⑶数据 参数必须指向一个 BOOL 变量，如果启用屏幕保存，则接收 真;否则，该变量必须指向 假。Windows 7、Windows Server 2008 R2 和 Windows 2000： 即使未启用屏幕保存，函数也会返回 真 。</td></tr>
<tr><td>SPI_GETSCREENSAVERRUNNING</td><td>0x0072</td><td>确定屏幕保护程序当前是否在调用进程的窗口工作站上运行。 如果屏幕保护程序当前正在运行，⑶数据 参数必须指向接收 真 的 BOOL 变量，否则为 假。 请注意，只有交互式窗口工作站 WinSta0 可以运行屏幕保护程序。</td></tr>
<tr><td>SPI_GETSCREENSAVESECURE</td><td>0x0076</td><td>确定屏幕保护程序是否需要密码才能显示 Windows 桌面。 如果屏幕保护程序需要密码，⑶数据 参数必须指向接收 真 的 BOOL 变量，否则为 假。 忽略⑵附加 参数。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETSCREENSAVETIMEOUT</td><td>0x000E</td><td>检索屏幕节省程序超时值（以秒为单位）。⑶数据 参数必须指向接收值的整数变量。</td></tr>
<tr><td>SPI_SETSCREENSAVEACTIVE</td><td>0x0011</td><td>设置屏幕保护程序的状态。⑵附加 参数指定 真 以激活屏幕保存，或指定 假 以停用屏幕保存。如果计算机已进入省电模式或系统锁定状态，则会发生ERROR_OPERATION_IN_PROGRESS异常。</td></tr>
<tr><td>SPI_SETSCREENSAVESECURE</td><td>0x0077</td><td>设置屏幕保护程序是否要求用户输入密码才能显示 Windows 桌面。⑵附加 参数是 BOOL 变量。 忽略⑶数据 参数。 将⑵附加 设置为 真 以要求密码，将 假 设置为不需要密码。如果计算机已进入省电模式或系统锁定状态，则会发生ERROR_OPERATION_IN_PROGRESS异常。Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETSCREENSAVETIMEOUT</td><td>0x000F</td><td>将屏幕节省程序超时值设置为⑵附加 参数的值。 此值是系统在激活屏幕保护程序之前必须处于空闲状态的时间量（以秒为单位）。如果计算机已进入省电模式或系统锁定状态，则会发生ERROR_OPERATION_IN_PROGRESS异常。</td></tr>
<tr><th colspan=3>系统参数-应用程序和服务的超时参数。</th></tr>
<tr><td>SPI_GETHUNGAPPTIMEOUT</td><td>0x0078</td><td>检索线程在系统认为消息无响应之前无需调度消息即可完成的毫秒数。⑶数据 参数必须指向接收值的整数变量。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETWAITTOKILLTIMEOUT</td><td>0x007A</td><td>检索系统在终止不响应关闭请求的应用程序之前等待的毫秒数。⑶数据 参数必须指向接收值的整数变量。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETWAITTOKILLSERVICETIMEOUT</td><td>0x007C</td><td>检索服务控制管理器在终止不响应关闭请求的服务之前等待的毫秒数。⑶数据 参数必须指向接收值的整数变量。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETHUNGAPPTIMEOUT</td><td>0x0079</td><td>将挂起的应用程序超时设置为⑵附加 参数的值。 此值是线程在系统认为消息无响应之前无需分派消息即可到达的毫秒数。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETWAITTOKILLTIMEOUT</td><td>0x007B</td><td>将应用程序关闭请求超时设置为⑵附加 参数的值。 此值是系统在终止不响应关闭请求的应用程序之前等待的毫秒数。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETWAITTOKILLSERVICETIMEOUT</td><td>0x007D</td><td>将服务关闭请求超时设置为⑵附加 参数的值。 此值是系统在终止不响应关闭请求的服务之前等待的毫秒数。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><th colspan=3>系统参数-界面效果参数。SPI_SETUIEFFECTS值用于同时启用或禁用所有 UI 效果。</th></tr>
<tr><td>SPI_GETCOMBOBOXANIMATION</td><td>0x1004</td><td>确定是否启用组合框的滑动打开效果。⑶数据 参数必须指向一个 BOOL 变量，该变量对于 enabled 接收 真，对于 disabled 接收 假。</td></tr>
<tr><td>SPI_GETCURSORSHADOW</td><td>0x101A</td><td>确定光标周围是否有阴影。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用阴影时接收 真;如果禁用，则为 假。 仅当系统的颜色深度超过 256 种颜色时，才会显示此效果。</td></tr>
<tr><td>SPI_GETGRADIENTCAPTIONS</td><td>0x1008</td><td>确定是否启用窗口标题栏的渐变效果。⑶数据 参数必须指向一个 BOOL 变量，该变量对于 enabled 接收 真，对于 disabled 接收 假。 有关渐变效果的详细信息，请参阅 GetSysColor 函数。</td></tr>
<tr><td>SPI_GETHOTTRACKING</td><td>0x100E</td><td>确定是否启用用户界面元素的热跟踪，例如菜单栏上的菜单名称。⑶数据 参数必须指向一个 BOOL 变量，该变量对于 enabled 接收 真，对于 disabled 接收 假。热跟踪意味着当光标移动到某个项上时，它将被突出显示，但未选中。 可以查询此值以决定是否在应用程序的用户界面中使用热跟踪。</td></tr>
<tr><td>SPI_GETLISTBOXSMOOTHSCROLLING</td><td>0x1006</td><td>确定是否启用列表框的平滑滚动效果。⑶数据 参数必须指向一个 BOOL 变量，该变量对于 enabled 接收 真，对于 disabled 接收 假。</td></tr>
<tr><td>SPI_GETMENUANIMATION</td><td>0x1002</td><td>确定是否启用菜单动画功能。 此主控开关必须处于打开状态才能启用菜单动画效果。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用动画时接收 真，如果禁用动画，则为 假。如果启用了动画， SPI_GETMENUFADE 指示菜单是使用淡化动画还是幻灯片动画。</td></tr>
<tr><td>SPI_GETMENUUNDERLINES</td><td>0x100A</td><td>与 SPI_GETKEYBOARDCUES 相同。</td></tr>
<tr><td>SPI_GETSELECTIONFADE</td><td>0x1014</td><td>确定是否启用选择淡化效果。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用时接收 真，如果禁用，则接收 假。选择淡化效果会导致用户选择的菜单项暂时停留在屏幕上，同时在关闭菜单后消失。</td></tr>
<tr><td>SPI_GETTOOLTIPANIMATION</td><td>0x1016</td><td>确定是否启用工具提示动画。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用时接收 真，如果禁用，则接收 假。 如果启用了工具提示动画， SPI_GETTOOLTIPFADE 指示工具提示是使用淡化动画还是幻灯片动画。</td></tr>
<tr><td>SPI_GETTOOLTIPFADE</td><td>0x1018</td><td>如果启用SPI_SETTOOLTIPANIMATION，SPI_GETTOOLTIPFADE指示工具提示动画是使用淡化效果还是幻灯片效果。⑶数据 参数必须指向一个 BOOL 变量，该变量对于淡出动画接收 真，对于幻灯片动画接收 假。 有关幻灯片和淡化效果的详细信息，请参阅 AnimateWindow。</td></tr>
<tr><td>SPI_GETUIEFFECTS</td><td>0x103E</td><td>确定是启用还是禁用 UI 效果。⑶数据 参数必须指向一个 BOOL 变量，该变量在启用所有 UI 效果时接收 真;如果禁用，则为 假。</td></tr>
<tr><td>SPI_SETCOMBOBOXANIMATION</td><td>0x1005</td><td>启用或禁用组合框的幻灯片打开效果。 将⑶数据 参数设置为 真 可启用渐变效果，将 设置为 假 以禁用渐变效果。</td></tr>
<tr><td>SPI_SETCURSORSHADOW</td><td>0x101B</td><td>启用或禁用光标周围的阴影。⑶数据 参数是 BOOL 变量。 将⑶数据 设置为 真 可启用阴影，将 假 设置为禁用阴影。 仅当系统的颜色深度超过 256 种颜色时，才会显示此效果。</td></tr>
<tr><td>SPI_SETGRADIENTCAPTIONS</td><td>0x1009</td><td>启用或禁用窗口标题栏的渐变效果。 将⑶数据 参数设置为 真 以启用它，将 设置为 假 以禁用它。 仅当系统的颜色深度超过 256 种颜色时，才能产生渐变效果。 有关渐变效果的详细信息，请参阅 GetSysColor 函数。</td></tr>
<tr><td>SPI_SETHOTTRACKING</td><td>0x100F</td><td>启用或禁用用户界面元素（如菜单栏上的菜单名称）的热跟踪。 将⑶数据 参数设置为 真 以启用它，将 设置为 假 以禁用它。热跟踪是指当光标移动到某个项上时，它将被突出显示，但未选中。</td></tr>
<tr><td>SPI_SETLISTBOXSMOOTHSCROLLING</td><td>0x1007</td><td>启用或禁用列表框的平滑滚动效果。 将⑶数据 参数设置为 真 以启用平滑滚动效果，或将 假 设置为禁用它。</td></tr>
<tr><td>SPI_SETMENUANIMATION</td><td>0x1003</td><td>启用或禁用菜单动画。 此主控开关必须处于打开状态，才能发生任何菜单动画。⑶数据 参数是 BOOL 变量;将⑶数据 设置为 真 可启用动画，将 假 设置为禁用动画。如果启用了动画， SPI_GETMENUFADE 指示菜单是使用淡化动画还是幻灯片动画。</td></tr>
<tr><td>SPI_SETMENUUNDERLINES</td><td>0x100B</td><td>与 SPI_SETKEYBOARDCUES 相同。</td></tr>
<tr><td>SPI_SETSELECTIONFADE</td><td>0x1015</td><td>将⑶数据 设置为 真 可启用选择淡化效果，将 设置为 假 以禁用它。选择淡化效果会导致用户选择的菜单项暂时停留在屏幕上，同时在关闭菜单后消失。 仅当系统的颜色深度超过 256 种颜色时，才能实现选择淡化效果。</td></tr>
<tr><td>SPI_SETTOOLTIPANIMATION</td><td>0x1017</td><td>将⑶数据 设置为 真 可启用 ToolTip 动画，将 设置为 假 以禁用它。 如果启用，可以使用 SPI_SETTOOLTIPFADE 指定淡出动画或幻灯片动画。</td></tr>
<tr><td>SPI_SETTOOLTIPFADE</td><td>0x1019</td><td>如果启用了 SPI_SETTOOLTIPANIMATION 标志，请使用 SPI_SETTOOLTIPFADE 来指示 ToolTip 动画是使用淡化效果还是幻灯片效果。 对于淡化动画，请将⑶数据 设置为 真 ，将幻灯片动画设置为 假 。 仅当系统的颜色深度超过 256 种颜色时，才能实现工具提示淡出效果。 有关幻灯片和淡化效果的详细信息，请参阅 AnimateWindow 函数。</td></tr>
<tr><td>SPI_SETUIEFFECTS</td><td>0x103F</td><td>启用或禁用 UI 效果。 将⑶数据 参数设置为 真 可启用所有 UI 效果，将 假 设置为禁用所有 UI 效果。</td></tr>
<tr><th colspan=3>系统参数-窗口参数。</th></tr>
<tr><td>SPI_GETACTIVEWINDOWTRACKING</td><td>0x1000</td><td>确定活动窗口跟踪 (激活鼠标打开的窗口，) 打开还是关闭。⑶数据 参数必须指向一个 BOOL 变量，该变量对于 on 接收 真，对于 off 接收 假。</td></tr>
<tr><td>SPI_GETACTIVEWNDTRKZORDER</td><td>0x100C</td><td>确定是否会将通过活动窗口跟踪激活的窗口带到顶部。⑶数据 参数必须指向一个 BOOL 变量，该变量对于 on 接收 真，对于 off 接收 假。</td></tr>
<tr><td>SPI_GETACTIVEWNDTRKTIMEOUT</td><td>0x2002</td><td>检索活动窗口跟踪延迟（以毫秒为单位）。⑶数据 参数必须指向接收时间的 DWORD 变量。</td></tr>
<tr><td>SPI_GETANIMATION</td><td>0x0048</td><td>检索与用户操作关联的动画效果。⑶数据 参数必须指向接收信息的 ANIMATIONINFO 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(ANIMATIONINFO)。</td></tr>
<tr><td>SPI_GETBORDER</td><td>0x0005</td><td>检索确定窗口大小边框宽度的边框乘数因子。⑶数据 参数必须指向接收此值的整数变量。</td></tr>
<tr><td>SPI_GETCARETWIDTH</td><td>0x2006</td><td>检索编辑控件中的插入点宽度（以像素为单位）。⑶数据 参数必须指向接收此值的 DWORD 变量。</td></tr>
<tr><td>SPI_GETDOCKMOVING</td><td>0x0090</td><td>确定将窗口移动到监视器或监视器数组的上边缘、左边缘或右边缘时，窗口是否停靠。⑶数据 参数必须指向一个 BOOL 变量（如果启用）接收 真;否则，该变量必须指向 假。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETDRAGFROMMAXIMIZE</td><td>0x008C</td><td>确定拖动最大化窗口描述文字栏时是否还原该窗口。⑶数据 参数必须指向一个 BOOL 变量（如果启用）接收 真;否则，该变量必须指向 假。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETDRAGFULLWINDOWS</td><td>0x0026</td><td>确定是否启用拖动整个窗口。⑶数据 参数必须指向一个 BOOL 变量（如果启用）接收 真;否则，该变量必须指向 假。</td></tr>
<tr><td>SPI_GETFOREGROUNDFLASHCOUNT</td><td>0x2004</td><td>检索 SetForegroundWindow 在拒绝前台切换请求时闪烁任务栏按钮的次数。⑶数据 参数必须指向接收值的 DWORD 变量。</td></tr>
<tr><td>SPI_GETFOREGROUNDLOCKTIMEOUT</td><td>0x2000</td><td>检索用户输入后的时间（以毫秒为单位），在此期间，系统不允许应用程序强制自己进入前台。⑶数据 参数必须指向接收时间的 DWORD 变量。</td></tr>
<tr><td>SPI_GETMINIMIZEDMETRICS</td><td>0x002B</td><td>检索与最小化窗口关联的指标。⑶数据 参数必须指向接收信息的 MINIMIZEDMETRICS 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(MINIMIZEDMETRICS)。</td></tr>
<tr><td>SPI_GETMOUSEDOCKTHRESHOLD</td><td>0x007E</td><td>检索使用鼠标将窗口拖动到监视器或监视器阵列边缘触发停靠行为的阈值（以像素为单位）。 默认阈值为 1。⑶数据 参数必须指向接收值的 DWORD 变量。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSEDRAGOUTTHRESHOLD</td><td>0x0084</td><td>检索使用鼠标将窗口从监视器边缘或监视器数组向中心拖动来触发取消停靠行为的阈值（以像素为单位）。 默认阈值为 20。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETMOUSESIDEMOVETHRESHOLD</td><td>0x0088</td><td>从监视器或监视器数组的顶部检索阈值（以像素为单位），其中使用鼠标拖动时将还原垂直最大化的窗口。 默认阈值为 50。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETNONCLIENTMETRICS</td><td>0x0029</td><td>检索与非最小化窗口的非工作区相关联的度量值。⑶数据 参数必须指向接收信息的 NONCLIENTMETRICS 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(NONCLIENTMETRICS)。Windows Server 2003 和 Windows XP/2000： 请参阅 NONCLIENTMETRICS 的备注。</td></tr>
<tr><td>SPI_GETPENDOCKTHRESHOLD</td><td>0x0080</td><td>检索使用笔将窗口拖动到监视器或监视器阵列边缘触发停靠行为的阈值（以像素为单位）。 默认值为 30。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETPENDRAGOUTTHRESHOLD</td><td>0x0086</td><td>检索使用笔将窗口从监视器或监视器阵列的边缘拖动到其中心，从而触发取消停靠行为的阈值（以像素为单位）。 默认阈值为 30。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETPENSIDEMOVETHRESHOLD</td><td>0x008A</td><td>检索监视器或监视器数组顶部的阈值（以像素为单位），其中使用鼠标拖动时将还原垂直最大化的窗口。 默认阈值为 50。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETSHOWIMEUI</td><td>0x006E</td><td>确定输入法状态窗口是否以每个用户) (可见。⑶数据 参数必须指向一个 BOOL 变量，该变量在状态窗口可见时接收 真;如果状态窗口不可见，则为 假。</td></tr>
<tr><td>SPI_GETSNAPSIZING</td><td>0x008E</td><td>确定窗口在调整到监视器或监视器数组的顶部或底部时是否垂直最大化。⑶数据 参数必须指向接收 真（如果启用）的 BOOL 变量;否则，该变量必须指向 假。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_GETWINARRANGING</td><td>0x0082</td><td>确定是否启用窗口排列。⑶数据 参数必须指向接收 真（如果启用）的 BOOL 变量;否则，该变量必须指向 假。窗口排列方式通过简化拖动或调整窗口大小时的默认行为，减少了移动顶级窗口和调整窗口大小所需的鼠标、笔或触摸交互的数量。</td></tr>
<tr><td>SPI_SETACTIVEWINDOWTRACKING</td><td>0x1001</td><td>设置活动窗口跟踪 (激活鼠标打开或关闭) 窗口。 将⑶数据 设置为真开启。</td></tr>
<tr><td>SPI_SETACTIVEWNDTRKZORDER</td><td>0x100D</td><td>确定是否应将通过活动窗口跟踪激活的窗口带到顶部。 将⑶数据 设置为真开启。</td></tr>
<tr><td>SPI_SETACTIVEWNDTRKTIMEOUT</td><td>0x2003</td><td>设置活动窗口跟踪延迟。 将⑶数据 设置为激活鼠标指针下的窗口之前要延迟的毫秒数。</td></tr>
<tr><td>SPI_SETANIMATION</td><td>0x0049</td><td>设置与用户操作关联的动画效果。⑶数据 参数必须指向包含新参数的 ANIMATIONINFO 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(ANIMATIONINFO)。</td></tr>
<tr><td>SPI_SETBORDER</td><td>0x0006</td><td>设置确定窗口大小边框宽度的边框乘数因子。⑵附加 参数指定新值。</td></tr>
<tr><td>SPI_SETCARETWIDTH</td><td>0x2007</td><td>设置编辑控件中的插入点宽度。 将⑶数据 设置为所需的宽度（以像素为单位）。 默认值和最小值为 1。</td></tr>
<tr><td>SPI_SETDOCKMOVING</td><td>0x0091</td><td>设置在将窗口移动到监视器或监视器阵列上的顶部、左侧或右侧停靠目标时，窗口是停靠的。 将⑶数据 设置为真开启。
必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETDRAGFROMMAXIMIZE</td><td>0x008D</td><td>设置拖动最大化窗口描述文字栏时是否还原该窗口。 将⑶数据 设置为真开启。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETDRAGFULLWINDOWS</td><td>0x0025</td><td>设置打开或关闭整个窗口的拖动。⑵附加 参数为真开启。</td></tr>
<tr><td>SPI_SETDRAGHEIGHT</td><td>0x004D</td><td>设置用于检测拖动操作开始的矩形的高度（以像素为单位）。 将⑵附加 设置为新值。 若要检索拖动高度，请使用 SM_CYDRAG 标志调用 GetSystemMetrics。</td></tr>
<tr><td>SPI_SETDRAGWIDTH</td><td>0x004C</td><td>设置用于检测拖动操作开始的矩形的宽度（以像素为单位）。 将⑵附加 设置为新值。 若要检索拖动宽度，请使用 SM_CXDRAG 标志调用 GetSystemMetrics。</td></tr>
<tr><td>SPI_SETFOREGROUNDFLASHCOUNT</td><td>0x2005</td><td>设置 SetForegroundWindow 在拒绝前台切换请求时闪烁任务栏按钮的次数。 将⑶数据 设置为闪烁的次数。</td></tr>
<tr><td>SPI_SETFOREGROUNDLOCKTIMEOUT</td><td>0x2001</td><td>设置用户输入后的时间量（以毫秒为单位），在此期间，系统不允许应用程序强制自己进入前台。 将⑶数据 设置为新的超时值。调用线程必须能够更改前台窗口，否则调用将失败。</td></tr>
<tr><td>SPI_SETMINIMIZEDMETRICS</td><td>0x002C</td><td>设置与最小化窗口关联的指标。⑶数据 参数必须指向包含新参数的 MINIMIZEDMETRICS 结构。 将此结构的 cbSize 成员和⑵附加 参数设置为 sizeof(MINIMIZEDMETRICS)。</td></tr>
<tr><td>SPI_SETMOUSEDOCKTHRESHOLD</td><td>0x007F</td><td>设置使用鼠标将窗口拖动到监视器或监视器阵列边缘触发停靠行为的阈值（以像素为单位）。 默认阈值为 1。⑶数据 参数必须指向包含新值的 DWORD 变量。
SPI_GETWINARRANGING 必须为 真 才能启用此行为。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSEDRAGOUTTHRESHOLD</td><td>0x0085</td><td>设置阈值（以像素为单位），其中使用鼠标将窗口从监视器或监视器数组的边缘拖动到其中心触发的取消停靠行为。 默认阈值为 20。⑶数据 参数必须指向包含新值的 DWORD 变量。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETMOUSESIDEMOVETHRESHOLD</td><td>0x0089</td><td>设置从监视器顶部开始的阈值（以像素为单位），在使用鼠标拖动时，垂直最大化窗口将还原到该窗口。 默认阈值为 50。⑶数据 参数必须指向包含新值的 DWORD 变量。必须启用窗口排列(0x82)。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETNONCLIENTMETRICS</td><td>0x002A</td><td>设置与非小窗口的非工作区关联的指标。⑶数据 参数必须指向包含新参数的 NONCLIENTMETRICS 结构。 将此 结构的 cbSize 成员和⑵附加 参数设置为 sizeof(NONCLIENTMETRICS)。 此外，LOGFONT 结构的 lfHeight 成员必须是负值。</td></tr>
<tr><td>SPI_SETPENDOCKTHRESHOLD</td><td>0x0081</td><td>设置使用笔将窗口拖动到监视器或监视器阵列边缘时触发停靠行为的阈值（以像素为单位）。 默认阈值为 30。⑶数据 参数必须指向包含新值的 DWORD 变量。
SPI_GETWINARRANGING 必须为 真 才能启用此行为。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETPENDRAGOUTTHRESHOLD</td><td>0x0087</td><td>设置使用笔将窗口从监视器或监视器阵列边缘拖动到其中心时触发取消停靠行为的阈值（以像素为单位）。 默认阈值为 30。⑶数据 参数必须指向包含新值的 DWORD 变量。
SPI_GETWINARRANGING 必须为 真 才能启用此行为。>Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETPENSIDEMOVETHRESHOLD</td><td>0x008B</td><td>设置监视器顶部的阈值（以像素为单位），在使用笔拖动时，垂直最大化窗口将还原到该窗口。 默认阈值为 50。⑶数据 参数必须指向包含新值的 DWORD 变量。
SPI_GETWINARRANGING 必须为 真 才能启用此行为。Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETSHOWIMEUI</td><td>0x006F</td><td>设置输入法状态窗口是否以每个用户为基础可见。⑵附加 参数为真开启。</td></tr>
<tr><td>SPI_SETSNAPSIZING</td><td>0x008F</td><td>设置窗口在调整到监视器的顶部或底部时是垂直最大化的。 将⑶数据 设置为真开启。必须启用窗口排列(0x82)
Windows Server 2008、Windows Vista、Windows Server 2003 和 Windows XP/2000： 不支持此参数。</td></tr>
<tr><td>SPI_SETWINARRANGING</td><td>0x0083</td><td>设置是否启用窗口排列。 将⑶数据 设置为真开启。窗口排列方式通过简化拖动或调整窗口大小时的默认行为，减少了移动顶级窗口和调整窗口大小所需的鼠标、笔或触摸交互次数。</td></tr>
</table>
<font size="6" color="#0000FF"><a name="图形显示">图形显示</a>——功能函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>绘制区类</td><td>PAINTSTRUCT</td><td>64</td><td>包含用来绘制它所拥有的窗口客户区所需要的信息的结构体。</td></tr>
<tr><th colspan=4>绘制区类——成员表</th></tr>
<tr><td>设备</td><td>hdc</td><td>整数</td><td>用于绘制的句柄。</td></tr>
<tr><td>擦除</td><td>fErase</td><td>整数</td><td>如果为非零值则擦除背景，否则不擦除</td></tr>
<tr><td>左边</td><td>rcPaint.left</td><td>整数</td><td>要绘制矩形的左边位置</td></tr>
<tr><td>顶部</td><td>rcPaint.top</td><td>整数</td><td>要绘制矩形的顶部位置</td></tr>
<tr><td>宽度</td><td>rcPaint.right</td><td>整数</td><td>要绘制矩形的宽度</td></tr>
<tr><td>高度</td><td>rcPaint.bottom</td><td>整数</td><td>要绘制矩形的高度</td></tr>
<tr><td>恢复</td><td>fRestore</td><td>整数</td><td>预留参数</td></tr>
<tr><td>更新</td><td>fIncUpdate</td><td>整数</td><td>预留参数</td></tr>
<tr><td>颜色</td><td>rgbReserved</td><td>文本</td><td>[32]长度字符串</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>开始绘图</td><td>BeginPaint</td><td>开始绘图(窗口,绘图区)</td><td>为指定窗口进行绘图工作的准备，并用将和绘图有关的信息填充到一个绘图区类结构中</td></tr>
<tr><td>结束绘制</td><td>EndPaint</td><td>结束绘制(窗口,绘制区)</td><td>结束程序窗口的绘制工作</td></tr>
<tr><td>更换屏显</td><td>ChangeDisplaySettingsA</td><td>更换屏显(设备模式类,0)</td><td>将默认显示设备的设置更改为指定的图形模式(屏幕显示分辨率等)。</td></tr>
<tr><td>枚举显屏</td><td>EnumDisplayMonitors</td><td>枚举显屏(设备,矩形,@回调,参数)</td><td>枚举显示监视器（包括与镜像驱动程序关联的不可见伪监视器）</td></tr>
<tr><td>显屏设备</td><td>EnumDisplayDevicesA</td><td>显屏设备(设备名,序号,信息,标志)</td><td>获取有关当前会话中显示设备的信息。标志1取设备接口名称</td></tr>
<tr><td>显屏模式</td><td>EnumDisplaySettingsA</td><td>显屏模式(设备名,方式,模式类)</td><td>检索有关显示设备的图形模式之一的信息。方式=-1当前设置 -2注册表</td></tr>
<tr><td>屏幕坐标</td><td>ClientToScreen</td><td>屏幕坐标(窗口,坐标)</td><td>把窗口上的坐标转换成相对于屏幕的坐标</td></tr>
<tr><td>窗口动画</td><td>DrawAnimatedRects</td><td>窗口动画(窗口,3,最小矩形,还原矩形)</td><td>为窗口的标题设置动画，以指示图标的打开或窗口的最小化或最大化。</td></tr>
<tr><td>绘制标题</td><td>DrawCaption</td><td>绘制标题(窗口,设备,矩形,选项)</td><td>为窗口的指定设备的矩形内绘制标题文本。选项1活动 2小标题 4带图标 8带标题 $10按钮形式 $1000带按钮</td></tr>
<tr><td>绘制边缘</td><td>DrawEdge</td><td>绘制边缘(设备,矩形,边类,选项)</td><td>绘制矩形的一条或多条边。1凸起外边 2下沉外缘 4凸起内边 8凹陷内缘 选项1左边 2顶边 4右边 8底边 $10对角边 $800填充 $1000软边 $2000收缩 $4000扁平 $8000一维</td></tr>
<tr><td>画焦点框</td><td>DrawFocusRect</td><td>画焦点框(设备,矩形)</td><td>绘制一个具有焦点的样式矩形。</td></tr>
<tr><td>框架控件</td><td>DrawFrameControl</td><td>框架控件(设备,矩形,样式,初始)</td><td>绘制指定类型和样式的控件。样式1标题 2菜单 3滚动条 4按钮 5弹出菜单</td></tr>
<tr><td>绘制框架</td><td>DrawFrame</td><td>绘制框架(设备,矩形,样式,初始)</td><td>绘制指定类型和样式的控件。</td></tr>
<tr><td>绘制图标</td><td>DrawIcon</td><td>绘制图标(设备,左,上,图标)</td><td>在限定的设备窗口的客户区域绘制图标。</td></tr>
<tr><td>绘制文本</td><td>DrawTextA</td><td>绘制文本(设备,文字,字数,矩形,格式)</td><td>在指定的矩形中绘制格式化文本。格式0左顶对齐 1水平居中 2居右 4垂直居中 8居底 $10断词 $20单行 $40宽制表 $89-$8F制表符位 $100不剪切 $200含外部行距 $400限定宽高 $800前缀无效 $100000忽略前缀</td></tr>
<tr><td>闪烁窗口</td><td>FlashWindow</td><td>闪烁窗口(窗口,模式)</td><td>模式为真时切换窗口标题</td></tr>
<tr><td>比较矩形</td><td>EqualRect</td><td>比较矩形(矩形1,矩形2)</td><td>通过比较其左上角和右下角的坐标来确定两个指定的矩形是否相等。</td></tr>
<tr><td>填充矩形</td><td>FillRect</td><td>填充矩形(设备,矩形,笔刷)</td><td>使用指定的画笔填充一个矩形。不包括矩形的右侧和底部边框。</td></tr>
<tr><td>画矩形框</td><td>FrameRect</td><td>画矩形框(设备,矩形,笔刷)</td><td>使用指定的画笔在指定的矩形周围绘制一像素的边框。</td></tr>
<tr><td>排除更新</td><td>ExcludeUpdateRgn</td><td>排除更新(设备,窗口)</td><td>从剪切区域中排除窗口中的更新区域来防止在窗口的无效区域内绘制</td></tr>
<tr><td>显屏信息</td><td>GetMonitorInfoA</td><td>显屏信息(显示器,信息)</td><td>检索有关显示监视器的信息。</td></tr>
<tr><td>取元素色</td><td>GetSysColor</td><td>取元素色(元素)</td><td>检索指定的显示元素的当前颜色。</td></tr>
<tr><td>改元素色</td><td>SetSysColor</td><td>改元素色(数量,元素组,颜色组)</td><td>修改指定的显示元素的当前颜色。</td></tr>
<tr><td>取颜色刷</td><td>GetSysColorBrush</td><td>取颜色刷(元素)</td><td>检索一个标识对应于指定颜色索引的逻辑画笔的句柄。</td></tr>
<tr><td>取设备</td><td>GetDC</td><td>设备=取设备(窗口)</td><td>获得指定窗口的客户端区域的显示设备句柄</td></tr>
<tr><td>窗口区域</td><td>GetWindowRgn</td><td>窗口区域(窗口,区域)</td><td>获得指定窗口边界矩形的区域</td></tr>
<tr><td>区域窗口</td><td>SetWindowRgn</td><td>区域窗口(窗口,区域,重绘)</td><td>设置指定窗口边界矩形的区域,重绘为真/假</td></tr>
<tr><td>文字宽高</td><td>GetTabbedTextExtentA</td><td>宽高=文字宽高(设备,文字,字数,制表位数,制表位组)</td><td>计算字符串的宽度和高度。</td></tr>
<tr><td>最小矩形</td><td>GetUpdateRect</td><td>最小矩形(窗口,矩形,擦除)</td><td>检索完全包围指定窗口的更新区域的最小矩形的坐标。擦除为真会擦除背景</td></tr>
<tr><td>更新区域</td><td>GetUpdateRgn</td><td>更新区域(窗口,区域,擦除)</td><td>通过将窗口复制到指定区域来检索窗口的更新区域。擦除为真会擦除背景</td></tr>
<tr><td>窗口设备</td><td>GetWindowDC</td><td>设备=窗口设备(窗口)</td><td>返回与指定窗口的环境设备句柄,设备环境覆盖了整个窗口，例如标题栏、菜单、滚动条，以及边框。</td></tr>
<tr><td>交叉矩形</td><td>IntersectRect</td><td>交叉矩形(目标,矩形1,矩形2)</td><td>计算矩形1和矩形2两个矩形是否有交叉,把交叉范围写入目标矩形</td></tr>
<tr><td>重绘矩形</td><td>InvalidateRect</td><td>重绘矩形(窗口,矩形,清背景)</td><td>表示必须重新绘制的窗口的客户区域的部分</td></tr>
<tr><td>重绘区域</td><td>InvalidateRgn</td><td>重绘区域(窗口,区域,清背景)</td><td>计示必须重新绘制的窗口的客户区域的部分</td></tr>
<tr><td>反色区域</td><td>InvertRect</td><td>反色区域(设备,区域)</td><td>对矩形内部的每个像素的颜色值执行逻辑反转(反色)</td></tr>
<tr><td>是否矩形</td><td>IsRectEmpty</td><td>是否矩形(矩形)</td><td>确定指定的矩形是否为空。指矩形的边界范围是否正常的矩形</td></tr>
<tr><td>禁止绘图</td><td>LockWindowUpdate</td><td>禁止重绘(窗口)</td><td>在指定的窗口中禁用或重新启用绘图更新,窗口参数为0启用绘图</td></tr>
<tr><td>转换像素</td><td>MapDialogRect</td><td>转换像素(窗口,矩形)</td><td>将指定的对话框单位转换为屏幕单位（像素）。将指定矩形中的坐标替换为转换后的屏幕单位</td></tr>
<tr><td>转换窗点</td><td>MapWindowPoints</td><td>转换窗点(源窗,到窗,点组,点数)</td><td>将一组点从一个窗口的坐标空间转换（映射）到另一个窗口的坐标空间。</td></tr>
<tr><td>偏移矩形</td><td>OffsetRect</td><td>偏移矩形(矩形,左,顶)</td><td>将指定的矩形移动指定的偏移量。</td></tr>
<tr><td>绘制桌面</td><td>PaintDesktop</td><td>绘制桌面(设备)</td><td>在指定的设备场景中描绘桌面墙纸图案</td></tr>
<tr><td>重绘窗口</td><td>RedrawWindow</td><td>重绘窗口(窗口,矩形,区域,<a name="重绘标志">标志</a>)</td><td>更新窗口客户区中的指定矩形或区域。区域为0是整个客户区</td></tr>
<tr><td>释放设备</td><td>ReleaseDC</td><td>释放设备(窗口,设备)</td><td>释放设备上下文（DC），将其释放供其他应用程序使用。</td></tr>
<tr><td>转换坐标</td><td>ScreenToClient</td><td>转换坐标(窗口,坐标)</td><td>将屏幕上指定点的屏幕坐标转换为客户端坐标</td></tr>
<tr><td>设置矩形</td><td>SetRect</td><td>设置矩形(矩形,左,上,右,下)</td><td>设置指定矩形的坐标。这等效于将左、上、右和下参数分配给矩形的相应成员。</td></tr>
<tr><td>设空矩形</td><td>SetRectEmpty</td><td>设空矩形(矩形)</td><td>创建一个空矩形，其中所有坐标都设置为零。</td></tr>
<tr><td>减去矩形</td><td>SubtractRect</td><td>减去矩形(矩形,矩形1,矩形2)</td><td>通过从矩形1减去矩形2而形成的矩形。</td></tr>
<tr><td>制表写字</td><td>TabbedTextOutA</td><td>制表写字(设备,左,上,文字,字数,组数,制表组,制表X)</td><td>将一个字符串写到指定的位置，并按制表位位置数组里的值展开制表符。</td></tr>
<tr><td>设备窗口</td><td>WindowFromDC</td><td>窗口=设备窗口(设备)</td><td>返回与指定的显示设备关联的窗口的句柄。</td></tr>
<tr><td>更新窗口</td><td>UpdateWindow</td><td>更新窗口(窗口)</td><td>将重绘消息直接发送到指定窗口的窗口过程</td></tr>
<tr><td>合并矩形</td><td>UnionRect</td><td>合并矩形(矩形,矩形1,矩形2)</td><td>合并的矩形包含矩形1和矩形2的最小矩形。</td></tr>
<tr><td>验证矩形</td><td>ValidateRect</td><td>验证矩形(窗口,矩形)</td><td>从指定窗口的更新区域中删除矩形来验证矩形内的工作区。</td></tr>
<tr><td>验证区域</td><td>ValidateRgn</td><td>验证区域(窗口,区域)</td><td>从指定窗口的当前更新区域中删除该区域来验证区域内的工作区。</td></tr>
</table>
<font size="6" color="#0000FF"><a name="菜单资源">菜单资源</a>——功能函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>菜单条类</td><td>MENUBARINFO</td><td>31</td><td>包含菜单栏信息</td></tr>
<tr><th colspan=4>菜单条类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>左边</td><td>rcBar.left</td><td>整数</td><td>菜单项的左边位置</td></tr>
<tr><td>顶部</td><td>rcBar.top</td><td>整数</td><td>菜单项的顶部位置</td></tr>
<tr><td>宽度</td><td>rcBar.right</td><td>整数</td><td>菜单项的宽度</td></tr>
<tr><td>高度</td><td>rcBar.bottom</td><td>整数</td><td>菜单项的高度</td></tr>
<tr><td>菜单</td><td>hMenu</td><td>整数</td><td>菜单的句柄。</td></tr>
<tr><td>子项</td><td>hwndMenu</td><td>整数</td><td>子菜单项的句柄。</td></tr>
<tr><td>焦点</td><td>fBarFocused</td><td>布尔</td><td>如果菜单栏或弹出菜单具有焦点为真</td></tr>
<tr><td>项点</td><td>fFocused</td><td>布尔</td><td>如果菜单项具有焦点则为真</td></tr>
<tr><td>预留</td><td>fUnused</td><td>布尔</td><td>未使用</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>菜单项类</td><td>MENUITEMINFO</td><td>48</td><td>包含菜单栏信息</td></tr>
<tr><th colspan=4>菜单项类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>成员</td><td>fMask</td><td>整数</td><td>指示要检索或设置的成员。</td></tr>
<tr><td>选项</td><td>fType</td><td>整数</td><td>菜单项类型。</td></tr>
<tr><td>状态</td><td>fState</td><td>整数</td><td>菜单项状态。</td></tr>
<tr><td>编号</td><td>wID</td><td>整数</td><td>标识菜单项的应用程序定义的值。</td></tr>
<tr><td>子项</td><td>hSubMenu</td><td>整数</td><td>与菜单项关联的下拉菜单或子菜单的控点。</td></tr>
<tr><td>选图</td><td>hbmpChecked</td><td>整数</td><td>选定菜单时位图的句柄</td></tr>
<tr><td>未选</td><td>hbmpUnchecked</td><td>整数</td><td>未选定菜单时位图的句柄</td></tr>
<tr><td>项值</td><td>dwItemData</td><td>整数</td><td>与菜单项关联的应用程序定义的值。</td></tr>
<tr><td>类值</td><td>dwTypeData</td><td>整数</td><td>如果菜单项具有焦点则为真</td></tr>
<tr><td>字长</td><td>cch</td><td>整数</td><td>接收菜单项文本的长度（以字符为单位）。</td></tr>
<tr><td>图片</td><td>hbmpItem</td><td>整数</td><td>要显示的位图的句柄</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>菜单类</td><td>MENUINFO</td><td>28</td><td>包含菜单栏信息</td></tr>
<tr><th colspan=4>菜单类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>成员</td><td>fMask</td><td>整数</td><td>指示要检索或设置的成员。</td></tr>
<tr><td>样式</td><td>dwStyle</td><td>整数</td><td>菜单样式。</td></tr>
<tr><td>最高</td><td>cyMax</td><td>整数</td><td>菜单的最大高度。</td></tr>
<tr><td>背景</td><td>hbrBack</td><td>整数</td><td>用于菜单背景的画笔的手柄。</td></tr>
<tr><td>帮助</td><td>dwContextHelpID</td><td>整数</td><td>上下文帮助标识符。</td></tr>
<tr><td>定义</td><td>dwMenuData</td><td>整数</td><td>应用程序定义的值。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>附加菜单</td><td>AppendMenuA</td><td>附加菜单(菜单,样式,标识,内容)</td><td>将一个新项目附加到指定的菜单栏，下拉菜单，子菜单或快捷菜单。标识是菜单序号或者0文字,4图片,$100附加数据,样式还包括1灰化 2禁用 8复选 $10下拉式 $20垂直线分开列 $40新行列不分开 $800水平分界线</td></tr>
<tr><td>画菜单栏</td><td>DrawMenuBar</td><td>画菜单栏(窗口)</td><td>如果窗口的菜单条被修改，则必须调用此函数来画修改了的菜单条。</td></tr>
<tr><td>菜单复选</td><td>CheckMenuItem</td><td>菜单复选(菜单,项,状态)</td><td>将指定菜单项的复选标记属性的状态设置为选定或清除。0未选1灰色2禁用8选中$400相对菜单项</td></tr>
<tr><td>菜单单选</td><td>CheckMenuRadioItem</td><td>菜单单选(窗口,首个,最后,标识,选项)</td><td>选中第四参数的菜单项。首个到末尾的其它项清除选中。选项0标识$400相对位置</td></tr>
<tr><td>转小写</td><td>CharLowerA</td><td>小写字=转小写("AASD")</td><td>把某个字符或字符串转换为小写字母</td></tr>
<tr><td>转换小写</td><td>CharLowerBuffA</td><td>转换小写(文字,长度)</td><td>把文本变量或内存缓冲区按指定长度转换为小写</td></tr>
<tr><td>转大写</td><td>CharUpperA</td><td>大写字=转大写("asdf")</td><td>把某个字符或字符串转换为大写字母</td></tr>
<tr><td>转换大写</td><td>CharUpperBuffA</td><td>转换大写(文字,长度)</td><td>把文本变量或内存缓冲区按指定长度转换为大写</td></tr>
<tr><td>转定义字</td><td>CharToOemA</td><td>转定义字(文字,缓冲区)</td><td>将字符串转换为 OEM 定义的字符集。转ANSI编码时缓冲区可以跟源文字相同</td></tr>
<tr><td>转定量字</td><td>CharToOemA</td><td>转定量字(文字,缓冲区,长度)</td><td>将字符串中指定数量的字符转换为 OEM 定义的字符集。转ANSI编码时缓冲区可以跟源文字相同</td></tr>
<tr><td>限定光标</td><td>ClipCursor</td><td>限定光标(矩形)</td><td>将光标限定在屏幕上的矩形区域。</td></tr>
<tr><td>复制键表</td><td>CopyAcceleratorTableA</td><td>复制键表(键表,数组,数量)</td><td>复制指定的快捷键表到ACCEL快捷键类数组中。</td></tr>
<tr><td>创建键表</td><td>CreateAcceleratorTableA</td><td>键表=创建键表(表组,数目)</td><td>创建加速器表。</td></tr>
<tr><td>销毁键表</td><td>DestroyAcceleratorTable</td><td>创建键表(键表)</td><td>销毁加速器表。</td></tr>
<tr><td>载入键表</td><td>LoadAcceleratorsA</td><td>载入键表(实例,表名)</td><td>加载指定的键盘码表。</td></tr>
<tr><td>处理键表</td><td>TranslateAcceleratorA</td><td>处理键表(窗口,键表,消息)</td><td>处理菜单命令的快捷键。</td></tr>
<tr><td>子窗键表</td><td>TranslateMDISysAccel</td><td>子窗键表(子窗,消息)</td><td>处理子窗口的窗口菜单命令的快捷键击键。</td></tr>
<tr><td>复制图标</td><td>CopyIcon</td><td>图标=复制图标(图标)</td><td>复制一个图标。在源图标被释放时新图标仍然可用</td></tr>
<tr><td>复制图像</td><td>CopyImage</td><td>图像=复制图像(图像,类,宽,高,方式)</td><td>复制一个图像。类=1图标,2光标,0位图。方式1单色,4副本,8删除原图;<a href="#加图类型">加载图像标志</a></td></tr>
<tr><td>创建图标</td><td>CreateIcon</td><td>创建图标(实例,宽,高,面数,位数,位值,色值)</td><td>创建一个具有指定大小，位模式和热点的光标。</td></tr>
<tr><td>资源图标</td><td>CreateIconFromResource</td><td>资源图标(数据,长度,标志,模式)</td><td>从资源数据创建一个图标或光标。标志为真是图标,否则光标.模式$2000-Win2x;$30000=Win3x</td></tr>
<tr><td>新建图标</td><td>CreateIconIndirect</td><td>新建图标(图标结构)</td><td>创建一个具有指定大小，颜色和位模式的图标。</td></tr>
<tr><td>创建菜单</td><td>CreateMenu</td><td>菜单=创建菜单</td><td>创建一级空菜单。</td></tr>
<tr><td>建子菜单</td><td>CreatePopupMenu</td><td>菜单=建子菜单</td><td>创建弹出式子菜单。</td></tr>
<tr><td>图标信息</td><td>GetIconInfo</td><td>图标信息(句柄,信息)</td><td>检索有关指定图标或光标的信息。</td></tr>
<tr><td>图标光标</td><td>GetIconInfoExA</td><td>图标光标(句柄,信息)</td><td>检索有关指定图标或光标的信息。</td></tr>
<tr><td>取光标区</td><td>GetClipCursor</td><td>取光标区(矩形)</td><td>检索限制光标的矩形区域的屏幕坐标。</td></tr>
<tr><td>游标信息</td><td>GetCursorInfo</td><td>游标信息(信息)</td><td>检索有关全局游标的信息。</td></tr>
<tr><td>获取游标</td><td>GetCursor</td><td>光标=获取游标</td><td>获得以当前游标的句柄</td></tr>
<tr><td>更换游标</td><td>SetCursor</td><td>更换游标(光标)</td><td>更换当前游标的形状</td></tr>
<tr><td>读取光标</td><td>GetCursorPos</td><td>读取光标(位置)</td><td>获得当前鼠标的位置</td></tr>
<tr><td>光标位置</td><td>SetCursorPos</td><td>光标位置(水平,垂直)</td><td>修改当前鼠标的位置</td></tr>
<tr><td>创建标记</td><td>CreateCaret</td><td>创建标记(窗口,形状,宽,高)</td><td>在窗口上插入记号形状(可以是线条、块或位图)。</td></tr>
<tr><td>销毁标记</td><td>DestroyCaret</td><td>销毁标记</td><td>从窗口中释放插入符号，并从屏幕中删除插入符号。不释放位图</td></tr>
<tr><td>闪烁时间</td><td>GetCaretBlinkTime</td><td>毫秒=闪烁时间</td><td>获取插入字符标记闪烁的时间毫秒数</td></tr>
<tr><td>时间闪烁</td><td>SetCaretBlinkTime</td><td>时间闪烁(时间)</td><td>设置插入字符标记闪烁的时间毫秒数</td></tr>
<tr><td>隐藏标记</td><td>HideCaret</td><td>隐藏标记(窗口)</td><td>从屏幕上移除插入记号。隐藏插入记号不会破坏其当前形状或使插入点失效。</td></tr>
<tr><td>插入位置</td><td>GetCaretPos</td><td>插入位置(坐标)</td><td>获取插入标记的位置到指定坐标上。</td></tr>
<tr><td>位置标记</td><td>SetCaretPos</td><td>位置标记(x,y)</td><td>将插入标记移动到指定坐标上。</td></tr>
<tr><td>显示标记</td><td>ShowCaret</td><td>显示标记(窗口)</td><td>使插入记号在屏幕上的插入记号当前位置可见。当插入记号变得可见时，它开始自动闪烁。</td></tr>
<tr><td>创建光标</td><td>DestroyCursor</td><td>创建光标(实例,左,顶,宽,高,与掩码,异或掩码)</td><td>创建具有指定大小、位模式和热点的单色游标。</td></tr>
<tr><td>销毁光标</td><td>DestroyCursor</td><td>销毁光标(光标)</td><td>销毁指定的光标并释放内存</td></tr>
<tr><td>销毁图标</td><td>DestroyIcon</td><td>销毁图标(图标)</td><td>销毁指定的图标并释放内存</td></tr>
<tr><td>删除菜单</td><td>DeleteMenu</td><td>删除菜单(菜单,项,选项)</td><td>从指定的菜单中删除一个项目。选项0标识$400相对位置</td></tr>
<tr><td>销毁菜单</td><td>DestroyMenu</td><td>销毁菜单(菜单)</td><td>销毁指定的菜单并释放内存</td></tr>
<tr><td>获取菜单</td><td>GetMenu</td><td>菜单=获取菜单(窗口)</td><td>返回分配给指定窗口的菜单的句柄。</td></tr>
<tr><td>设置菜单</td><td>SetMenu</td><td>设置菜单(窗口,菜单)</td><td>将新菜单分配给指定的窗口。</td></tr>
<tr><td>图标尺寸</td><td>GetMenuCheckMarkDimensions</td><td>宽高=图标尺寸</td><td>返回默认复选标记位图的尺寸。在菜单项旁边显示位图前，先获取大小。返回值低位是宽度,高位是高度</td></tr>
<tr><td>取菜单条</td><td>GetMenuBarInfo</td><td>取菜单条(窗口,选项,序号,信息)</td><td>检索有关指定菜单栏的信息。选项=-1系统菜单 -4弹出菜单 -3普通菜单</td></tr>
<tr><td>菜单默认</td><td>GetMenuDefaultItem</td><td>项=菜单默认(菜单,方式,选项)</td><td>返回指定菜单上的默认菜单项。方式为真获取位置,为假获取标识。选项1含禁用 2搜索打开菜单</td></tr>
<tr><td>默认菜单</td><td>SetMenuDefaultItem</td><td>默认菜单(菜单,项,方式)</td><td>返回指定菜单上的默认菜单项。方式为真指定位置,为假指定标识。</td></tr>
<tr><td>取菜单数</td><td>GetMenuItemCount</td><td>数=取菜单数(菜单)</td><td>返回指定菜单中的项目数</td></tr>
<tr><td>菜单信息</td><td>GetMenuInfo</td><td>菜单信息(菜单,菜单类)</td><td>获取指定菜单的信息。</td></tr>
<tr><td>信息菜单</td><td>SetMenuInfo</td><td>信息菜单(菜单,菜单类)</td><td>设置指定菜单的信息。</td></tr>
<tr><td>菜单帮助</td><td>GetMenuContextHelpId</td><td>id=菜单帮助(菜单)</td><td>返回指定菜单中的帮助上下文标识符</td></tr>
<tr><td>帮助菜单</td><td>SetMenuContextHelpId</td><td>帮助菜单(菜单,id)</td><td>修改指定菜单中的帮助上下文标识符</td></tr>
<tr><td>菜单标识</td><td>GetMenuItemID</td><td>标识=菜单标识(菜单,位置)</td><td>返回指定菜单中指定位置的菜单标识符</td></tr>
<tr><td>菜单图片</td><td>SetMenuItemBitmaps</td><td>菜单图片(菜单,项,方式,未选,选图)</td><td>将指定的位图与菜单项相关联。方式0项为标识,$400位置</td></tr>
<tr><td>取菜单项</td><td>GetMenuItemInfoA</td><td>取菜单项(菜单,项,方式,菜单项类)</td><td>获取有关菜单项的信息。方式为真指定位置,为假指定标识。</td></tr>
<tr><td>改菜单项</td><td>SetMenuItemInfoA</td><td>改菜单项(菜单,项,方式,菜单项类)</td><td>修改有关菜单项的信息。方式为真指定位置,为假指定标识。</td></tr>
<tr><td>菜单边框</td><td>GetMenuItemRect</td><td>菜单边框(窗口,菜单,位置,矩形)</td><td>检索指定菜单项的边框。</td></tr>
<tr><td>菜单标志</td><td>GetMenuState</td><td>菜单标志(菜单,项,方式)</td><td>检索与指定菜单项关联的菜单标志。方式0项为标识,$400位置</td></tr>
<tr><td>取子菜单</td><td>GetSubMenu</td><td>取子菜单(菜单,位置)</td><td>检索由指定菜单项激活的下拉菜单或子菜单的句柄。</td></tr>
<tr><td>载入菜单</td><td>LoadMenuA</td><td>菜单=载入菜单(实例,资源)</td><td>从可执行文件中加载指定的菜单资源</td></tr>
<tr><td>加载菜单</td><td>LoadMenuIndirectA</td><td>菜单=加载菜单(模板)</td><td>在内存中加载指定的菜单模板。</td></tr>
<tr><td>分离菜单</td><td>RemoveMenu</td><td>分离菜单(菜单,项,方式)</td><td>删除菜单项或从指定菜单中分离子菜单。方式0项为标识,$400位置</td></tr>
<tr><td>菜单标题</td><td>GetMenuStringA</td><td>菜单标题(菜单,项,内容,长度,方式)</td><td>将指定菜单项的文本字符串复制到指定的缓冲区中。方式0项为标识,$400位置</td></tr>
<tr><td>取主菜单</td><td>GetSystemMenu</td><td>取主菜单(菜单,重置)</td><td>使应用程序能够访问系统菜单（也称为开始菜单或控制菜单）以进行复制和修改。</td></tr>
<tr><td>改主菜单</td><td>SetSystemMenu</td><td>改主菜单(菜单,位置)</td><td>使应用程序能够访问系统菜单（也称为开始菜单或控制菜单）以进行复制和修改。</td></tr>
<tr><td>突出菜单</td><td>HiliteMenuItem</td><td>突出菜单(窗口,菜单,项,方式)</td><td>在菜单栏中的项中添加或删除突出显示。方式 $400相对位置 $80突出显示 0不突出/标识</td></tr>
<tr><td>插入菜单</td><td>InsertMenuA</td><td>插入菜单(菜单,项,方式,标识,名称)</td><td>将新菜单项插入到菜单中，并将其他项向下移动菜单。方式 $400相对位置 0标识</td></tr>
<tr><td>插菜单项</td><td>InsertMenuItemA</td><td>插入菜单(菜单,项,方式,信息)</td><td>在菜单中的指定位置插入新菜单项。方式为真时项是相对位置</td></tr>
<tr><td>是否菜单</td><td>IsMenu</td><td>是否菜单(菜单)</td><td>判断是否一个菜单</td></tr>
<tr><td>控制菜单</td><td>EnableMenuItem</td><td>控制菜单(菜单,项,选项)</td><td>允许、禁止或变灰指定的菜单条目。0未选1灰色2禁用8选中$400相对菜单项</td></tr>
<tr><td>结束菜单</td><td>EndMenu</td><td>结束菜单</td><td>结束程序窗口的菜单</td></tr>
<tr><td>载入位图</td><td>LoadBitmapA</td><td>图片=载入位图(实例,资源)</td><td>从可执行文件中加载指定的位图资源</td></tr>
<tr><td>载入光标</td><td>LoadCursorA</td><td>光标=载入光标(实例,资源)</td><td>从可执行文件中加载指定的光标资源</td></tr>
<tr><td>加载光标</td><td>LoadCursorFromFileA</td><td>光标=加载光标(文件名)</td><td>加载光标文件或者系统光标号</td></tr>
<tr><td>载入图标</td><td>LoadIconA</td><td>图标=载入图标(实例,资源)</td><td>从可执行文件中加载指定的图标资源</td></tr>
<tr><td>加载图像</td><td>LoadImageA</td><td>图像=加载图像(实例,文件名,类型,宽,高,标志)</td><td>类型:0位图,1图标,2光标;读取文件时实例=0;标志:1黑白图像,$10加载文件,$20取透明色<a href="#加图类型">加载图像标志</a></td></tr>
<tr><td>载入文字</td><td>LoadStringA</td><td>载入文字(模块,标识,内容,长度)</td><td>从可执行文件中加载字符串资源</td></tr>
<tr><td>查找图标</td><td>LookupIconIdFromDirectory</td><td>资源=查找图标(目录,真)</td><td>在图标或光标资源组中搜索最适合当前显示设备的图标或光标(假)。目录=12光标目录 14图标目录</td></tr>
<tr><td>定位菜单</td><td>MenuItemFromPoint</td><td>定位菜单(窗口,菜单,坐标)</td><td>获取指定位置的子菜单</td></tr>
<tr><td>修改菜单</td><td>ModifyMenuA</td><td>修改菜单(菜单,项,方式,标识,内容)</td><td>更改现有菜单项。此函数用于指定菜单项的内容、外观和行为。方式为$400相对位置项</td></tr>
<tr><td>定义转字</td><td>OemToCharA</td><td>定义转字(文字,缓冲区)</td><td>将 OEM 定义的字符集中的字符串转换为 ANSI 或宽字符字符串。</td></tr>
<tr><td>定量转字</td><td>OemToCharBuffA</td><td>定量转字(文字,缓冲区,长度)</td><td>将 OEM 定义的字符集中的指定数量的字符串转换为 ANSI 或宽字符字符串。</td></tr>
<tr><td>设置光标</td><td>SetSystemCursor</td><td>设置光标(光标,标识)</td><td>用指定的游标的替换标识指定的系统游标，然后销毁此游标</td></tr>
<tr><td>显隐光标</td><td>ShowCursor</td><td>显隐光标(真)</td><td>显示或者隐藏光标</td></tr>
<tr><td>显示菜单</td><td>TrackPopupMenu</td><td>显示菜单(菜单,选项,x,y,0,窗口,0)</td><td>在指定位置显示快捷菜单，并跟踪菜单上项的选择。选项=0左上对齐 2可右键 4对x居中 8居右 $10对y居中 $20底对齐 $80不发单击 $100返回标识</td></tr>
<tr><td>展示菜单</td><td>TrackPopupMenuEx</td><td>展示菜单(菜单,选项,x,y,窗口,数据)</td><td>功能同上,可选数据用来指定不重叠区域.选项动画 $800右到左 $400左到右 $4000不动画 $2000下到上 $1000上到下 $40垂直居中适应不重叠</td></tr>
<tr><td>启动帮助</td><td>WinHelpA</td><td>启动帮助(窗口,名称,命令,数据)</td><td>启动 Windows 帮助 （Winhelp.exe） 并传递指示应用程序所请求帮助的性质的其他数据。</td></tr>
<tr><td>组合式</td><td>wsprintfA</td><td>组合式(内容,格式,变量..)</td><td>将多个变量按照指定格式组合成一个字符串</td></tr>
<tr><td>组合文字</td><td>wvsprintfA</td><td>组合文字(内容,格式,参数表)</td><td>使用指向参数列表的指针将格式化数据写入指定的缓冲区。</td></tr>
</table>
<font size="6" color="#0000FF"><a name="窗口控件">窗口控件</a>——功能函数</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>按钮复选</td><td>CheckDlgButton</td><td>按钮复选(窗口,标识,状态)</td><td>更改复选按钮控件的状态。0未选1选中2无效(灰色)</td></tr>
<tr><td>按钮单选</td><td>CheckRadioButton</td><td>按钮单选(窗口,首个,最后,标识)</td><td>包含第一个和最后一个单选按钮的标识,这组按钮中只允许第四参数指定的标识按钮为选中</td></tr>
<tr><td>界面计数</td><td>GetGuiResources</td><td>计数=界面计数(进程,方式)</td><td>获得指定进程正在使用的图形用户界面对象的句柄计数。方式=0界面计数 1用户计数 2界面峰值 4用户峰值</td></tr>
<tr><td>每列项数</td><td>GetListBoxInfo</td><td>项数=每列项数(列表)</td><td>获得指定列表框中每列的项目数</td></tr>
<tr><td>前后控件</td><td>GetNextDlgGroupItem</td><td>前后控件(窗口,起始,向前)</td><td>检索对话框中指定起始控件之前或后一个控件的句柄。向前为假是向后</td></tr>
<tr><td>前后切换</td><td>GetNextDlgTabItem</td><td>前后切换(窗口,起始,向前)</td><td>检索对话框中指定起始控件之前或后一个具有WS_TABSTOP样式控件的句柄。向前为假是向后</td></tr>
<tr><td>读滚动条</td><td>GetScrollBarInfo</td><td>读滚动条(窗口,方式,信息)</td><td>检索有关指定滚动条的信息。方式=-4控件 -5垂直 -6水平</td></tr>
<tr><td>读滚动区</td><td>GetScrollInfo</td><td>读滚动区(窗口,方式,信息)</td><td>获取滚动条的信息，<a href="#滚动信息类">滚动信息类</a>。方式=1垂直 0水平</td></tr>
<tr><td>改滚动区</td><td>SetScrollInfo</td><td>改滚动区(窗口,方式,信息)</td><td>设置滚动条的信息，<a href="#滚动信息类">滚动信息类</a>。方式=1垂直 0水平</td></tr>
<tr><td>读滚动位</td><td>GetScrollPos</td><td>位置=读滚动位(窗口,方式)</td><td>检索有关指定滚动条的滑块位置。方式=1垂直 0水平</td></tr>
<tr><td>改滚动位</td><td>SetScrollPos</td><td>改滚动位(窗口,方式,位置,重绘)</td><td>设置滚动框（滑块）在指定滚动条中的位置。方式=1垂直 0水平;重绘是真或假</td></tr>
<tr><td>读滚动框</td><td>GetScrollRange</td><td>读滚动框(窗口,方式,最小,最大)</td><td>检索有关指定滚动条的当前最小和最大滚动框位置。方式=1垂直 0水平</td></tr>
<tr><td>改滚动框</td><td>SetScrollRange</td><td>改滚动框(窗口,方式,最小,最大,重绘)</td><td>设置有关指定滚动条的当前最小和最大滚动框位置。方式=1垂直 0水平</td></tr>
<tr><td>取组合框</td><td>GetComboBoxInfo</td><td>取组合框(窗口,信息)</td><td>检索有关指定组合框的信息。</td></tr>
<tr><td>字符宽高</td><td>GetDialogBaseUnits</td><td>宽高=字符宽高</td><td>检索系统的对话框基本单位，即系统字体中字符的平均宽度和高度。</td></tr>
<tr><td>控件标识</td><td>GetDlgCtrlID</td><td>标识=控件标识(控件)</td><td>返回指定控件的标识符。</td></tr>
<tr><td>获取控件</td><td>GetDlgItem</td><td>控件=获取控件(窗口,标识)</td><td>通过标识获取窗体上的子窗控件</td></tr>
<tr><td>取控件数</td><td>GetDlgItemInt</td><td>数=取控件数(窗口,标识,@成功,符号)</td><td>获取对话框控件的标题文本,并转换为数字,符号为真包含负数</td></tr>
<tr><td>改控件数</td><td>SetDlgItemInt</td><td>改控件数(窗口,标识,数值,符号)</td><td>用指定数值修改对话框控件的标题文本(数字自动转文本),符号为假不检查"-"符号</td></tr>
<tr><td>取控件字</td><td>GetDlgItemTextA</td><td>取控件字(窗口,标识,内容,长度)</td><td>获取对话框控件的文本和标题</td></tr>
<tr><td>改控件字</td><td>SetDlgItemTextA</td><td>改控件字(窗口,标识,内容)</td><td>修改对话框控件的文本和标题</td></tr>
<tr><td>文件列表</td><td>DlgDirListA</td><td>文件列表(窗口,路径,列表标识,静态标识,属性)</td><td>使用与指定路径或文件名匹配的所有文件的名称填充指定的列表框。</td></tr>
<tr><td>文件组合</td><td>DlgDirListComboBoxA</td><td>文件组合(窗口,路径,列表标识,静态标识,属性)</td><td>使用与指定目录列表填充指定的组合框。</td></tr>
<tr><td>文件选择</td><td>DlgDirSelectComboBoxExA</td><td>文件选择(窗口,路径,长度,标识)</td><td>从使用文件组合函数填充的组合框中获取当前选择的路径。</td></tr>
<tr><td>文件选表</td><td>DlgDirSelectExA</td><td>文件选表(窗口,路径,长度,标识)</td><td>从使用文件列表函数填充的列表框中获取当前选择的路径。</td></tr>
<tr><td>控制滚条</td><td>EnableScrollBar</td><td>控制滚条(控件,方向,激活)</td><td>允许、禁止或变灰指定的菜单条目。方向0水平箭头 1垂直箭头 2滑块 3双箭头;激活=0箭头有效 1左或上箭头无效 2右或下箭头无效 3都无效</td></tr>
<tr><td>结束模态</td><td>EndDialog</td><td>结束模态(窗口,真)</td><td>结束模态对话框</td></tr>
<tr><td>取标题栏</td><td>GetTitleBarInfo</td><td>取标题栏(窗口,信息)</td><td>检索有关指定标题栏的信息。</td></tr>
<tr><td>滚动矩形</td><td>ScrollDC</td><td>滚动矩形(设备,水平,垂直,滚动矩形,剪切矩形,区域,更新矩形)</td><td>水平和垂直滚动一个位矩形。</td></tr>
<tr><td>滚动窗口</td><td>ScrollWindow</td><td>滚动窗口(窗口,水平,垂直,滚动矩形,剪切矩形)</td><td>滚动指定窗口的工作区的内容。</td></tr>
<tr><td>显示滚动</td><td>ShowScrollBar</td><td>显示滚动(窗口,方式,真)</td><td>显示或隐藏指定的滚动条。方式=1垂直 0水平 3水平和垂直</td></tr>
<tr><td>按钮信息</td><td>IsDlgButtonChecked</td><td>按钮信息(窗口,标识)</td><td>确定按钮控件是否在其旁边有复选标记，还是三态按钮控件是否为灰色，已选中或两者都不是。</td></tr>
<tr><td>信息框</td><td>MessageBoxA</td><td>信息框(窗口,内容,标题,样式)</td><td>弹出一个消息框,样式通过数字控制</td></tr>
<tr><td>消息框</td><td>MessageBoxIndirectA</td><td>消息框(<a href="#消息框类">消息框类</a>)</td><td>弹出一个消息框,样式通过消息类结构控制</td></tr>
<tr><td>延时框</td><td>MessageBoxTimeoutA</td><td>延时框(0,内容,标题,样式,0,毫秒)</td><td>弹出一个消息框,超过设定时间未点击则自动关闭</td></tr>
<tr><td>是否最小</td><td>IsIconic</td><td>是否最小(窗口)</td><td>判断给定的窗口句柄是否为最小化的窗口</td></tr>
<tr><td>锁工作站</td><td>LockWorkStation</td><td>锁工作站</td><td>锁定工作站的显示。锁定工作站可防止未经授权使用。</td></tr>
<tr><td>会话连接</td><td>DdeConnect</td><td>会话连接(实例,服务器,主题,上下文)</td><td>与支持指定服务名称和主题名称对的服务器应用程序建立会话。</td></tr>
<tr><td>会话全连</td><td>DdeConnectList</td><td>会话全连(实例,服务器,主题,列表,上下文)</td><td>与支持指定服务名称和主题名称对的所有服务器应用程序建立会话。</td></tr>
<tr><td>会话创建</td><td>DdeCreateDataHandle</td><td>会话创建(实例,数据,大小,偏移,项名,剪板,标志)</td><td>创建动态数据交换(DDE)，并使用指定缓冲区中的数据填充对象。</td></tr>
<tr><td>会话字句</td><td>DdeCreateStringHandleA</td><td>会话字句(实例,名称,代码页)</td><td>创建标识指定字符串的句柄。1004=ANSI,1200=UNICODE</td></tr>
<tr><td>会话终止</td><td>DdeDisconnect</td><td>会话终止(会话)</td><td>终止启动的会话，并使指定的会话句柄失效。</td></tr>
<tr><td>会话销毁</td><td>DdeDisconnectList</td><td>会话销毁(会话列表)</td><td>销毁指定的会话列表并终止与该列表关联的所有会话。</td></tr>
<tr><td>进程快照</td><td>CreateToolhelp32Snapshot</td><td>进程快照(对象,进程ID)</td><td>可以获取系统中正在运行的进程信息，线程信息</td></tr>
</table><p><font size="6"><a name="重绘标志">重绘窗口标志</a>——更新窗口指定矩形或区域</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>重绘无效</td><td>$0001</td><td>RDW_INVALIDATE</td><td>使指定区域或整个窗口无效，常用于<a href="#重绘窗口">重绘窗口</a></td></tr>
<tr><td>重绘内部</td><td>$0002</td><td>RDW_INTERNALPAINT</td><td>使一条WM_PAINT消息被传递到窗口，而不管窗口是否包含一个无效区域。</td></tr>
<tr><td>重绘背景</td><td>$0004</td><td>RDW_ERASE</td><td>使窗口在重画时接收到一个擦除背景消息。</td></tr>
<tr><td>重绘有效</td><td>$0008</td><td>RDW_VALIDATE</td><td>使指定区域或整个窗口有效</td></tr>
<tr><td>重绘禁止</td><td>$0010</td><td>RDW_NOINTERNALPAINT</td><td>禁止任何未处理的内部重绘消息。</td></tr>
<tr><td>重绘防擦</td><td>$0020</td><td>RDW_NOERASE</td><td>禁止任何未处理的WM_ERASEBKGND消息。</td></tr>
<tr><td>重绘当前</td><td>$0040</td><td>RDW_NOCHILDREN</td><td>在重画操作中不包括子窗口</td></tr>
<tr><td>重绘全部</td><td>$0080</td><td>RDW_ALLCHILDREN</td><td>在重画操作中包含子窗口</td></tr>
<tr><td>重绘更新</td><td>$0100</td><td>RDW_UPDATENOW</td><td>使窗口接收到WM_NCPAINT，WM_ERASEBKGND和WM_PAINT消息</td></tr>
<tr><td>重绘擦除</td><td>$0200</td><td>RDW_ERASENOW</td><td>接收到WM_NCPAINT和WM_ERASEBKGND消息
<tr><td>重绘框架</td><td>$0400</td><td>RDW_FRAME</td><td>使窗口非客户区中与更新区域重叠的任何部分接收到一条WM_NCPAINT消息。</td></tr>
<tr><td>重绘禁框</td><td>$0800</td><td>RDW_NOFRAME</td><td>禁止任何未处理的WM_NCPAINT消息。</td></tr>
</table>
<font color="#0000FF"><a name="图形入门">图形设备接口(Graphics Device Interface)</a></font><br>
(GDI) 的 Microsoft Windows 图形设备接口使应用程序能够在视频显示器和打印机上使用图形和格式化文本。Windows应用程序不直接访问图形硬件，GDI负责应用程序与设备驱动程序交互。<br>
开发人员需要熟悉 Windows 消息驱动的体系结构。测试程序之前请先检查位图、图元文件和字体是否已经损坏。程序可以为某些打印和后台打印API指定安全描述符。设置安全描述符时应小心。<br>
<b>1.位图</b><br>
位图是一个图形对象，用于创建、操作 (缩放、滚动、旋转和绘制) ，以及将图像作为文件存储在磁盘上。<br>
<b>2.画刷</b><br>
画刷是应用程序用于绘制多边形、椭圆形和路径内部的图形工具。 绘图应用程序使用画笔绘制形状;字处理应用程序使用画笔绘制规则;<br>
计算机辅助设计 (CAD) 应用程序使用画笔绘制横断面视图的内部;和电子表格应用程序使用画笔绘制饼图的各个部分和条形图中的条形图。<br>
<b>3.剪裁</b><br>
剪裁 是将输出限制为应用程序窗口的工作区中的某个区域或路径的过程。<br>
<b>4.颜色</b><br>
颜色是应用程序生成的图片和图像中的重要元素。包括通过笔、画笔、文本或位图来管理和使用颜色。<br>
<b>5.坐标空间和转换</b><br>
应用程序使用坐标空间和转换来缩放、旋转、平移、剪切和反射图形输出。坐标空间是一个平面空间，它通过使用两个相互垂直的引用轴定位二维对象。<br>
有四个坐标空间：世界、页面、设备和物理设备 (工作区、桌面或打印纸页面) 。转换是一种算法，用于更改 (“转换”) 对象的大小、方向和形状。<br>
转换还会将图形对象从一个坐标空间传输到另一个坐标空间。 最终，对象显示在物理设备上，通常是屏幕或打印机。<br>
<b>6.设备上下文</b><br>
设备上下文是一种结构，用于定义一组图形对象及其关联属性，以及影响输出的图形模式。<br>
图形对象包括用于线条绘制的笔、用于绘制和填充的画笔、用于复制或滚动屏幕部分的位图、用于定义可用颜色集的调色板、用于剪裁和其他操作的区域，以及用于绘制和绘制操作的路径。<br>
<b>7.填充的形状</b><br>
填充形状 是使用当前笔轮廓并使用当前画笔填充的几何形式。 有五个填充形状：椭圆形、弧弦、饼图、多边形、矩形。<br>
<b>8.字体和文本</b><br>
字体用于在视频显示器和其他输出设备上绘制文本。 使用字体和文本功能，可以安装、选择和查询不同的字体。<br>
<b>9.线条和曲线</b><br>
线条和曲线用于在光栅设备上绘制图形输出。 线条 是光栅显示器上的一组突出显示像素 (或打印页上的一组点，) 由两个点标识：起点和终点。<br>
常规曲线是光栅显示器上的一组突出显示像素，(或打印页上的点) ，用于定义圆锥部分的外围 (或一部分的外围) 。 不规则曲线是一组像素，用于定义不适合圆锥部分的外围的曲线。<br>
<b>10.图元文件</b><br>
图元文件是以与设备无关的格式存储图片的结构集合。设备独立性是将图元文件与位图分开的一项功能。与位图不同，图元文件可保证设备独立性。<br>
但是，图元文件的绘制速度通常比位图慢一些。 因此，如果应用程序需要快速绘制，并且设备独立性不是问题，则应使用位图而不是图元文件。<br>
<b>11.路径</b><br>
路径是填充、轮廓(或同时填充和轮廓) 或形状的一个或多个图形。路径用于绘图和绘制应用程序。应用程序使用路径创建独特的剪裁区域、绘制不规则形状的轮廓以及填充不规则形状的内部。<br> 
不规则形状是由贝塞尔曲线和直线组成的形状。 (常规形状包括椭圆、圆、矩形和多边形。)<br>
<b>12.笔</b><br>
笔是应用程序可用于绘制线条和曲线的图形工具。 绘图应用程序使用笔绘制自由手绘线条、直线和曲线。应用程序使用笔绘制可见线条、隐藏线、剖面线、中心线等。<br>
Word处理和桌面发布应用程序使用笔绘制边框和规则。 电子表格应用程序使用笔来指定图形的趋势，并勾勒条形图和饼图。<br>
<b>13.矩形</b><br>
应用程序使用 矩形 来指定屏幕上或窗口中的矩形区域。<br>
<b>14.区域</b><br>
区域是一个矩形、多边形或椭圆 (或两个或更多个形状的组合，) 可以填充、绘制、倒排、定框，并用于对光标位置执行命中测试。<br>
<b>15.绘画和绘图</b><br>
介绍系统如何管理屏幕输出，并说明应用程序必须执行哪些操作才能在窗口中绘制。具体介绍 显示设备上下文(DC) 以及如何准备和使用它们。<br>
<br><font color="#0000FF"><a name="位图设备">位图设备</a></font><br>

位图是可在DC(设备上下文)中选择的GDI对象之一。设备上下文是定义一组图形对象及其关联属性以及影响输出的图形模式的结构。<br>
位图分为两类：设备无关的位图(DIB)和设备依赖位图(DDB)<br>
DIB 文件格式旨在确保使用一个应用程序创建的位图图形可以加载并显示在另一个应用程序中，同时保留与原始应用程序相同的外观。<br>
与设备无关的位图 (DIB) 包含颜色表。颜色表描述像素值与RGB颜色值的对应方式，这些值描述由发射光产生的颜色。因此DIB可以在任何设备上实现正确的配色方案。DIB包含以下颜色和维度信息：<br>

创建矩形图像的设备的颜色格式。<br>
创建矩形图像的设备分辨率。<br>
创建映像的设备的调色板。<br>
将红色、绿色、蓝色 ( RGB ) 三元元素映射到矩形图像中的像素的位数组。<br>
一个数据压缩标识符，指示 (使用任何) 来减小位数组大小的数据压缩方案。<br>
颜色和维度信息存储在 <a href="#位图信息类">位图信息类</a> 结构中，该结构由 <a href="#位图信息头类">位图信息头类</a> 结构组成，后跟两个或多个 <a href="#色度类">色度类</a> 结构。<br>
<a href="#位图信息头类">位图信息头类</a> 结构指定像素矩形的尺寸，描述设备的颜色技术，并标识用于减小位图大小的压缩方案。 <a href="#色度类">色度类</a> 结构标识像素矩形中显示的颜色。<br>

DIB 有两种：自下而上的 DIB，其中原点位于左下角。自上而下的 DIB，其中原点位于左上角。<br>
如果 DIB 的高度（如位图信息标头结构的 高度 成员所指示）为正值，则为自下而上的 DIB;如果高度为负值，则为自上而下的 DIB。 无法压缩自上而下的 DDB。<br>

颜色格式根据颜色平面和颜色位的计数指定。 颜色平面的计数始终为 1;对于单色位图，颜色位的计数为 1，VGA 位图为 4，其他颜色设备上的位图为 8、16、24 或 32。<br>
应用程序通过调用 设备项目 函数检索特定显示器 (或打印机) 使用的颜色位数，并将 BITSPIXEL 指定为第二个参数。<br>
调色板由 <a href="#色度类">色度类</a> 结构数组表示，这些结构指定显示设备调色板中每种颜色的红色、绿色和蓝色强度分量。调色板数组中的每个颜色索引映射到与位图关联的矩形区域中的特定像素。<br>
此数组的大小（以位为单位）等效于矩形的宽度（以像素为单位），乘以矩形的高度（以像素为单位），再乘以设备的颜色位计数。 应用程序可以通过调用 设备项目 函数来检索设备调色板的大小。<br>
Windows 支持压缩 8 bpp 和 4 bpp 自下而上 DDB 的调色板数组。 可以使用运行长度编码 (RLE) 方案压缩这些数组。 RLE 方案使用 2 字节值，第一个字节指定使用颜色索引的连续像素数，第二个字节指定索引。<br>
应用程序可以通过初始化所需的结构并调用 设备位图 函数，从 DDB 创建 DIB。 若要确定设备是否支持此函数，请调用 设备项目 函数，并将RC_DI_BITMAP指定为 RASTERCAPS 标志。<br>
需要复制位图的应用程序可以使用 透明传输 将源位图中的所有像素复制到目标位图，但那些与透明颜色匹配的像素除外。<br>
应用程序可以通过调用 指定像素 或 拉伸传输 函数，使用 DIB 在显示设备上设置像素。 若要确定设备是否支持 指定像素 函数，请调用 设备项目 函数。 <br>

<br>设备依赖位图（也称为 GDI 位图）是 Microsoft Windows 16位DOS系统中唯一可用的位图。随着显示技术的改进和各种可用显示设备的增加，某些固有问题浮出水面，只能通过 DIB 来解决。<br> 
因此绘图应用程序无法快速确定位图是否适用于运行应用程序的视频显示设备类型。尽管存在这些问题，但 DDB (也称为兼容位图) 仍可用于更好的 GDI 性能和其他情况。<br> 
兼容位图使用单一结构（位图类）描述设备相关的位图 (DB) 。 此结构的成员指定矩形区域的宽度和高度;将设备调色板中的条目映射到像素的数组的宽度;和设备的颜色格式。<br> 
应用程序可以通过调用 设备项目 函数并指定适当的常量来检索设备的颜色格式。 请注意，DDB 不包含颜色值;相反，颜色采用与设备相关的格式。 有关详细信息，请参阅 位图中的颜色。<br> 
由于每个设备都可以有自己的一组颜色，因此为一个设备创建的 DDB 可能无法在不同的设备上很好地显示。
<a name="位图类">位图类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>位图类</td><td>BITMAP</td><td>28</td><td>包含了位图数据的结构</td></tr>
<tr><th colspan=4>位图类——成员表</th></tr>
<tr><td>分类</td><td>bmType</td><td>整数</td><td>位图类型，其值必须为0</td></tr>
<tr><td>宽度</td><td>bmWidth</td><td>整数</td><td>位图的宽度，单位为像素</td></tr>
<tr><td>高度</td><td>bmHeight</td><td>整数</td><td>位图的高度，单位为像素</td></tr>
<tr><td>长度</td><td>bmWidthBytes</td><td>整数</td><td>每行的字节数，其值必须能被2整除。</td></tr>
<tr><td>层数</td><td>bmPlanes</td><td>整形</td><td>颜色平面数，一般为1。</td></tr>
<tr><td>位数</td><td>bmBitsPixel</td><td>整形</td><td>位图的位深度，一般为24或32</td></tr>
<tr><td>数据</td><td>bmBits</td><td>整数</td><td>一个指向内存的指针，所指向的内容为位图存放的地方</td></tr>
</table><a name="位图标头类">位图标头类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>位图标头类</td><td>BITMAPCOREHEADER</td><td>12</td><td>包含了位图数据的标头信息</td></tr>
<tr><th colspan=4>位图标头类——成员表</th></tr>
<tr><td>长度</td><td>bcSize</td><td>整数</td><td>结构体的字节数，12</td></tr>
<tr><td>宽度</td><td>bcWidth</td><td>整形</td><td>位图的宽度，单位为像素</td></tr>
<tr><td>高度</td><td>bcHeight</td><td>整形</td><td>位图的高度，单位为像素</td></tr>
<tr><td>层数</td><td>bcPlanes</td><td>整形</td><td>颜色平面数，一般为1。</td></tr>
<tr><td>位数</td><td>bcBitCount</td><td>整形</td><td>位图的位深度，1, 4, 8, 24或32</td></tr>
</table><a name="位图文件类">位图文件类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>位图文件类</td><td>BITMAPCOREHEADER</td><td>14</td><td>包含了位图文件的头部信息</td></tr>
<tr><th colspan=4>位图文件类——成员表</th></tr>
<tr><td>分类</td><td>bfType</td><td>整形</td><td>图片的类型，只能是BM</td></tr>
<tr><td>长度</td><td>bfSize</td><td>整数</td><td>宽*高*位数+偏移</td></tr>
<tr><td>预留</td><td>bfReserved1</td><td>整数</td><td>无效信息</td></tr>
<tr><td>偏移</td><td>bfOffBits</td><td>整数</td><td>位图数据的偏移量。</td></tr>
</table><a name="位图信息头类">位图信息头类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>位图信息头类</td><td>BITMAPINFOHEADER</td><td>40</td><td>包含了位图信息的结构</td></tr>
<tr><th colspan=4>位图信息头类——成员表</th></tr>
<tr><td>长度</td><td>biSize</td><td>整数</td><td>指定这个结构的长度，为40</td></tr>
<tr><td>宽度</td><td>biWidth</td><td>整数</td><td>位图的宽度，单位为像素</td></tr>
<tr><td>高度</td><td>biHeight</td><td>整数</td><td>位图的高度，单位为像素</td></tr>
<tr><td>层数</td><td>biPlanes</td><td>整形</td><td>颜色平面数，一般为1。</td></tr>
<tr><td>位数</td><td>biBitCount</td><td>整形</td><td>位图的位深度，1, 4, 8, 24或32</td></tr>
<tr><td>压缩</td><td>biCompression</td><td>整数</td><td>指定位图是否压缩，有效的值为BI_RGB，BI_RLE8，BI_RLE4，BI_BITFIELDS</td></tr>
<tr><td>大小</td><td>biSizeImage</td><td>整数</td><td>指定实际的位图数据占用的字节数</td></tr>
<tr><td>水平像素</td><td>biXPelsPerMeter</td><td>整数</td><td>指定目标设备的水平分辨率</td></tr>
<tr><td>垂直像素</td><td>biYPelsPerMeter</td><td>整数</td><td>指定目标设备的垂直分辨率</td></tr>
<tr><td>实际颜色</td><td>biClrUsed</td><td>整数</td><td>指定本图象实际用到的颜色数，0表示颜色数为2</td></tr>
<tr><td>重要颜色</td><td>biClrImportant</td><td>整数</td><td>指定本图象中重要的颜色数，0表示全部颜色。</td></tr>
</table><a name="色度类">色度类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>色度类</td><td>RGBQUAD</td><td>4</td><td>描述了由红色，绿色和蓝色的相对强度组成的颜色。</td></tr>
<tr><th colspan=4>色度类——成员表</th></tr>
<tr><td>蓝度</td><td>rgbBlue</td><td>字节</td><td>绿色强度值。</td></tr>
<tr><td>绿度</td><td>rgbGreen</td><td>字节</td><td>绿色强度值。</td></tr>
<tr><td>红度</td><td>rgbRed</td><td>字节</td><td>红色强度值。</td></tr>
<tr><td>预留</td><td>rgbReserved</td><td>字节</td><td>预留,必须是0</td></tr>
</table><a name="位图信息类">位图信息类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>位图信息类</td><td>BITMAPINFO</td><td>44+</td><td>定义 DIB 的尺寸和颜色信息。</td></tr>
<tr><th colspan=4>位图类——成员表</th></tr>
<tr><td>信息头</td><td>bmiHeader</td><td>位图信息头类</td><td>一个 位图信息头类 结构，其中包含有关颜色格式维度的信息。</td></tr>
<tr><td>颜色组</td><td>bmiColors[1]</td><td>色度类</td><td>构成颜色表的色度类数组或者一个由16位正数数组，指定当前实现的逻辑调色板中的索引。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><th colspan=4>位图函数</th></tr>
<tr><td>位图传输</td><td>BitBlt</td><td>位图传输(目标,左,顶,宽,高,源设备,源X,源Y,光栅)</td><td>该函数对指定的源设备环境区域中的像素进行位块传输</td></tr>
<tr><td>创建位图</td><td>CreateBitmap</td><td>创建位图(宽度,高度,色面,色位,数据)</td><td>创建一个具有指定宽度，高度和颜色格式（每个像素的颜色平面和位）的位图。</td></tr>
<tr><td>新建位图</td><td>CreateBitmapIndirect</td><td>位图=新建位图(位图类)</td><td>通过位图结构创建一个具有指定宽度，高度和颜色格式（每个像素的颜色平面和位）的位图。</td></tr>
<tr><td>创建图像</td><td>CreateCompatibleBitmap</td><td>创建图像(设备,宽度,高度)</td><td>创建与与指定设备参数标识的颜色格式兼容的位图。</td></tr>
<tr><td>内建位图</td><td>CreateDIBSection</td><td>内建位图(设备,位图信息,颜色索引,位图,映射,偏移)</td><td>创建一个与设备无关的位图（DIB内图），应用程序可以直接写入。</td></tr>
<tr><td>关联位图</td><td>CreateDIBitmap</td><td>关联位图(设备,格式,标志,数据,位色,使用)</td><td>从与设备无关的位图（DIB）创建与设备相关的位图（DDB）</td></tr>
<tr><td>兼容位图</td><td>CreateDiscardableBitmap</td><td>图像=兼容位图(设备,宽度,高度)</td><td>创建与指定设备兼容的位图，具有与设备一样的位/像素格式和颜色调色板</td></tr>
<tr><td>填充表层</td><td>ExtFloodFill</td><td>填充表层(设备,左,上,填色,方式)</td><td>使用当前画笔填充显示表面的一个区域。</td></tr>
<tr><td>填充表面</td><td>FloodFill</td><td>填充表面(设备,左,上,填色)</td><td>使用当前画笔填充显示表面的一个区域。</td></tr>
<tr><td>透明混合</td><td>GdiAlphaBlend</td><td>透明混合(目标,左,顶,宽,高,源,左,顶,宽,高,混合)</td><td>显示具有透明或半透明像素的位图。<a href="#混合类">混合类</a></td></tr>
<tr><td>渐变填充</td><td>GdiGradientFill</td><td>渐变填充(设备,顶点组,顶点数,网格,数量,模式)</td><td>指定<a href="#顶点类">顶点数组</a>填充<a href="#矩形点类">矩形</a>和<a href="#三角点类">三角形</a>网格结构。<a name="渐变填充模式">渐变填充模式</a></td></tr>
<tr><td>掩码传输</td><td>MaskBlt</td><td>掩码传输(目标,左,顶,宽,高,源,左,顶,掩码图,左偏,上偏,光栅)</td><td>使用指定的单色掩码位图(及偏移量)和光栅操作合并源位图和目标位图的颜色数据。<a href="#光栅定义">光栅定义</a></td></tr>
<tr><td>方点传输</td><td>PlgBlt</td><td>方点传输(目标,三点,源,左,顶,宽,高,掩码图,左偏,上偏)</td><td>执行颜色数据位从源设备的矩形到目标设备平行四边形三个顶点的位块传输。</td></tr>
<tr><td>位图数据</td><td>GetBitmapBits</td><td>位图数据(图片,长度,@数据)</td><td>将指定与设备相关的位图的位图位复制到缓冲区中。</td></tr>
<tr><td>数据位图</td><td>SetBitmapBits</td><td>数据位图(图片,长度,数据)</td><td>将位图的颜色数据位设置为指定的值。</td></tr>
<tr><td>取图宽高</td><td>GetBitmapDimensionEx</td><td>取图宽高(图像,尺寸类)</td><td>获取位图的宽高<a href="#尺寸类">尺寸</a>。</td></tr>
<tr><td>改图宽高</td><td>SetBitmapDimensionEx</td><td>改图宽高(图像,宽,高,旧尺寸)</td><td>设置位图的宽高新<a href="#尺寸类">尺寸</a>。</td></tr>
<tr><td>取颜色表</td><td>GetDIBColorTable</td><td>取颜色表(设备,序号,条目,数组)</td><td>从当前在指定设备位图的颜色表中的一系列条目中检索颜色值。</td></tr>
<tr><td>改颜色表</td><td>SetDIBColorTable</td><td>改颜色表(设备,序号,条目,数组)</td><td>将当前选择的DIB颜色表中的一系列颜色值数组设置为指定的设备中。</td></tr>
<tr><td>设备位图</td><td>GetDIBits</td><td>设备位图(设备,位图,首行,行数,@数据,@信息,格式)</td><td>检索指定兼容位图的位，并使用指定的格式将它们作为 DIB 复制到缓冲区或<a href="#位图信息类">信息结构</a>中。格式:0=RGB,1=索引</td></tr>
<tr><td>设置像素</td><td>SetDIBits</td><td>设置像素(设备,位图,起始行,行数,数据,信息,格式)</td><td>在指定的DIB中找到的颜色数据和<a href="#位图信息类">信息</a>设置兼容位图(DDB)中的像素。格式:0=RGB,1=索引</td></tr>
<tr><td>指定像素</td><td>SetDIBitsToDevice</td><td>指定像素(设备,左,顶,宽,高,源左,源上,起始行,行数,色组,像素,索引)</td><td>使用源图像设备指定位置与目标设备指定矩形中的<a href="#像素格式类">像素</a>。索引:0=RGB颜色,1索引颜色</td></tr>
<tr><td>获取颜色</td><td>GetPixel</td><td>颜色=获取颜色(设备,x,y)</td><td>获取设备指定坐标处像素的颜色值。</td></tr>
<tr><td>设置颜色</td><td>SetPixel</td><td>设置颜色(设备,x,y,颜色)</td><td>设置设备指定坐标处像素的颜色值。</td></tr>
<tr><td>拉伸模式</td><td>GetStretchBltMode</td><td>模式=拉伸模式(设备)</td><td>获取指定设备的<a href="#位图拉伸模式">拉伸模式</a>。</td></tr>
<tr><td>模式拉伸</td><td>SetStretchBltMode</td><td>模式拉伸(设备,模式)</td><td>设置指定设备的<a href="#位图拉伸模式">拉伸模式</a>。</td></tr>
<tr><td>伸缩传输</td><td>StretchBlt</td><td>伸缩传输(目标,左,顶,宽,高,源,左,顶,宽,高,光栅)</td><td>将位图从源矩形拉伸或压缩复制到目标矩形中，以适合尺寸。<a href="#光栅定义">光栅定义</a></td></tr>
<tr><td>拉伸传输</td><td>StretchDIBits</td><td>拉伸传输(目标,左,顶,宽,高,左,顶,宽,高,位数,信息,色型,光栅)</td><td>将图像中像素矩形的颜色数据拉伸或压缩复制到指定的目标矩形。<a href="#位图信息类">信息</a>; 色型:0=RGB,1=索引</td></tr>
<tr><td>透明传输</td><td>TransparentBlt</td><td>透明传输(设备,左,顶,宽,高,源设备,源,左,顶,宽,高,透明色)</td><td>将对应于像素矩形的颜色数据从指定的源设备上下文传输到目标设备上下文中。</td></tr>
<tr><th colspan=4>设备函数</th></tr>
<tr><td>取消挂起</td><td>CancelDC</td><td>取消挂起(设备)</td><td>取消指定设备上下文上的任何挂起操作。</td></tr>
<tr><td>创建设备</td><td>CreateCompatibleDC</td><td>设备=创建设备(设备)</td><td>创建与指定设备兼容的内存设备。只能用于支持栅格操作的设备</td></tr>
<tr><td>驱动设备</td><td>CreateDCA</td><td>设备=驱动设备(驱动名,设备名,0,驱动)</td><td>通过使用指定的名称创建<a href="#设备环境类">驱动</a>设备</td></tr>
<tr><td>删除设备</td><td>DeleteDC</td><td>删除设备(设备)</td><td>删除指定的设备</td></tr>
<tr><td>驱动信息</td><td>CreateICA</td><td>驱动=驱动信息(驱动名,设备名,端口或文件名,驱动)</td><td>获取有关设备的信息而不创建设备</td></tr>
<tr><td>删除对象</td><td>DeleteObject</td><td>删除对象(对象)</td><td>删除逻辑笔，画笔，字体，位图，区域或调色板，释放与对象相关联的所有系统资源。</td></tr>
<tr><td>视频绘图</td><td>DrawEscape</td><td>视频绘图(设备,转义函数,长度,数据)</td><td>将数据直接发至显示设备,访问通过图形设备界面（GDI）无法直接使用的视频显示的绘图功能。</td></tr>
<tr><td>枚举对象</td><td>EnumObjects</td><td>枚举对象(设备,强元,@回调,数据,矩形)</td><td>枚举可用于指定设备上下文的笔或画笔。直到所有对象都被枚举为止。</td></tr>
<tr><td>设备转码</td><td>Escape</td><td>设备转码(设备,转码,长度,输入,输出)</td><td>访问不能通过GDI直接使用的特定设备的功能。</td></tr>
<tr><td>扩展转码</td><td>ExtEscape</td><td>扩展转码(设备,转码,长度,输入,长度,输出)</td><td>允许应用程序访问通过GDI不可用的特定设备的功能。</td></tr>
<tr><td>当前对象</td><td>GetCurrentObject</td><td>设备=当前对象(设备,类型)</td><td>返回指定类型的当前选定对象。类型有1画笔,2笔刷,5色板,6字体,7位图,14颜色空间</td></tr>
<tr><td>设备项目</td><td>GetDeviceCaps</td><td>设备项目(设备,项目)</td><td>检索指定设备的特定于<a href="#设备项值">设备项目</a>的信息。</td></tr>
<tr><td>设备起点</td><td>GetDCOrgEx</td><td>设备起点(设备,坐标)</td><td>获取指定设备的最终转换起始点。</td></tr>
<tr><td>获得对象</td><td>GetObjectA</td><td>获得对象(图像,长度,@数据)</td><td>获取图形对象的信息 位图类 画笔类 笔刷类 色板类 逻辑字体类 扩展笔类</td></tr>
<tr><td>对象类型</td><td>GetObjectType</td><td>图型=对象类型(图形对象)</td><td>获取图形<a href="#设备对象类型">对象的类型</a></td></tr>
<tr><td>获取布局</td><td>GetLayout</td><td>布局=获取布局(设备)</td><td>获取指定设备的当前布局。1从右到左,2位图传输,4LAYOUT_VBH</td></tr>
<tr><td>设置布局</td><td>SetLayout</td><td>设置布局(设备,布局)</td><td>设置指定设备的当前布局。1从右到左,8位图传输禁用任何反射</td></tr>
<tr><td>固有对象</td><td>GetStockObject</td><td>对象=固有对象(类型)</td><td>获取一个常用笔、画笔、字体或调色板的句柄。<a href="#固有对象类型">常用对象类型</a></td></tr>
<tr><td>复位设备</td><td>ResetDCA</td><td>复位设备(设备,信息)</td><td>使用指定的<a href="#设备环境类">信息</a>更新指定的打印机或绘图仪设备</td></tr>
<tr><td>恢复设备</td><td>RestoreDC</td><td>恢复设备(设备,状态)</td><td>通过从先前调用 "保存设备"得到的状态信息来恢复设备,-1是恢复到最近状态</td></tr>
<tr><td>保存设备</td><td>SaveDC</td><td>状态=保存设备(设备)</td><td>将选定对象和图形模式的数据复制到堆栈来保存指定设备的当前状态。</td></tr>
<tr><td>选择对象</td><td>SelectObject</td><td>选择对象(设备,对象)</td><td>在指定的设备中选择一个新对象。包括位图,笔刷,字体,画笔,区域等</td></tr>
</table><a name="枚举对象回调">枚举对象回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>枚举对象回调</td><td>EnumObjectsProc</td><td>2</td><td>用于处理对象数据。返回0停止枚举</td></tr>
<tr><th colspan=4>枚举对象回调——成员表</th></tr>
<tr><td>参数</td><td>lpLogObject</td><td>整数</td><td>指向描述对象属性的 <a href="#画笔类">画笔类</a> 或 <a href="#笔刷类">笔刷类</a> 结构的指针。</td></tr>
<tr><td>数据</td><td>lpData</td><td>整数</td><td>传递的应用程序定义数据的指针。</td></tr>
</table><a name="设备对象类型">设备对象类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>OBJ_PEN</td><td>1</td><td>笔</td></tr>
<tr><td>OBJ_BRUSH</td><td>2</td><td>Brush</td></tr>
<tr><td>OBJ_DC</td><td>3</td><td>设备上下文</td></tr>
<tr><td>OBJ_METADC</td><td>4</td><td>图元文件 DC</td></tr>
<tr><td>OBJ_PAL</td><td>5</td><td>调色板</td></tr>
<tr><td>OBJ_FONT</td><td>6</td><td>字体</td></tr>
<tr><td>OBJ_BITMAP</td><td>7</td><td>Bitmap</td></tr>
<tr><td>OBJ_REGION</td><td>8</td><td>区域</td></tr>
<tr><td>OBJ_METAFILE</td><td>9</td><td>Metafile</td></tr>
<tr><td>OBJ_MEMDC</td><td>10</td><td>内存 DC</td></tr>
<tr><td>OBJ_EXTPEN</td><td>11</td><td>扩展笔</td></tr>
<tr><td>OBJ_ENHMETADC</td><td>12</td><td>增强型图元文件 DC</td></tr>
<tr><td>OBJ_ENHMETAFILE</td><td>13</td><td>增强型图元文件</td></tr>
<tr><td>OBJ_COLORSPACE</td><td>14</td><td>颜色空间</td></tr>
</table><a name="固有对象类型">常用对象类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>WHITE_BRUSH</td><td>0</td><td>白色画刷。</td></tr>
<tr><td>LTGRAY_BRUSH</td><td>1</td><td>浅灰色画刷。</td></tr>
<tr><td>GRAY_BRUSH</td><td>2</td><td>灰色画刷。</td></tr>
<tr><td>DKGRAY_BRUSH</td><td>3</td><td>深灰色画刷。</td></tr>
<tr><td>BLACK_BRUSH</td><td>4</td><td>黑色画刷。</td></tr>
<tr><td>NULL_BRUSH</td><td>5</td><td>空画刷</td></tr>
<tr><td>HOLLOW_BRUSH</td><td>5</td><td>空心画刷 。</td></tr>
<tr><td>WHITE_PEN</td><td>6</td><td>白色触笔。</td></tr>
<tr><td>BLACK_PEN</td><td>7</td><td>黑色触笔。</td></tr>
<tr><td>NULL_PEN</td><td>8</td><td>空触控笔不绘制任何内容。</td></tr>
<tr><td>OEM_FIXED_FONT</td><td>10</td><td>原始设备制造商 (OEM) 依赖固定间距 (正方形) 字体。</td></tr>
<tr><td>ANSI_FIXED_FONT</td><td>11</td><td>Windows 固定间距 (正) 系统字体。</td></tr>
<tr><td>ANSI_VAR_FONT</td><td>12</td><td>Windows 可变间距 (比例空间) 系统字体。</td></tr>
<tr><td>SYSTEM_FONT</td><td>13</td><td>系统字体。 默认情况下，系统使用系统字体来绘制菜单、对话框控件和文本。不建议使用。默认系统字体为 Tahoma。</td></tr>
<tr><td>DEVICE_DEFAULT_FONT</td><td>14</td><td>设备依赖字体。</td></tr>
<tr><td>DEFAULT_PALETTE</td><td>15</td><td>默认调色板。 此调色板由系统调色板中的静态颜色组成。</td></tr>
<tr><td>DEFAULT_GUI_FONT</td><td>17</td><td>用户界面对象（如菜单和对话框）的默认字体。不建议使用。默认字体为 Tahoma。</td></tr>
<tr><td>SYSTEM_FIXED_FONT</td><td>16</td><td>固定间距 (单调) 系统字体。 此库存对象仅用于与 3.0 之前的 16 位 Windows 版本兼容。</td></tr>
<tr><td>DC_BRUSH</td><td>18</td><td>纯色画笔。 默认颜色为白色。 可以使用 改笔刷色 函数更改颜色。</td></tr>
<tr><td>DC_PEN</td><td>19</td><td>纯色笔颜色。 默认颜色为黑色。 可以使用 改画笔色 函数更改颜色。</td></tr>
</table><a name="设备项值">设备项值</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>DRIVERVERSION</td><td>0</td><td>设备驱动程序版本。</td></tr>
<tr><td>TECHNOLOGY</td><td>2</td><td>设备技术。返回定义:0矢量绘图仪;1光栅显示;2光栅打印机;3光栅相机;4字符流;5图元文件;6显示文件</td></tr>
<tr><td>HORZSIZE</td><td>4</td><td>物理屏幕的宽度（以毫米为单位）。</td></tr>
<tr><td>VERTSIZE</td><td>6</td><td>物理屏幕的高度（以毫米为单位）。</td></tr>
<tr><td>HORZRES</td><td>8</td><td>屏幕的宽度（以像素为单位）;或 ，对于打印机，页面可打印区域的宽度（以像素为单位）。</td></tr>
<tr><td>VERTRES</td><td>10</td><td>屏幕的高度（以光栅线为单位）;对于打印机，页面可打印区域的高度（以像素为单位）。</td></tr>
<tr><td>BITSPIXEL</td><td>12</td><td>每个像素的相邻颜色位数。</td></tr>
<tr><td>PLANES</td><td>14</td><td>颜色平面数。</td></tr>
<tr><td>NUMBRUSHES</td><td>16</td><td>特定于设备的画笔数。</td></tr>
<tr><td>NUMPENS</td><td>18</td><td>特定于设备的笔数。</td></tr>
<tr><td>NUMMARKERS</td><td>20</td><td>特定于设备的标记数。</td></tr>
<tr><td>NUMFONTS</td><td>22</td><td>特定于设备的字体数。</td></tr>
<tr><td>NUMCOLORS</td><td>24</td><td>设备颜色表中的条目数（如果设备的颜色深度不超过每像素 8 位）。 对于颜色深度更大的设备，返回 -1。</td></tr>
<tr><td>PDEVICESIZE</td><td>26</td><td>保留。</td></tr>
<tr><td>CURVECAPS</td><td>28</td><td>指示设备的曲线功能的值。0设备不支持曲线。1设备可以绘制圆圈。2设备可以绘制饼楔。4设备可以绘制弦弧。8设备可以绘制省略号。16设备可以绘制宽边框。32设备可以绘制样式边框。64设备可以绘制宽度和样式的边框。128设备可以绘制内部。256设备可以绘制圆角矩形。</td></tr>
<tr><td>LINECAPS</td><td>30</td><td>指示设备的线路功能的值，0设备不支持行。2设备可以绘制折线。4设备可以绘制标记。8设备可以绘制多个标记。16设备可以绘制宽线。32设备可以绘制带样式的线条。64设备可以绘制宽度和样式的线条。128设备可以绘制内部。</td></tr>
<tr><td>POLYGONALCAPS</td><td>32</td><td>指示设备的多边形功能的值，0设备不支持多边形。1设备可以绘制交替填充多边形。2设备可以绘制矩形。4设备可以绘制绕组填充多边形。8设备可以绘制单个扫描线。16设备可以绘制宽边框。32设备可以绘制样式边框。64设备可以绘制宽度和样式的边框。128设备可以绘制内部。</td></tr>
<tr><td>TEXTCAPS</td><td>34</td><td>指示设备的文本功能的值，1设备能够进行字符输出精度。2设备能够进行笔划输出精度。4设备能够进行笔划剪辑精度。8设备能够进行 90 度字符旋转。0x10设备能够进行任何字符轮换。0x20设备可以在 x 方向和 y 方向上独立缩放。0x40设备能够使用双倍字符进行缩放。0x80设备仅对字符缩放使用整数倍数。0x100设备使用任意倍数进行精确的字符缩放。0x200设备可以绘制双重字符。0x400设备可以斜体化。0x800设备可以下划线。0x1000设备可以绘制删除线。0x2000设备可以绘制光栅字体。0x4000设备可以绘制矢量字体。0x8000保留;必须为零。0x10000设备无法使用位块传输进行滚动。请注意，此含义可能与预期相反。</td></tr>
<tr><td>CLIPCAPS</td><td>36</td><td>指示设备的剪辑功能的标志。 如果设备可以剪辑为矩形，则为 1。 否则为 0。</td></tr>
<tr><td>RASTERCAPS</td><td>38</td><td>指示设备的光栅功能的值。1能够传输位图。2需要条带支持。4支持大于64KB的位图。8能够缩放。0x80能够支持 设置像素 和 设备位图 函数。0x100指定基于调色板的设备。0x200能够支持 指定像素 函数。0x800能够执行 伸缩传输 函数。0x1000能够执行洪水填充。0x2000能够执行 拉伸传输 函数。</td></tr>
<tr><td>ASPECTX</td><td>40</td><td>用于线条绘制的设备像素的相对宽度。</td></tr>
<tr><td>ASPECTY</td><td>42</td><td>用于线条绘制的设备像素的相对高度。</td></tr>
<tr><td>ASPECTXY</td><td>44</td><td>用于线条绘制的设备像素的对角宽度。</td></tr></table>
<tr><td>SIZEPALETTE</td><td>104</td><td>系统调色板中的条目数。 仅当设备驱动程序在 RASTERCAPS 索引中设置RC_PALETTE位时，此索引才有效，并且仅当驱动程序与 16 位 Windows 兼容时才可用。</td></tr>
<tr><td>NUMRESERVED</td><td>106</td><td>系统调色板中的保留条目数。 仅当设备驱动程序在 RASTERCAPS 索引中设置RC_PALETTE位时，此索引才有效，并且仅当驱动程序与 16 位 Windows 兼容时才可用。</td></tr>
<tr><td>COLORRES</td><td>108</td><td>设备的实际颜色分辨率（以每像素位数为单位）。 仅当设备驱动程序在 RASTERCAPS 索引中设置RC_PALETTE位时，此索引才有效，并且仅当驱动程序与 16 位 Windows 兼容时才可用。</td></tr>
<tr><td>PHYSICALWIDTH</td><td>110</td><td>对于打印设备：物理页面的宽度（以设备单位为单位）。 例如，设置为在 8.5-x11 英寸纸张上以 600 dpi 打印的打印机的物理宽度值为 5100 设备单位。 请注意，物理页面几乎总是大于页面的可打印区域，并且永远不会更小。</td></tr>
<tr><td>PHYSICALHEIGHT</td><td>111</td><td>对于打印设备：物理页面的高度（以设备单位为单位）。 例如，设置为在 8.5 by-11 英寸纸张上以 600 dpi 打印的打印机的物理高度值为 6600 设备单位。 请注意，物理页面几乎总是大于页面的可打印区域，并且永远不会更小。</td></tr>
<tr><td>PHYSICALOFFSETX</td><td>112</td><td>对于打印设备：从物理页面的左边缘到可打印区域的左边缘的距离（以设备单位为单位）。 例如，设置为在 8.5 乘 11 英寸纸张上以 600 dpi 打印的打印机无法在最左侧的 0.25 英寸纸张上打印，其水平物理偏移量为 150 台设备单位。</td></tr>
<tr><td>PHYSICALOFFSETY</td><td>113</td><td>对于打印设备：从物理页面的上边缘到可打印区域的上边缘的距离（以设备单位为单位）。 例如，设置为在 8.5x11 英寸纸张上以 600 dpi 打印的打印机无法在最顶层 0.5 英寸的纸张上打印，其垂直物理偏移量为 300 个设备单位。</td></tr>
<tr><td>VREFRESH</td><td>116</td><td>对于显示设备：设备的当前垂直刷新率，以每秒周期 (Hz) 。垂直刷新率值为 0 或 1 表示显示硬件的默认刷新率。 此默认速率通常由显示卡或计算机主板上的开关设置，或者由不使用显示功能（如 ChangeDisplaySettings）的配置程序设置。</td></tr>
<tr><td>SCALINGFACTORX</td><td>114</td><td>打印机 x 轴的缩放因子。</td></tr>
<tr><td>SCALINGFACTORY</td><td>115</td><td>打印机的 y 轴比例系数。</td></tr>
<tr><td>BLTALIGNMENT</td><td>119</td><td>首选水平绘制对齐方式，表示为像素的倍数。 为了获得最佳绘制性能，窗口应水平对齐到此值的倍数。 值为零表示设备已加速，并且可以使用任何对齐方式。</td></tr>
<tr><td>SHADEBLENDCAPS</td><td>120</td><td>指示设备的着色和混合功能的值。</td></tr>
<tr><td>COLORMGMTCAPS</td><td>121</td><td>指示设备的颜色管理功能的值。CM_CMYK_COLOR	设备可以接受 CMYK 颜色空间 ICC 颜色配置文件。0设备不支持 ICM。1设备可以在设备驱动程序或设备本身上执行 ICM。2设备支持 取伽玛斜 和 改伽玛斜</td></tr>
</table><font color="#0000FF"><a name="光栅定义">光栅定义</a></font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名</td><td>英文名</td><td>数值</td><td>作用</td></tr>
<tr><td>黑调色板</td><td>BLACKNESS</td><td>$00000042</td><td>使用与物理调色板中的0号颜色(黑色)填充目标矩形。</td></tr>
<tr><td>白调色板</td><td>WHITENESS</td><td>$00FF0062</td><td>使用与物理调色板中的1号颜色(白色)填充目标矩形。</td></tr>
<tr><td>合并图层</td><td>CAPTUREBLT</td><td>$40000000</td><td>在生成的图像中包括分层在窗口顶部的任何窗口。</td></tr>
<tr><td>反转图形</td><td>DSTINVERT</td><td>$00550009</td><td>反转目标矩形。</td></tr>
<tr><td>合并复制</td><td>MERGECOPY</td><td>$00C000CA</td><td>使用布尔 AND 运算符将源矩形的颜色与当前在目标设备中选择的画笔合并。</td></tr>
<tr><td>反色合并</td><td>MERGEPAINT</td><td>$00BB0226</td><td>使用布尔 OR 运算符将反转源矩形的颜色与目标矩形的颜色合并。</td></tr>
<tr><td>防止镜像</td><td>NOMIRRORBITMAP</td><td>$80000000</td><td>防止对位图进行镜像。</td></tr>
<tr><td>反转复制</td><td>NOTSRCCOPY</td><td>$00330008</td><td>将反转的源矩形复制到目标。</td></tr>
<tr><td>反色混合</td><td>NOTSRCERASE</td><td>$001100A6</td><td>使用布尔 OR 运算符组合源矩形和目标矩形的颜色，然后反转生成的颜色。</td></tr>
<tr><td>填色复制</td><td>PATCOPY</td><td>$00F00021</td><td>将当前在目标设备中选择的画笔复制到目标位图中。</td></tr>
<tr><td>混色复制</td><td>PATINVERT</td><td>$005A0049</td><td>使用布尔 XOR 运算符将当前在目标设备中选择的画笔的颜色与目标矩形的颜色组合在一起。</td></tr>
<tr><td>加色复制</td><td>PATPAINT</td><td>$00FB0A09</td><td>此操作的结果通过使用布尔 OR 运算符与目标矩形的颜色相结合。</td></tr>
<tr><td>降色复制</td><td>SRCAND</td><td>$008800C6</td><td>使用布尔 AND 运算符组合源矩形和目标矩形的颜色。</td></tr>
<tr><td>原图复制</td><td>SRCCOPY</td><td>$00CC0020</td><td>将源矩形直接复制到目标矩形。</td></tr>
<tr><td>反图复制</td><td>SRCERASE</td><td>$00440328</td><td>使用布尔 AND 运算符将目标矩形的反面颜色与源矩形的颜色组合在一起。</td></tr>
<tr><td>混图复制</td><td>SRCINVERT</td><td>$00660046</td><td>使用布尔 XOR 运算符组合源矩形和目标矩形的颜色。</td></tr>
<tr><td>加图复制</td><td>SRCPAINT</td><td>$00CC0020</td><td>使用布尔 OR 运算符组合源矩形和目标矩形的颜色。</td></tr>
</table><a name="尺寸类">尺寸类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>尺寸类</td><td>SIZE</td><td>8</td><td>用来存储尺寸大小的信息</td></tr>
<tr><th colspan=4>尺寸类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>宽</td><td>cx</td><td>整数</td><td>尺寸大小的宽度。</td></tr>
<tr><td>高</td><td>cy</td><td>整数</td><td>尺寸大小的高度。</td></tr>
</table><a name="混合类">混合类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>混合类</td><td>BLENDFUNCTION</td><td>4</td><td>通过指定源位图和目标位图的混合函数来控制混合。</td></tr>
<tr><th colspan=4>混合类——成员表</th></tr>
<tr><td>混合</td><td>BlendOp</td><td>字节</td><td>源混合操作。 目前，唯一定义的源和目标混合操作是0。</td></tr>
<tr><td>标志</td><td>BlendFlags</td><td>字节</td><td>必须为零。</td></tr>
<tr><td>透明</td><td>SourceConstantAlpha</td><td>字节</td><td>指定要用于整个源位图的透明度值0-255。</td></tr>
<tr><td>格式</td><td>AlphaFormat</td><td>字节</td><td>控制解释源位图和目标位图的方式。1=具有透明通道</td></tr>
</table><a name="顶点类">顶点类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>顶点类</td><td>TRIVERTEX</td><td>16</td><td>包含颜色信息和位置信息。</td></tr>
<tr><th colspan=4>顶点类——成员表</th></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>矩形左上角的 x 坐标（以逻辑单位为单位）。</td></tr>
<tr><td>上</td><td>y</td><td>整数</td><td>矩形左上角的 y 坐标（以逻辑单位为单位）。</td></tr>
<tr><td>红</td><td>Red</td><td>整形</td><td>x、y 点的颜色信息。</td></tr>
<tr><td>绿</td><td>Green</td><td>整形</td><td>x、y 点的颜色信息。</td></tr>
<tr><td>蓝</td><td>Blue</td><td>整形</td><td>x、y 点的颜色信息。</td></tr>
<tr><td>透</td><td>Alpha</td><td>整形</td><td>x、y 点的颜色信息。</td></tr>
</table><a name="三角点类">三角点类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>三角点类</td><td>GRADIENT_TRIANGLE</td><td>12</td><td>指定数组中三个顶点的索引。这三个顶点构成一个三角形。</td></tr>
<tr><th colspan=4>三角点类——成员表</th></tr>
<tr><td>点1</td><td>Vertex1</td><td>整数</td><td>边相交的三角形的第一个点。</td></tr>
<tr><td>点2</td><td>Vertex2</td><td>整数</td><td>边相交的三角形的第二个点。</td></tr>
<tr><td>点3</td><td>Vertex3</td><td>整数</td><td>边相交的三角形的第三个点。</td></tr>
</table><a name="矩形点类">矩形点类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>矩形点类</td><td>GRADIENT_RECT</td><td>8</td><td>指定数组中两个顶点的索引。 这两个顶点构成了矩形的左上角和右下边界。</td></tr>
<tr><th colspan=4>矩形点类——成员表</th></tr>
<tr><td>左上</td><td>UpperLeft</td><td>整数</td><td>矩形的左上角。</td></tr>
<tr><td>右下</td><td>LowerRight</td><td>整数</td><td>矩形的右下角。</td></tr>
</table><a name="渐变填充模式">渐变填充模式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>GRADIENT_FILL_RECT_H</td><td>0</td><td>
在此模式下，两个终结点描述一个矩形。 矩形定义为具有常量颜色为左右边缘指定。 GDI 从左到右边缘插入颜色并填充内部。</td></tr>
<tr><td>GRADIENT_FILL_RECT_V</td><td>1</td><td>
在此模式下，两个终结点描述一个矩形。 矩形定义为上边缘和下边缘指定的常量颜色。GDI 将颜色从上边缘内插到下边缘，并填充内部。</td></tr>
<tr><td>GRADIENT_FILL_TRIANGLE</td><td>2</td><td>
在此模式下， 将 TRIVERTEX 结构的数组以及描述单独三角形的数组索引列表传递给 GDI。<br>GDI 在三角形顶点之间执行线性内插并填充内部。绘图在 24 和 32 bpp 模式下直接完成。<br> Dithering 在 16、8、4 和 1 bpp 模式下执行。</td></tr>
</table><a name="位图拉伸模式">位图拉伸模式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>BLACKONWHITE</td><td>1</td><td>使用已消除像素和现有像素的颜色值执行逻辑与运算。单色位图会以牺牲白色像素为代价保留黑色像素。</td></tr>
<tr><td>WHITEONBLACK</td><td>2</td><td>使用已消除像素和现有像素的颜色值执行逻辑或操作。单色位图会以牺牲黑色像素为代价保留白色像素。</td></tr>
<tr><td>COLORONCOLOR</td><td>3</td><td>删除像素。此模式会删除所有已消除的像素线，而不会尝试保留其信息。</td></tr>
<tr><td>HALFTONE</td><td>4</td><td>将源矩形中的像素映射到目标矩形中的像素块。目标像素块上的平均颜色近似于源像素的颜色。</td></tr>
</table><font color="#0000FF"><a name="画刷画笔">画刷画笔</a></font><br>
有两种类型的画刷：逻辑画刷和物理画刷。逻辑画刷是应用程序用于绘制形状的理想位图的说明。物理画刷是设备驱动程序根据应用程序的逻辑画刷定义创建的实际位图。<br>

当应用程序调用创建画刷的函数之一时，它将检索标识逻辑画刷的句柄。 当应用程序将此句柄传递给 选择对象 函数时，相应显示器或打印机的设备驱动程序将创建物理画刷。<br>
当应用程序调用绘图函数来绘制形状时，系统会在绘制操作开始时放置画刷，并将画刷位图中的像素映射到 窗口原点（窗口左上角）的工作区。<br>
系统映射的像素的坐标称为 画刷原点。 默认画刷原点位于画刷位图的左上角，坐标 (0，0) 。 然后，系统跨工作区复制画刷，形成与位图一样高的图案。<br>
复制操作将继续逐行执行，直到填充整个工作区。 但是，画刷图案仅在指定形状的边界内可见。<br>

在某些情况下，不应使用默认画刷原点。 例如，应用程序可能需要使用相同的画刷绘制其父窗口和子窗口的背景，并将子窗口的背景与父窗口的背景混合在一起。<br>
为此，应用程序应通过调用 设置原点 函数并将原点移动到所需的像素数来重置画刷原点。<br>
下图显示了使用应用程序定义的画笔填充的五角星。此图显示了画笔的缩放图像，以及在绘制操作开始时将其映射到的位置。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csbru-01.png"><br>
有四种类型的逻辑画刷： 实心画刷、 库存画刷、 阴影笔和 图案画刷。下图显示了这些画刷。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csbru-02.png"><br>
实心画刷 即纯色画刷,是包含 64 个相同颜色像素的逻辑画刷。 应用程序可以通过调用 创建画刷 函数创建纯色逻辑画刷，并指定所需的画刷颜色。<br>
创建实心画刷后，应用程序可以在其设备上下文中选择它，并使用它来绘制填充形状。例如:<br>
<font color="#0000FF">画刷=创建画刷(255)</font>;//创建红色画刷<br>
<font color="#0000FF">选择对象(设备,画刷)</font>;//选择画刷对象到指定的设备<br>
图形设备接口 (GDI) 维护了七个预定义的库存画刷。还有 21 个预定义的库存画刷由窗口管理界面维护 (USER) 。<br>

下图显示了使用七个预定义的库存画刷绘制的矩形。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csbru-03.png"><br>
显示七个框的插图：一个黑色、三个灰色阴影和三个显示为空的框<br>

应用程序可以通过调用 固有对象 函数并指定画刷类型来检索标识七个库存画刷之一的句柄。<br>

窗口管理界面维护的 21 个常用画刷对应于菜单、滚动条和按钮等窗口元素的颜色。 应用程序可以通过调用 取颜色刷 函数并指定系统颜色值来获取标识这些画刷之一的句柄。<br>
应用程序可以通过调用 取元素色 函数来检索与特定窗口元素对应的颜色。 应用程序可以通过调用 改元素色 函数来设置与窗口元素对应的颜色。<br>
GDI 维护有六个预定义的逻辑阴影画刷。 以下矩形是使用六个预定义阴影画刷绘制的。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/hatchbrush.png"><br>
显示六个框的插图，其中一个由六个阴影画刷分别填充<br>

应用程序可以通过调用 图案笔刷 函数（指定六种<a href="#阴影图案">阴影样式</a>之一）来创建阴影画刷。<br>
从应用程序定义的位图或独立于设备的位图 (DIB) 创建模式 (或自定义) 画刷。 以下矩形是使用不同的图案画刷绘制的。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csbru-05.png"><br>

显示三个框的插图，每个框都填充了不同的图案<br>

若要创建逻辑模式画笔，应用程序必须首先创建位图。 创建位图后，应用程序可以通过调用 图案笔刷 或 内建画刷 函数来创建逻辑模式画刷，并提供标识位图 (或 DIB) 的句柄。<br>
上图中显示的画刷是从单色位图创建的。 有关位图、DIB 以及创建它们的函数的说明，请参阅 <a href="#位图设备">位图</a>。<br>
画矩形 函数的名称 (模式块传输) 的缩写意味着此函数只是复制画笔 (或图案) ，直到它填充指定的矩形。 但是， 函数实际上要强大得多。<br>
在复制画笔之前，它通过使用光栅操作 (ROP) ，将图案的颜色数据与视频显示器上现有像素的颜色数据组合在一起。<br>
ROP 是应用于复制画笔的颜色数据位以及显示设备上目标矩形的颜色数据位的按位运算。有 256 个 ROM;但是， 画矩形 函数仅识别需要模式和目标 (不需要源) 。<br>
下表标识了最常见的光栅。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>黑调色板</td><td>BLACKNESS</td><td>$00000042</td><td>将所有输出转换为二进制零。</td></tr>
<tr><td>白调色板</td><td>WHITENESS</td><td>$00FF0062</td><td>将所有输出转换为二进制输出。</td></tr>
<tr><td>反转图形</td><td>DSTINVERT</td><td>$00550009</td><td>反转目标位图。</td></tr>
<tr><td>填色复制</td><td>PATCOPY</td><td>$00F00021</td><td>将当前在目标设备中选择的画笔复制到目标位图中。</td></tr>
<tr><td>混色复制</td><td>PATINVERT</td><td>$005A0049</td><td>使用布尔 XOR 运算符将目标位图与模式组合在一起。</td></tr>
</table><br>
Microsoft 图像颜色管理 (ICM) 可确保在任何设备上尽可能接近其原始意图呈现彩色图像、图形或文本对象，尽管设备之间的成像技术和颜色功能存在差异。<br>
无论是在彩色扫描仪上扫描图像或其他图形、通过 Internet 下载图像、在屏幕上查看或编辑它，还是将其输出到纸张、胶片或其他媒体上，ICM 2.0 都可以帮助你保持颜色一致和准确。<br><hr>
有两种类型的笔：整形笔和几何笔。 整容笔用于需要固定宽度线条和快速绘制线条的应用程序。<br>
例如，CAD 应用程序使用修饰笔生成隐藏的、部分、中心和尺寸线的宽度介于 0.015 到 0.022 英寸之间，而不考虑比例系数。<br>
几何笔用于需要可缩放线条、具有独特端部或联接样式的线条以及比单个像素宽的线条的应用程序。 例如，电子表格应用程序使用几何笔将条形图中的每个条形图定义为宽线。<br>
整容笔的尺寸以设备单位指定。 因此，使用整形笔绘制的线条始终具有固定宽度。 使用整形笔绘制的线条通常比使用几何笔绘制的线条快 3 到 10 倍。
整容笔有三个属性：宽度、样式和颜色。若要创建整容笔，请使用 创建画笔 新建画笔 或 扩展画笔 函数。 若要检索系统管理的三支常用整容笔之一，请使用 固有对象 函数。<br>

(创建笔或获取其中一支常用笔) 的句柄后，使用 选择对象 函数将笔选入应用程序的设备上下文 (DC) 。 从此，应用程序将使用此笔在其工作区中的任何线条绘制操作。<br>
几何笔的尺寸以逻辑单元指定。 因此，使用几何笔绘制的线条可以缩放，也就是说，它们可能看起来更宽或更窄，具体取决于当前世界转换。<br>

除了与整容笔共享的三个属性 (宽度、样式和颜色) 外，几何笔还具有以下四个属性：图案、可选阴影、端部样式和联接样式。<br>
有七个笔属性定义笔的类型及其特征：宽度、样式、颜色、图案、阴影、结束样式和联接样式。 整容笔和几何笔都具有宽度、样式和颜色属性。<br>
只有几何笔具有图案、阴影、结束样式和联接样式属性。 图案和可选的阴影属性通常与画笔相关联，但也可用于几何笔。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>新建笔刷</td><td>CreateBrushIndirect</td><td>笔刷=新建笔刷(笔刷类)</td><td>创建一个具有指定<a href="#笔刷类">笔刷类</a>结构样式，颜色和模式的逻辑画笔。</td></tr>
<tr><td>内建空刷</td><td>CreateDIBPatternBrush</td><td>笔刷=内建空刷(<a href="#位图信息类">位图信息</a>,格式)</td><td>创建一个与设备无关的位图（DIB）的模式逻辑画刷。随后可以将刷子选择到与支持光栅操作的设备。格式:0=RGB,1=索引</td></tr>
<tr><td>内建画刷</td><td>CreateDIBPatternBrushPt</td><td>笔刷=内建画刷(<a href="#位图信息类">位图信息</a>,格式)</td><td>创建一个与设备无关的位图（DIB）的模式逻辑画刷。格式:0=RGB,1=索引</td></tr>
<tr><td>图案笔刷</td><td>CreateHatchBrush</td><td>画刷=图案笔刷(样式,颜色)</td><td>创建一个具有指定<a href="#阴影图案">阴影图案</a>和颜色的逻辑画笔。</td></tr>
<tr><td>内建笔刷</td><td>CreatePatternBrush</td><td>画刷=内建笔刷(内图)</td><td>使用指定的位图模式创建逻辑画笔。位图可以是"内建位图"创建，也可以是与设备相关的位图。</td></tr>
<tr><td>创建画刷</td><td>CreateSolidBrush</td><td>画刷=创建画刷(颜色)</td><td>创建一个具有指定纯色的实心逻辑画笔。用来绘制填充形状内部的位图。</td></tr>
<tr><td>笔刷原点</td><td>GetBrushOrgEx</td><td>笔刷原点(设备,坐标类)</td><td>获取指定设备的当前画笔原点。</td></tr>
<tr><td>设置原点</td><td>SetBrushOrgEx</td><td>设置原点(设备,左,上,旧坐标)</td><td>设置指定设备的当前画笔原点。</td></tr>
<tr><td>画矩形</td><td>PatBlt</td><td>画矩形(设备,左,上,宽,高,光栅)</td><td>使用当前画笔来绘制给定的矩形。通过使用给定的<a href="#光栅定义">光栅</a>操作来组合画笔颜色和表面颜色。</td></tr>
<tr><td>创建画笔</td><td>CreatePen</td><td>画笔=创建画笔(样式,笔宽,颜色)</td><td>创建一个具有指定<a href="#画笔样式">样式</a>，宽度和颜色的逻辑笔。用于在设备上绘制线条和曲线。</td></tr>
<tr><td>新建画笔</td><td>CreatePenIndirect</td><td>画笔=新建画笔(画笔类)</td><td>创建一个逻辑的化妆笔，它具有在<a href="#画笔类">画笔类</a>结构中指定的样式，宽度和颜色。</td></tr>
<tr><td>扩展画笔</td><td>ExtCreatePen</td><td>扩展画笔(样式,笔宽,笔刷类,长度,样式数组)</td><td>创建一个具有指定样式，宽度和画笔属性的逻辑化妆或几何笔。样式是<a href="#画笔样式">画笔样式</a>、类型、端帽和联接的组合</td></tr>
</table><a name="阴影图案">阴影图案样式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>HS_HORIZONTAL</td><td>0</td><td>水平阴影</td></tr>
<tr><td>HS_VERTICAL</td><td>1</td><td>垂直阴影</td></tr>
<tr><td>HS_FDIAGONAL</td><td>2</td><td>从左到右阴影下 45 度</td></tr>
<tr><td>HS_BDIAGONAL</td><td>3</td><td>从左到右阴影向上 45 度</td></tr>
<tr><td>HS_CROSS</td><td>4</td><td>横向缩放与纵向阴影线</td></tr>
<tr><td>HS_DIAGCROSS</td><td>5</td><td>45 度交叉截断</td></tr>
</table><a name="画笔样式">画笔样式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PS_SOLID</td><td>0</td><td>触控笔是实心的。</td></tr>
<tr><td>PS_DASH</td><td>1</td><td>触控笔虚线。 仅当笔宽度为 1 或更少（以设备单位为单位）时，此样式才有效。</td></tr>
<tr><td>PS_DOT</td><td>2</td><td>笔被点点。 仅当笔宽度为 1 或更少（以设备单位为单位）时，此样式才有效。</td></tr>
<tr><td>PS_DASHDOT</td><td>3</td><td>笔具有交替的短划线和点。 仅当笔宽度为 1 或更少（以设备单位为单位）时，此样式才有效。</td></tr>
<tr><td>PS_DASHDOTDOT</td><td>4</td><td>笔具有交替的短划线和双点。 仅当笔宽度为 1 或更少（以设备单位为单位）时，此样式才有效。</td></tr>
<tr><td>PS_NULL</td><td>5</td><td>笔不可见。</td></tr>
<tr><td>PS_INSIDEFRAME</td><td>6</td><td>触控笔是实心的。在采用边框的绘图中图形的尺寸会缩小，使其完全适合边界矩形，同时考虑笔的宽度。 这仅适用于几何笔</td></tr>
<tr><td>PS_USERSTYLE</td><td>7</td><td>笔使用用户提供的样式数组。</td></tr>
<tr><td>PS_ALTERNATE</td><td>8</td><td>笔设置其他像素。（此样式仅适用于整容笔。）</td></tr>
</table><a name="画笔类型">画笔类型</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PS_COSMETIC</td><td>0</td><td>笔是整容的。</td></tr>
<tr><td>PS_GEOMETRIC</td><td>0x10000</td><td>笔是几何的。</td></tr>
</table><a name="画笔端帽">画笔端帽</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PS_ENDCAP_ROUND</td><td>0</td><td>末端是圆的。</td></tr>
<tr><td>PS_ENDCAP_SQUARE</td><td>0x100</td><td>末端是正方的。</td></tr>
<tr><td>PS_ENDCAP_FLAT</td><td>0x200</td><td>末端是平的。</td></tr>
</table><a name="画笔联接">画笔联接</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>PS_JOIN_ROUND</td><td>0</td><td>联接是圆的。</td></tr>
<tr><td>PS_JOIN_BEVEL</td><td>0x1000</td><td>联接是斜切的。</td></tr>
<tr><td>PS_JOIN_MITER</td><td>0x2000</td><td>当前限制内进行斜接。超出限制将进行斜角。</td></tr>
</table><a name="笔刷类">笔刷类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>笔刷类</td><td>LOGBRUSH</td><td>12</td><td>包含了笔刷数据的信息</td></tr>
<tr><th colspan=4>笔刷类——成员表</th></tr>
<tr><td>样式</td><td>lbStyle</td><td>整数</td><td>指定画笔样式。BS_SOLID等</td></tr>
<tr><td>颜色</td><td>lbColor</td><td>整数</td><td>指定要绘制画笔的颜色。中空笔刷和内存指定无效</td></tr>
<tr><td>填充</td><td>lbHatch</td><td>整数</td><td>指定一个填充样式。HS_CROSS等</td></tr>
</table><a name="画笔类">画笔类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>画笔类</td><td>LOGPEN</td><td>12</td><td>包含了画笔数据的信息</td></tr>
<tr><th colspan=4>画笔类——成员表</th></tr>
<tr><td>样式</td><td>lopnStyle</td><td>整数</td><td>指定画笔样式。PS_SOLID等</td></tr>
<tr><td>宽度</td><td>lopnWidth.x</td><td>整数</td><td>指定要绘制画笔的宽度</td></tr>
<tr><td>笔宽</td><td>lopnWidth.y</td><td>整数</td><td>未使用,设计的问题</td></tr>
<tr><td>颜色</td><td>lopnColor</td><td>整数</td><td>指定画笔的颜色</td></tr>
</table><a name="色位类">色位类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>色位类</td><td>COLORBYTES</td><td>4</td><td>描述了由红色,绿色,蓝色和透明色的颜色位。</td></tr>
<tr><th colspan=4>色度类——成员表</th></tr>
<tr><td>蓝位</td><td>BlueByte</td><td>字节</td><td>绿色位值。</td></tr>
<tr><td>绿位</td><td>GreenByte</td><td>字节</td><td>绿色位值。</td></tr>
<tr><td>红位</td><td>RedByte</td><td>字节</td><td>红色位值。</td></tr>
<tr><td>透明</td><td>AlphaByte</td><td>字节</td><td>透明色位值</td></tr>
</table>
<font color="#0000FF"><a name="字体文字">字体文字</a></font><br>
字体是共享共同设计的字符和符号的集合。 此设计的三个主要元素称为字体、样式和大小。<br>

<b>字体</b><br>
术语“字体”是指字体中字符和符号的特定特征，例如构成字符的粗笔和细笔划的宽度，以及是否存在衬线。 衬线是未连接笔划末尾的短十字线。 没有衬线的字体或字样通常称为无衬线字体。<br>

<b>样式</b><br>
术语样式是指字体的粗细和倾斜。 字体粗细范围从细到黑色。 下面是从最轻到重) (字体的可能权重列表：<br>

薄特轻轻正常中等半Bold 粗特外博尔德重<br>
三个术语对字体倾斜进行分类：罗马、倾斜和斜体。<br>

罗马字体中的字符是直立的。 倾斜字体中的字符是人为倾斜的。 倾斜是通过对罗马字体中的字符执行剪切转换来实现的。 斜体字体中的字符确实倾斜，在设计时显示出来。<br> 

<b>大小</b><br>
字号是一个不精确值。 通常可以通过测量从小写 g 底部到相邻大写 M 顶部的距离来确定，如下图所示。<br> 
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csftx-01.png"><br>
显示小写 g 和大写 m 的插图<br> 

字体的大小以称为磅的单位指定。 一个点是一英寸的 .013837。 按照皮埃尔·西蒙·富尼尔设计的点系统，通常的做法是将点近似为1/72英寸。<br> 

字体系列是一组具有常见笔划宽度和衬线特征的字体。 有五个字体系列。 第六个系列允许应用程序使用默认字体。 下表描述了字体系列。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>字系</td><td>英文名</td><td>数值</td><td>说明</td></tr>
<tr><td>装饰</td><td>FF_DECORATIVE</td><td>80</td>指定新奇字体。 例如，旧英语。</td></tr>
<tr><td>无关</td><td>FF_DONTCARE</td>0</td><td>指定泛型系列名称。 当有关字体的信息不存在或无关紧要时，将使用此名称。 使用默认字体。</td></tr>
<tr><td>新式</td><td>FF_MODERN</td><td>48</td>指定带衬线或不带衬线的空白字体。 Monospace 字体通常采用新式字体;示例包括 Pica、Elite 和 Courier New。</td></tr>
<tr><td>罗马</td><td>FF_ROMAN</td><td>16</td>指定带衬线的比例字体。 例如，泰晤士新罗马。</td></tr>
<tr><td>脚本</td><td>FF_SCRIPT</td><td>64</td>指定设计为类似于手写的字体;示例包括 Script 和 Cursive。</td></tr>
<tr><td>瑞士</td><td>FF_SWISS</td><td>32</td>指定不带衬线的比例字体。 例如 Arial。</td></tr>
 </table>
系列中的字体按大小 (10 磅、24 磅等进行区分，) 和样式 (常规、斜体等) 。<br>
应用程序可以使用四种不同类型的字体技术来显示和打印文本：光栅、矢量字体、真字体、开放字体<br>
这些字体之间的差异反映了每个字符或符号的 字形 在相应的字体资源文件中的存储方式：<br>

在光栅字体中，字形是系统用来在字体中绘制单个字符或符号的位图。<br>
在矢量字体中，字形是线条端点的集合，用于定义系统用于在字体中绘制字符或符号的线段。<br>
在 TrueType 和 OpenType 字体中，字形是线条和曲线命令的集合以及提示的集合。<br>
系统使用线条和曲线命令为 TrueType 或 Microsoft OpenType 字体中的字符或符号定义位图的轮廓。 系统使用提示调整用于绘制字符或符号的曲线的线条和形状的长度。<br>
这些提示和相应的调整基于用于减小或增加位图大小的缩放量。 OpenType 字体等效于 TrueType 字体，但除了 TrueType 字形定义外，OpenType 字体还允许 PostScript 字形定义。<br>

由于光栅字体中每个字形的位图都是针对设备的特定分辨率设计的，因此光栅字体通常被视为依赖于设备。<br>
另一方面，矢量字体不依赖于设备，因为每个字形都存储为可缩放线条的集合。 但是，矢量字体的绘制速度通常比光栅字体或 TrueType 和 OpenType 字体更慢。<br>
TrueType 和 OpenType 字体提供相对快速的绘制速度和真正的设备独立性。 通过使用与字形关联的提示，开发人员可以向上或向下缩放 TrueType 或 OpenType 字体中的字符，并保持其原始形状。<br>

如前所述，字体的字形存储在字体资源文件中。 字体资源文件实际上是只包含数据的 DLL，没有代码。 对于光栅字体和矢量字体，此数据分为两个部分：描述字体指标的标题和字形数据。<br>
光栅字体或矢量字体的字体资源文件由 .fon 文件扩展名标识。 对于 TrueType 和 OpenType 字体，每种字体有两个文件：第一个文件包含相对较短的标题，第二个文件包含实际字体数据。<br>
第一个文件由 .fot 扩展名标识，第二个文件由 .ttf 扩展名标识。<br>
 所有字体都使用字符集。 字符集包含标点符号、数字、大写和小写字母以及所有其他可打印字符。 字符集的每个元素都由一个数字标识。<br>

大多数使用的字符集都是美国 ASCII 字符集的超集，它为 32 到 127 的 96 个数值定义字符。 有五个主要的字符集组：<br>

<b>Windows 字符集</b><br>
Windows 字符集是最常用的字符集。 它实质上等效于 ANSI 字符集。 空白字符是字符集中的第一个字符。 它具有十六进制值0x20 。字符集中的最后一个字符具有十六进制值0xFF。<br>

许多字体指定默认字符。每当对不在字体中的字符发出请求时，系统会提供此默认字符。许多使用Windows字符集的字体将句点(.)指定为默认字符。TrueType和OpenType字体通常使用打开框作为默认字符。<br>

字体使用称为四边形的断字符来分隔单词和对齐文本。 大多数使用 Windows 字符集的字体指定空白字符将用作断字符。<br>

<b>Unicode 字符集</b><br>
Windows 字符集使用 8 位表示每个字符;因此，可以使用 8 位表示的最大字符数为 256 (2^8) 。 这通常足以满足西方语言的需求，包括法语、德语、西班牙语和其他语言中使用的音调符号。<br>
但是，东部语言使用数千个单独的字符，无法使用单字节编码方案进行编码。 随着计算机商业的激增，开发了双字节编码方案，以便字符可以以 8 位、16 位、24 位或 32 位序列表示。<br>
这需要复杂的传递算法：即便如此，使用不同的代码集可能会在两台不同的计算机上产生完全不同的结果。<br>

为了解决多种编码方案的问题，开发了用于数据表示的 Unicode 标准。 Unicode 是 16 位字符编码方案，可以表示 65，536 (2^16) 字符，这足以包含当今计算机商业中的所有语言，<br>
以及标点符号、数学符号和扩展空间。 Unicode 为每个字符建立唯一的代码，以确保字符转换始终准确。<br>

<b>OEM 字符集</b><br>
OEM 字符集通常用于用于屏幕显示的全屏 MS-DOS 会话中。 在 OEM、美国 ASCII 和 Windows 字符集中，字符 32 到 127 通常相同。<br>
OEM 字符集中的其他字符 (0 到 31 和 128 到 255) 对应于可以在全屏 MS-DOS 会话中显示的字符。 这些字符通常与 Windows 字符不同。<br>

<b>符号字符集</b><br>
符号字符集包含通常用于表示数学公式和科学公式的特殊字符。<br>

<b>特定于供应商的字符集</b><br>
许多打印机和其他输出设备提供基于不同于 Windows 和 OEM 集的字符集的字体，例如，扩展二进制编码的十进制交换代码 (EBCDIC) 字符集。<br>
若要使用这些字符集之一，打印机驱动程序将从 Windows 字符集转换为特定于供应商的字符集。<br>
仅当该字体驻留在指定的设备上或安装在系统字体表中时，应用程序才能使用该字体来绘制文本。 字体表是一个内部数组，用于标识应用程序可用的所有非设备字体。<br>
应用程序可以通过调用 枚举字库 或 字体选框 函数来检索当前安装在设备上或存储在内部字体表中的字体的名称。<br>
若要临时安装字体，请调用 添加字体 或 资源字体 这些函数加载存储在字体资源文件中的字体。 但是，这是一个临时安装，因为在重新启动后，字体将不存在。<br>
当应用程序使用完已安装的字体时，它必须通过调用 移除字体 函数删除该字体。<br>
每当应用程序调用添加和删除字体资源的函数时，它还应调用 发送消息 函数，并将 字库更新 消息发送到系统中的所有顶级窗口。 此消息通知其他应用程序，已由添加或删除字体的应用程序更改了内部字体表。<br>
通常，字体包含在单个字体资源文件中。 但是，某些字体的信息分散在多个文件中。 例如，键入 1 多个主控字体需要两个文件：字体指标的 .pfm、字体位的 .pfb<br>
若要将多个文件中的字体添加到系统，请使用 添加字体 或 资源字体 函数。 这些函数中的 文件名 参数必须指向包含由垂直条或管道分隔的文件名的字符串 ( | ).。 例如，"abcxxxxx.pfm|abcxxxxx.pfb."<br>
文本输出是工作区中最常见的图形输出类型;应用程序以不同的方式使用它。 Word处理和桌面发布应用程序使用格式化文本创建文档;电子表格应用程序使用文本、数字和符号指定公式、标签列和列表值;<br>
数据库应用程序使用文本创建记录和显示查询，CAD 应用程序使用文本标记对象和显示尺寸。<br>

在应用程序的工作区和打印纸页上，有一些用于设置文本格式和绘制文本的功能。 这些函数可分为两类：一类是设置文本格式 (或准备输出) ，二是实际绘制文本。<br>
格式设置函数对齐文本、设置字符间距、设置文本和文本背景颜色，以及对齐文本。 绘图函数 (或符号) 或整个文本字符串绘制单个字符。<br>

在 Microsoft Windows 中工作时，使用回车符/换行符对 (\r\n) 指定硬换行符。<br>
格式设置函数可分为三类：检索或设置设备上下文 的文本格式设置属性 的类别、检索 字符宽度的函数 和检索字符串宽度和高度的函数。<br>
<b>文本对齐</b><br>
应用程序可以使用 对齐文本 函数指定在调用其中一个绘图函数时，系统应如何定位文本字符串中的字符。 此函数可用于定位标题、页码、标注等。<br>
系统通过将引用点与当前光标位置或作为参数传递给其中一个文本绘制函数之一的点对齐来定位文本字符串。 对齐文本 函数允许应用程序指定此引用点的位置。<br>
设备上下文的默认文本对齐方式是环绕文本的虚矩形的左上角。 应用程序可以通过调用 GetTextAlign 函数检索任何设备上下文的当前文本对齐设置。<br>

<b>字符间间距</b><br>
应用程序可以使用 间隔字符 函数更改指定设备上下文中所有文本输出操作的字符间间距。 下图显示了通过调用 写字到 函数绘制两次的文本字符串。 第二次绘制文本之前，调用 间隔字符 函数以递增字符间间距。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csftx-06.png"><br>
插图将同一文本推倒两次：首先使用正常字符间间距，然后使用较宽的间距<br>

任何设备上下文的默认字符间间距值为零。 应用程序可以通过调用 字符间距 函数检索设备上下文的当前字符间间距值。<br>

<b>文本行对齐</b>
应用程序可以使用 文字尺寸 和 断句空间 函数来对齐文本行。 文本对齐是任何桌面发布和大多数字处理应用程序中的常见操作。 文字尺寸 函数计算文本字符串的宽度和高度。<br>
计算宽度后，应用程序可以调用 断句空间 函数，以在文本行中的每个单词之间分配额外的间距。 <br>
<b>文本和背景色</b>
应用程序可以使用 文本改色 函数设置在其窗口的工作区中绘制的文本的颜色，以及在彩色打印机上绘制的文本的颜色。<br>
应用程序可以使用 改背景色 函数设置每个字符后显示的颜色，并使用 改背景色 函数指定系统应如何将所选背景色与视频显示器上的当前颜色混合。<br>

显示设备上下文的默认文本颜色为黑色;默认背景色为白色;默认后台模式为 OPAQUE。 应用程序可以通过调用 文字颜色 函数检索设备上下文的当前文本颜色。<br>
应用程序可以通过调用 取背景色 函数检索设备上下文的当前背景色，并通过调用 取背景色 函数检索当前背景模式。<br>
应用程序在执行此类任务时需要检索字符宽度数据，例如将文本字符串拟合到页面或列宽。 应用程序可以使用四个函数来检索字符宽度数据。 其中两个函数检索字符高级宽度，其中两个函数检索实际字符宽度数据。<br>

应用程序可以使用 字符宽度 和 字隔宽度 函数检索文本字符串中单个字符或符号的前进宽度。 高级宽度是视频显示器上的光标或打印机上的打印头在打印文本字符串中的下一个字符之前必须前进的距离。<br>
 字符宽度 函数将高级宽度作为整数值返回。 如果需要更高的精度，应用程序可以使用 字隔宽度 函数检索小数高级宽度值。<br>

应用程序可以使用 真字宽度 和 连字宽度 函数检索实际字符宽度数据。 连字宽度 函数适用于所有字体。 真字宽度 函数仅适用于 TrueType 和 OpenType 字体。<br>
除了检索单个字符的字符宽度数据外，应用程序还需要计算整个字符串的宽度和高度。 两个函数检索字符串宽度和高度度量： 文字尺寸 和 文字宽高。<br>
如果字符串不包含制表符，应用程序可以使用 文字尺寸 函数检索指定字符串的宽度和高度。 如果字符串包含制表符，则应用程序应调用 文字宽高 函数。<br>

应用程序可以使用 文本尺寸 函数执行换行操作。 此函数返回指定字符串中适合指定空格的字符数。<br>

<b>字体升序和降序</b><br>
某些应用程序使用字体的最大升序符和降序符确定不同大小文本行之间的行距。 应用程序可以通过调用 文字指标 函数，然后检查 物理字体类 的 上升 和 下降 成员来检索这些值。<br>

最大上升和下降不同于版式上升和下降。 在 TrueType 和 OpenType 字体中，版式上升和下降通常是字形的顶部和字形的底部。<br>
应用程序可以通过调用 文本指标 函数并检查 字体指标类 结构的 果上 和 果下 成员中的值，检索 TrueType 或 OpenType 字体的版式升序和降序。<br>

<b>字体尺寸</b><br>
应用程序可以通过调用 文本指标 函数来检索 TrueType 或 OpenType 字体的物理尺寸。 应用程序可以通过调用 文字指标 函数来检索任何其他字体的物理尺寸。<br>
若要确定输出设备的尺寸，应用程序可以调用 设备项目 函数。 设备项目 返回物理维度和逻辑维度。<br>

逻辑英寸是系统用来在屏幕上显示清晰字体的度量值，比物理英寸大大约 30% 到 40%。 使用逻辑英寸会排除屏幕和打印机输出之间的完全匹配。<br>
开发人员应注意，屏幕上的文本不仅仅是将显示在页面上的文本的缩放版本，尤其是在图形合并到文本中时。<br>
<p><font color="#0033FF" size=6>绘制文本</font></p>

在应用程序选择适当的字体、设置所需的文本格式设置选项并计算文本字符串所需的字符宽度和高度值后，它可以通过调用任何文本输出函数开始绘制字符和符号：绘制文本、绘制字符、绘制文字、制表写字、写字到。<br>
当应用程序调用其中一个函数时，操作系统会将调用传递给图形引擎，而图形引擎又将调用传递给相应的设备驱动程序。 在设备驱动程序级别，所有这些调用都受驱动程序自己的 绘制字符 或 写字到 函数的一个或多个调用支持。<br>
应用程序将通过调用 绘制字符 实现最快的执行，该调用会快速转换为设备的 绘制字符 调用。 但是，在某些情况下，应用程序应调用其他三个函数之一;<br>
例如，若要在指定矩形区域的边框内绘制多行文本，调用 绘制文本 会更有效。 若要创建具有对齐文本列的多列表，调用 制表写字 会更有效。<br>
<p><font color="#0033FF" size=6>复杂脚本</font></p>
虽然前面讨论的函数适用于多种语言，但它们可能无法满足复杂脚本的需求。 复杂脚本 是其打印形式不以简单方式呈现的语言。<br>
例如，复杂脚本可能允许双向呈现、字形的上下文调整或组合字符。由于这些特殊要求，文本输出的控制必须非常灵活。<br>

显示文本 写字到、绘制字符、制表写字、 绘制文本 和 文本尺寸 的函数已扩展为支持复杂脚本。 通常，此支持对应用程序是透明的。<br>
但是，应用程序应将字符保存在缓冲区中，并一次显示整行文本，以便复杂的脚本整形模块可以使用上下文正确重新排序和生成字形。<br>
此外，由于字形的宽度可能因上下文而异，因此应用程序应使用 文本尺寸 来确定行长，而不是使用缓存字符宽度。<br>

此外，复杂的脚本感知应用程序应考虑为其应用程序添加对从右到左阅读顺序和右对齐的支持。 可以使用以下代码在左和右之间切换阅读顺序或对齐方式：<br>
<font color="#0000FF">对齐文本(设备,0)</font>;//左对齐<br>
<font color="#0000FF">对齐文本(设备,2)</font>;//右对齐<br>
<font color="#0000FF">对齐文本(设备,10)</font>;//2+8=右下对齐<br>
<a name="文本对齐方式">文本对齐方式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>值</td><td>作用解释</td></tr>
<tr><td>TA_TOP</td><td>0</td><td>参考点将位于边框的上边缘。</td></tr>
<tr><td>TA_BASELINE</td><td>24</td><td>参考点将位于文本的基行上。</td></tr>
<tr><td>TA_BOTTOM</td><td>8</td><td>参考点将位于边框的下边缘。</td></tr>
<tr><td>TA_CENTER</td><td>6</td><td>参考点将与边框中心水平对齐。</td></tr>
<tr><td>TA_LEFT</td><td>0</td><td>参考点将位于边框的左边缘。</td></tr>
<tr><td>TA_RIGHT</td><td>2</td><td>参考点将位于边框的右边缘。</td></tr>
<tr><td>TA_NOUPDATECP</td><td>0</td><td>每次文本输出调用后，当前位置不会更新。引用点将传递给文本输出函数。</td></tr>
<tr><td>TA_RTLREADING</td><td>256</td><td>中东语言版本：文本按从右到左的阅读顺序排列，而不是默认的从左到右的顺序。仅适用希伯来语或阿拉伯语时。</td></tr>
<tr><td>TA_UPDATECP</td><td>1</td><td>每次文本输出调用后，当前位置都会更新。 当前位置用作参考点。</td></tr>
</table>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>内存字体</td><td>AddFontMemResourceEx</td><td>内存字体(资源,大小,0,字体)</td><td>将字体资源从内存图像添加到系统。</td></tr>
<tr><td>资源字体</td><td>AddFontResourceEx</td><td>资源字体(文件,特征,0)</td><td>将指定文件中的字体资源添加到系统。特征:0x10当前进程有效,0x20所有进程有效</td></tr>
<tr><td>添加字体</td><td>AddFontResourceA</td><td>添加字体(文件名)</td><td>添加字体到系统,可以是.FON .FNT .TTF .TTC .fot .otf .mmm .pfb .pfm</td></tr>
<tr><td>创建字体</td><td>CreateFontA</td><td>创建字体(15,0,0,0,0,0,0,0,0,0,0,0,0,"宋体")</td><td>字体=创建字体(逻辑高度,字符宽度,擒纵角,取向角,粗细,斜体,下划线,删除线,字符集,输出精度,剪辑精度,输出质量,间距和字体,字体名称);</td></tr>
<tr><td>新建字体</td><td>CreateFontIndirectA</td><td>字体=新建字体(逻辑字体)</td><td>从<a href="#逻辑字体类">逻辑字体类</a>结构创建一个字体。</td></tr>
<tr><td>选建字体</td><td>CreateFontIndirectExA</td><td>字体=选建字体(枚举字体)</td><td>从枚举字体结构中选择创建一个字体。</td></tr>
<tr><td>字体资源</td><td>CreateScalableFontResourceA</td><td>字体资源(权限,字体资源名,缩放字体名,缩放字体路径)</td><td>为可缩放的字体(.TTF)创建一个字体资源文件(.FOT)。权限:0读写,1只读</td></tr>
<tr><td>枚举字库</td><td>EnumFontFamiliesA</td><td>枚举字库(设备,字体名,@回调,附加)</td><td>枚举指定设备上可用的指定字体系列中的字体。<a href="#枚举字集回调">回调</a></td></tr>
<tr><td>枚举字集</td><td>EnumFontFamiliesExA</td><td>枚举字集(设备,逻辑字体,@回调,附加,0)</td><td>枚举系统中与<a href="#逻辑字体类">逻辑字体类</a>结构指定的字体特征匹配的所有唯一命名字体。<a href="#枚举字集回调">回调</a></td></tr>
<tr><td>枚举字体</td><td>EnumFontsA</td><td>枚举字体(设备,字体名,@回调,附加)</td><td>列举指定设备上可用的字体。<a href="#枚举字体回调">回调</a></td></tr>
<tr><td>字体数据</td><td>GetFontData</td><td>字体数据(设备,指标表名,偏移量,@数据,大小)</td><td>检索 TrueType 字体的字体指标数据。</td></tr>
<tr><td>设备字体</td><td>GetFontLanguageInfo</td><td>设备字体(设备)</td><td>返回有关指定设备的当前选定<a href="#字体信息值">字体的信息</a>。</td></tr>
<tr><td>宽字范围</td><td>GetFontUnicodeRanges</td><td>宽字范围(设备,宽字码类)</td><td>返回有关字体支持哪些 <a href="#宽字码类">宽字码类</a> 字符的信息。</td></tr>
<tr><td>定义字符</td><td>EnableEUDC</td><td>定义字符(真)</td><td>启用或禁用对最终用户定义字符的支持 (EUDC) 。</td></tr>
<tr><td>绘制字符</td><td>ExtTextOutA</td><td>绘制字符(设备,左,上,选项,矩形,文字,字数,间距)</td><td>使用当前选定的字体绘制一个字符串。可选用于剪裁/不透明的矩形</td></tr>
<tr><td>取纵横比</td><td>GetAspectRatioFilterEx</td><td>取纵横比(设备,尺寸类)</td><td>获取当前纵横比筛选器的设置。纵横比是由给定装置上的像素的宽度和高度形成的比率。为两个整数组成的尺寸类结构</td></tr>
<tr><td>真字宽度</td><td>GetCharABCWidthsA</td><td>真字宽度(设备,首字,尾字,字宽类)</td><td>从当前 TrueType 字体检索指定范围内<a href="#字宽类">连续字符</a>的宽度（以逻辑单位为单位）。</td></tr>
<tr><td>连字宽度</td><td>GetCharABCWidthsFloatA</td><td>连字宽度(设备,首字,尾字,连宽类)</td><td>从当前字体检索指定范围内<a href="#连宽类">连续字符</a>的宽度（以逻辑单位为单位）。</td></tr>
<tr><td>字形宽度</td><td>GetCharABCWidthsI</td><td>字形宽度(设备,首字,尾字,索引组,字宽类)</td><td>从当前 TrueType 字体检索指定范围内连续字形索引的宽度。首尾字可以用索引数组代替</td></tr>
<tr><td>字符宽度</td><td>GetCharWidth32A</td><td>字符宽度(设备,首字,尾字,@宽度)</td><td>获取当前字体在指定范围内的连续字符的宽度。</td></tr>
<tr><td>字间宽度</td><td>GetCharWidthA</td><td>字间宽度(设备,首字,尾字,@宽度)</td><td>当前字体检索指定范围内连续字符的宽度（以逻辑坐标表示）。</td></tr>
<tr><td>字隔宽度</td><td>GetCharWidthFloatA</td><td>字隔宽度(设备,首字,尾字,@宽度)</td><td>从当前字体检索指定范围内连续字符的小数宽度。</td></tr>
<tr><td>字序宽度</td><td>GetCharWidthI</td><td>字序宽度(设备,首字,尾字,索引组,@宽度)</td><td>从当前字体检索指定范围内连续字形索引的宽度。首尾字可以用索引数组代替</td></tr>
<tr><td>字符信息</td><td>GetCharacterPlacementA</td><td>字符信息(设备,文字,字数,结果,标志)</td><td>获取字符串的信息，例如字符宽度，插入符号定位，字符串中的排序和字形渲染。</td></tr>
<tr><td>文字取形</td><td>GetGlyphIndices</td><td>文字取形(设备,文字,字数,@数组,形式)</td><td>将一个字符串转为字形数组。用来确定一种字体里是否存在某个字形。形式:1=用0xffff标记不受支持的字形</td></tr>
<tr><td>文字轮廓</td><td>GetGlyphOutlineA</td><td>文字轮廓(设备,字符,<a href="#字体轮廓格式">格式</a>,字格类,大小,@数据,<a href="#字形矩阵类">矩阵</a>)</td><td>检索选定到指定设备上下文中的 TrueType 字体字符的轮廓或位图。</td></tr>
<tr><td>间距调对</td><td>GetKerningPairsA</td><td>间距调对(设备,对数,@数组)</td><td>获取指定设备上下文的当前选定字体的字符-<a href="#字距对类">字距调整对</a>。写0用来获取缓冲区大小</td></tr>
<tr><td>文本指标</td><td>GetOutlineTextMetricsA</td><td>文本指标(设备,大小,@指标)</td><td>获取当前设备使用字体的<a href="#字体指标类">文本指标</a>。指标写0用来获取缓冲区大小</td></tr>
<tr><td>真字状态</td><td>GetRasterizerCaps</td><td>真字状态(设备,@状态,大小)</td><td>返回指示是否在系统中安装 TrueType 字体的<a href="#真字状态类">状态标志</a>。</td></tr>
<tr><td>字集标识</td><td>GetTextCharset</td><td>字集标识(设备)</td><td>检索当前选定到指定设备上下文中的字体的字符集标识符。</td></tr>
<tr><td>字集信息</td><td>GetTextCharsetInfo</td><td>字集信息(设备,@信息,0)</td><td>检索有关当前选定到指定设备上下文中的字体的字符集的<a href="#字体签名类">信息</a>。信息写0可返回字符集标识</td></tr>
<tr><td>字空格组</td><td>GetTextExtentExPointA</td><td>字空格组(设备,文字,字长,最宽,@数量,@数组,尺寸类)</td><td>检索指定字符串中适合指定空格的字符数，并使用其中每个字符的文本范围填充数组。对换行计算很有用。</td></tr>
<tr><td>字空点组</td><td>GetTextExtentExPointI</td><td>字空点组(设备,字组,字数,最宽,@数量,@数组,尺寸类)</td><td>检索指定字符串中适合指定空格的字符数，并使用其中每个字符的文本范围填充数组。对换行计算很有用。</td></tr>
<tr><td>文本尺寸</td><td>GetTextExtentPointA</td><td>文本尺寸(设备,文字,长度,尺寸)</td><td>计算指定文本字符串的宽度和高度(尺寸类)。</td></tr>
<tr><td>字符尺寸</td><td>GetTextExtentPointI</td><td>字符尺寸(设备,数组,数量,尺寸)</td><td>计算指定字形索引数组的宽度和高度(尺寸类)。</td></tr>
<tr><td>文本对齐</td><td>GetTextAlign</td><td>方式=文本对齐(设备)</td><td>获取指定设备的<a href="#文本对齐方式">文本对齐方式</a>。</td></tr>
<tr><td>对齐文本</td><td>SetTextAlign</td><td>对齐文本(设备,方式)</td><td>设置指定设备的<a href="#文本对齐方式">文本对齐方式</a>。</td></tr>
<tr><td>字符间距</td><td>GetTextCharacterExtra</td><td>间距=文本对齐(设备)</td><td>获取指定设备的文本字符间距。</td></tr>
<tr><td>间隔字符</td><td>SetTextCharacterExtra</td><td>间隔字符(设备,间距)</td><td>设置指定设备的文本字符间距。</td></tr>
<tr><td>文字颜色</td><td>GetTextColor</td><td>颜色=文字颜色(设备)</td><td>获取指定设备的文本颜色。</td></tr>
<tr><td>文本改色</td><td>SetTextColor</td><td>文本改色(设备,颜色)</td><td>设置指定设备的文本颜色。</td></tr>
<tr><td>文字尺寸</td><td>GetTextExtentPoint32A</td><td>文字尺寸(设备,字符,长度,尺寸)</td><td>计算指定文本字符串的宽度和高度(尺寸类)。</td></tr>
<tr><td>字体名称</td><td>GetTextFaceA</td><td>文字名称(设备,长度,@名称)</td><td>获取指定设备选择的字体的字体名称。</td></tr>
<tr><td>文字指标</td><td>GetTextMetricsA</td><td>文字指标(设备,@指标)</td><td>使用当前所选字体的<a href="#物理字体类">指标</a>填充指定的缓冲区。</td></tr>
<tr><td>绘制文字</td><td>PolyTextOutA</td><td>绘制文字(设备,字组,组数)</td><td>使用指定的设备的字体和文本颜色绘制<a href="#绘多字类">多个字符串</a>。</td></tr>
<tr><td>删除字体</td><td>RemoveFontMemResourceEx</td><td>删除字体(字体资源的句柄)</td><td>从内存图像文件中删除添加的字体。</td></tr>
<tr><td>移除字体</td><td>RemoveFontResourceA</td><td>移除字体(字体资源名)</td><td>从系统字体表中除去在指定文件里的字体。</td></tr>
<tr><td>清除字体</td><td>RemoveFontResourceExA</td><td>清除字体(字体资源名,特征,0)</td><td>从系统字体表中除去在指定文件里的字体。特征:0x10当前进程有效,0x20所有进程有效</td></tr>
<tr><td>映射算法</td><td>SetMapperFlags</td><td>映射算法(设备,是否匹配)</td><td>更改字体映射器在将逻辑字体映射到物理字体时使用的算法。</td></tr>
<tr><td>断句空间</td><td>SetTextJustification</td><td>断句空间(设备,大小,行数)</td><td>指定系统应添加到文本字符串中的断句字符的空间量。 写字到 或 绘制字符 函数都需要空间</td></tr>
<tr><td>写字到</td><td>TextOutA</td><td>写字到(设备,左,上,文字,字数)</td><td>使用当前选定的字体在指定的位置写入一个字符串。</td></tr>
<tr><td>转换字集</td><td>TranslateCharsetInfo</td><td>转换字集(源,信息,标志)</td><td>转换<a href="#字符集类">字符集信息</a>并将目标结构的所有成员设置为适当的值。<a href="#转换字集标志">标志</a>:1源是字符集,2源是代码页,3源是代码页位域,0x1000源是语言标识</td></tr>
</table><a name="字形矩阵类">字形矩阵类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字形矩阵类</td><td>MAT2</td><td>12</td><td>包含 文字轮廓 函数使用的转换矩阵的值。</td></tr>
<tr><th colspan=4>字形矩阵类——成员表</th></tr>
<tr><td>行1列1</td><td>eM11</td><td>分数类</td><td>3 乘 3 转换矩阵的 M11 分量固定点值。</td></tr>
<tr><td>行1列2</td><td>eM12</td><td>分数类</td><td>3 乘 3 转换矩阵的 M12 分量固定点值。</td></tr>
<tr><td>行2列1</td><td>eM21</td><td>分数类</td><td>3 乘 3 转换矩阵的 M21 分量固定点值。</td></tr>
<tr><td>行2列2</td><td>eM22</td><td>分数类</td><td>3 乘 3 转换矩阵的 M22 分量固定点值。</td></tr>
</table><a name="分数类">分数类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>分数类</td><td>FIXED</td><td>4</td><td>包含定点实数的整数部分和小数部分。</td></tr>
<tr><th colspan=4>分数类——成员表</th></tr>
<tr><td>值</td><td>value</td><td>整形</td><td>数字的整数部分。</td></tr>
<tr><td>分</td><td>fract</td><td>整形</td><td>数字的小数部分。</td></tr>
</table><a name="字宽类">字宽类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字宽类</td><td>ABC</td><td>12</td><td>包含 TrueType 字体中字符的宽度。</td></tr>
<tr><th colspan=4>字宽类——成员表</th></tr>
<tr><td>左</td><td>abcA</td><td>整数</td><td>字符的 A 间距。 A 间距是在绘制字符标志符号之前要添加到当前位置的距离。</td></tr>
<tr><td>中</td><td>abcB</td><td>整数</td><td>字符的 B 间距。 B 间距是字符标志符号的绘制部分的宽度。</td></tr>
<tr><td>右</td><td>abcC</td><td>整数</td><td>字符的 C 间距。 C 间距是要添加到当前位置以便为字符标志符号的右侧提供空白的距离。</td></tr>
</table><a name="连宽类">连宽类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>连宽类</td><td>ABCFLOAT</td><td>12</td><td>包含字体字符的 A、B 和 C 宽度。</td></tr>
<tr><th colspan=4>连宽类——成员表</th></tr>
<tr><td>左</td><td>abcA</td><td>小数</td><td>字符的 A 间距。 A 间距是在绘制字符标志符号之前要添加到当前位置的距离。</td></tr>
<tr><td>中</td><td>abcB</td><td>小数</td><td>字符的 B 间距。 B 间距是字符标志符号的绘制部分的宽度。</td></tr>
<tr><td>右</td><td>abcC</td><td>小数</td><td>字符的 C 间距。 C 间距是要添加到当前位置以便为字符标志符号的右侧提供空白的距离。</td></tr>
</table><a name="宽字码类">宽字码类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>宽字码类</td><td>GLYPHSET</td><td>20+</td><td>包含有关一系列 宽字符 码位的信息。</td></tr>
<tr><th colspan=4>宽字码类——成员表</th></tr>
<tr><td>大小</td><td>cbThis</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>位数</td><td>flAccel</td><td>整数</td><td>描述字形索引最大大小的标志。1=将字形索引视为 8 位宽值。0=16位宽值</td></tr>
<tr><td>码数</td><td>cGlyphsSupported</td><td>整数</td><td>字体中支持的 Unicode 码位总数。</td></tr>
<tr><td>组数</td><td>cRanges</td><td>整数</td><td>范围 中的<a href="#宽范围类">宽范围类</a>的总数。</td></tr>
<tr><td>范围</td><td>ranges[1]</td><td>宽范围类</td><td>字体中支持的<a href="#宽范围类">宽范围类</a>的数组。</td></tr>
</table><a name="宽范围类">宽范围类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>宽范围类</td><td>WCRANGE</td><td>4</td><td>指定 Unicode 字符的范围。</td></tr>
<tr><th colspan=4>宽范围类——成员表</th></tr>
<tr><td>低码</td><td>wcLow</td><td>整形</td><td>支持的 Unicode 码位范围内的低 Unicode 码位。</td></tr>
<tr><td>位数</td><td>cGlyphs</td><td>整形</td><td>此范围内支持的 Unicode 码位数。</td></tr>
</table><a name="字格类">字格类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字格类</td><td>GLYPHMETRICS</td><td>20</td><td>包含有关字符单元格中字形的位置和方向的信息。</td></tr>
<tr><th colspan=4>字格类——成员表</th></tr>
<tr><td>框宽</td><td>gmBlackBoxX</td><td>整数</td><td>完全包围字形的最小矩形的宽度 (其黑框) 。</td></tr>
<tr><td>框高</td><td>gmBlackBoxY</td><td>整数</td><td>完全包围字形的最小矩形的高度 (其黑盒) 。</td></tr>
<tr><td>左边</td><td>gmptGlyphOrigin.x</td><td>整数</td><td>完全包围字形的最小矩形左上角的 x 坐标。</td></tr>
<tr><td>顶边</td><td>gmptGlyphOrigin.y</td><td>整数</td><td>完全包围字形的最小矩形左上角的 y 坐标。</td></tr>
<tr><td>横距</td><td>gmCellIncX</td><td>整形</td><td>从当前字符单元格的原点到下一个字符单元格的原点的水平距离。</td></tr>
<tr><td>纵距</td><td>gmCellIncY</td><td>整形</td><td>从当前字符单元格的原点到下一个字符单元格的原点的垂直距离。</td></tr>
</table><a name="字符集类">字符集类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字符集类</td><td>CHARSETINFO</td><td>32</td><td>包包含有关字符集的信息。</td></tr>
<tr><th colspan=4>字符集类——成员表</th></tr>
<tr><td>字集</td><td>ciCharset</td><td>整数</td><td>字符集值。</td></tr>
<tr><td>码页</td><td>ciACP</td><td>整数</td><td>Windows ANSI 代码页标识符。</td></tr>
<tr><td>签名</td><td>fs</td><td>字体签名类</td><td>用于标识 Unicode 子范围和特定 Windows ANSI 字符集/代码页的 <a href="#字体签名类">字体签名类</a> 结构。 </td></tr>
</table><a name="转换字集标志">转换字集标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>TCI_SRCCHARSET</td><td>1</td><td>源 包含低字中的字符集值，在高字中包含 0。</td></tr>
<tr><td>TCI_SRCCODEPAGE</td><td>2</td><td>源 是低字中的代码页标识符，在高字中为 0。</td></tr>
<tr><td>TCI_SRCFONTSIG</td><td>3</td><td>源是 <a href="#字体签名类">字体签名类</a> 结构的代码页位域部分。</td></tr>
<tr><td>TCI_SRCLOCALE</td><td>0x1000</td><td>源 是 LCID 或键盘布局的语言标识符 (区域设置标识符)。 如果它是语言标识符，则该值位于低字中。</td></tr>
</table><a name="字体信息值">字体信息值</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>GCP_DBCS</td><td>1</td><td>字符集为 DBCS。</td></tr>
<tr><td>GCP_DIACRITIC</td><td>0x0100</td><td>字体/语言包含音调符号字形。</td></tr>
<tr><td>FLI_GLYPHS</td><td>0x40000</td><td>字体包含通常无法使用代码页访问的额外字形。</td></tr>
<tr><td>GCP_ERROR</td><td>0x8000</td><td>返回字体信息时发生错误。</td></tr>
<tr><td>GCP_GLYPHSHAPE</td><td>0x10</td><td>字体/语言包含每个码位或每个码位组合的多个字形 (支持定形和/或连接) ，字体包含高级字形表，为额外形状提供额外的字形。 </td></tr>
<tr><td>GCP_KASHIDA</td><td>0x0400</td><td>字体/语言允许 Kashidas。</td></tr>
<tr><td>GCP_LIGATE</td><td>0x20</td><td>字体/语言包含可以替换特定字符组合的连字形。</td></tr>
<tr><td>GCP_USEKERNING</td><td>8</td><td>该字体包含字距调整表，可用于在字符和字形之间提供更好的间距。</td></tr>
<tr><td>GCP_REORDER</td><td>2</td><td>语言需要重新排序以显示，例如希伯来语或阿拉伯语。</td></tr>
</table><a name="字体轮廓格式">字体轮廓格式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>GGO_BEZIER</td><td>3</td><td>函数将曲线数据检索为三次方贝塞尔样条， (不采用二次样条格式) 。</td></tr>
<tr><td>GGO_BITMAP</td><td>1</td><td>函数检索字形位图。 有关内存分配的信息，请参阅以下“备注”部分。</td></tr>
<tr><td>GGO_GLYPH_INDEX</td><td>0x80</td><td>指示 uChar 参数是 TrueType 字形索引，而不是字符代码。 有关 Glyph 索引的其他说明，请参阅 ExtTextOut 函数。</td></tr>
<tr><td>GGO_GRAY2_BITMAP</td><td>4</td><td>函数检索包含五个灰度级别的字形位图。</td></tr>
<tr><td>GGO_GRAY4_BITMAP</td><td>5</td><td>函数检索包含 17 级灰色的字形位图。</td></tr>
<tr><td>GGO_GRAY8_BITMAP</td><td>6</td><td>函数检索包含 65 级灰色的字形位图。</td></tr>
<tr><td>GGO_METRICS</td><td>0</td><td>函数仅检索 lpgm 指定的 GLYPHMETRICS 结构。 忽略 lpvBuffer。 此值在失败时影响函数返回值的含义;请参阅返回值部分。</td></tr>
<tr><td>GGO_NATIVE</td><td>2</td><td>函数检索光栅器本机格式的曲线数据点，并使用字体的设计单位。</td></tr>
<tr><td>GGO_UNHINTED</td><td>0x100</td><td>函数仅返回未受限制的大纲。 此标志仅适用于 GGO_BEZIER 和 GGO_NATIVE。</td></tr>
</table><a name="绘多字类">绘多字类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>绘多字类</td><td>POLYTEXTA</td><td>40</td><td>描述如何绘制文本字符串。</td></tr>
<tr><th colspan=4>绘多字类——成员表</th></tr>
<tr><td>左</td><td>x</td><td>整数</td><td>字符串的水平参考点。 字符串使用当前文本对齐模式与此点对齐。</td></tr>
<tr><td>上</td><td>y</td><td>整数</td><td>字符串的垂直引用点。 字符串使用当前文本对齐模式与此点对齐。</td></tr>
<tr><td>长度</td><td>n</td><td>整数</td><td>字符串的长度。</td></tr>
<tr><td>文字</td><td>lpstr</td><td>整数</td><td>绘制的文本字符串的指针。</td></tr>
<tr><td>标志</td><td>uiFlags</td><td>整数</td><td>指定字符串是不透明(2)还是剪裁成矩形(4)，以及字符串是否附带字符宽度值数组。</td></tr>
<tr><td>矩形</td><td>rcl</td><td>矩形类</td><td>包含不透明矩形或剪裁矩形的尺寸的矩形结构。不剪裁成矩形可忽略</td></tr>
<tr><td>宽组</td><td>pdx</td><td>整数</td><td>指向包含字符串中每个字符的宽度值的数组的指针。</td></tr>
</table><a name="真字状态类">真字状态类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>真字状态类</td><td>RASTERIZER_STATUS</td><td>6</td><td>包含有关是否安装了 TrueType 的信息。</td></tr>
<tr><th colspan=4>真字状态类——成员表</th></tr>
<tr><td>大小</td><td>nSize</td><td>整形</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>wFlags</td><td>整形</td><td>指定是否至少安装一种真字体(1)以及是否启用真字体(2)。 如果 TrueType 在系统上，此值为1、2或两者。</td></tr>
<tr><td>语言</td><td>nLanguageID</td><td>整形</td><td>系统的 Setup.inf 文件中的语言。</td></tr>
</table><a name="字距对类">字距对类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字距对类</td><td>KERNINGPAIR</td><td>8</td><td>定义字距对。</td></tr>
<tr><th colspan=4>字距对类——成员表</th></tr>
<tr><td>首字</td><td>wFirst</td><td>整形</td><td>字距调整对中第一个字符的字符代码。</td></tr>
<tr><td>次字</td><td>wSecond</td><td>整形</td><td>字距调整对中第二个字符的字符代码。</td></tr>
<tr><td>差额</td><td>iKernAmount</td><td>整数</td><td>如果它们以相同的字体和大小并排显示，则此对将被划线的量。<br>此值通常为负值，因为对字距调整通常会导致设置两个字符比正常更紧密。<br>该值以逻辑单元指定;也就是说，这取决于当前映射模式。</td></tr>
</table><a name="字体指标类">字体指标类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字体指标类</td><td>OUTLINETEXTMETRICA</td><td>204</td><td>包含描述 TrueType 字体的指标。</td></tr>
<tr><th colspan=4>字体指标类——成员表</th></tr>
<tr><td>大小</td><td>otmSize</td><td>整数</td><td>此 结构的大小（以字节为单位）。204</td></tr>
<tr><td>高度</td><td>otmTextMetrics.tmHeight</td><td>整数</td><td>字符的高度 (上升 + 下降) 。</td></tr>
<tr><td>上升</td><td>otmTextMetrics.tmAscent</td><td>整数</td><td>上升 (基本线上方的单位) 字符。</td></tr>
<tr><td>下降</td><td>otmTextMetrics.tmDescent</td><td>整数</td><td>下降 (底线下方的单位) 字符。</td></tr>
<tr><td>前导</td><td>otmTextMetrics.tmInternalLeading</td><td>整数</td><td>高度成员设置的(边界内)前导空间量。此区域中可能会出现重音符号和其他音调字符。可将此成员设置为零。</td></tr>
<tr><td>额外</td><td>otmTextMetrics.tmExternalLeading</td><td>整数</td><td>应用程序在行之间添加的额外前导 (空间量) 。此区域位于字体外部，不包含任何标记。可将此成员设置为零。</td></tr>
<tr><td>均宽</td><td>otmTextMetrics.tmAveCharWidth</td><td>整数</td><td>字体中字符的平均宽度 (通常定义为字母 x ) 的宽度。 此值不包括粗体或斜体字符所需的悬垂。</td></tr>
<tr><td>最宽</td><td>otmTextMetrics.tmMaxCharWidth</td><td>整数</td><td>该字体中最宽字符的宽度。</td></tr>
<tr><td>粗细</td><td>otmTextMetrics.tmWeight</td><td>整数</td><td>该字体的粗细。</td></tr>
<tr><td>加宽</td><td>otmTextMetrics.tmOverhang</td><td>整数</td><td>可能添加到一些合成字体中的每个字符串的附加宽度。</td></tr>
<tr><td>横比</td><td>otmTextMetrics.tmDigitizedAspectX</td><td>整数</td><td>该字体的目标设备的水平比例。</td></tr>
<tr><td>纵比</td><td>otmTextMetrics.tmDigitizedAspectY</td><td>整数</td><td>该字体的目标设备的垂直比例。</td></tr>
<tr><td>首字</td><td>otmTextMetrics.tmFirstChar</td><td>字节</td><td>字体中定义的第一个字符的值。</td></tr>
<tr><td>尾字</td><td>otmTextMetrics.tmLastChar</td><td>字节</td><td>在字体中定义的最后一个字符的值。</td></tr>
<tr><td>换字</td><td>otmTextMetrics.tmDefaultChar</td><td>字节</td><td>要替换为非字体字符的字符的值。</td></tr>
<tr><td>分词</td><td>otmTextMetrics.tmBreakChar</td><td>字节</td><td>将用于定义文本对齐的分词符的字符的值。</td></tr>
<tr><td>斜体</td><td>otmTextMetrics.tmItalic</td><td>字节</td><td>如果斜体字体为非零，则指定斜体字体。</td></tr>
<tr><td>下划</td><td>otmTextMetrics.tmUnderlined</td><td>字节</td><td>指定带下划线的字体（如果为非零）。</td></tr>
<tr><td>删除</td><td>otmTextMetrics.tmStruckOut</td><td>字节</td><td>非零字号的删除线字体。</td></tr>
<tr><td>系列</td><td>otmTextMetrics.tmPitchAndFamily</td><td>字节</td><td>指定有关音调、技术和物理字体系列的<a href="#字体技术">信息</a>。</td></tr>
<tr><td>字集</td><td>otmTextMetrics.tmCharSet</td><td>字节</td><td>字体的<a href="#字符集">字符集</a>。</td></tr>
<tr><td>凑齐</td><td>otmFiller</td><td>字节</td><td>一个值，该值使 结构以字节对齐。</td></tr>
<tr><td>族类</td><td>otmPanoseNumber.bFamilyType</td><td>字节</td><td>字体族类型。</td></tr>
<tr><td>衬样</td><td>otmPanoseNumber.bSerifStyle</td><td>字节</td><td>衬线样式。</td></tr>
<tr><td>粗细</td><td>otmPanoseNumber.bWeight</td><td>字节</td><td>粗细。</td></tr>
<tr><td>比例</td><td>otmPanoseNumber.bProportion</td><td>字节</td><td>比例。</td></tr>
<tr><td>对比</td><td>otmPanoseNumber.bContrast</td><td>字节</td><td>对比度。</td></tr>
<tr><td>渐变</td><td>otmPanoseNumber.bStrokeVariation</td><td>字节</td><td>笔划变化。</td></tr>
<tr><td>臂样</td><td>otmPanoseNumber.bArmStyle</td><td>字节</td><td>手臂样式。</td></tr>
<tr><td>字形</td><td>otmPanoseNumber.bLetterform</td><td>字节</td><td>字形。</td></tr>
<tr><td>中线</td><td>otmPanoseNumber.bMidline</td><td>字节</td><td>中线。</td></tr>
<tr><td>小高</td><td>otmPanoseNumber.bXHeight</td><td>字节</td><td>小写字母x的高度。</td></tr>
<tr><td>性质</td><td>otmfsSelection</td><td>整数</td><td>字体模式的性质。0斜体,1下划线,2负数,3轮廓,4删除线,5加粗。</td></tr>
<tr><td>改换</td><td>otmfsType</td><td>整数</td><td>指示字体是否获得许可。不得修改或交换许可的字体。 如果设置了位 1，则字体可能不会嵌入到文档中。 如果第 1 位被清除，则可以嵌入字体。 如果设置了位 2，则嵌入为只读。</td></tr>
<tr><td>平斜</td><td>otmsCharSlopeRise</td><td>整数</td><td>光标的斜率。 如果斜率是垂直的，则此值为 1。 应用程序可以使用此值和 otmsCharSlopeRun 成员的值来创建斜光标，该游标的斜率与 otmItalicAngle 成员) 指定的main斜角 (相同。</td></tr>
<tr><td>直斜</td><td>otmsCharSlopeRun</td><td>整数</td><td>光标的。 如果斜率是垂直的，则此值为零。 应用程序可以使用此值和 otmsCharSlopeRise 成员的值来创建斜光标，该游标的斜率与 otmItalicAngle 成员) 指定的main斜角 (相同。</td></tr>
<tr><td>斜角</td><td>otmItalicAngle</td><td>整数</td><td>字体main斜角，以垂直方向逆时针的十分之一度为单位。 常规 (罗马) 字体的值为零。 斜体字体通常具有负斜角 (即它们向右倾斜) 。</td></tr>
<tr><td>字号</td><td>otmEMSquare</td><td>整数</td><td>定义此字体的 em 正方形的 x 或 y 维度的逻辑单元数。 (对于 em square.) ，x 方向和 y 方向的单位数始终相同</td></tr>
<tr><td>升值</td><td>otmAscent</td><td>整数</td><td>此字体中的最大距离字符超出基线。 这是字体的版式升值。</td></tr>
<tr><td>降值</td><td>otmDescent</td><td>整数</td><td>此字体中的最大距离字符延伸至底线下方。 这是字体的版式下降。</td></tr>
<tr><td>行距</td><td>otmLineGap</td><td>整数</td><td>版式行距。</td></tr>
<tr><td>间高</td><td>otmsCapEmHeight</td><td>整数</td><td>不支持。</td></tr>
<tr><td>平高</td><td>otmsXHeight</td><td>整数</td><td>不支持。</td></tr>
<tr><td>框左</td><td>otmrcFontBox.left</td><td>整数</td><td>字体的边界框。</td></tr>
<tr><td>框顶</td><td>otmrcFontBox.top</td><td>整数</td><td>字体的边界框。</td></tr>
<tr><td>框宽</td><td>otmrcFontBox.right</td><td>整数</td><td>字体的边界框。</td></tr>
<tr><td>框高</td><td>otmrcFontBox.bottom</td><td>整数</td><td>字体的边界框。</td></tr>
<tr><td>果上</td><td>otmMacAscent</td><td>整数</td><td>此字体中的最大距离字符扩展到 Macintosh 计算机的基线上方。</td></tr>
<tr><td>果下</td><td>otmMacDescent</td><td>整数</td><td>此字体中的最大距离字符延伸到 Macintosh 计算机的基线下方。</td></tr>
<tr><td>果行</td><td>otmMacLineGap</td><td>整数</td><td>Macintosh 计算机的行距信息。</td></tr>
<tr><td>最小</td><td>otmusMinimumPPEM</td><td>整数</td><td>此字体的最小建议大小，以像素为单位（以每 em-square 为单位）。</td></tr>
<tr><td>下宽</td><td>otmptSubscriptSize.x</td><td>整数</td><td>此字体中下标的建议水平宽度。</td></tr>
<tr><td>下高</td><td>otmptSubscriptSize.y</td><td>整数</td><td>此字体中下标的建议垂直高度。</td></tr>
<tr><td>下左</td><td>otmptSubscriptOffset.x</td><td>整数</td><td>此字体中下标的建议水平偏移量。 从字符原点到下标字符的原点测量下标偏移量。</td></tr>
<tr><td>下顶</td><td>otmptSubscriptOffset.y</td><td>整数</td><td>此字体中下标的建议垂直偏移量。 从字符原点到下标字符的原点测量下标偏移量。</td></tr>
<tr><td>上宽</td><td>otmptSuperscriptSize.x</td><td>整数</td><td>此字体中上标的建议水平宽度。</td></tr>
<tr><td>上高</td><td>otmptSuperscriptSize.y</td><td>整数</td><td>此字体中上标的建议垂直高度。</td></tr>
<tr><td>上左</td><td>otmptSuperscriptOffset.x</td><td>整数</td><td>此字体中上标的建议水平偏移量。 上标偏移量是从字符基线到上标字符的基线测量的。</td></tr>
<tr><td>上顶</td><td>otmptSuperscriptOffset.y</td><td>整数</td><td>此字体中上标的建议垂直偏移量。 上标偏移量是从字符基线到上标字符的基线测量的。</td></tr>
<tr><td>线宽</td><td>otmsStrikeoutSize</td><td>整数</td><td>此字体的删除线笔划的宽度。 通常，这是字体的 em 短划线的宽度。</td></tr>
<tr><td>线位</td><td>otmsStrikeoutPosition</td><td>整数</td><td>删除线笔划相对于此字体的基线的位置。 正值位于底线上方，负值低于底线。</td></tr>
<tr><td>线粗</td><td>otmsUnderscoreSize</td><td>整数</td><td>此字体的下划线字符的粗细。</td></tr>
<tr><td>下线</td><td>otmsUnderscorePosition</td><td>整数</td><td>此字体的下划线字符的位置。</td></tr>
<tr><td>系名</td><td>otmpFamilyName</td><td>整数</td><td>从 结构开头到指定字体系列名称的字符串的偏移量。</td></tr>
<tr><td>字名</td><td>otmpFaceName</td><td>整数</td><td>从 结构开头到指定字体字样名称的字符串的偏移量。 (此字样名称对应于 LOGFONT 结构中指定的名称。)</td></tr>
<tr><td>样名</td><td>otmpStyleName</td><td>整数</td><td>从 结构开头到指定字体样式名称的字符串的偏移量。</td></tr>
<tr><td>全名</td><td>otmpFullName</td><td>整数</td><td>从 结构开头到指定字体全名的字符串的偏移量。 此名称对于字体是唯一的，通常包含版本号或其他标识信息。</td></tr>
</table><a name="字细分类">字细分类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字细分类</td><td>PANOSE</td><td>10</td><td>描述了 TrueType 字体的 PANOSE 字体分类值。然后，这些特征用于将字体与外观相似但名称不同的其他字体相关联。</td></tr>
<tr><th colspan=4>字细分类——成员表</th></tr>
<tr><td>族类</td><td>bFamilyType</td><td>字节</td><td>字体族类型。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_FAMILY_TEXT_DISPLAY</td><td>数值</td><td>文本和显示</td></tr>
<tr><td></td><td>PAN_FAMILY_SCRIPT</td><td>2</td><td>脚本</td></tr>
<tr><td></td><td>PAN_FAMILY_DECORATIVE</td><td>3</td><td>装饰</td></tr>
<tr><td></td><td>PAN_FAMILY_PICTORIAL</td><td>4</td><td>画报</td></tr>
<tr><td>衬样</td><td>bSerifStyle</td><td>字节</td><td>衬线样式。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_SERIF_COVE</td><td2</td><td>湾</td></tr>
<tr><td></td><td>PAN_SERIF_OBTUSE_COVE</td><td>3</td><td>钝角湾</td></tr>
<tr><td></td><td>PAN_SERIF_SQUARE_COVE</td><td>4</td><td>方形海湾</td></tr>
<tr><td></td><td>PAN_SERIF_OBTUSE_SQUARE_COVE</td><td>5</td><td>钝方湾</td></tr>
<tr><td></td><td>PAN_SERIF_SQUARE</td><td>6</td><td>广场</td></tr>
<tr><td></td><td>PAN_SERIF_THIN</td><td>7</td><td>薄</td></tr>
<tr><td></td><td>PAN_SERIF_BONE</td><td>8</td><td>骨</td></tr>
<tr><td></td><td>PAN_SERIF_EXAGGERATED</td><td>9</td><td>夸张</td></tr>
<tr><td></td><td>PAN_SERIF_TRIANGLE</td><td>10</td><td>三角形</td></tr>
<tr><td></td><td>PAN_SERIF_NORMAL_SANS</td><td>11</td><td>普通无衬线</td></tr>
<tr><td></td><td>PAN_SERIF_OBTUSE_SANS</td><td>12</td><td>钝的无衬线</td></tr>
<tr><td></td><td>PAN_SERIF_PERP_SANS</td><td>13</td><td>Perp sans serif</td></tr>
<tr><td></td><td>PAN_SERIF_FLARED</td><td>14</td><td>爆发</td></tr>
<tr><td></td><td>PAN_SERIF_ROUNDED</td><td>15</td><td>滚圆的</td></tr>
<tr><td>粗细</td><td>bWeight</td><td>字节</td><td>粗细。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_WEIGHT_VERY_LIGHT</td><td>2</td><td>很轻</td></tr>
<tr><td></td><td>PAN_WEIGHT_LIGHT</td><td>3</td><td>光</td></tr>
<tr><td></td><td>PAN_WEIGHT_THIN</td><td>4</td><td>薄</td></tr>
<tr><td></td><td>PAN_WEIGHT_BOOK</td><td>5</td><td>书</td></tr>
<tr><td></td><td>PAN_WEIGHT_MEDIUM</td><td>6</td><td>中等</td></tr>
<tr><td></td><td>PAN_WEIGHT_DEMI</td><td>7</td><td>黛米粗体</td></tr>
<tr><td></td><td>PAN_WEIGHT_BOLD</td><td>8</td><td>粗体</td></tr>
<tr><td></td><td>PAN_WEIGHT_HEAVY</td><td>9</td><td>重</td></tr>
<tr><td></td><td>PAN_WEIGHT_BLACK</td><td>10</td><td>黑</td></tr>
<tr><td></td><td>PAN_WEIGHT_NORD</td><td>11</td><td>北</td></tr>
<tr><td>比例</td><td>bProportion</td><td>字节</td><td>比例。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_PROP_OLD_STYLE</td><td>2</td><td>旧式</td></tr>
<tr><td></td><td>PAN_PROP_MODERN</td><td>3</td><td>摩登</td></tr>
<tr><td></td><td>PAN_PROP_EVEN_WIDTH</td><td>4</td><td>均匀宽度</td></tr>
<tr><td></td><td>PAN_PROP_EXPANDED</td><td>5</td><td>扩大</td></tr>
<tr><td></td><td>PAN_PROP_CONDENSED</td><td>6</td><td>浓缩</td></tr>
<tr><td></td><td>PAN_PROP_VERY_EXPANDED</td><td>7</td><td>非常扩展</td></tr>
<tr><td></td><td>PAN_PROP_VERY_CONDENSED</td><td>8</td><td>非常浓缩</td></tr>
<tr><td></td><td>PAN_PROP_MONOSPACED</td><td>9</td><td>等宽</td></tr>
<tr><td>对比</td><td>bContrast</td><td>字节</td><td>对比度。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_CONTRAST_NONE</td><td>2</td><td>没有</td></tr>
<tr><td></td><td>PAN_CONTRAST_VERY_LOW</td><td>3</td><td>非常低</td></tr>
<tr><td></td><td>PAN_CONTRAST_LOW</td><td>4</td><td>低</td></tr>
<tr><td></td><td>PAN_CONTRAST_MEDIUM_LOW</td><td>5</td><td>中低</td></tr>
<tr><td></td><td>PAN_CONTRAST_MEDIUM</td><td>6</td><td>中等</td></tr>
<tr><td></td><td>PAN_CONTRAST_MEDIUM_HIGH</td><td>7</td><td>中高</td></tr>
<tr><td></td><td>PAN_CONTRAST_HIGH</td><td>8</td><td>高</td></tr>
<tr><td></td><td>PAN_CONTRAST_VERY_HIGH</td><td>9</td><td>非常高</td></tr>
<tr><td>渐变</td><td>bStrokeVariation</td><td>字节</td><td>笔划变化。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_STROKE_GRADUAL_DIAG</td><td>2</td><td>渐进/对角线</td></tr>
<tr><td></td><td>PAN_STROKE_GRADUAL_TRAN</td><td>3</td><td>渐进/过渡</td></tr>
<tr><td></td><td>PAN_STROKE_GRADUAL_VERT</td><td>4</td><td>渐进/垂直</td></tr>
<tr><td></td><td>PAN_STROKE_GRADUAL_HORZ</td><td>5</td><td>渐进/水平</td></tr>
<tr><td></td><td>PAN_STROKE_RAPID_VERT</td><td>6</td><td>快速/垂直</td></tr>
<tr><td></td><td>PAN_STROKE_RAPID_HORZ</td><td7</td><td>快速/水平</td></tr>
<tr><td></td><td>PAN_STROKE_INSTANT_VERT</td><td>8</td><td>即时/垂直</td></tr>
<tr><td>臂样</td><td>bArmStyle</td><td>字节</td><td>手臂样式。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_STRAIGHT_ARMS_HORZ</td><td>2</td><td>直臂/水平</td></tr>
<tr><td></td><td>PAN_STRAIGHT_ARMS_WEDGE</td><td>3</td><td>直臂/楔形</td></tr>
<tr><td></td><td>PAN_STRAIGHT_ARMS_VERT</td><td>4</td><td>直臂/垂直</td></tr>
<tr><td></td><td>PAN_STRAIGHT_ARMS_SINGLE_SERIF</td><td>5</td><td>直臂/单衬线</td></tr>
<tr><td></td><td>PAN_STRAIGHT_ARMS_DOUBLE_SERIF</td><td>6</td><td>直臂/双衬线</td></tr>
<tr><td></td><td>PAN_BENT_ARMS_HORZ</td><td>7</td><td>非直臂/水平</td></tr>
<tr><td></td><td>PAN_BENT_ARMS_WEDGE</td><td>8</td><td>非直臂/楔形</td></tr>
<tr><td></td><td>PAN_BENT_ARMS_VERT</td><td>9</td><td>非直臂/垂直臂</td></tr>
<tr><td></td><td>PAN_BENT_ARMS_SINGLE_SERIF</td><td>10</td><td>非直臂/单衬线</td></tr>
<tr><td></td><td>PAN_BENT_ARMS_DOUBLE_SERIF</td><td>11</td><td>非直臂/双衬线</td></tr>
<tr><td>字形</td><td>bLetterform</td><td>字节</td><td>字形。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_CONTACT</td><td>2</td><td>正常/接触</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_WEIGHTED</td><td>3</td><td>正常/加权</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_BOXED</td><td>4</td><td>普通/盒装</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_FLATTENED</td><td>5</td><td>正常/扁平化</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_ROUNDED</td><td>6</td><td>正常/四舍五入</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_OFF_CENTER</td><td>7</td><td>正常/偏心</td></tr>
<tr><td></td><td>PAN_LETT_NORMAL_SQUARE</td><td>8</td><td>正常/方形</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_CONTACT</td><td>9</td><td>倾斜/接触</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_WEIGHTED</td><td>10</td><td>倾斜/加权</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_BOXED</td><td>11</td><td>斜/盒装</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_FLATTENED</td><td>12</td><td>倾斜/扁平</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_ROUNDED</td><td>13</td><td>斜/圆角</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_OFF_CENTER</td><td>14</td><td>倾斜/偏心</td></tr>
<tr><td></td><td>PAN_LETT_OBLIQUE_SQUARE</td><td>15</td><td>斜/方形</td></tr>
<tr><td>中线</td><td>bMidline</td><td>字节</td><td>中线。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_MIDLINE_STANDARD_TRIMMED</td><td>2</td><td>标准/修整</td></tr>
<tr><td></td><td>PAN_MIDLINE_STANDARD_POINTED</td><td>3</td><td>标准/尖头</td></tr>
<tr><td></td><td>PAN_MIDLINE_STANDARD_SERIFED</td><td>4</td><td>标准/衬线</td></tr>
<tr><td></td><td>PAN_MIDLINE_HIGH_TRIMMED</td><td>5</td><td>高/修剪</td></tr>
<tr><td></td><td>PAN_MIDLINE_HIGH_POINTED</td><td>6</td><td>高/尖</td></tr>
<tr><td></td><td>PAN_MIDLINE_HIGH_SERIFED</td><td>7</td><td>高/衬线</td></tr>
<tr><td></td><td>PAN_MIDLINE_CONSTANT_TRIMMED</td><td>8</td><td>恒定/修整</td></tr>
<tr><td></td><td>PAN_MIDLINE_CONSTANT_POINTED</td><td>9</td><td>常量/尖头</td></tr>
<tr><td></td><td>PAN_MIDLINE_CONSTANT_SERIFED</td><td>10</td><td>常量/衬线</td></tr>
<tr><td></td><td>PAN_MIDLINE_LOW_TRIMMED</td><td>11</td><td>低/微调</td></tr>
<tr><td></td><td>PAN_MIDLINE_LOW_POINTED</td><td>12</td><td>低/尖</td></tr>
<tr><td></td><td>PAN_MIDLINE_LOW_SERIFED</td><td>13</td><td>低/衬线</td></tr>
<tr><td>平高</td><td>bXHeight</td><td>字节</td><td>小写字母x的高度。对于拉丁字体，为以下值之一。</td></tr>
<tr><td></td><td>PAN_ANY</td><td>0</td><td>任何</td></tr>
<tr><td></td><td>PAN_NO_FIT</td><td>1</td><td>不合适</td></tr>
<tr><td></td><td>PAN_XHEIGHT_CONSTANT_SMALL</td><td>2</td><td>常量/小</td></tr>
<tr><td></td><td>PAN_XHEIGHT_CONSTANT_STD</td><td>3</td><td>常量/标准</td></tr>
<tr><td></td><td>PAN_XHEIGHT_CONSTANT_LARGE</td><td>4</td><td>常量/大</td></tr>
<tr><td></td><td>PAN_XHEIGHT_DUCKING_SMALL</td><td>5</td><td>闪避/小</td></tr>
<tr><td></td><td>PAN_XHEIGHT_DUCKING_STD</td><td>6</td><td>闪避/标准</td></tr>
<tr><td></td><td>PAN_XHEIGHT_DUCKING_LARGE</td><td>7</td><td>闪避/大</td></tr>
</table><a name="枚举字库回调">枚举字库回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>枚举字库回调</td><td>EnumFontFamProc</td><td>4</td><td>用于处理字体。对于每个枚举字体，都会调用一次。</td></tr>
<tr><th colspan=4>枚举字库回调——成员表</th></tr>
<tr><td>逻辑</td><td>lpelfe</td><td>整数</td><td>指向<a href="#枚举逻辑字体类">枚举逻辑字体类</a>结构的指针，该结构包含有关<a href="#枚举逻辑字体扩展轴类">枚举逻辑字体扩展轴</a>属性的信息。</td></tr>
<tr><td>物理</td><td>lpntme</td><td>整数</td><td>指向包含有关字体物理属性的信息的结构的指针。<a href="#物理字体类">物理字体类</a>、<a href="#新字体扩展类">新字体扩展类</a>、<a href="#枚举物理字体类">枚举物理字体类</a></td></tr>
<tr><td>类别</td><td>FontType</td><td>整数</td><td>字体的类型。1栅格字体，2驱动字体，4真字体</td></tr>
<tr><td>附加</td><td>lParam</td><td>整数</td><td>应用程序传递的定义数据。</td></tr>
</table>返回值必须为非零值才能继续枚举;若要停止枚举，它必须为零。<hr>
<a name="枚举字集回调">枚举字集回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>枚举字集回调</td><td>EnumFontFamExProc</td><td>4</td><td>用于处理字体。对于每个枚举字体，都会调用一次。</td></tr>
<tr><th colspan=4>枚举字集回调——成员表</th></tr>
<tr><td>逻辑</td><td>lpelfe</td><td>整数</td><td>指向<a href="#逻辑字体类">逻辑字体类</a>结构的指针，该结构包含有关<a href="#枚举逻辑字体扩展类">枚举逻辑字体扩展类</a>或<a href="#枚举逻辑字体扩展轴类">枚举逻辑字体扩展轴</a>属性的信息。</td></tr>
<tr><td>物理</td><td>lpntme</td><td>整数</td><td>指向包含有关字体物理属性的信息的结构的指针。<a href="#物理字体类">物理字体类</a>、<a href="#新字体扩展类">新字体扩展类</a>、<a href="#枚举物理字体类">枚举物理字体类</a></td></tr>
<tr><td>类别</td><td>FontType</td><td>整数</td><td>字体的类型。1栅格字体，2驱动字体，4真字体</td></tr>
<tr><td>附加</td><td>lParam</td><td>整数</td><td>应用程序传递的定义数据。</td></tr>
</table>返回值必须为非零值才能继续枚举;若要停止枚举，它必须为零。<hr>
<a name="枚举字体回调">枚举字体回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>枚举字体回调</td><td>EnumFontsProc</td><td>4</td><td>用于处理字体。对于每个枚举字体，都会调用一次。</td></tr>
<tr><th colspan=4>枚举字体回调——成员表</th></tr>
<tr><td>逻辑</td><td>lpelfe</td><td>整数</td><td>指向<a href="#逻辑字体类">逻辑字体类</a>结构的指针，该结构包含有关<a href="#枚举逻辑字体扩展轴类">枚举逻辑字体扩展轴</a>属性的信息。</td></tr>
<tr><td>物理</td><td>lpntme</td><td>整数</td><td>指向包含有关字体物理属性的信息的结构的指针。<a href="#物理字体类">物理字体类</a>、<a href="#枚举物理字体类">枚举物理字体类</a></td></tr>
<tr><td>类别</td><td>FontType</td><td>整数</td><td>字体的类型。1栅格字体，2驱动字体，4真字体</td></tr>
<tr><td>附加</td><td>lParam</td><td>整数</td><td>应用程序传递的定义数据。</td></tr>
</table>返回值必须为非零值才能继续枚举;若要停止枚举，它必须为零。<hr>
<a name="逻辑字体类">逻辑字体类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>逻辑字体类</td><td>LOGFONT</td><td>60</td><td>包含了逻辑字体信息的结构</td></tr>
<tr><th colspan=4>逻辑字体类——成员表</th></tr>
<tr><td>高度</td><td>lfHeight</td><td>整数</td><td>以逻辑单位指定字体字符元或字符的高度。</td></tr>
<tr><td>宽度</td><td>lfWidth</td><td>整数</td><td>以逻辑单位指定字体字符的平均宽度。</td></tr>
<tr><td>角度</td><td>lfEscapement</td><td>整数</td><td>以十分之一度为单位指定每一行文本输出时相对于页面底端的角度。</td></tr>
<tr><td>方向</td><td>lfOrientation</td><td>整数</td><td>以十分之一度为单位指定字符基线相对于页面底端的角度。</td></tr>
<tr><td>粗细</td><td>lfWeight</td><td>整数</td><td>用来指代字体的粗细程度。范围为0到1000</td></tr>
<tr><td>斜体</td><td>lfItalic</td><td>字节</td><td>是否斜体</td></tr>
<tr><td>下划线</td><td>lfUnderline</td><td>字节</td><td>是否下划线</td></tr>
<tr><td>删除线</td><td>lfStrikeOut</td><td>字节</td><td>是否带删除线</td></tr>
<tr><td>字符集</td><td>lfCharSet</td><td>字节</td><td>指定字符集。OEM_CHARSET依赖操作系统DEFAULT_CHARSET基于系统</td></tr>
<tr><td>精度</td><td>lfOutPrecision</td><td>字节</td><td>指定输出精度。OUT_CHARACTER_PRECIS、<br>OUT_DEFAULT_PRECIS、OUT_STRING_PRECIS、OUT_STROKE_PRECIS。</td></tr>
<tr><td>剪裁</td><td>lfClipPrecision</td><td>字节</td><td>当字符超过区域时的剪辑方式，它可以为：<br>CLIP_CHARACTER_PRECIS、CLIP_DEFAULT_PRECIS、CLIP_STROKE_PRECIS。</td></tr>
<tr><td>质量</td><td>lfQuality</td><td>字节</td><td>定义输出质量。DEFAULT_QUALITY (默认质量)<br>、DRAFT_QUALITY (草稿质量)、PROOF_QUALITY (正稿质量)。</td></tr>
<tr><td>间距</td><td>lfPitchAndFamily</td><td>字节</td><td>指定字体的字符间距和族。DEFAULT_PITCH、FIXED_PITCH、VARIABLE_PITCH<br>FF_DECORATIVE、FF_DONTCARE、FF_MODERN、FF_ROMAN、FF_SCRIPT、FF_SWISS</td></tr>
<tr><td>名称</td><td>lfFaceName</td><td>文本</td><td>32字节以内的字体名</td></tr>
</table><a name="枚举逻辑字体类">枚举逻辑字体类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>枚举逻辑字体类</td><td>ENUMLOGFONTA</td><td>156</td><td>定义字体的属性、字体的完整名称和字体样式。</td></tr>
<tr><th colspan=4>枚举逻辑字体类——成员表</th></tr>
<tr><td>逻辑</td><td>elfLogFont</td><td>逻辑字体类</td><td>定义字体属性的<a href="#逻辑字体类">逻辑字体类</a>结构。</td></tr>
<tr><td>名称</td><td>elfFullName[64]</td><td>文本</td><td>字体的唯一名称。例如，ABCD 字体公司 TrueType Bold Italic Sans Serif。</td></tr>
<tr><td>样式</td><td>elfStyle[32]</td><td>文本</td><td>字体的样式。例如，粗体斜体。</td></tr>
</table><a name="枚举逻辑字体扩展类">枚举逻辑字体扩展类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>枚举逻辑字体类</td><td>ENUMLOGFONTEXA</td><td>188</td><td>定义字体的属性、字体的完整名称和字体样式。</td></tr>
<tr><th colspan=4>枚举逻辑字体类——成员表</th></tr>
<tr><td>逻辑</td><td>elfLogFont</td><td>逻辑字体类</td><td>定义字体属性的<a href="#逻辑字体类">逻辑字体类</a>结构。</td></tr>
<tr><td>名称</td><td>elfFullName[64]</td><td>文本</td><td>字体的唯一名称。例如，ABCD 字体公司 TrueType Bold Italic Sans Serif。</td></tr>
<tr><td>样式</td><td>elfStyle[32]</td><td>文本</td><td>字体的样式。例如，粗体斜体。</td></tr>
<tr><td>脚本</td><td>elfScript[32]</td><td>文本</td><td>字体的脚本，即字符集。 例如，西里尔文。</td></tr>
</table><a name="枚举逻辑字体扩展轴类">枚举逻辑字体扩展轴类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>枚举逻辑字体扩展轴类</td><td>ENUMLOGFONTEXDVA</td><td>260</td><td>包含用于创建字体的信息。</td></tr>
<tr><th colspan=4>枚举逻辑字体扩展轴类——成员表</th></tr>
<tr><td>逻辑</td><td>elfEnumLogfontEx</td><td>枚举逻辑字体扩展类</td><td>定义字体属性的<a href="#枚举逻辑字体扩展类">枚举逻辑字体类</a>结构。</td></tr>
<tr><td>字轴</td><td>elfDesignVector</td><td>字轴值类</td><td><a href="#字轴值类">字轴值类</a>结构。 这是零填充的，除非所述的字体是多主控 OpenType 字体。</td></tr>
</table><a name="物理字体类">物理字体类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>物理字体类</td><td>TEXTMETRICA</td><td>53</td><td>包含有关物理字体的基本信息。所有大小都以逻辑单元指定;也就是说它们依赖于显示上下文的当前映射模式。</td></tr>
<tr><th colspan=4>物理字体类——成员表</th></tr>
<tr><td>高度</td><td>tmHeight</td><td>整数</td><td>字符的高度 (上升 + 下降) 。</td></tr>
<tr><td>上升</td><td>tmAscent</td><td>整数</td><td>上升 (基本线上方的单位) 字符。</td></tr>
<tr><td>下降</td><td>tmDescent</td><td>整数</td><td>下降 (底线下方的单位) 字符。</td></tr>
<tr><td>前导</td><td>tmInternalLeading</td><td>整数</td><td>高度成员设置的(边界内)前导空间量。此区域中可能会出现重音符号和其他音调字符。可将此成员设置为零。</td></tr>
<tr><td>额外</td><td>tmExternalLeading</td><td>整数</td><td>应用程序在行之间添加的额外前导 (空间量) 。此区域位于字体外部，不包含任何标记。可将此成员设置为零。</td></tr>
<tr><td>均宽</td><td>tmAveCharWidth</td><td>整数</td><td>字体中字符的平均宽度 (通常定义为字母 x ) 的宽度。 此值不包括粗体或斜体字符所需的悬垂。</td></tr>
<tr><td>最宽</td><td>tmMaxCharWidth</td><td>整数</td><td>该字体中最宽字符的宽度。</td></tr>
<tr><td>粗细</td><td>tmWeight</td><td>整数</td><td>该字体的粗细。</td></tr>
<tr><td>加宽</td><td>tmOverhang</td><td>整数</td><td>可能添加到一些合成字体中的每个字符串的附加宽度。</td></tr>
<tr><td>横比</td><td>tmDigitizedAspectX</td><td>整数</td><td>该字体的目标设备的水平比例。</td></tr>
<tr><td>纵比</td><td>tmDigitizedAspectY</td><td>整数</td><td>该字体的目标设备的垂直比例。</td></tr>
<tr><td>首字</td><td>tmFirstChar</td><td>字节</td><td>字体中定义的第一个字符的值。</td></tr>
<tr><td>尾字</td><td>tmLastChar</td><td>字节</td><td>在字体中定义的最后一个字符的值。</td></tr>
<tr><td>换字</td><td>tmDefaultChar</td><td>字节</td><td>要替换为非字体字符的字符的值。</td></tr>
<tr><td>分词</td><td>tmBreakChar</td><td>字节</td><td>将用于定义文本对齐的分词符的字符的值。</td></tr>
<tr><td>斜体</td><td>tmItalic</td><td>字节</td><td>如果斜体字体为非零，则指定斜体字体。</td></tr>
<tr><td>下划</td><td>tmUnderlined</td><td>字节</td><td>指定带下划线的字体（如果为非零）。</td></tr>
<tr><td>删除</td><td>tmStruckOut</td><td>字节</td><td>非零字号的删除线字体。</td></tr>
<tr><td>系列</td><td>tmPitchAndFamily</td><td>字节</td><td>指定有关音调、技术和物理字体系列的<a href="#字体技术">信息</a>。</td></tr>
<tr><td>字集</td><td>tmCharSet</td><td>字节</td><td>字体的<a href="#字符集">字符集</a>。</td></tr>
</table><a name="字体技术">字体技术系列</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>TMPF_FIXED_PITCH</td><td>1</td><td>如果设置了此位，则字体是可变间距字体。 如果此位是明确的，则字体是固定的间距字体。 请仔细注意，这些含义与常量名称的含义相反。</td></tr>
<tr><td>TMPF_VECTOR</td><td>2</td><td>如果设置了此位，则字体是矢量字体。</td></tr>
<tr><td>TMPF_TRUETYPE</td><td>4</td><td>如果设置了此位，则字体为 TrueType 字体。</td></tr>
<tr><td>TMPF_DEVICE</td><td>8</td><td>如果设置了此位，则字体是设备字体。</td></tr>
</table><a name="字符集">字符集</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ANSI_CHARSET</td><td>0</td><td>指定英文字符 设置。</td></tr>
<tr><td>DEFAULT_CHARSET</td><td>1</td><td>指定字符集 基于当前系统区域设置;例如，当系统区域设置为 美国英语，默认字符集为 ANSI_CHARSET。</td></tr>
<tr><td>SYMBOL_CHARSET</td><td>2</td><td>指定 符号。</td></tr>
<tr><td>MAC_CHARSET</td><td>77</td><td>指定 Apple Macintosh 字符集。</td></tr>
<tr><td>SHIFTJIS_CHARSET</td><td>128</td><td>指定日语 字符集。</td></tr>
<tr><td>HANGUL_CHARSET</td><td>129</td><td>也拼写 “韩文”。指定朝鲜语韩文字符集。</td></tr>
<tr><td>JOHAB_CHARSET</td><td>130</td><td>也拼写为“Johap”。 指定 Johab 朝鲜语字符集。</td></tr>
<tr><td>GB2312_CHARSET</td><td>134</td><td>指定“简化” 中华人民共和国的汉字集。</td></tr>
<tr><td>CHINESEBIG5_CHARSET</td><td>136</td><td>指定 “繁体”汉字集，主要在台湾和 香港和澳门特别行政区。</td></tr>
<tr><td>GREEK_CHARSET</td><td>161</td><td>指定希腊字符 设置。</td></tr>
<tr><td>TURKISH_CHARSET</td><td>162</td><td>指定土耳其语 字符集。</td></tr>
<tr><td>VIETNAMESE_CHARSET</td><td>163</td><td>指定越南语 字符集。</td></tr>
<tr><td>HEBREW_CHARSET</td><td>177</td><td>指定希伯来语字符 设置</td></tr>
<tr><td>ARABIC_CHARSET</td><td>178</td><td>指定阿拉伯字符 设置</td></tr>
<tr><td>BALTIC_CHARSET</td><td>186</td><td>指定波罗的海 （东北欧）字符集</td></tr>
<tr><td>RUSSIAN_CHARSET</td><td>204</td><td>指定俄语 西里尔字符集。</td></tr>
<tr><td>THAI_CHARSET</td><td>222</td><td>指定泰语字符 设置。</td></tr>
<tr><td>EASTEUROPE_CHARSET</td><td>238</td><td>指定东部 欧洲字符集。</td></tr>
<tr><td>OEM_CHARSET</td><td>255</td><td>指定到以下 OEM 代码页，根据当前系统区域设置。</td></tr>
</table><a name="OEM字符集">OEM字符集</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>FS_LATIN1</td><td>0x00000001</td><td>拉丁语1</td></tr>
<tr><td>FS_LATIN2</td><td>0x00000002</td><td>拉丁语2</td></tr>
<tr><td>FS_CYRILLIC</td><td>0x00000004</td><td>西里尔文</td></tr>
<tr><td>FS_GREEK</td><td>0x00000008</td><td>希腊</td></tr>
<tr><td>FS_TURKISH</td><td>0x00000010</td><td>土耳其</td></tr>
<tr><td>FS_HEBREW</td><td>0x00000020</td><td>希伯来语</td></tr>
<tr><td>FS_ARABIC</td><td>0x00000040</td><td>阿拉伯</td></tr>
<tr><td>FS_BALTIC</td><td>0x00000080</td><td>波罗的海</td></tr>
<tr><td>FS_VIETNAMESE</td><td>0x00000100</td><td>越南</td></tr>
<tr><td>FS_THAI</td><td>0x00010000</td><td>泰国</td></tr>
<tr><td>FS_JISJAPAN</td><td>0x00020000</td><td>名称</td></tr>
<tr><td>FS_CHINESESIMP</td><td>0x00040000</td><td>中文简体</td></tr>
<tr><td>FS_WANSUNG</td><td>0x00080000</td><td>韩国</td></tr>
<tr><td>FS_CHINESETRAD</td><td>0x00100000</td><td>中文繁体</td></tr>
<tr><td>FS_JOHAB</td><td>0x00200000</td><td>朝鲜</td></tr>
<tr><td>FS_SYMBOL</td><td>0x80000000</td><td>符号。</td></tr>
</table><a name="代码页位域">代码页位域</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>位</td><td>代码页</td><td>说明</td></tr>
<tr><td>0</td><td>1252</td><td>拉丁语 1</td></tr>
<tr><td>1</td><td>1250</td><td>拉丁语 2：中欧</td></tr>
<tr><td>2</td><td>1251</td><td>西里尔语</td></tr>
<tr><td>3</td><td>1253</td><td>希腊语</td></tr>
<tr><td>4</td><td>1254</td><td>土耳其语</td></tr>
<tr><td>5</td><td>1255</td><td>希伯来语</td></tr>
<tr><td>6</td><td>1256</td><td>阿拉伯语</td></tr>
<tr><td>7</td><td>1257</td><td>波罗的语</td></tr>
<tr><td>8</td><td>1258</td><td>越南语</td></tr>
<tr><td>9 - 15</td><td></td><td>为 ANSI 保留</td></tr>
<tr><td>16</td><td>874</td><td>泰语</td></tr>
<tr><td>17</td><td>932</td><td>日语 (Shift_JIS)</td></tr>
<tr><td>18</td><td>936</td><td>简体中文 (中国、新加坡)</td></tr>
<tr><td>19</td><td>949</td><td>朝鲜文统一朝鲜文代码 (朝鲜文通汉字代码)</td></tr>
<tr><td>20</td><td>950</td><td>繁体中文 (台湾：中国香港特别行政区)</td></tr>
<tr><td>21</td><td>1361</td><td>韩语（Johab）</td></tr>
<tr><td>22 - 29</td><td></td><td>保留给备用 ANSI 和 OEM</td></tr>
<tr><td>30 - 31</td><td></td><td>按系统保留。</td></tr>
<tr><td>32 - 46</td><td></td><td>保留给 OEM</td></tr>
<tr><td>47</td><td>1258</td><td>越南语</td></tr>
<tr><td>48</td><td>869</td><td>现代希腊语</td></tr>
<tr><td>49</td><td>866</td><td>俄语</td></tr>
<tr><td>50</td><td>865</td><td>北欧</td></tr>
<tr><td>51</td><td>864</td><td>阿拉伯语</td></tr>
<tr><td>52</td><td>863</td><td>加拿大法语</td></tr>
<tr><td>53</td><td>862</td><td></td></tr>
<tr><td>54</td><td>861</td><td>冰岛语</td></tr>
<tr><td>55</td><td>860</td><td>葡萄牙语</td></tr>
<tr><td>56</td><td>857</td><td>土耳其语</td></tr>
<tr><td>57</td><td>855</td><td>西里尔;主要是俄语</td></tr>
<tr><td>58</td><td>852</td><td>拉丁语 2</td></tr>
<tr><td>59</td><td>775</td><td>波罗的语</td></tr>
<tr><td>60</td><td>737</td><td>希腊语;以前为 437G</td></tr>
<tr><td>61</td><td>708;720</td><td>阿拉伯语;ASMO 708</td></tr>
<tr><td>62</td><td>850</td><td>多语言拉丁语 1</td></tr>
<tr><td>63</td><td>437</td><td>US</td></tr>
</table><a name="枚举物理字体类">枚举物理字体类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>枚举物理字体类</td><td>ENUMTEXTMETRICA</td><td>421</td><td>包含有关物理字体的基本信息。</td></tr>
<tr><th colspan=4>枚举物理字体类——成员表</th></tr>
<tr><td>扩展</td><td>etmNewTextMetricEx</td><td>新字体扩展类</td><td><a href="#新字体扩展类">新字体扩展类</a> 结构，包含有关物理字体的信息。</td></tr>
<tr><td>字轴</td><td>etmAxesList</td><td>字轴组类</td><td><a href="#字轴组类">字轴组类</a>结构，包含有关字体轴的信息。 这仅适用于多个母版字体。</td></tr>
</table><a name="新字体扩展类">新字体扩展类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>新字体扩展类</td><td>NEWTEXTMETRICEXA</td><td>93</td><td>包含有关物理字体的信息。</td></tr>
<tr><th colspan=4>新字体扩展类——成员表</th></tr>
<tr><td>最小</td><td>ntmTm</td><td>新物理字体类</td><td><a href="#新物理字体类">新物理字体类</a> 结构。</td></tr>
<tr><td>最大</td><td>ntmFontSig</td><td>字体签名类</td><td>用于指示字体覆盖率的 <a href="#字体签名类">字体签名类</a> 结构。</td></tr>
</table><a name="新物理字体类">新物理字体类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>新物理字体类</td><td>NEWTEXTMETRICA</td><td>69</td><td>包含有关物理字体的基本信息。所有大小都以逻辑单元指定;也就是说它们依赖于显示上下文的当前映射模式。</td></tr>
<tr><th colspan=4>新物理字体类——成员表</th></tr>
<tr><td>高度</td><td>tmHeight</td><td>整数</td><td>字符的高度 (上升 + 下降) 。</td></tr>
<tr><td>上升</td><td>tmAscent</td><td>整数</td><td>上升 (基本线上方的单位) 字符。</td></tr>
<tr><td>下降</td><td>tmDescent</td><td>整数</td><td>下降 (底线下方的单位) 字符。</td></tr>
<tr><td>前导</td><td>tmInternalLeading</td><td>整数</td><td>高度成员设置的(边界内)前导空间量。此区域中可能会出现重音符号和其他音调字符。可将此成员设置为零。</td></tr>
<tr><td>额外</td><td>tmExternalLeading</td><td>整数</td><td>应用程序在行之间添加的额外前导 (空间量) 。此区域位于字体外部，不包含任何标记。可将此成员设置为零。</td></tr>
<tr><td>均宽</td><td>tmAveCharWidth</td><td>整数</td><td>字体中字符的平均宽度 (通常定义为字母 x ) 的宽度。 此值不包括粗体或斜体字符所需的悬垂。</td></tr>
<tr><td>最宽</td><td>tmMaxCharWidth</td><td>整数</td><td>该字体中最宽字符的宽度。</td></tr>
<tr><td>粗细</td><td>tmWeight</td><td>整数</td><td>该字体的粗细。</td></tr>
<tr><td>加宽</td><td>tmOverhang</td><td>整数</td><td>可能添加到一些合成字体中的每个字符串的附加宽度。</td></tr>
<tr><td>横比</td><td>tmDigitizedAspectX</td><td>整数</td><td>该字体的目标设备的水平比例。</td></tr>
<tr><td>纵比</td><td>tmDigitizedAspectY</td><td>整数</td><td>该字体的目标设备的垂直比例。</td></tr>
<tr><td>首字</td><td>tmFirstChar</td><td>字节</td><td>字体中定义的第一个字符的值。</td></tr>
<tr><td>尾字</td><td>tmLastChar</td><td>字节</td><td>在字体中定义的最后一个字符的值。</td></tr>
<tr><td>换字</td><td>tmDefaultChar</td><td>字节</td><td>要替换为非字体字符的字符的值。</td></tr>
<tr><td>分词</td><td>tmBreakChar</td><td>字节</td><td>将用于定义文本对齐的分词符的字符的值。</td></tr>
<tr><td>斜体</td><td>tmItalic</td><td>字节</td><td>如果斜体字体为非零，则指定斜体字体。</td></tr>
<tr><td>下划</td><td>tmUnderlined</td><td>字节</td><td>指定带下划线的字体（如果为非零）。</td></tr>
<tr><td>删除</td><td>tmStruckOut</td><td>字节</td><td>非零字号的删除线字体。</td></tr>
<tr><td>系列</td><td>tmPitchAndFamily</td><td>字节</td><td>指定有关音调、技术和物理字体系列的<a href="#字体技术">信息</a>。</td></tr>
<tr><td>字集</td><td>tmCharSet</td><td>字节</td><td>字体的<a href="#字符集">字符集</a>。</td></tr>
<tr><td>标志</td><td>ntmFlags</td><td>整数</td><td>指定字体是否为斜体、下划线、轮廓、加粗等。可以是<a href="#字体位标志">字体标志</a>的任意合理组合。</td></tr>
<tr><td>字号</td><td>ntmSizeEM</td><td>整数</td><td>字体的 em 正方形的大小。此值以名义单位表示， (即字体设计) 单位。</td></tr>
<tr><td>字高</td><td>tmDescent</td><td>整数</td><td>字体的高度（以名义单位表示）。 </td></tr>
<tr><td>字宽</td><td>ntmAvgWidth</td><td>整数</td><td>字体中字符的平均宽度（以名义单位表示）。</td></tr>
</table><a name="字体位标志">字体标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>位</td><td>名称</td><td>含义</td></tr>
<tr><td>0</td><td>NTM_ITALIC</td><td>斜体</td></tr>
<tr><td>5</td><td>NTM_BOLD</td><td>粗体</td></tr>
<tr><td>8</td><td>NTM_REGULAR</td><td>普通</td></tr>
<tr><td>16</td><td>NTM_NONNEGATIVE_AC</td><td>任何字形中任何大小的字体都没有负 A 或 C 空间。</td></tr>
<tr><td>17</td><td>NTM_PS_OPENTYPE</td><td>PostScript OpenType 字体</td></tr>
<tr><td>18</td><td>NTM_TT_OPENTYPE</td><td>TrueType OpenType 字体</td></tr>
<tr><td>19</td><td>NTM_MULTIPLEMASTER</td><td>多母版字体</td></tr>
<tr><td>20</td><td>NTM_TYPE1</td><td>键入 1 字体</td></tr>
<tr><td>21</td><td>NTM_DSIG</td><td>具有数字签名的字体。 这允许可追溯性，并确保字体已经过测试且未损坏</td></tr>
</table><a name="字体签名类">字体签名类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字体签名类</td><td>FONTSIGNATURE</td><td>24</td><td>包含标识给定字体为其提供字形的代码页和 Unicode 子范围的信息。</td></tr>
<tr><th colspan=4>字体签名类——成员表</th></tr>
<tr><td>子集位域</td><td>fsUsb[4]</td><td>整数</td><td>一个 128 位 Unicode 子集位域 (USB) 标识最多 126 个 Unicode 子范围。</td></tr>
<tr><td>码页位域</td><td>fsCsb[2]</td><td>整数</td><td>标识特定字符集或代码页的 64 位代码页位域 (CPB) 。代码页位于此位域的下 32 位中。 高 32 用于非 Windows 代码页。<a href="#代码页位域">代码页位域</a>。</td></tr>
</table><a name="字轴组类">字轴组类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字轴组类</td><td>AXESLISTA</td><td>328</td><td>包含有关多个主控字体的所有轴的信息。</td></tr>
<tr><th colspan=4>字轴组类——成员表</th></tr>
<tr><td>预留</td><td>axlReserved</td><td>整数</td><td>保留。 必须0x8006C61。</td></tr>
<tr><td>上升</td><td>axlNumAxes</td><td>整数</td><td>指定多主控字体的轴数。</td></tr>
<tr><td>上升</td><td>axlAxisInfo[16]</td><td>字体轴类</td><td><a href="#字体轴类">字体轴类</a> 结构的数组。 每个结构都包含指定多个主控字体轴上的信息。这对应于 <a href="#字轴值类">字轴值类</a> 结构中的 值组 数组。</td></tr>
</table><a name="字体轴类">字体轴类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字体轴类</td><td>AXISINFOA</td><td>20</td><td>包含有关多主控字体轴的信息。</td></tr>
<tr><th colspan=4>字体轴类——成员表</th></tr>
<tr><td>最小</td><td>axMinValue</td><td>整数</td><td>此轴的最小值。</td></tr>
<tr><td>最大</td><td>axMaxValue</td><td>整数</td><td>此轴的最大值。</td></tr>
<tr><td>名称</td><td>axAxisName[16]</td><td>文本</td><td>轴的名称，指定为字符数组。</td></tr>
</table><a name="字轴值类">字轴值类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>字轴值类</td><td>DESIGNVECTOR</td><td>72</td><td>为多个主控字体的轴指定值。</td></tr>
<tr><th colspan=4>字轴值类——成员表</th></tr>
<tr><td>最小</td><td>axMinValue</td><td>整数</td><td>此轴的最小值。</td></tr>
<tr><td>最大</td><td>axMaxValue</td><td>整数</td><td>此轴的最大值。</td></tr>
<tr><td>值组</td><td>dvValues[16]</td><td>整数</td><td>轴的名称，指定为字符数组。</td></tr>
</table>
<font color="#0000FF"><a name="剪裁区域">剪裁区域</a></font><br>
应用程序通过多种方式使用剪裁。Word和电子表格剪裁键盘输入，使其不显示在页面或电子表格的边距中。计算机辅助设计(CAD)和绘图程序剪裁图形输出，使其不覆盖绘图或图片的边缘。<br>

剪裁公为剪裁区域和剪裁路径，剪裁区域是一个边缘为直线或曲线的区域。 剪裁路径是具有直线、贝塞尔曲线或两者组合的边缘的区域。<br>

剪裁区域是应用程序可以选择到设备上下文中的图形对象之一， (DC) 。 它通常是矩形的。 某些设备上下文提供预定义的或默认的剪辑区域，而另一些则不提供。<br>
应用程序可以对剪裁区域执行各种操作。 其中一些操作需要标识区域的句柄，而有些则不需要。  例如，应用程序可以直接对设备上下文的剪辑区域执行以下操作。<br>
通过将相应线条、弧线、位图、文本或填充形状的坐标传递给 点在剪裁 函数，确定图形输出是否显示在区域的边框内。<br>
通过调用 矩形在剪 函数确定工作区的一部分是否与区域相交。<br>
通过调用 剪裁偏移 函数按指定偏移量移动现有区域。<br>
通过调用 剪裁新区 函数，从当前剪辑区域中排除工作区的矩形部分。<br>
通过调用 交叉剪裁 函数，将工作区的矩形部分与当前剪辑区域合并。<br>

获取标识剪辑区域的句柄后，应用程序可以执行区域通用的任何操作，例如：<br>

通过调用 合并区域 函数将当前剪辑区域的副本与第二个区域组合在一起。<br>
通过调用 对比区域 函数将当前剪辑区域的副本与第二个区域进行比较。<br>
通过调用 点在区内 函数，确定某个点是否位于当前剪辑区域副本的内部。<br>
<hr>
应用程序通过调用与特定形状关联的函数来创建区域。 下表显示了与每个标准形状关联的函数 。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>形状</td><td>函数</td></tr>
<tr><td>矩形区域</td><td>创建矩形、新建矩形、设置区域</td></tr>
<tr><td>带圆角的矩形区域</td><td>建圆矩形</td></tr>
<tr><td>椭圆区域</td><td>创建椭圆、新建椭圆</td></tr>
<tr><td>多边形区域</td><td>建多边区	、叠多边区</td></tr>
</table>
每个区域创建函数返回一个标识新区域的句柄。 应用程序可以通过调用 选择对象 函数将区域选择到设备上下文中。将某个区域选入设备上下文后，应用程序可以对其执行各种操作。<br>
应用程序可以组合区域、比较区域、填充区域、绘制区域、反转内部、在其周围绘制框架、移动区域、检索其尺寸以及测试光标是否位于其边界内。<br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><th colspan=4>剪裁函数</th></tr>
<tr><td>剪裁新区</td><td>ExcludeClipRect</td><td>剪裁新区(设备,左,上,右,下)</td><td>创建一个新的剪切区域，该区域由一个现存的剪切区域减去一个特定的矩形区域而构成</td></tr>
<tr><td>剪裁组合</td><td>ExtSelectClipRgn</td><td>剪裁组合(设备,区域,模式)</td><td>使用指定的模式将指定的区域与当前的剪切区域进行组合。</td></tr>
<tr><td>设备边界</td><td>GetClipBox</td><td>设备边界(设备,矩形)</td><td>获取围绕设备当前可见区域绘制的最紧密的边界矩形的尺寸。</td></tr>
<tr><td>剪裁区域</td><td>GetClipRgn</td><td>剪裁区域(设备,区域)</td><td>获取指定设备的当前应用程序定义的剪切区域的句柄。</td></tr>
<tr><td>设备元区</td><td>GetMetaRgn</td><td>设备元区(设备,元区域)</td><td>获取指定设备的元区域</td></tr>
<tr><td>区域相交</td><td>SetMetaRgn</td><td>区域相交(设备)</td><td>将指定设备的当前裁剪区域与当前元区域相交，剪切区域将重置为空区域。</td></tr>
<tr><td>剪裁复制</td><td>GetRandomRgn</td><td>剪裁复制(设备,区域,4)</td><td>将指定设备系统剪辑区域（4）复制到特定区域</td></tr>
<tr><td>交叉剪裁</td><td>IntersectClipRect</td><td>交叉剪裁(设备,左,上,右,下)</td><td>从当前剪切区域和指定矩形的交点创建一个新的剪切区域。</td></tr>
<tr><td>剪裁偏移</td><td>OffsetClipRgn</td><td>剪裁偏移(设备,X,Y)</td><td>将设备的剪切区域移动指定的偏移量。</td></tr>
<tr><td>点在剪裁</td><td>PtVisible</td><td>在否=点在剪裁(设备,x,y)</td><td>确定指定的点是否在设备的剪裁区域内。</td></tr>
<tr><td>矩形在剪</td><td>RectVisible</td><td>在否=矩形在剪(设备,矩形)</td><td>确定指定的矩形是否在设备的剪裁区域内。</td></tr>
<tr><td>选择剪裁</td><td>SelectClipPath</td><td>选择剪裁(设备,模式)</td><td>选择当前路径作为设备的剪切区域，组合模式：1交集,2联合,3异或,4合并,5复制</td></tr>
<tr><td>选区剪裁</td><td>SelectClipRgn</td><td>选区剪裁(设备,区域)</td><td>选择一个区域作为指定设备的当前剪辑区域。</td></tr>
<tr><th colspan=4>区域函数</th></tr>
<tr><td>合并区域</td><td>CombineRgn</td><td>合并区域(目标,源区1,源区2,模式)</td><td>组合两个区域，并将结果存储在第三个区域。模式:1交集,2联合,3异或,4合并,5复制</td></tr>
<tr><td>创建椭圆</td><td>CreateEllipticRgn</td><td>区域=创建椭圆(左,上,右,下)</td><td>创建一个椭圆形区域。</td></tr>
<tr><td>新建椭圆</td><td>CreateEllipticRgnIndirect</td><td>区域=新建椭圆(矩形类)</td><td>创建一个椭圆形区域。</td></tr>
<tr><td>建多边区</td><td>CreatePolygonRgn</td><td>建多边区(点数组,点数量,填充)</td><td>创建一个由一系列点围成的区域。最后点与第一点相连以封闭多边形。</td></tr>
<tr><td>叠多边区</td><td>CreatePolyPolygonRgn</td><td>叠多边区(点数组,点计数组,点计数,填充)</td><td>创建一个由一系列多边形组成的区域。多边形可以重叠。模式:1填充每个扫描线,2非零绕组值填充</td></tr>
<tr><td>创建矩形</td><td>CreateRectRgn</td><td>区域=创建矩形(左,上,右,下)</td><td>创建一个矩形区域。</td></tr>
<tr><td>新建矩形</td><td>CreateRectRgnIndirect</td><td>区域=新建矩形(矩形类)</td><td>创建一个矩形区域。</td></tr>
<tr><td>建圆矩形</td><td>CreateRoundRectRgn</td><td>区域=建圆矩形(左,上,右,下,圆宽,圆高)</td><td>创建一个带圆角的矩形区域。</td></tr>
<tr><td>对比区域</td><td>EqualRgn</td><td>对比区域(区域1,区域2)</td><td>检查两个指定的区域，以确定它们的大小形状是否相同。</td></tr>
<tr><td>区域转换</td><td>ExtCreateRegion</td><td>区域转换(转换,长度,数据)</td><td>根据指定的区域<a href="#转换类">转换</a>和<a href="#区域数据类">数据</a>创建区域。如缩放,平移,旋转,剪切</td></tr>
<tr><td>填充区域</td><td>FillRgn</td><td>填充区域(设备,区域,笔刷)</td><td>使用指定的画笔填充区域。</td></tr>
<tr><td>区域画框</td><td>FrameRgn</td><td>区域画框(设备,区域,画笔,笔宽,笔高)</td><td>使用指定的画笔在指定区域周围绘制一个边框。</td></tr>
<tr><td>区域边界</td><td>GetRgnBox</td><td>区域边界(区域,矩形)</td><td>获取指定区域的边界矩形。</td></tr>
<tr><td>区域数据</td><td>GetRegionData</td><td>区域数据(区域,大小,数据)</td><td>将指定区域的<a href="#区域数据类">数据</a>填充指定的缓冲区。</td></tr>
<tr><td>填充模式</td><td>GetPolyFillMode</td><td>模式=填充模式(设备)</td><td>获取指定设备的多边形填充模式。模式:1填充每个扫描线,2非零绕组值填充</td></tr>
<tr><td>模式填充</td><td>SetPolyFillMode</td><td>填充模式(设备,模式)</td><td>设置指定设备的多边形填充模式。模式:1填充每个扫描线,2非零绕组值填充</td></tr>
<tr><td>反转区域</td><td>InvertRgn</td><td>反转区域(设备,区域)</td><td>可以反转指定区域的颜色。</td></tr>
<tr><td>区域偏移</td><td>OffsetRgn</td><td>区域偏移(区域,X,Y)</td><td>将区域移动指定的偏移量。</td></tr>
<tr><td>喷涂区域</td><td>PaintRgn</td><td>喷涂区域(设备,区域)</td><td>使用当前选定的画笔在设备中绘制(涂漆)指定的区域。</td></tr>
<tr><td>点在区内</td><td>PtInRegion</td><td>在否=点在区内(区域,x,y)</td><td>确定指定的点是否在指定区域内。</td></tr>
<tr><td>转换区域</td><td>PathToRegion</td><td>区域=转换区域(设备)</td><td>从选择到指定设备的路径中创建一个区域。</td></tr>
<tr><td>矩形在区</td><td>RectInRegion</td><td>在否=矩形在区(区域,矩形)</td><td>确定指定的矩形是否在指定区域边界内。</td></tr>
<tr><td>设置区域</td><td>SetRectRgn</td><td>设置区域(区域,左,上,右,下)</td><td>将区域转换为具有指定坐标的矩形区域。</td></tr>
</table><a name="区域数据类">区域数据类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>区域数据类</td><td>RGNDATA</td><td>32+</td><td>包含一个标头和一个构成区域的矩形数组。 矩形按从上到下、从左到右排序。 它们不重叠。</td></tr>
<tr><th colspan=4>区域数据类——成员表</th></tr>
<tr><td>标头</td><td>rdh</td><td>区域头类</td><td>RGNDATAHEADER 结构。</td></tr>
<tr><td>数据</td><td>Buffer[1]</td><td>文本</td><td>指定包含构成区域的矩形结构的任意大小的缓冲区。</td></tr>
</table><a name="区域头类">区域头类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>区域头类</td><td>RGNDATAHEADER</td><td>32</td><td>指定区域的类型（区域是矩形还是梯形）、组成区域的矩形数量、包含矩形结构的缓冲区的大小等。</td></tr>
<tr><th colspan=4>区域头类——成员表</th></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>标头的大小（以字节为单位）。</td></tr>
<tr><td>分类</td><td>iType</td><td>整数</td><td>区域的类型。此值必须是1。</td></tr>
<tr><td>区数</td><td>nCount</td><td>整数</td><td>构成区域的矩形数。</td></tr>
<tr><td>区数</td><td>nRgnSize</td><td>整数</td><td>接收构成区域的矩形结构所需的缓冲区的大小。如果大小未知，则此成员可以为零。</td></tr>
<tr><td>边框</td><td>rcBound</td><td>矩形类</td><td>区域（以逻辑单元为单位）的边框。</td></tr>
</table>
<font color="#0000FF"><a name="画板绘图">画板绘图</a></font><br>
颜色可用于传达想法、显示项目之间的关系以及提高输出的吸引力和质量。 Windows 使应用程序能够发现给定设备的颜色功能，并从最符合其需求的可用颜色中进行选择。<br>
显示器和打印机等设备的颜色功能范围从单色到数千种颜色。 由于应用程序可能需要为整个范围内的设备生成输出，因此应准备好处理不同的颜色功能。<br>
调色板是一个数组，其中包含标识当前可在输出设备上显示或绘制的颜色的颜色值。 调色板由能够生成许多颜色但只能在任何给定时间显示或绘制其中一部分颜色的设备使用。
对于此类设备，系统维护 一个系统调色板 来跟踪和管理设备的当前颜色。 应用程序没有直接访问系统调色板的权限。 相反，系统会将默认调色板与每个设备上下文相关联。<br>
应用程序可以使用默认调色板中的颜色，也可以通过创建 逻辑调色板 并将其与单个设备上下文关联来定义其自己的颜色。<br><br>
几乎所有应用程序都使用屏幕来显示它们操作的数据。 应用程序绘制图像、绘制图形和写入文本，以便用户可以在创建、编辑和打印数据时查看数据。<br>
Microsoft Windows 为绘画和绘图提供了丰富的支持，但由于多任务操作系统的性质，应用程序在访问屏幕时必须相互协作。<br>

为了保持所有应用程序顺利且协作地运行，系统会管理所有输出到屏幕。 应用程序使用窗口作为其主要输出设备，而不是屏幕本身。 系统提供与窗口唯一对应的显示设备上下文。<br>
应用程序使用显示设备上下文将其输出定向到指定的窗口。 在窗口中绘制 (将输出定向到它) 可防止应用程序干扰其他应用程序的输出，并允许应用程序彼此共存，同时仍充分利用系统的图形功能。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><th colspan=4>调色板函数</th></tr>
<tr><td>换调色板</td><td>AnimatePalette</td><td>换调色板(调色板,起始,数目,色组)</td><td>将替换指定逻辑调色板中的条目。色板组是<a href="#色板类">色板类</a>数组的指针</td></tr>
<tr><td>半调色板</td><td>CreateHalftonePalette</td><td>色板=半调色板(设备)</td><td>为指定的设备上下文创建一个半色调调色板。</td></tr>
<tr><td>创建色板</td><td>CreatePalette</td><td>色板=创建色板(调色类)</td><td>使用<a href="#调色类">调色类</a>结构创建逻辑调色板。</td></tr>
<tr><td>调正色板</td><td>ColorCorrectPalette</td><td>调正色板(设备,控点,条目,数目)</td><td>使用指定设备上下文中的 WCS 1.0 参数更正调色板的条目。</td></tr>
<tr><td>颜色调整</td><td>GetColorAdjustment</td><td>颜色调整(设备,色调)</td><td>获取指定设备的<a href="#颜色调整类">颜色调整值</a>。</td></tr>
<tr><td>调整颜色</td><td>SetColorAdjustment</td><td>调整颜色(设备,色调)</td><td>使用指定数据设置设备的<a href="#颜色调整类">颜色调整值</a>。</td></tr>
<tr><td>设备取色</td><td>GetNearestColor</td><td>颜色=设备取色(设备,颜色)</td><td>根据设备的显示能力，取得与指定颜色最接近的一种纯色</td></tr>
<tr><td>色板取色</td><td>GetNearestPaletteIndex</td><td>色号=色板取色(色板,颜色)</td><td>检索指定逻辑调色板中与指定颜色值最匹配的条目的索引。</td></tr>
<tr><td>取调色板</td><td>GetPaletteEntries</td><td>取调色板(色板,起始,数目,数组)</td><td>从给定的逻辑调色板中检索指定范围的<a href="#色板类">调色板</a>条目。</td></tr>
<tr><td>改调色板</td><td>SetPaletteEntries</td><td>改调色板(色板,起始,数目,数组)</td><td>修改逻辑<a href="#色板类">调色板</a>的一系列条目中设置颜色值和标志。</td></tr>
<tr><td>系统色板</td><td>GetSystemPaletteEntries</td><td>系统色板(设备,起始,数目,数组)</td><td>从设备的系统调色板中检索指定范围的<a href="#色板类">调色板</a>条目。</td></tr>
<tr><td>色板状态</td><td>GetSystemPaletteUse</td><td>状态=色板状态(设备)</td><td>检索指定设备的系统（物理）调色板的当前状态。1静态颜色,2黑白,3无静态色</td></tr>
<tr><td>色板系统</td><td>SetSystemPaletteUse</td><td>色板系统(设备,标志)</td><td>修改系统调色板的一系列条目中设置颜色值和标志。1静态颜色,2黑白,3无静态色</td></tr>
<tr><td>色板映射</td><td>RealizePalette</td><td>色板映射(设备)</td><td>将选项板条目从当前逻辑选项板映射到系统选项板。</td></tr>
<tr><td>调整色板</td><td>ResizePalette</td><td>调整色板(色板,条目)</td><td>根据指定的值增加或减少逻辑调色板的条目大小。</td></tr>
<tr><td>选择色板</td><td>SelectPalette</td><td>选择色板(设备,色板,背景)</td><td>在指定的设备中选择一个新的逻辑调色板。背景调色板为真则映射颜色到物理调色板中</td></tr>
<tr><td>重置画板</td><td>UnrealizeObject</td><td>重置画板(对象)</td><td>可重置画笔的原点或逻辑调色板。</td></tr>
<tr><td>更新颜色</td><td>UpdateColors</td><td>更新颜色(设备)</td><td>设备的当前颜色重新映射到当前实现的逻辑调色板来更新指定设备</td></tr>
<tr><th colspan=4>绘图函数</th></tr>
<tr><td>刷新绘图</td><td>GdiFlush</td><td>刷新绘图</td><td>刷新调用线程的任何未决的绘图操作。</td></tr>
<tr><td>绘图列数</td><td>GdiGetBatchLimit</td><td>队列数=绘图列数</td><td>获取有多少个GDI绘图命令位于队列中。</td></tr>
<tr><td>绘图队列</td><td>GdiSetBatchLimit</td><td>绘图队列(100)</td><td>指定有多少个GDI绘图命令能够进入队列</td></tr>
<tr><td>取背景色</td><td>GetBkColor</td><td>取背景色(设备)</td><td>获取指定设备的当前背景颜色。</td></tr>
<tr><td>改背景色</td><td>SetBkColor</td><td>改背景色(设备,颜色)</td><td>修改指定设备的背景颜色。</td></tr>
<tr><td>边界矩形</td><td>GetBoundsRect</td><td>边界矩形(设备,矩形,选项)</td><td>获取指定设备上下文的当前累积边界矩形。选项为1清除边界</td></tr>
<tr><td>累积边界</td><td>SetBoundsRect</td><td>累积边界(设备,矩形,选项)</td><td>获取指定设备上下文的当前累积边界矩形。选项1清除边框,2添加边框,4开启累积,8关闭累积</td></tr>
<tr><td>混合模式</td><td>GetROP2</td><td>模式=混合模式(设备)</td><td>获取指定设备的<a href="#前景混合模式">前景混合模式</a>。</td></tr>
<tr><td>模式混合</td><td>SetROP2</td><td>模式混合(设备,模式)</td><td>设置指定设备的<a href="#前景混合模式">前景混合模式</a>。</td></tr>
<tr><td>背景模式</td><td>GetBkMode</td><td>背景模式(设备)</td><td>获取指定设备的背景混合填充模式。1透明,2不透明</td></tr>
<tr><td>模式背景</td><td>SetBkMode</td><td>模式背景(设备,模式)</td><td>用指定模式填充指定设备的背景,如阴影刷子、虚线以及字符中的空隙。1透明,2不透明</td></tr>
<tr><td>取笔刷色</td><td>GetDCBrushColor</td><td>颜色=取笔刷色(设备)</td><td>从指定的设备中获取笔刷的颜色。</td></tr>
<tr><td>改笔刷色</td><td>SetDCBrushColor</td><td>改笔刷色(设备,颜色)</td><td>将指定设备笔刷的颜色设置为指定值。</td></tr>
<tr><td>颜色空间</td><td>GetColorSpace</td><td>空间=颜色空间(设备)</td><td>从指定的设备中检索逻辑颜色空间的当前句柄。</td></tr>
<tr><td>空间颜色</td><td>SetColorSpace</td><td>空间颜色(设备,空间)</td><td>给指定设备输入颜色空间。</td></tr>
<tr><td>取画笔色</td><td>GetDCPenColor</td><td>取画笔色(设备,颜色)</td><td>从指定的设备中获取笔的颜色。</td></tr>
<tr><td>改画笔色</td><td>SetDCPenColor</td><td>改画笔色(设备,颜色)</td><td>将指定设备画笔的颜色设置为指定值。</td></tr>
<tr><td>伽玛渐变</td><td>GetDeviceGammaRamp</td><td>伽玛渐变(设备,@颜色组)</td><td>在具有支持硬件中可下载伽玛渐变的驱动程序的直接彩色显示板上获取伽玛渐变。</td></tr>
<tr><td>渐变伽玛</td><td>SetDeviceGammaRamp</td><td>渐变伽玛(设备,颜色组)</td><td>在具有支持硬件中可下载伽玛渐变的驱动程序的直接彩色显示板上设置伽玛渐变。</td></tr>
<tr><td>检查色域</td><td>CheckColorsInGamut</td><td>检查色域(转换,颜色,数据,长度)</td><td>检查指定的颜色值是否在指定设备的色域内,检查结果输出到数据字节组中</td></tr>
<tr><td>匹配像素</td><td>ChoosePixelFormat</td><td>匹配像素(设备,像素格式)</td><td>尝试将设备上下文支持的适当像素格式与给定的<a href="#像素格式类">像素格式</a>规范进行匹配。</td></tr>
<tr><td>创建色域</td><td>CreateColorSpaceA</td><td>色域=创建色域(色域类)</td><td>创建逻辑颜色空间。<a href="#色域类">色域类</a></td></tr>
<tr><td>删除色域</td><td>DeleteColorSpace</td><td>删除色域(色域)</td><td>删除指定的颜色空间，释放与其关联的所有内部资源。</td></tr>
<tr><td>设备像素</td><td>DescribePixelFormat</td><td>设备像素(设备,索引,长度,像素格式)</td><td>获取有关设备的<a href="#像素格式类">像素格式</a>像素格式的信息。</td></tr>
<tr><td>枚举颜色</td><td>EnumICMProfilesA</td><td>枚举颜色(设备,@回调,参数)</td><td>枚举系统支持的不同颜色配置文件</td></tr>
<tr><td>颜色模式</td><td>SetICMMode</td><td>颜色模式(设备,模式)</td><td>指定设备的启用、禁用或查询图像颜色。</td></tr>
<tr><td>颜色配置</td><td>GetICMProfileA</td><td>颜色配置(设备,长度,名称)</td><td>获取设备的颜色配置文件的名称。</td></tr>
<tr><td>配置颜色</td><td>SetICMProfileA</td><td>配置颜色(设备,长度,名称)</td><td>将指定的颜色配置文件设置为指定设备的输出配置文件。</td></tr>
<tr><td>像素格式</td><td>GetPixelFormat</td><td>索引=像素格式(设备)</td><td>获取指定设备的当前所选像素格式的索引。</td></tr>
<tr><td>格式像素</td><td>SetPixelFormat</td><td>格式像素(设备,索引,像素格式)</td><td>将指定设备的<a href="#像素格式类">像素格式</a>设置为索引指定的格式。</td></tr>
<tr><td>交换缓冲</td><td>SwapBuffers</td><td>交换缓冲(设备)</td><td>交换前缓冲区和后缓冲区。</td></tr>
<tr><td>更新色块</td><td>UpdateICMRegKeyA</td><td>更新色块(0,标识,结构,命令)</td><td>管理系统中的颜色配置文件和颜色管理模块。</td></tr>
</table><a name="色板类">色板类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>色板类</td><td>PALETTEENTRY</td><td>4</td><td>指定逻辑调色板中条目的颜色和用法。</td></tr>
<tr><th colspan=4>色板类——成员表</th></tr>
<tr><td>红</td><td>peRed</td><td>字节</td><td>指定调色板条目的红色强度值。</td></tr>
<tr><td>绿</td><td>peGreen</td><td>字节</td><td>指定调色板条目的绿色强度值。</td></tr>
<tr><td>蓝</td><td>peBlue</td><td>字节</td><td>指定调色板条目的绿色强度值。</td></tr>
<tr><td>方式</td><td>peFlags</td><td>字节</td><td>指定调色板条目的使用方式。1动态,2索引,4非系统</td></tr>
</table><a name="调色类">调色类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>调色类</td><td>LOGPALETTE</td><td>4+</td><td>定义逻辑调色板。</td></tr>
<tr><th colspan=4>调色类——成员表</th></tr>
<tr><td>版本</td><td>palVersion</td><td>整形</td><td>指定结构的Windows版本号（目前为$300）</td></tr>
<tr><td>数目</td><td>palNumEntries</td><td>整形</td><td>指定逻辑调色板中的条目数</td></tr>
<tr><td>色板</td><td>palPalEntry[1]</td><td>色板类</td><td>自定义 色板类 结构的数组</td></tr>
</table><a name="色域类">色域类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>色域类</td><td>LOGCOLORSPACE</td><td>12</td><td>包含了逻辑颜色空间信息</td></tr>
<tr><th colspan=4>色域类——成员表</th></tr>
<tr><td>签名</td><td>lcsSignature</td><td>整数</td><td>颜色空间签名</td></tr>
<tr><td>版本</td><td>lcsVersion</td><td>整数</td><td>版本号,目前是$400</td></tr>
<tr><td>大小</td><td>lcsSize</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>分类</td><td>lcsCSType</td><td>整数</td><td>颜色空间类型。1设备RGB 2设备CMYK 0标准RGB</td></tr>
<tr><td>匹配</td><td>lcsIntent</td><td>整数</td><td>色域匹配方法。1保持饱和度 2保持图案 3保持对比度</td></tr>
<tr><td>端点</td><td>lcsEndpoints</td><td>整数</td><td>红色，绿色，蓝色端点。</td></tr>
<tr><td>红</td><td>lcsGammaRed</td><td>整数</td><td>红色坐标的比例。</td></tr>
<tr><td>绿</td><td>lcsGammaGreen</td><td>整数</td><td>绿色坐标的比例。</td></tr>
<tr><td>蓝</td><td>lcsGammaBlue</td><td>整数</td><td>蓝色坐标的比例。</td></tr>
<tr><td>输出</td><td>lcsFilename</td><td>文本</td><td>[260]输出变量字段的数据，用于命名颜色配置文件。该成员通常设置为零</td></tr>
</table><a name="像素格式类">像素格式类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>像素格式类</td><td>PIXELFORMATDESCRIPTOR</td><td>46</td><td>包含了逻辑字体信息的结构</td></tr>
<tr><th colspan=4>像素格式类——成员表</th></tr>
<tr><td>长度</td><td>nSize</td><td>整形</td><td>结构的大小</td></tr>
<tr><td>版本</td><td>nVersion</td><td>整形</td><td>结构的版本，一般设为1</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>表明像素缓冲特性的标志位，如缓冲是否支持GDI或OpenGL等</td></tr>
<tr><td>索引</td><td>iPixelType</td><td>整数</td><td>说明象素数据类型是RGBA还是颜色索引</td></tr>
<tr><td>颜色位</td><td>cColorBits</td><td>整数</td><td>每个颜色缓冲区中颜色位平面的数目，对颜色索引方式是缓冲区大小</td></tr>
<tr><td>红位数</td><td>cRedBits</td><td>字节</td><td>每个RGBA颜色缓冲区中红色位平面的数目</td></tr>
<tr><td>红偏移</td><td>cRedShift</td><td>字节</td><td>每个RGBA颜色缓冲区中红色位平面的偏移数</td></tr>
<tr><td>绿位数</td><td>cGreenBits</td><td>字节</td><td>每个RGBA颜色缓冲区中绿色位平面的数目</td></tr>
<tr><td>绿偏移</td><td>cGreenShift</td><td>字节</td><td>每个RGBA颜色缓冲区中绿色位平面的偏移数</td></tr>
<tr><td>蓝位数</td><td>cBlueBits</td><td>字节</td><td>每个RGBA颜色缓冲区中蓝色位平面的数目</td></tr>
<tr><td>蓝偏移</td><td>cBlueShift</td><td>字节</td><td>每个RGBA颜色缓冲区中蓝色位平面的偏移数</td></tr>
<tr><td>透明位</td><td>cAlphaBits</td><td>字节</td><td>每个RGBA颜色缓冲区中alpha位平面的数目(现不支持)</td></tr>
<tr><td>透明偏移</td><td>cAlphaShift</td><td>字节</td><td>每个RGBA颜色缓冲区中alpha位平面的偏移数(现不支持)</td></tr>
<tr><td>缓冲位</td><td>cAccumBits</td><td>字节</td><td>累加缓冲区中全部位平面的数目</td></tr>
<tr><td>红缓冲</td><td>cAccumRedBits</td><td>字节</td><td>累加缓冲区中红色位平面的数目</td></tr>
<tr><td>绿缓冲</td><td>cAccumGreenBits</td><td>字节</td><td>累加缓冲区中绿色位平面的数目</td></tr>
<tr><td>蓝缓冲</td><td>cAccumBlueBits</td><td>字节</td><td>累加缓冲区中蓝色位平面的数目</td></tr>
<tr><td>透明缓冲</td><td>cAccumAlphaBits</td><td>字节</td><td>累加缓冲区中透明位平面的数目</td></tr>
<tr><td>缓冲深度</td><td>cDepthBits</td><td>字节</td><td> Z(深度)缓冲区的深度</td></tr>
<tr><td>模板深度</td><td>cStencilBits</td><td>字节</td><td>模板缓冲区的深度</td></tr>
<tr><td>轴向缓冲</td><td>cAuxBuffers</td><td>字节</td><td>轴向缓冲区的数量(一般1.0版本不支持)</td></tr>
<tr><td>图层</td><td>iLayerType</td><td>字节</td><td>未使用</td></tr>
<tr><td>层数</td><td>bReserved</td><td>字节</td><td>表层和底层平面的数量</td></tr>
<tr><td>图码</td><td>dwLayerMask</td><td>整数</td><td>未使用</td></tr>
<tr><td>显码</td><td>dwVisibleMask</td><td>整数</td><td>是透明色彩的值(RGBA方式)或是一个底层平面的索引(Index)</td></tr>
<tr><td>坏码</td><td>dwDamageMask</td><td>整数</td><td>未使用</td></tr>
</table><a name="颜色调整类">颜色调整类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>颜色调整类</td><td>COLORADJUSTMENT</td><td>40</td><td>定义颜色调整值。</td></tr>
<tr><th colspan=4>颜色调整类——成员表</th></tr>
<tr><td>大小</td><td>caSize</td><td>整数</td><td>结构的大小（以字节为单位）。</td></tr>
<tr><td>标志</td><td>caFlags</td><td>整数</td><td>指定应如何准备输出映像。1原始图像的底片。2将对数函数应用于输出颜色的最终密度，当亮度较低时这将增加颜色对比度。</td></tr>
<tr><td>光源</td><td>caIlluminantIndex</td><td>整数</td><td>查看图像时所依据的标准光源的类型。<a href="#颜色调整光源">颜色调整光源</a></td></tr>
<tr><td>红加</td><td>caRedGamma</td><td>整数</td><td>指定源颜色的红色主色的第 n次 幂伽玛校正值。 该值必须在 2500 到 65，000 的范围内。 值为 10，000 表示没有伽玛校正。</td></tr>
<tr><td>绿加</td><td>caGreenGamma</td><td>整数</td><td>指定源颜色的绿色主色的第 n次 幂伽马校正值。 该值必须在 2500 到 65，000 的范围内。 值为 10，000 表示没有伽玛校正。</td></tr>
<tr><td>蓝加</td><td>caBlueGamma</td><td>整数</td><td>指定源颜色的蓝色原色的第 n次 幂伽玛校正值。 该值必须在 2500 到 65，000 的范围内。 值为 10，000 表示没有伽玛校正。</td></tr>
<tr><td>黑参</td><td>caReferenceBlack</td><td>整数</td><td>源颜色的黑色引用。 任何比这更深的颜色都被视为黑色。 该值必须在 0 到 4000 的范围内。</td></tr>
<tr><td>白参</td><td>caReferenceWhite</td><td>整数</td><td>源颜色的白色引用。 任何比这更浅的颜色都被视为白色。 该值必须在 6000 到 10，000 的范围内。</td></tr>
<tr><td>对比</td><td>caContrast</td><td>整形</td><td>要应用于源对象的对比度。 该值必须在 -100 到 100 的范围内。 值为 0 表示不调整对比度。</td></tr>
<tr><td>亮度</td><td>caBrightness</td><td>整形</td><td>要应用于源对象的亮度量。 该值必须在 -100 到 100 的范围内。 值为 0 表示不调整亮度。</td></tr>
<tr><td>色彩</td><td>caColorfulness</td><td>整形</td><td>要应用于源对象的色彩量。 该值必须在 -100 到 100 的范围内。 值为 0 表示没有色彩调整。</td></tr>
<tr><td>色调</td><td>caRedGreenTint</td><td>整形</td><td>要应用于源对象的红色或绿色色调调整量。 该值必须在 -100 到 100 的范围内。 正数向红色调整，负数向绿色调整。 零表示无色调调整。</td></tr>
</table><a name="颜色调整光源">颜色调整光源</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>ILLUMINANT_DEVICE_DEFAULT</td><td>0</td><td>设备的默认值。 输出设备使用的标准。</td></tr>
<tr><td>ILLUMINANT_A</td><td>1</td><td>碳化灯。</td></tr>
<tr><td>ILLUMINANT_B</td><td>2</td><td>中午的阳光。</td></tr>
<tr><td>ILLUMINANT_C</td><td>3</td><td>NTSC 日光。</td></tr>
<tr><td>ILLUMINANT_D50</td><td>4</td><td>普通打印。</td></tr>
<tr><td>ILLUMINANT_D55</td><td>5</td><td>债券纸打印。</td></tr>
<tr><td>ILLUMINANT_D65</td><td>6</td><td>标准日照。 CRT 和图片的标准。</td></tr>
<tr><td>ILLUMINANT_D75</td><td>7</td><td>北天。</td></tr>
<tr><td>ILLUMINANT_F2</td><td>8</td><td>酷白灯。</td></tr>
</table><a name="前景混合模式">前景混合模式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>R2_BLACK</td><td>1</td><td>像素始终为 0。</td></tr>
<tr><td>R2_NOTMERGEPEN</td><td>2</td><td>像素是R2_MERGEPEN颜色的反转。</td></tr>
<tr><td>R2_MASKNOTPEN</td><td>3</td><td>像素是屏幕和笔反面共有的颜色的组合。</td></tr>
<tr><td>R2_NOTCOPYPEN</td><td>4</td><td>像素是触笔颜色的反转。</td></tr>
<tr><td>R2_MASKPENNOT</td><td>5</td><td>像素是笔和屏幕反面共有的颜色的组合。</td></tr>
<tr><td>R2_NOT</td><td>6</td><td>像素是屏幕颜色的反转。</td></tr>
<tr><td>R2_XORPEN</td><td>7</td><td>像素是笔和屏幕中颜色的组合，但不是两者的组合。</td></tr>
<tr><td>R2_NOTMASKPEN</td><td>8</td><td>像素是R2_MASKPEN颜色的反转。</td></tr>
<tr><td>R2_MASKPEN</td><td>9</td><td>像素是笔和屏幕共有的颜色的组合。</td></tr>
<tr><td>R2_NOTXORPEN</td><td>10</td><td>像素是R2_XORPEN颜色的反转。</td></tr>
<tr><td>R2_NOP</td><td>11</td><td>像素保持不变。</td></tr>
<tr><td>R2_MERGENOTPEN</td><td>12</td><td>像素是屏幕颜色和笔颜色反转的组合。</td></tr>
<tr><td>R2_COPYPEN</td><td>13</td><td>像素是触笔颜色。</td></tr>
<tr><td>R2_MERGEPENNOT</td><td>14</td><td>像素是笔颜色和屏幕颜色反转的组合。</td></tr>
<tr><td>R2_MERGEPEN</td><td>15</td><td>像素是笔颜色和屏幕颜色的组合。</td></tr>
<tr><td>R2_WHITE</td><td>16</td><td>像素始终为 1。</td></tr>
</table>
<font color="#0000FF"><a name="空间转换">空间转换</a></font><br>
坐标空间和转换由以下类型的应用程序使用：<br>

桌面发布应用程序 (“缩放”页面的各个部分或在) 窗口中显示相邻页面。<br>
计算机辅助设计 (CAD) 应用程序 (旋转对象、缩放绘图或创建透视视图) 。<br>
电子表格应用程序 (移动图形并调整图形) 大小。<br><br>
下图显示了在绘图应用程序中创建的对象的连续视图。 第一个插图显示对象在原始绘图中显示的对象;后续的五个图示显示了应用各种转换的效果。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cstrn-01.png"><br> 
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cstrn-02.png"><br> 
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cstrn-03.png"><br> 
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cstrn-04.png"><br> 
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cstrn-05.png"><br> 
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cstrn-06.png"><br> 
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>组合变换</td><td>CombineTransform</td><td>组合变换(组合,转换1,转换2)</td><td>将两个世界空间与页面空间转换相连接</td></tr>
<tr><td>设备坐标</td><td>DPtoLP</td><td>设备坐标(设备,坐标数组,坐标数量)</td><td>将设备坐标转换为逻辑坐标。转换取决于设备上下文的映射模式、窗口和视区的原点和范围的设置，以及世界转换。</td></tr>
<tr><td>坐标设备</td><td>LPtoDP</td><td>坐标设备(设备,坐标数组,坐标数量)</td><td>将逻辑坐标转换为设备坐标。 转换取决于设备上下文的映射模式、窗口和视区的原点和范围的设置，以及世界转换。</td></tr>
<tr><td>当前坐标</td><td>GetCurrentPositionEx</td><td>当前坐标(设备,坐标)</td><td>从指定的设备中获取当前坐标位置。</td></tr>
<tr><td>图形模式</td><td>GetGraphicsMode</td><td>模式=图形模式(设备)</td><td>返回有关指定设备的当前图形模式。1兼容模式2高级模式</td></tr>
<tr><td>模式图形</td><td>SetGraphicsMode</td><td>模式图形(设备,模式)</td><td>设置有关指定设备的当前图形模式。1兼容模式2高级模式</td></tr>
<tr><td>映射模式</td><td>GetMapMode</td><td>模式=映射模式(设备)</td><td>获取指定设备的当前<a href="#映射模式">映射模式</a>。</td></tr>
<tr><td>模式映射</td><td>SetMapMode</td><td>模式映射(设备,模式)</td><td>设备指定设备的当前<a href="#映射模式">映射模式</a>。</td></tr>
<tr><td>视窗范围</td><td>GetViewportExtEx</td><td>视窗范围(设备,尺寸)</td><td>获取指定设备的当前视区的宽和高大小。</td></tr>
<tr><td>范围视窗</td><td>SetViewportExtEx</td><td>范围视窗(设备,宽,高,原尺寸)</td><td>修改指定设备的当前视区的宽和高大小。不需要原尺寸可以为0</td></tr>
<tr><td>视窗坐标</td><td>GetViewportOrgEx</td><td>视窗坐标(设备,坐标)</td><td>获取指定设备的当前视区的x和y坐标。</td></tr>
<tr><td>坐标视窗</td><td>SetViewportOrgEx</td><td>坐标视窗(设备,x,y,原坐标)</td><td>修改指定设备的当前视区的x和y坐标。不需要原坐标可以为0</td></tr>
<tr><td>窗口范围</td><td>GetWindowExtEx</td><td>窗口范围(设备,尺寸)</td><td>获取指定设备的当前窗口的宽和高大小。</td></tr>
<tr><td>范围窗口</td><td>SetWindowExtEx</td><td>范围窗口(设备,宽,高,原尺寸)</td><td>修改指定设备的当前窗口的宽和高大小。不需要原尺寸可以为0</td></tr>
<tr><td>窗口坐标</td><td>GetWindowOrgEx</td><td>窗口坐标(设备,坐标)</td><td>获取指定设备的当前窗口的x和y坐标。</td></tr>
<tr><td>坐标窗口</td><td>SetWindowOrgEx</td><td>坐标窗口(设备,x,y,原坐标)</td><td>修改指定设备的当前窗口的x和y坐标。不需要原坐标可以为0</td></tr>
<tr><td>转换空间</td><td>GetWorldTransform</td><td>转换空间(设备,转换类)</td><td>设置世界空间和页面空间之间的二维线性<a href="#转换类">转换</a>。用于缩放、旋转、切变或平移图形输出。</td></tr>
<tr><td>空间转换</td><td>SetWorldTransform</td><td>空间转换(设备,转换类)</td><td>设置世界空间和页面空间之间的二维线性<a href="#转换类">转换</a>。用于缩放、旋转、切变或平移图形输出。</td></tr>
<tr><td>世界转换</td><td>ModifyWorldTransform</td><td>世界转换(设备,转换类,模式)</td><td>使用指定模式更改设备上下文的世界<a href="#转换类">转换</a>。模式:1重置为标识矩阵,2乘新矩阵在左,3乘新矩阵在右</td></tr>
<tr><td>视窗偏移</td><td>OffsetViewportOrgEx</td><td>视窗偏移(设备,X,Y,原点)</td><td>用指定的水平位移和垂直位移改变设备环境的观察窗<a href="#坐标类">原点</a>。不需要获取原点可以为0</td></tr>
<tr><td>窗口偏移</td><td>OffsetWindowOrgEx</td><td>窗口偏移(设备,X,Y,原点)</td><td>使用指定的水平和垂直偏移修改设备上下文的窗口<a href="#坐标类">原点</a>。不需要获取原点可以为0</td></tr>
<tr><td>视窗比率</td><td>ScaleViewportExtEx</td><td>视窗比率(设备,水平乘,水平除,垂直乘,垂直除,@尺寸类)</td><td>使用指定的乘数和除数构成的比率修改设备上下文的视区。</td></tr>
<tr><td>窗口比率</td><td>ScaleWindowExtEx</td><td>窗口比率(设备,水平乘,水平除,垂直乘,垂直除,@尺寸类)</td><td>使用指定的乘数和除数构成的比率修改设备上下文的窗口。</td></tr>
</table><a name="转换类">转换类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>转换类</td><td>XFORM</td><td>24</td><td>指定世界空间到页面空间的转换。</td></tr>
<tr><th colspan=4>转换类——成员表</th></tr>
<tr><td>首左</td><td>eM11</td><td>小数</td><td>扩展:水平缩放组件;旋转:旋转角度余弦值;反射:水平组件</td></tr>
<tr><td>首右</td><td>eM12</td><td>小数</td><td>剪切:水平比例常量;旋转:旋转角度的正弦值</td></tr>
<tr><td>次左</td><td>eM21</td><td>小数</td><td>剪切:垂直比例常量;旋转:旋转角度的负正弦值</td></tr>
<tr><td>次右</td><td>eM22</td><td>小数</td><td>扩展:垂直缩放组件;旋转:旋转角度余弦值;反射:垂直反射组件</td></tr>
<tr><td>平移</td><td>eDx</td><td>小数</td><td>水平平移组件，以逻辑单元为单位。</td></tr>
<tr><td>直转</td><td>eDy</td><td>小数</td><td>垂直转换组件，以逻辑单元为单位。</td></tr>
</table><a name="映射模式">映射模式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>MM_ANISOTROPIC</td><td>8</td><td>逻辑单元映射到具有任意缩放轴的任意单元。 使用 范围窗口 和 范围视窗 函数指定单位、方向和缩放。</td></tr>
<tr><td>MM_HIENGLISH</td><td>5</td><td>每个逻辑单元映射到 0.001 英寸。 正 x 向右；正 y 向上。</td></tr>
<tr><td>MM_HIMETRIC</td><td>3</td><td>每个逻辑单元映射到 0.01 毫米。 正 x 向右；正 y 向上。</td></tr>
<tr><td>MM_ISOTROPIC</td><td>7</td><td>逻辑单元映射到具有等比例轴的任意单元;也就是说，沿 x 轴的一个单位等于沿 y 轴的一个单位。使用 范围窗口 和 范围视窗 函数指定轴的单位和方向。<br>
 图形设备接口 (GDI) 根据需要进行调整，以确保 x 和 y 单位保持相同的大小 (设置窗口范围时，视区将进行调整以保持单位各向同性) 。</td></tr>
<tr><td>MM_LOENGLISH</td><td>4</td><td>每个逻辑单元映射到 0.01 英寸。 正 x 向右；正 y 向上。</td></tr>
<tr><td>MM_LOMETRIC</td><td>2</td><td>每个逻辑单元映射到 0.1 毫米。 正 x 向右；正 y 向上。</td></tr>
<tr><td>MM_TEXT</td><td>1</td><td>每个逻辑单元映射到一个设备像素。 正 x 向右；正 y 向下。</td></tr>
<tr><td>MM_TWIPS</td><td>6</td><td>每个逻辑单元映射到打印机点的二十分之一 (1/1440 英寸，也称为缇) 。 正 x 向右；正 y 向上。</td></tr>
</table>
<font color="#0000FF"><a name="形状填充">形状填充</a></font><br>
许多类型的应用程序使用线条和曲线在光栅设备上绘制图形输出。 计算机辅助设计 (CAD) 和绘图应用程序使用线条和曲线来勾勒对象、指定对象的中心、对象的尺寸等。<br>
电子表格应用程序使用线条和曲线绘制网格、图表和图形。 Word处理应用程序使用线条在文本页上创建规则和边框。<br>
线条是光栅显示器上一组突出显示的像素 (或打印页上的一组点，) 由两个点标识：起点和终点。 位于起点的像素始终包含在行中，并且始终排除位于终点的像素。<br>
正则曲线是光栅显示器上的一组突出显示像素， (或打印页上的点) ，用于定义圆锥部分的外围 (或外围) 的一部分。<br>
不规则曲线是一组像素，用于定义不适合圆锥部分的外围的曲线。 终点从曲线中排除，就像从线条中排除一样。<br>

当应用程序调用其中一个曲线绘制函数时，GDI 会将曲线分解成许多极小的离散线段。 确定每个线段 (起点和终点) 的终结点后，GDI 通过应用其 DDA 来确定 (或) 点定义每条线的像素。<br>
应用程序可以通过调用 椭圆弧 函数来绘制椭圆或椭圆的一部分。此函数在称为边框的不可见矩形的外围内绘制曲线。 椭圆的大小由两个不可见的径向指定，从矩形的中心延伸到矩形的两侧。<br>
下图显示了使用 椭圆弧 函数绘制的椭圆 (一部分的 弧) 。
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cslcv-03.png"><br>
显示代表全圆四分之三的弧形图<br>

调用 椭圆弧 函数时，应用程序指定边框和径向的坐标。 上图显示了使用实线绘制实际弧线时，带有虚线的矩形和径向。<br>
除了绘制椭圆或部分椭圆外，应用程序还可以绘制称为贝塞尔曲线的不规则曲线，其曲率由 p1、p2、p3 和 p4 四个控制点 定义。<br>
控制点 p1 和 p4 定义曲线的起点和终点，控制点 p2 和 p3 通过标记曲线反转方向的点来定义曲线的形状，如下图所示。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cslcv-04.png"><br>

显示两条贝塞尔曲线的插图，每个曲线在起点和终点之间，每个曲线都有两个控制点<br>

应用程序可以通过调用 多点曲线 函数来绘制不规则曲线，并提供相应的控制点。<br>
应用程序将填充的形状用于各种任务。 例如，电子表格应用程序使用填充形状来构造图表和图形，而绘图和绘画应用程序使用填充的形状允许用户绘制图形和插图。<br>
椭圆是由两个固定点 (f1 和 f2 ) 定义的闭合曲线，以便从曲线上任意点到两个固定点) (d1 +d2 的距离之和是恒定的。 下图显示了使用 画椭圆 函数绘制的椭圆。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csfsh-01.png"><br>

显示一个椭圆形、两个固定点、两个距离和一个边框的插图<br>

调用 画椭圆 时，应用程序提供椭圆边框的左上角和右下角的坐标。 边框是完全围绕椭圆的最小矩形。 当系统绘制椭圆时，如果未设置世界转换，它将排除右侧和下侧。<br>
因此，对于任何以 x 单位宽乘 y 单位高的任何矩形，关联的椭圆度量 x1 单位宽乘 y1 单位高。 如果应用程序设置了世界转换，则系统将包括右侧和下侧。<br>
和弦是由椭圆和称为正割线段的交集限定的区域。也就是弓的圆弧和弓弦组成的弓形图案。下图显示了使用和弦函数绘制的 和弦 。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csfsh-02.png"><br>
椭圆图，显示两个径向、一个正割和一个和弦<br>

调用 画和弦 时，应用程序提供椭圆边框的左上角和右下角的坐标，以及定义两个径向的两个点的坐标。 径向是从椭圆边框的中心到椭圆上的点绘制的线。<br>

当系统绘制和弦的曲线部分时，它通过使用指定设备上下文的当前弧方向执行此操作。默认的弧线方向是逆时针。可以通过调用 画弧改向 函数让应用程序重置弧线方向。<br>
饼图是由椭圆曲线和两个径向的交集限定的区域。 下图显示了使用 画饼 函数绘制的 饼图 。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csfsh-03.png"><br>

显示带阴影饼的椭圆的插图<br>

调用 画饼 时，应用程序提供椭圆边框左上角和右下角的坐标，以及定义两个径向的两个点的坐标。<br>

当系统绘制饼图的曲线部分时，它会使用给定设备上下文的当前弧线方向。 默认的弧线方向是逆时针方向。<br>
多边形是一个带有直边的填充形状。 使用当前笔绘制多边形的两侧。 当系统填充多边形时，它使用当前画笔和当前多边形填充模式。<br>
这两种填充模式（备用 (默认的) 和绕组）确定复杂多边形中的区域是填充的还是保持未配对状态。 应用程序可以通过调用 填充模式 函数来选择任一模式。<br>

下图显示了使用 多边形绘制的多边形。<br>

<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/csfsh-04.png"><br>

除了使用 画多边形 绘制单个多边形外，应用程序还可以使用 叠多边形 函数绘制多个多边形。<br>
矩形是一个四面多边形，其对边是平行且长度相等的。 尽管应用程序可以通过调用 画多边形 函数（提供每个角的坐标）来绘制矩形， 但 画方块 函数提供了更简单的方法。<br>
此函数只需要左上角和右下角的坐标。 当应用程序调用 画方块 函数时，系统会绘制矩形，如果未为给定设备上下文设置世界转换，则不包括右侧和下侧。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><th colspan=4>线条曲线函数</th></tr>
<tr><td>画弧线</td><td>AngleArc</td><td>画弧线(设备,x,y,半径,起始角,扫视角)</td><td>圆弧沿着具有给定半径和中心的圆的周边绘制。弧的长度由给定的起始和扫视角度定义</td></tr>
<tr><td>椭圆弧</td><td>Arc</td><td>椭圆弧(设备,左,顶,宽,高,起X,起Y,终X,终Y)</td><td>指定的矩形内的一个椭圆。画出从起点坐标到终点坐标的椭圆弧线</td></tr>
<tr><td>画椭圆弧</td><td>ArcTo</td><td>画椭圆弧(设备,左,顶,宽,高,起X,起Y,终X,终Y)</td><td>跟Arc区别是是从画笔当前位置,画直线到圆弧起点,画完之后画笔停在圆弧终点.而Arc没有直线,画笔位置也不变</td></tr>
<tr><td>画弧取向</td><td>GetArcDirection</td><td>方向=画弧取向(设备)</td><td>画圆弧的时候，判断当前采用的绘图方向。1逆时针 2顺时针</td></tr>
<tr><td>画弧改向</td><td>SetArcDirection</td><td>画弧改向(设备,方向)</td><td>修改当前绘图采用的方向。1逆时针 2顺时针</td></tr>
<tr><td>画线</td><td>LineTo</td><td>画线(设备,终X,终Y)</td><td>用当前画笔画一条线，从当前位置连到一个指定的点</td></tr>
<tr><td>线段枚举</td><td>LineDDA</td><td>线段枚举(起X,起Y,终X,终Y,@回调,数据)</td><td>枚举由指定的起点和终点定义的行应突出显示哪些像素。<a href="#线段枚举回调">回调</a></td></tr>
<tr><td>移到</td><td>MoveToEx</td><td>移到(设备,X,Y,旧坐标)</td><td>为指定的设备场景指定一个新的当前画笔位置,不需要旧坐标可以为0</td></tr>
<tr><td>矩形偏移</td><td>OffsetRect</td><td>矩形偏移(矩形,X,Y)</td><td>将指定的矩形移动指定的偏移量。</td></tr>
<tr><td>多点曲线</td><td>PolyBezier</td><td>多点曲线(设备,点组,点数)</td><td>根据指定的坐标点数组绘制一条或多条贝塞尔曲线,一点到四点为一个点数,二三为控制点.四点到七点为第二点数</td></tr>
<tr><td>离散曲线</td><td>PolyBezierTo</td><td>离散曲线(设备,点组,点数)</td><td>根据指定的坐标点数组绘制一条或多条贝塞尔曲线,功能同上</td></tr>
<tr><td>多线曲线</td><td>PolyDraw</td><td>多线曲线(设备,点组,点控,点数)</td><td>根据指定的坐标点数组绘制一组线段和贝塞尔曲线,多了个控制曲线的数组</td></tr>
<tr><td>画拆线</td><td>Polyline</td><td>画拆线(设备,点组,点数)</td><td>依次连接所有点来绘制一系列线段</td></tr>
<tr><td>画拆线图</td><td>PolylineTo</td><td>画拆线图(设备,点组,点数)</td><td>依次连接所有点来绘制一系列线段</td></tr>
<tr><td>叠拆线</td><td>PolyPolyline</td><td>叠拆线(设备,点组,点数组,数量)</td><td>画多组可以重叠的拆线</td></tr>
<tr><th colspan=4>填充形状函数</th></tr>
<tr><td>画和弦</td><td>Chord</td><td>画和弦(设备,左,顶,宽,高,起X,起Y,终X,终Y)</td><td>绘制一个弧弦（由椭圆和线段的交点界定的区域，称为“割线”）。通过使用当前笔并使用当前画刷来填充弧弦。</td></tr>
<tr><td>画椭圆</td><td>Ellipse</td><td>画椭圆(设备,左,上,右,下)</td><td>指定矩形内绘制一个椭圆。使用当前笔勾画，并使用当前笔刷填充椭圆。</td></tr>
<tr><td>画饼</td><td>Pie</td><td>画饼(设备,左,上,右,下,X1,Y1,X2,Y2)</td><td>绘制一个由椭圆和两个径向交点界定的饼形楔形。通过使用当前笔并使用当前画笔填充饼图。(扇形)</td></tr>
<tr><td>画多边形</td><td>Polygon</td><td>画多边形(设备,点组,点数)</td><td>依次连接所有点并把最后点与第一点相连,围成一个多边形并填充</td></tr>
<tr><td>叠多边形</td><td>PolyPolygon</td><td>叠多边形(设备,点组,点数组,数量)</td><td>绘制一系列闭合多边形。绘制的面可以重叠。</td></tr>
<tr><td>画方块</td><td>Rectangle</td><td>画方块(设备,左,上,右,下)</td><td>绘制一个矩形方块。使用当前画笔勾勒矩形的轮廓，并使用当前笔刷填充矩形。</td></tr>
<tr><td>圆角矩形</td><td>RoundRect</td><td>圆角矩形(设备,左,上,右,下,宽,高)</td><td>在指定矩形内按圆角和宽度和高度绘制一个带有圆角的矩形。</td></tr>
</table><a name="线段枚举回调">线段枚举回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>线段枚举回调</td><td>LineDDAProc</td><td>3</td><td>它用于处理坐标。</td></tr>
<tr><th colspan=4>线段枚举回调——参数表</th></tr>
<tr><td>参数1</td><td>unnamedParam1</td><td>整数</td><td>unnamedParam1</td></tr>
<tr><td>参数2</td><td>unnamedParam2</td><td>整数</td><td>unnamedParam2</td></tr>
<tr><td>参数3</td><td>unnamedParam3</td><td>整数</td><td>unnamedParam3</td></tr>
</table>
<font color="#0000FF"><a name="图元文件">图元文件</a></font><br>
在内部，图元文件是称为 图元文件记录的可变长度结构的数组。 图元文件中的第一条记录指定常规信息，例如创建图片的设备分辨率、图片的尺寸等。<br>
其余记录构成任何图元文件的大部分，对应于图形设备接口 (绘制图片所需的 GDI) 函数。 创建特殊的图元文件设备上下文后，这些记录将存储在图元文件中。<br>
然后，此图元文件设备上下文将用于创建图片所需的所有绘图操作。 当系统处理与图元文件 DC 关联的 GDI 函数时，它会将该函数转换为适当的数据，并将此数据存储在追加到图元文件中的记录中。<br>

图片完成后，最后一条记录存储在图元文件中后，可以通过以下方式将图元文件传递给另一个应用程序：<br>

使用剪贴板<br>
将其嵌入另一个文件中<br>
将其存储在磁盘上<br>
反复播放<br>
当图元文件记录转换为设备命令并由相应设备处理时，将 播放 图元文件。<br>

有两种类型的图元文件：增强格式的图元文件、Windows 格式图元文件<br>
增强格式图元文件包含以下元素：<br>

标头<br>
GDI 对象的句柄表<br>
私人调色板<br>
图元文件记录数组<br>
增强型图元文件提供真正的设备独立性。 可以将存储在增强图元文件中的图片视为在特定时刻拍摄的视频显示的“快照”。 无论此“快照”出现在打印机、绘图仪、桌面或任何应用程序的工作区中的何处，它都保持其尺寸。<br>

可以使用增强型图元文件来存储通过使用 GDI 函数创建的图片 (包括新路径和转换函数) 。 由于增强型图元文件格式是标准化的，因此以此格式存储的图片可以从一个应用程序复制到另一个应用程序;<br>
并且，由于图片是真正独立于设备，因此保证它们在任何输出设备上保持其形状和比例。<br>
增强型图元文件是记录数组。 图元文件记录是可变长度 的 <a href="#元记录类">元记录类</a> 结构。 每个增强型图元文件记录的开头都是一个 EMR 结构，其中包含两个成员。 第一个成员 类别 标识记录类型，<br>
即其参数包含在记录中的 GDI 函数。 由于结构长度可变，因此另一个成员 大小 包含记录的大小。 紧跟在 大小 成员之后是 GDI 函数的其余参数（如果有）。 结构的其余部分包含依赖于记录类型的其他数据。<br>
增强型图元文件中的第一条记录始终是 <a href="#强图头类">强图头类</a> 结构，即增强型图元文件标头。<br>
可以使用 创建强图 函数创建增强型图元文件，并提供相应的参数。 系统使用这些参数来维护图片尺寸，确定图元文件应存储在磁盘上还是内存中，等等。<br>

若要跨输出设备维护图片尺寸， 创建强图 需要参考设备的分辨率。 此 参考设备 是首次显示图片的设备， 参考 DC 是与参考 设备关联的设备上下文 。<br>
调用 创建强图 函数时，必须提供标识此 DC 的句柄。 可以通过调用 取设备 或 创建设备 函数来获取此句柄。 还可以指定 NULL 作为句柄，以将当前显示设备用于参考设备。<br>

大多数应用程序永久存储图片，因此创建存储在磁盘上的增强型图元文件;但是，某些情况下不需要这样做。 例如，提供图表绘制功能的字处理应用程序可以将用户定义的图表作为增强型图元文件存储在内存中，<br>
然后将增强型图元文件位从内存复制到用户的文档文件中。 需要永久存储在磁盘上的图元文件的应用程序在调用 创建强图 时必须提供文件名。 如果不提供文件名，系统会自动将图元文件视为临时文件并将其存储在内存中。<br>

可以将可选文本说明添加到包含图片和作者相关信息的图元文件。 应用程序可以在“文件打开”对话框中显示这些字符串，以便为用户提供有关图元文件内容的信息，有助于选择相应的文件。<br>
如果应用程序包含文本说明，则必须在调用 创建强图 时提供指向字符串的指针。<br>

当 创建强图 成功时，它将返回标识特殊图元文件设备上下文的句柄。 图元文件设备上下文是唯一的，因为它与文件关联，而不是与输出设备关联。<br>
当系统处理接收图元文件设备上下文句柄的 GDI 函数时，它会将 GDI 函数转换为增强型图元文件记录，并将该记录追加到增强型图元文件的末尾。<br>

完成图片并将最后一条记录追加到增强型图元文件后，应用程序可以通过调用 关闭强图 函数关闭该文件。 此函数关闭并删除特殊图元文件设备上下文，并返回标识增强型图元文件的句柄。<br>

若要删除增强格式图元文件或增强格式图元文件句柄，请调用 删除强图 函数。<br>
显示存储在增强型图元文件中的图片<br>
可以使用 显示强图 函数显示存储在增强型图元文件中的图片。 将函数的句柄传递给增强型图元文件，而不考虑增强型图元文件记录的格式。<br>
但是，有时需要枚举增强型图元文件中的记录，以搜索特定的 GDI 函数并以某种方式修改函数的参数。 为此，可以使用 枚举强图 并提供回调函数 枚举强图回调 来处理增强型图元文件记录。<br>
若要修改增强型图元文件记录的参数，必须知道记录中参数的格式。<br>

<font color="#0000FF">创建增强型图元文件的副本</font><br>
某些应用程序创建临时备份 (或复制文件) 副本，然后允许用户更改原始文件。 应用程序可以通过调用 复制强图 函数、提供标识增强型图元文件的句柄以及提供指向新文件名称的指针来创建增强型图元文件的备份副本。<br>

若要创建基于内存的增强格式图元文件，请调用 数据强图 函数。<br>

<font color="#0000FF">编辑增强型图元文件</font><br>
大多数绘图、插图和计算机辅助设计 (CAD) 应用程序都需要编辑存储在增强型图元文件中的图片。 尽管编辑增强型图元文件是一项复杂的任务，但可以将 枚举强图 函数与其他函数结合使用，在应用程序中提供此功能。<br>
枚举强图 函数及其关联的回调函数 枚举强图回调 使应用程序能够处理增强型图元文件中的单个记录。<br>

<font color="#0000FF">检索存储在增强型图元文件中的可选说明</font><br>
某些应用程序在“ 打开 ”对话框中显示具有相应文件名的增强型图元文件的文本说明。 通过使用 强图标头 函数检索图元文件标头并检查其成员之一，可以确定增强型图元文件中是否存在此字符串。<br>
如果该字符串存在，应用程序将通过调用 强图描述 函数来检索它。<br>

<font color="#0000FF">检索增强型图元文件的二进制版本</font><br>
可以通过调用 强图数据 函数来检索图元文件的内容;但是，在检索内容之前，必须指定文件的大小。 若要获取大小，可以使用 强图标头 函数并检查相应的成员。<br>

<font color="#0000FF">枚举可选调色板中的颜色</font><br>
若要在各种输出设备上显示图片时实现一致的颜色，可以调用 创建色板 函数并将逻辑调色板存储在增强型图元文件中。 显示存储在增强型图元文件中的图片的应用程序检索此调色板，并在显示图片之前调用 色板映射 函数。<br>
若要确定调色板是否存储在增强型图元文件中，请检索图元文件标头并检查相应的成员。 如果存在调色板，则可以调用 强图色板 函数来检索逻辑调色板。<br>

Microsoft Windows 格式的图元文件的功能有限，很少应使用。 支持 Windows 格式函数，以保持与已编写为作为 16 位基于 Windows 的应用程序运行的应用程序的向后兼容性。 应改用增强格式函数。<br>

基于 Windows 的 16 位应用程序使用 Windows 格式图元文件 。 格式由标头和图元文件记录数组组成。<br>

以下是此格式的限制：<br>

Windows 格式的图元文件依赖于应用程序和设备。 应用程序的映射模式或设备分辨率的更改会影响以此格式创建的图元文件的外观。<br>
Windows 格式图元文件不包含描述原始图片尺寸、创建图片的设备分辨率、可选文本说明或可选调色板的综合标头。<br>
Windows 格式图元文件不支持新的曲线、路径和转换函数。 请参阅下表中支持的函数列表。<br>
某些 Windows 格式的图元文件记录无法缩放。<br>
无法查询与 Windows 格式图元文件关联的图元文件设备上下文， (即应用程序无法检索设备分辨率数据、字体指标等) 。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>关闭强图</td><td>CloseEnhMetaFile</td><td>文件=关闭强图(设备)</td><td>关闭增强型图元文件设备，并返回一个标识增强格式的图元文件的句柄</td></tr>
<tr><td>关闭图元</td><td>CloseMetaFile</td><td>文件=关闭图元(设备)</td><td>关闭元文件设备并返回一个标识Windows格式的元文件的句柄</td></tr>
<tr><td>复制强图</td><td>CopyEnhMetaFileA</td><td>复制强图(图元文件,文件名)</td><td>将增强格式的元文件的内容复制到指定的文件。</td></tr>
<tr><td>复制图元</td><td>CopyMetaFileA</td><td>复制图元(图元文件,文件名)</td><td>将Windows格式的元文件的内容复制到指定的文件。</td></tr>
<tr><td>创建强图</td><td>CreateEnhMetaFileA</td><td>设备=创建强图(设备,文件名,矩形,描述)</td><td>为增强格式的图元文件创建一个设备上下文。该设备上下文可用于存储与设备无关的图片。</td></tr>
<tr><td>创建图元</td><td>CreateMetaFileA</td><td>设备=创建图元(文件名)</td><td>为Windows格式的图元文件创建一个设备</td></tr>
<tr><td>删除强图</td><td>DeleteEnhMetaFile</td><td>删除强图(设备)</td><td>删除增强格式的图元文件或增强格式的图元文件句柄。</td></tr>
<tr><td>删除图元</td><td>DeleteMetaFile</td><td>删除图元(设备)</td><td>删除Windows格式的图元文件或Windows格式的图元文件句柄。</td></tr>
<tr><td>枚举强图</td><td>EnumEnhMetaFile</td><td>枚举强图(设备,强元,@回调,数据,矩形)</td><td>通过检索每个记录并将其传递给指定的回调函数来枚举增强格式的图元文件中的记录。</td></tr>
<tr><td>枚举图元</td><td>EnumMetaFile</td><td>枚举图元(设备,图元,@回调,参数)</td><td>检索每个记录并将其传递给指定的回调函数来枚举Windows格式的图元文件中的记录。</td></tr>
<tr><td>注释图层</td><td>GdiComment</td><td>注释图层</td><td>将注释从缓冲区复制到指定的增强格式的图元文件中。</td></tr>
<tr><td>增强图元</td><td>GetEnhMetaFileA</td><td>强图=增强图元(文件名)</td><td>获取指定文件中的增强格式的元文件句柄</td></tr>
<tr><td>强图数据</td><td>GetEnhMetaFileBits</td><td>强图数据(强图,长度,数据)</td><td>从增强格式的图元文件中获取文件内容到数据缓冲区</td></tr>
<tr><td>数据强图</td><td>SetEnhMetaFileBits</td><td>强图=数据强图(长度,数据)</td><td>从指定的数据创建基于内存的增强格式图元文件。</td></tr>
<tr><td>强图描述</td><td>GetEnhMetaFileDescriptionA</td><td>长度=强图描述(强图,内容,长度)</td><td>从增强格式的图元文件中检索可选文本描述</td></tr>
<tr><td>强图标头</td><td>GetEnhMetaFileHeader</td><td>长度=强图标头(强图,大小,@标头)</td><td>检索包含指定增强格式图元文件的<a href="#强图头类">标头</a>的记录。标头为0返回长度</td></tr>
<tr><td>强图色板</td><td>GetEnhMetaFilePaletteEntries</td><td>长度=强图色板(强图,数目,数据)</td><td>从增强格式的图元文件中检索指定数目的调色板数据</td></tr>
<tr><td>强图像素</td><td>GetEnhMetaFilePixelFormat</td><td>长度=强图像素(强图,长度,像素)</td><td>从增强格式的图元文件中检索像素格式信息</td></tr>
<tr><td>图元文件</td><td>GetMetaFileA</td><td>图元=图元文件(文件名)</td><td>获取指定文件中的图元文件句柄</td></tr>
<tr><td>图元数据</td><td>GetMetaFileBitsEx</td><td>图元数据(图元,长度,数据)</td><td>从图元文件中获取文件内容到数据缓冲区</td></tr>
<tr><td>数据图元</td><td>SetMetaFileBitsEx</td><td>图元=图元数据(长度,数据)</td><td>从指定的数据创建基于内存的图元文件。</td></tr>
<tr><td>显示强图</td><td>PlayEnhMetaFile</td><td>显示强图(设备,强图,矩形)</td><td>显示存储在指定增强格式图元文件中的图片。</td></tr>
<tr><td>回放强图</td><td>PlayEnhMetaFileRecord</td><td>回放强图(设备,图组,记录,数量)</td><td>播放增强的图元文件记录</td></tr>
<tr><td>显示图元</td><td>PlayMetaFile</td><td>显示图元(设备,强图,矩形)</td><td>显示存储在指定图元文件中的图片。</td></tr>
<tr><td>回放图元</td><td>PlayMetaFileRecord</td><td>回放图元(设备,图组,记录,数量)</td><td>播放图元文件记录</td></tr>
<tr><td>强图格式</td><td>GetWinMetaFileBits</td><td>强图格式(强图,大小,@数据,映射模式,设备)</td><td>将图元文件中的增强格式记录转换为 Windows 格式的记录，并将转换后的记录存储在指定的缓冲区中。</td></tr>
<tr><td>转强图元</td><td>SetWinMetaFileBits</td><td>强元=转强图元(大小,数据,设备,元图)</td><td>将图元文件转换为新的增强格式，元文件<a href="#元图类">元图类</a> 结构包含建议大小及映射模式</td></tr>
</table><a name="元图类">元图类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>元图类</td><td>METAFILEPICT</td><td>16</td><td>定义用于通过剪贴板交换图元文件数据的图元文件图片格式。</td></tr>
<tr><th colspan=4>元图类——成员表</th></tr>
<tr><td>映射</td><td>mm</td><td>整数</td><td>绘制图片的<a href="#映射模式">映射模式</a>。</td></tr>
<tr><td>宽度</td><td>xExt</td><td>整数</td><td>指定在其中绘制图片的矩形的宽度。</td></tr>
<tr><td>高度</td><td>yExt</td><td>整数</td><td>指定在其中绘制图片的矩形的高度。</td></tr>
<tr><td>图元</td><td>hMF</td><td>整数</td><td>内存图元文件的句柄。</td></tr>
</table><a name="元记录类">元记录类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>元记录类</td><td>ENHMETARECORD</td><td>12+</td><td>包含描述图形设备接口的数据， (GDI) 函数用于在增强格式图元文件中创建图片的一部分。</td></tr>
<tr><th colspan=4>元记录类——成员表</th></tr>
<tr><td>类别</td><td>iType</td><td>整数</td><td>记录类型。 此成员必须指定为1。</td></tr>
<tr><td>大小</td><td>nSize</td><td>整数</td><td>记录的大小（以字节为单位）。</td></tr>
<tr><td>数组</td><td>dParm[1]</td><td>整数</td><td>传递给由记录标识的 GDI 函数的参数数组。</td></tr>
</table><a name="强图头类">强图头类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>强图头类</td><td>ENHMETAHEADER</td><td>112</td><td>包含增强型图元文件数据，例如增强型图元文件中存储的图片尺寸、增强型图元文件中的记录计数、创建图片的设备分辨率等。</td></tr>
<tr><th colspan=4>强图头类——成员表</th></tr>
<tr><td>类别</td><td>iType</td><td>整数</td><td>记录类型。 此成员必须指定为1。</td></tr>
<tr><td>大小</td><td>nSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>边框</td><td>rclBounds</td><td>矩形类</td><td>可以在图元文件中存储的图片周围绘制的最小矩形的尺寸（以设备单位为单位）。 此矩形由图形设备接口 (GDI) 提供。 其尺寸包括右边缘和下边缘。</td></tr>
<tr><td>框架</td><td>rclFrame</td><td>矩形类</td><td>矩形的尺寸（以 0.01 毫米为单位），该矩形围绕存储在图元文件中的图片。 此矩形必须由创建图元文件的应用程序提供。 其尺寸包括右边缘和下边缘。</td></tr>
<tr><td>签名</td><td>dSignature</td><td>整数</td><td>签名。 此成员必须指定为0x464D4520。</td></tr>
<tr><td>版本</td><td>nVersion</td><td>整数</td><td>图元文件版本。 当前版本值0x10000。</td></tr>
<tr><td>长度</td><td>nBytes</td><td>整数</td><td>增强型图元文件的大小（以字节为单位）。</td></tr>
<tr><td>记录</td><td>nRecords</td><td>整数</td><td>增强型图元文件中的记录数。</td></tr>
<tr><td>柄数</td><td>nHandles</td><td>整数</td><td>增强型图元文件句柄表中的句柄数。 此表中 (索引为零。)</td></tr>
<tr><td>预留</td><td>sReserved</td><td>整数</td><td>保留;必须为零。</td></tr>
<tr><td>说明</td><td>nDescription</td><td>整数</td><td>数组中包含增强型图元文件内容的说明的字符数。 如果增强型图元文件不包含说明字符串，则应将此成员设置为零。</td></tr>
<tr><td>释偏</td><td>offDescription</td><td>整数</td><td>从结构的开头到包含增强型图元文件内容说明的数组的偏移量。 如果增强型图元文件不包含说明字符串，则应将此成员设置为零。</td></tr>
<tr><td>条目</td><td>nPalEntries</td><td>整数</td><td>增强型图元文件的调色板中的条目数。</td></tr>
<tr><td>像宽</td><td>szlDevice.dx</td><td>整数</td><td>引用设备的分辨率水平宽度（以像素为单位）。</td></tr>
<tr><td>像高</td><td>szlDevice.dy</td><td>整数</td><td>引用设备的分辨率垂直高度（以像素为单位）。</td></tr>
<tr><td>毫宽</td><td>szlMillimeters.dx</td><td>整数</td><td>参考设备的分辨率水平宽度（以毫米为单位）。</td></tr>
<tr><td>毫高</td><td>szlMillimeters.dy</td><td>整数</td><td>参考设备的分辨率垂直高度（以毫米为单位）。</td></tr>
<tr><td>像素</td><td>cbPixelFormat</td><td>整数</td><td>图元文件中最后记录的像素格式的大小。 如果在录制开始时在引用 DC 中设置了像素格式， 则设置为 <a href="#像素格式类">像素格式类</a> 的大小。如果录制图元文件时未设置像素格式，则此成员设置为零。 如果设置了多个像素格式，则标头指向最后一个像素格式。</td></tr>
<tr><td>像偏</td><td>offPixelFormat</td><td>整数</td><td>录制图元文件时使用的像素格式的偏移量。 如果在录制开始时或录制期间在引用 DC 中设置了像素格式， 则设置为图元文件中 <a href="#像素格式类">像素格式类</a> 的偏移量。 如果在记录图元文件时未设置像素格式，则此成员将设置为零。 如果设置了多个像素格式，则标头指向最后一个像素格式。</td></tr>
<tr><td>开图</td><td>bOpenGL</td><td>整数</td><td>指示图元文件中是否存在任何 OpenGL 记录。 bOpenGL 是一个简单的布尔标志，可用于确定增强的图元文件是否需要 OpenGL 处理。 当图元文件包含 OpenGL 记录时， bOpenGL 为 TRUE;否则为 FALSE。</td></tr>
<tr><td>微宽</td><td>szlMicrometers.dx</td><td>整数</td><td>参考设备的大小（以微米为单位）。</td></tr>
<tr><td>微高</td><td>szlMicrometers.dy</td><td>整数</td><td>参考设备的大小（以微米为单位）。</td></tr>
</table>
<font color="#0000FF"><a name="路径转换">路径转换</a></font><br>
路径是与设备上下文关联的对象之一， (DC) 。 但是，与 (笔、画笔和字体) 属于任何新 DC 的默认对象不同，没有默认路径。<br>
若要创建路径并将其选择到DC中，首先需要定义描述该路径的点。通过调用 开启路径 函数、指定适当的绘图函数，然后通过调用 结束路径 函数来完成的。(开启路径、绘图函数和 结束路径) 组合构成 路径括号。<br>
绘图函数包括：画弧线、椭圆弧、画椭圆弧、画和弦、关闭图形、画椭圆、画线、移到、画饼、多点曲线、离散曲线、多线曲线、画多边形、画折线、画折线图、叠折线、画方块、圆角矩形、绘制字符、写字到<br>
当应用程序调用 结束路径 时，系统会选择指定 DC 的关联路径。如果之前已选择另一个路径进入 DC，系统会删除该路径而不保存它。系统选择 DC 的路径后，应用程序可以通过以下方式之一对路径进行操作：<br>

使用当前笔绘制路径的轮廓。<br>
使用当前画刷绘制路径的内部。<br>
绘制轮廓并填充路径的内部。<br>
修改路径 (将曲线转换为线段) 。<br>
将路径转换为剪辑路径。<br>
将路径转换为区域。<br>
通过将路径中的每个曲线转换为一系列线段来平展路径。<br>
检索构成路径的线条和曲线的坐标。<br>
应用程序可以通过调用 勾画路径 函数来绘制路径的轮廓，它可以通过调用 填充路径 函数来填充路径的内部，也可以通过调用 勾画填充 函数来勾勒和填充路径。<br>

每当应用程序填充路径时，系统都使用 DC 的当前填充模式。应用程序可以通过调用 填充模式 函数来检索此模式，也可以通过调用 模式填充 函数来设置新的填充模式。请参阅 <a href="#剪裁区域">区域</a>。

下图显示了由计算机辅助设计 (CAD) 应用程序创建的对象的横截面，这些路径同时具有轮廓和填充的路径。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cspth-01.png"><br>
显示对象的横断面视图的插图，其中不同填充图案指示了各种部分<br>
路径是使用逻辑单元和当前转换定义的。 (如果已调用 空间转换 函数，则逻辑单元为世界单位;否则，逻辑单元为页单位。) <br>
应用程序可以使用世界转换来缩放、旋转、剪切、平移和反射定义路径的线条和贝塞尔曲线。<br>
如果笔是几何笔，应用程序还可以使用 空间转换 来勾勒出用于勾勒路径的笔的形状。<br>
应用程序可以使用剪裁和路径来创建特殊的图形效果。 下图显示了用较大的 Arial 字体绘制的文本字符串。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cspth-02.png"><br>
显示白色背景上的黑色文本的插图<br>
下图显示了选择文本作为剪辑路径并为中心位于字符串上方和左侧的圆绘制径向线条的结果。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/gdi/images/cspth-03.png"><br>
插图显示相同的文本，但填充了线条而不是纯黑色<br>
应用程序通过生成路径括号，然后调用 选择剪裁 函数来创建剪辑路径。 将剪辑路径选入 DC 后，输出仅显示在路径的边框内。<br>

除了创建特殊图形效果外，剪辑路径在将图像另存为增强型图元文件的应用程序中也很有用。通过使用剪辑路径，应用程序能够确保设备独立性，因为用于指定路径的单元是逻辑单元。<br>
应用程序可以通过调用 转换区域 函数将路径转换为区域。 与 选择剪裁 一样， 转换区域 在创建特殊图形效果时很有用。 例如，没有允许应用程序偏移路径的函数;<br>
但是，有一个函数使应用程序能够偏移区域 (区域偏移) 。 使用 转换区域，应用程序可以通过创建定义形状的路径、调用 转换区域 将路径转换为区域，<br>
然后通过按顺序调用函数（如 填充区域、区域偏移 和 填充区域）来创建复杂形状动画效果。<br>
应用程序可以通过调用 转换线段 函数来平展路径中的曲线。 对于将文本拟合到包含曲线的路径轮廓上的应用程序，此函数特别有用。 为了适应文本，应用程序必须执行以下步骤：<br>

创建文本显示的路径。<br>
调用 转换线段 函数可将路径中的曲线转换为线段。<br>
调用 获取路径 函数以检索这些线段。<br>
计算字符串中每行的长度和每个字符的宽度。<br>
使用线宽和字符宽度数据沿曲线放置每个字符。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>丢弃路径</td><td>AbortPath</td><td>丢弃路径(设备)</td><td>抛弃选入指定设备场景中的所有路径。也取消目前正在进行的任何路径的创建工作</td></tr>
<tr><td>开启路径</td><td>BeginPath</td><td>开启路径(设备)</td><td>启动一个路径分支。在这个命令后执行的GDI绘图命令会自动成为路径的一部分。对线段的连接会结合到一起。</td></tr>
<tr><td>结束路径</td><td>EndPath</td><td>结束路径(设备)</td><td>关闭路径括号，并将括号中定义的路径选择到指定的设备</td></tr>
<tr><td>关闭图形</td><td>CloseFigure</td><td>关闭图形(设备)</td><td>关闭路径中的打开图形。</td></tr>
<tr><td>填充路径</td><td>FillPath</td><td>填充路径(设备)</td><td>关闭当前路径中的任何打开的图形，并使用当前画笔和多边形填充模式填充路径的内部。</td></tr>
<tr><td>转换线段</td><td>FlattenPath</td><td>转换线段(设备)</td><td>将一个路径中的所有曲线都转换成线段</td></tr>
<tr><td>获取路径</td><td>GetPath</td><td>获取路径(设备,点组,点类,数量)</td><td>取得对当前路径进行定义的一系列曲线的控制点</td></tr>
<tr><td>斜率限制</td><td>GetMiterLimit</td><td>斜率限制(设备,@斜率)</td><td>取得设备场景的斜率限制</td></tr>
<tr><td>限制斜率</td><td>SetMiterLimit</td><td>限制斜率(设备,斜率,旧)</td><td>为指定设备的斜接连接长度设置限制。不需要获取旧斜率可以为0</td></tr>
<tr><td>勾画填充</td><td>StrokeAndFillPath</td><td>勾画填充(设备)</td><td>关闭路径中所有打开的图形，使用当前笔描边路径的轮廓，并使用当前画笔填充其内部。</td></tr>
<tr><td>勾画路径</td><td>StrokePath</td><td>勾画路径(设备)</td><td>使用当前笔呈现指定的路径。</td></tr>
<tr><td>重设路径</td><td>WidenPath</td><td>重设路径(设备)</td><td>根据选定画笔的宽度，重新定义当前选定的路径。</td></tr>
</table>
<font color="#0000FF"><a name="打印函数">打印函数</a></font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>停止打印</td><td>AbortDoc</td><td>停止打印(设备)</td><td>停止当前打印作业，并擦除自上次调用StartDoc功能以来绘制的所有内容</td></tr>
<tr><td>结束打印</td><td>EndDoc</td><td>结束打印(设备)</td><td>停结束打印作业。</td></tr>
<tr><td>开始打印</td><td>StartDoc</td><td>开始打印(设备,文档类)</td><td>启动打印作业</td></tr>
<tr><td>准备打印</td><td>StartPage</td><td>准备打印(设备)</td><td>准备打印机驱动程序以接受数据。</td></tr>
<tr><td>开关预览</td><td>ColorMatchToTarget</td><td>开关预览(设备,方式)</td><td>启用或禁用指定设备(通常是打印机)的预览。方式1启动预览,2禁用预览,3禁用预览并删除预览的颜色转换</td></tr>
<tr><td>打印功能</td><td>DeviceCapabilitiesA</td><td>打印功能(机名,"LPT1",功能,@接收,@驱动)</td><td>检索打印机<a href="#设备环境类">驱动</a>程序的<a href="#打印机功能">功能</a>。</td></tr>
<tr><td>结束页面</td><td>EndPage</td><td>结束页面(设备)</td><td>通知设备应用程序已完成对页面的写入。此函数通常用于指示设备驱动程序转到新页面。</td></tr>
<tr><td>删除脱机</td><td>GdiDeleteSpoolFileHandle</td><td>删除脱机(脱机文件)</td><td>释放假脱机文件句柄。</td></tr>
<tr><td>结束元档</td><td>GdiEndDocEMF</td><td>结束元档(脱机文件)</td><td>结束 EMF 格式打印作业的 EMF 播放操作。</td></tr>
<tr><td>结束元页</td><td>GdiEndPageEMF</td><td>结束元页(脱机文件,标志)</td><td>结束 EMF 格式打印作业的物理页面的 EMF 播放操作。标志:1启用颜色优化</td></tr>
<tr><td>打印设备</td><td>GdiGetDC</td><td>打印设备(脱机文件)</td><td>返回打印机设备上下文的句柄。</td></tr>
<tr><td>取驱动页</td><td>GdiGetDevmodeForPage</td><td>取驱动页(脱机文件,页码,@指定驱动,@上个驱动)</td><td>返回打印作业的指定页和上一页的 <a href="#设备环境类">驱动模式</a> 结构。</td></tr>
<tr><td>打印页数</td><td>GdiGetPageCount</td><td>打印页数(脱机文件)</td><td>返回打印作业中的页数。</td></tr>
<tr><td>打印句柄</td><td>GdiGetPageHandle</td><td>打印句柄(脱机文件,页码,页类)</td><td>返回打印作业中指定页面的句柄。页类:0普通,1水印</td></tr>
<tr><td>打印假脱</td><td>GdiGetSpoolFileHandle</td><td>打印假脱(打印机名,驱动,文档名)</td><td>返回打印作业的 EMF 文件(假脱机文件)的句柄。</td></tr>
<tr><td>播放页面</td><td>GdiPlayPageEMF</td><td>播放页面(脱机文件,页面,矩形,边框,剪辑区)</td><td>为假脱机打印作业的一个文档页播放指定矩形内的 EMF 记录。</td></tr>
<tr><td>重置元档</td><td>GdiResetDCEMF</td><td>重置元档(脱机文件,驱动)</td><td>在播放后台打印的 EMF 打印作业期间重置打印机的设备上下文。由取驱动页获取的指定驱动</td></tr>
<tr><td>初始元档</td><td>GdiStartDocEMF</td><td>初始元档(脱机文件,驱动)</td><td>对 EMF 格式的打印作业执行初始化操作。</td></tr>
<tr><td>初始元页</td><td>GdiStartPageEMF</td><td>初始元页(脱机文件)</td><td>对 EMF 格式打印作业的物理页面执行初始化操作。</td></tr>
<tr><td>打印中止</td><td>SetAbortProc</td><td>打印中止(设备,回调)</td><td>设置应用程序定义的<a href="#中止回调">中止函数</a>，该函数允许在后台打印期间取消打印作业。</td></tr>
</table><a name="中止回调">中止回调</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>中止回调</td><td>AbortProc</td><td>2</td><td>当在后台打印期间取消打印作业时，将调用此函数。返回真以继续打印作业，或返回假以取消打印作业。</td></tr>
<tr><th colspan=4>中止回调——参数表</th></tr>
<tr><td>设备</td><td>unnamedParam1</td><td>整数</td><td>unnamedParam1</td></tr>
<tr><td>数据</td><td>unnamedParam2</td><td>整数</td><td>unnamedParam2</td></tr>
</table><a name="打印机功能">打印机功能</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>值</td><td>作用解释</td></tr>
<tr><td>DC_BINNAMES</td><td>0</td><td>检索打印机的纸箱的名称。 接收 缓冲区接收字符串缓冲区数组。 每个字符串缓冲区长度为 24 个字符，包含纸箱的名称。 返回值指示数组中的条目数。 除非名称长度为 24 个字符，否则名称字符串以 0 结尾。 如果 接收 为 0，则返回值是所需的 bin 条目数。</td></tr>
<tr><td>DC_BINS</td><td>1</td><td>检索可用纸箱的列表。 接收 缓冲区接收 一个 整形 值数组，这些值指示打印机的可用纸张来源。 返回值指示数组中的条目数。 有关可能数组值的列表，请参阅 <a href="#设备环境类">设备环境类</a> 结构的 dmDefaultSource 成员的说明。 如果 接收 为 0，则返回值指示数组中所需的条目数。</td></tr>
<tr><td>DC_COLLATE</td><td>2</td><td>如果打印机支持排序，则返回值为 1;否则，返回值为零。 不使用 接收 参数。</td></tr>
<tr><td>DC_COLORDEVICE</td><td>3</td><td>如果打印机支持彩色打印，则返回值为 1;否则，返回值为零。 不使用 接收 参数。</td></tr>
<tr><td>DC_COPIES</td><td>4</td><td>返回设备可以打印的副本数。</td></tr>
<tr><td>DC_DRIVER</td><td>5</td><td>返回打印机驱动程序的版本号。</td></tr>
<tr><td>DC_DUPLEX</td><td>6</td><td>如果打印机支持双面打印，则返回值为 1;否则，返回值为零。 不使用 接收 参数。</td></tr>
<tr><td>DC_ENUMRESOLUTIONS</td><td>7</td><td>检索打印机支持的分辨率列表。 接收 缓冲区接收 整数 值数组。 对于每个支持的分辨率，数组包含一对 整数 值，用于指定分辨率的 x 和 y 维度（以每英寸点为单位）。 返回值指示支持的分辨率数。 如果 接收 为 0，则返回值指示支持的分辨率数。</td></tr>
<tr><td>DC_EXTRA</td><td>8</td><td>返回打印机驱动程序的 <a href="#设备环境类">设备环境类</a> 结构的特定于设备的部分所需的字节数。</td></tr>
<tr><td>DC_FIELDS</td><td>9</td><td>返回打印机驱动程序的 <a href="#设备环境类">设备环境类</a> 结构的 标志 成员。 标志 成员指示打印机驱动程序支持结构中与设备无关部分的成员。</td></tr>
<tr><td>DC_FILEDEPENDENCIES</td><td>10</td><td>检索安装驱动程序时需要加载的任何其他文件的名称。 接收 缓冲区接收字符串缓冲区数组。 每个字符串缓冲区长度为 64 个字符，包含文件的名称。 返回值指示数组中的条目数。 除非名称长度为 64 个字符，否则名称字符串以 0 结尾。 如果 接收 为 0，则返回值为文件数。</td></tr>
<tr><td>DC_MAXEXTENT</td><td>11</td><td>返回打印机驱动程序的 <a href="#设备环境类">设备环境类</a> 结构的 长度 和 纸宽 成员可以指定的最大纸张大小。 返回值的 低字 包含最大 纸宽 值，高字 包含最大 长度 值。</td></tr>
<tr><td>DC_MEDIAREADY</td><td>12</td><td>检索当前可供使用的纸质表单的名称。 接收 缓冲区接收字符串缓冲区数组。 每个字符串缓冲区长度为 64 个字符，包含纸质窗体的名称。 返回值指示数组中的条目数。 除非名称长度为 64 个字符，否则名称字符串以 0 结尾。 如果 接收 为 0，则返回值为纸质表单的数量。</td></tr>
<tr><td>DC_MEDIATYPENAMES</td><td>13</td><td>检索支持的媒体类型的名称。 接收 缓冲区接收字符串缓冲区数组。 每个字符串缓冲区长度为 64 个字符，包含支持的媒体类型的名称。 返回值指示数组中的条目数。 除非名称长度为 64 个字符，否则字符串以 0 结尾。 如果 接收 为 0，则返回值是所需的媒体类型名称数。</td></tr>
<tr><td>DC_MEDIATYPES</td><td>14</td><td>检索支持的媒体类型的列表。 接收 缓冲区接收指示支持的媒体类型的 整数 值数组。 返回值指示数组中的条目数。 有关可能数组值的列表，请参阅 <a href="#设备环境类">设备环境类</a> 结构的 媒体 成员的说明。 如果 接收 为 0，则返回值指示数组中所需的条目数。</td></tr>
<tr><td>DC_MINEXTENT</td><td>15</td><td>返回打印机驱动程序的 <a href="#设备环境类">设备环境类</a> 结构的 长度 和 纸宽 成员可以指定的最小纸张大小。 返回值的 低字 包含最小 纸宽 值，高字 包含最小 长度 值。</td></tr>
<tr><td>DC_ORIENTATION</td><td>16</td><td>根据纵向逆时针旋转以生成横向方向的度数返回设备的纵向和横向方向之间的关系。 返回值可以是下列值之一：0无横向。90纵向旋转 90 度以产生景观。270纵向旋转 270 度以产生景观。</td></tr>
<tr><td>DC_NUP</td><td>17</td><td>检索一个整数数组，这些整数指示打印机能够打印每个打印页的多个文档页。 接收 缓冲区接收 整数 值的数组。 每个值表示每个打印页支持的文档页数。 返回值指示数组中的条目数。 如果 接收 为 0，则返回值指示数组中所需的条目数。</td></tr>
<tr><td>DC_PAPERNAMES</td><td>18</td><td>检索受支持纸张名称的列表， (例如 Letter 或 Legal) 。 接收 缓冲区接收字符串缓冲区数组。 每个字符串缓冲区长度为 64 个字符，包含纸质窗体的名称。 返回值指示数组中的条目数。 除非名称长度为 64 个字符，否则名称字符串以 0 结尾。 如果 接收 为 0，则返回值是纸质表单的数量。</td></tr>
<tr><td>DC_PAPERS</td><td>19</td><td>检索支持的纸张大小列表。 接收 缓冲区接收一个 整形 值数组，这些值指示打印机的可用纸张大小。 返回值指示数组中的条目数。 有关可能数组值的列表，请参阅 <a href="#设备环境类">设备环境类</a> 结构的 dmPaperSize 成员的说明。 如果 接收 为 0，则返回值指示数组中所需的条目数。</td></tr>
<tr><td>DC_PAPERSIZE</td><td>20</td><td>检索每个支持的纸张尺寸（以十分之一毫米为单位）。 接收 缓冲区接收 POINT 结构的数组。 每个结构都包含纸张大小的宽度 (x 维) 和长度 (y 维) ，就像纸张处于 DMORIENT_PORTRAIT 方向一样。 返回值指示数组中的条目数。</td></tr>
<tr><td>DC_PERSONALITY</td><td>21</td><td>检索打印机支持的打印机说明语言的列表。 接收 缓冲区接收字符串缓冲区数组。 每个缓冲区长度为 32 个字符，包含打印机说明语言的名称。 返回值指示数组中的条目数。 名称字符串以 0 结尾，除非名称长度为 32 个字符。 如果 接收 为 0，则返回值指示所需的数组条目数。</td></tr>
<tr><td>DC_PRINTERMEM</td><td>22</td><td>返回值是可用打印机内存量（以千字节为单位）。 不使用 接收 参数。</td></tr>
<tr><td>DC_PRINTRATE</td><td>23</td><td>返回值指示打印机的打印速率。 为 DC_PRINTRATEUNIT 返回的值指示 DC_PRINTRATE 值的单位。 不使用 接收 参数。</td></tr>
<tr><td>DC_PRINTRATEPPM</td><td>24</td><td>返回值指示打印机的打印速率（以每分钟页为单位）。 不使用 接收 参数。</td></tr>
<tr><td>DC_PRINTRATEUNIT</td><td>25</td><td>指示打印速率单位，返回值是以下值之一。1每分钟页数。2每秒的字符数。3每分钟行数。4每分钟英寸数。</td></tr>
<tr><td>DC_SIZE</td><td>26</td><td>返回打印机驱动程序的 <a href="#设备环境类">设备环境类</a> 结构的 大小 成员。</td></tr>
<tr><td>DC_STAPLE</td><td>27</td><td>如果打印机支持装订，则返回值为非零值;否则，返回值为零。 不使用 接收 参数。</td></tr>
<tr><td>DC_TRUETYPE</td><td>28</td><td>检索驱动程序使用 TrueType 字体的能力。 接收 参数应为 0。 返回值可以是以下一个或多个值：1设备可以将 TrueType 字体打印为图形。2设备可以下载 TrueType 字体。4设备可以将设备字体替换为 TrueType 字体。</td></tr>
<tr><td>DC_VERSION</td><td>29</td><td>返回打印机驱动程序符合的规范版本。</td></tr>
</table><hr>
<p><font color="#0000FF" size=6><a name="绘图入门">增强绘图（GDI+）编程基础</a></font></p>
Windows GDI+ GDI+ 可用于所有基于 Windows 的应用程序。是在 Windows XP 和 Windows Server 2003 中引入的一组API，负责在屏幕上和打印机上显示信息。顾名思义，GDI+ 是 Windows 图形设备接口 (GDI) 的后续版本，优化了 GDI 的许多功能。<br>
Windows GDI+ 的服务分为以下三大类：二维向量、图形映像和版式<br>
<b>二维向量图形</b><br>
矢量图形涉及绘制基元 (例如由坐标系上的点集指定的线条、曲线和图形) 。 例如，直线可以由其两个端点指定，矩形可以通过一个点指定，该点提供其左上角的位置，以及一对数字来指定其宽度和高度。 简单路径可以通过要通过直线连接的点数组来指定。 贝塞尔自由绘制曲线是由四个控制点指定的复杂曲线。<br>

<b>映像</b><br>
某些种类的图片很难或不可能用矢量图形技术显示。 例如，工具栏按钮上的图片以及显示为图标的图片很难指定为线条和曲线的集合。 使用矢量技术创建拥挤的棒球场的高分辨率数字照片将更加困难。 此类型的图像存储为位图，这些数字数组表示屏幕上各个点的颜色。 存储有关位图的信息的数据结构往往比矢量图形所需的数据结构更复杂，因此 GDI+ 中有多个类专用于此目的。 <br>

<b>版式</b><br>
版式涉及以各种字体、大小和样式显示文本。 GDI+ 为此复杂任务提供了大量支持。 GDI+ 中的一项新功能是次像素抗锯齿，它使在 LCD 屏幕上呈现的文本外观更流畅。<br>
<p><font color="#0000FF" size=6>第一节 初始化绘图</font></p>
在GDI+中，通过调用 绘图启动 函数可以初始化GDI+，而通过调用 绘图结束 函数可以结束对GDI+引用。需要注意的是，这两个函数是成对出现的。<br>

编写自定义GDI+初始化过程和GDI+结束过程，其代码如下所示：<br>

<font color="#0000FF">整数 令牌</font>;//申请一个全局整数变量作为绘图启动的初始化标志<br>
<font color="#0000FF">绘图启动类 绘图(版本=1)</font>;//申请一个绘图启动类,版本必须指定为1<br>
<font color="#0000FF">程序段 初始化绘图<br>
如果(令牌=0)绘图启动(@令牌,绘图,0)<br>
结束<br><br>
程序段 关闭绘图<br>
如果(令牌)绘图结束(令牌)<br>
结束</font><br>

可以在窗体启动过程中调用初始化过程来初始化GDI+，并在程序结束过程中调用关闭绘图来结束对GDI+的引用。<br>
<b><a name="绘图启动">绘图启动</a>-函数功能</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>绘图启动</td><td>GdiplusStartup</td><td>3</td><td>初始化 Windows GDI+。 在进行任何其他 GDI+ 调用之前调用 </td></tr>
<tr><th colspan=4>绘图启动——参数表</th></tr>
<tr><td>令牌</td><td>token</td><td>整数</td><td>指向接收令牌的整数指针。</td></tr>
<tr><td>输入</td><td>input</td><td>整数</td><td>指向包含 GDI+ 版本的 <a href="#绘图启动类">绘图启动类</a> 结构的指针。</td></tr>
<tr><td>输出</td><td>output</td><td>整数</td><td>指向 <a href="#绘图输出类">绘图输出类</a> 结构的指针。如果输入参数的 后台 成员为假，则此参数可以为0。</td></tr>
</table><b><a name="绘图启动类">绘图启动类</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>绘图启动类</td><td>GdiplusStartupInput</td><td>16</td><td>包含GdiplusStartup函数所需的一个参数块。</td></tr>
<tr><th colspan=4>绘图启动类——成员表</th></tr>
<tr><td>版本</td><td>GdiplusVersion</td><td>整数</td><td>必须为1</td></tr>
<tr><td>调试</td><td>DebugEventCallback</td><td>整数</td><td>可以在调试版本上调用的<a href="#绘图调试回调">回调函数</a>的指针</td></tr>
<tr><td>后台</td><td>SuppressBackgroundThread</td><td>整数</td><td>指定是否禁止显示 GDI+ 后台线程的布尔值。</td></tr>
<tr><td>解码</td><td>SuppressExternalCodecs</td><td>整数</td><td>指定是否希望 GDI+ 禁止显示外部图像编解码器的布尔值。</td></tr>
</table><b><a name="绘图调试回调">绘图调试回调</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>绘图调试回调</td><td>DebugEventProc</td><td>2</td><td>在应用程序中实现并传递给 绘图启动类 构造函数的回调函数的签名。</td></tr>
<tr><th colspan=4>绘图调试回调——成员表</th></tr>
<tr><td>级别</td><td>level</td><td>整数</td><td>表示调试事件的级别。0致命级别,1警告级别</td></tr>
<tr><td>信息</td><td>message</td><td>整数</td><td>指向包含调试事件消息的窄字符串的指针。</td></tr>
</table><b><a name="绘图输出类">绘图输出类</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>绘图输出类</td><td>GdiplusStartupOutput</td><td>8</td><td>绘图启动 函数在其输出参数中 指向挂钩函数和脱钩函数的指针。</td></tr>
<tr><th colspan=4>绘图输出类——成员表</th></tr>
<tr><td>挂钩</td><td>NotificationHookProc</td><td>整数</td><td>接收指向挂钩函数的指针。</td></tr>
<tr><td>脱钩</td><td>NotificationUnhook</td><td>整数</td><td>接收指向挂钩函数的指针。</td></tr>
</table><b><a name="绘图挂钩回调">绘图挂钩回调</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>绘图挂钩回调</td><td>NotificationHookProc</td><td>1</td><td>绘图输出类 结构中返回的通知挂钩函数的签名。</td></tr>
<tr><th colspan=4>绘图挂钩回调——参数表</th></tr>
<tr><td>牌号</td><td>token</td><td>整数</td><td>指向包含令牌的整数指针。</td></tr>
</table><b><a name="绘图脱钩回调">绘图脱钩回调</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>绘图脱钩回调</td><td>NotificationUnhook</td><td>1</td><td>绘图输出类 结构中返回的通知脱钩函数的签名。</td></tr>
<tr><th colspan=4>绘图脱钩回调——参数表</th></tr>
<tr><td>牌号</td><td>token</td><td>整数</td><td>指向包含令牌的整数指针。</td></tr>
</table><br>
<b>创建图形设备对象</b><br>
图形设备是GDI+程序设计的基础对象，包括绘制图像、输出文本、绘制几何图形和填充以及坐标系统的变换等各种操作都是建立在该对象基础上的。<br>

在GDI+中，可以根据设备、窗口和图像等不同的对象句柄分别调用 设备取图、窗口取图和图像取图 等不同创建函数的来创建图形设备对象。<br>
<p><font color="#FF0000">在函数表示例参数中，图形设备对象简称为图形，也是为了跟基础绘图GDI的设备进行区分。函数名里简称绘图或者绘、图</font></p>

<p><font color="#0000FF" size=6><a name="初始绘图">初始化图形设备和图形设备绘制函数</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>绘图启动</td><td>GdiplusStartup</td><td>绘图启动(@令牌,输入,输出)</td><td>函数初始化 Windows GDI+。 在进行任何其他 GDI+ 调用之前调用</td></tr>
<tr><td>绘图结束</td><td>GdiplusShutdown</td><td>绘图结束(令牌)</td><td>清理 Windows GDI+ 使用的资源。</td></tr>
<tr><td>绘图刷新</td><td>GdipFlush</td><td>绘图刷新(图形,意向)</td><td>刷新所有待处理的图形操作。意向:0异步,1同步</td></tr>
<tr><td>绘图内存</td><td>GdipAlloc</td><td>指针=绘图内存(大小)</td><td>为GDI +对象分配内存</td></tr>
<tr><td>绘存释放</td><td>GdipFree</td><td>绘存释放(指针)</td><td>释放为GDI +对象分配的内存。</td></tr>
<tr><td>设备取图</td><td>GdipCreateFromHDC</td><td>设备取图(设备,@图形)</td><td>创建与指定设备上下文相关联的图形设备对象。</td></tr>
<tr><td>绘制设备</td><td>GdipCreateFromHDC2</td><td>绘制设备(设备,设备,@图形)</td><td>创建与指定设备上下文和指定设备关联的图形设备对象。</td></tr>
<tr><td>窗口取图</td><td>GdipCreateFromHWND</td><td>窗口取图(窗口,@图形)</td><td>创建与指定窗口相关联的图形设备对象。</td></tr>
<tr><td>绘制窗口</td><td>GdipCreateFromHWNDICM</td><td>绘制窗口(窗口,@图形)</td><td>使用图像颜色管理 (ICM) 创建与指定窗口相关联的图形设备对象。</td></tr>
<tr><td>绘图设备</td><td>GdipGetDC</td><td>绘图设备(图形,@设备)</td><td>获取与此绘图对象关联的设备上下文的句柄。</td></tr>
<tr><td>绘图释放</td><td>GdipReleaseDC</td><td>绘图释放(图形,设备)</td><td>释放通过先前调用绘图设备函数获取的设备上下文句柄。</td></tr>
<tr><td>图像取图</td><td>GdipGetImageGraphicsContext</td><td>图像取图(图像,@图形)</td><td>创建与图片对象相关联的图形设备对象。</td></tr>
<tr><td>绘图删除</td><td>GdipDeleteGraphics</td><td>绘图删除(图形)</td><td>删除指定的图形设备对象。</td></tr>
<tr><td>绘图清色</td><td>GdipGraphicsClear</td><td>绘图清色(图形,颜色)</td><td>将图形设备对象清除为指定的颜色。</td></tr>
<tr><td>绘改合成</td><td>GdipSetCompositingMode</td><td>绘改合成(图形,模式)</td><td>设置此图形设备对象的合成模式。0=混合,1=覆盖</td></tr>
<tr><td>绘取合成</td><td>GdipGetCompositingMode</td><td>绘取合成(图形,@模式)</td><td>获取此图形设备对象的合成模式。0=混合,1=覆盖</td></tr>
<tr><td>绘改原点</td><td>GdipSetRenderingOrigin</td><td>绘改原点(图形,x,y)</td><td>设置此图形设备对象的呈现原点。</td></tr>
<tr><td>绘取原点</td><td>GdipGetRenderingOrigin</td><td>绘取原点(图形,@x,@y)</td><td>获取此图形设备对象的呈现原点。</td></tr>
<tr><td>绘改质量</td><td>GdipSetCompositingQuality</td><td>绘改质量(图形,质量)</td><td>设置此图形设备对象的<a href="#伽玛修正">合成质量</a>。</a></td></tr>
<tr><td>绘取质量</td><td>GdipGetCompositingQuality</td><td>绘取质量(图形,@质量)</td><td>获取此图形设备对象的<a href="#伽玛修正">合成质量</a>。</a></td></tr>
<tr><td>绘改画质</td><td>GdipSetSmoothingMode</td><td>绘改画质(图形,画质)</td><td>设置此图形设备对象的<a href="#平滑模式">呈现质量</a>。平滑 (抗锯齿) </td></tr>
<tr><td>绘取画质</td><td>GdipGetSmoothingMode</td><td>绘取画质(图形,@画质)</td><td>获取此图形设备对象的<a href="#平滑模式">呈现质量</a>。平滑 (抗锯齿) </td></tr>
<tr><td>绘改偏移</td><td>GdipSetPixelOffsetMode</td><td>绘改偏移(图形,模式)</td><td>设置此图形设备对象的<a href="#像素偏移">像素偏移模式</a>。</td></tr>
<tr><td>绘取偏移</td><td>GdipGetPixelOffsetMode</td><td>绘取偏移(图形,@模式)</td><td>获取此图形设备对象的<a href="#像素偏移">像素偏移模式</a>。</td></tr>
<tr><td>绘改渲染</td><td>GdipSetTextRenderingHint</td><td>绘改渲染(图形,模式)</td><td>设置此图形设备对象的<a href="#文本呈现">文本呈现模式</a>。</td></tr>
<tr><td>绘取渲染</td><td>GdipGetTextRenderingHint</td><td>绘取渲染(图形,@模式)</td><td>获取此图形设备对象的<a href="#文本呈现">文本呈现模式</a>。</td></tr>
<tr><td>绘改对比</td><td>GdipSetTextContrast</td><td>绘改对比(图形,对比度)</td><td>设置此图形设备对象的抗锯齿文本对比度值。</td></tr>
<tr><td>绘取对比</td><td>GdipGetTextContrast</td><td>绘取对比(图形,@对比度)</td><td>获取此图形设备对象的抗锯齿文本对比度值。</td></tr>
<tr><td>绘改内插</td><td>GdipSetPixelOffsetMode</td><td>绘改内插(图形,模式)</td><td>设置此图形设备对象的<a href="#缩放旋转">内插模式</a>。用于确定缩放或旋转图像时使用的算法。</td></tr>
<tr><td>绘取内插</td><td>GdipGetPixelOffsetMode</td><td>绘取内插(图形,@模式)</td><td>获取此图形设备对象的<a href="#缩放旋转">内插模式</a>。用于确定缩放或旋转图像时使用的算法。</td></tr>
<tr><td>绘改转矩</td><td>GdipSetWorldTransform</td><td>绘改转矩(图形,矩阵)</td><td>设置图形设备对象的世界转换矩阵。</td></tr>
<tr><td>绘取转矩</td><td>GdipGetWorldTransform</td><td>绘取转矩(图形,@矩阵)</td><td>获取图形设备对象的世界转换矩阵。</td></tr>
<tr><td>绘转标识</td><td>GdipResetWorldTransform</td><td>绘转标识(图形,颜色)</td><td>将图形设备对象的世界转换矩阵设置为标识矩阵。</td></tr>
<tr><td>绘乘矩阵</td><td>GdipMultiplyWorldTransform </td><td>绘乘矩阵(图形,矩阵,顺序)</td><td>使用自身和另一个矩阵的乘积更新此图形对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>绘乘转换</td><td>GdipTranslateWorldTransform </td><td>绘乘转换(图形,小数 x缩,小数 y缩,顺序)</td><td>此图形对象的世界转换矩阵设置为等于自身和转换矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>绘乘缩放</td><td>GdipScaleWorldTransform </td><td>绘乘缩放(图形,小数 x缩,小数 y缩,顺序)</td><td>此图形对象的世界转换矩阵设置为等于自身和缩放矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>绘乘旋转</td><td>GdipRotateWorldTransform </td><td>绘乘旋转(图形,小数 角度,顺序)</td><td>使用自身乘积和旋转矩阵更新此图形对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>绘页标识</td><td>GdipResetPageTransform</td><td>绘页标识(图形)</td><td>将页面转换矩阵重置为标识。</td></tr>
<tr><td>绘改单位</td><td>GdipSetPageUnit</td><td>绘改单位(图形,单位)</td><td>设置此图形设备对象的度量单位。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>绘取单位</td><td>GdipGetPageUnit</td><td>绘取单位(图形,@单位)</td><td>获取此图形设备对象的度量单位。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>绘改缩放</td><td>GdipSetPageScale</td><td>绘改缩放(图形,小数 比例)</td><td>设置图形设备对象的页面转换设置的缩放因子。</td></tr>
<tr><td>绘取缩放</td><td>GdipGetPageScale</td><td>绘取缩放(图形,小数 @比例)</td><td>获取图形设备对象的页面转换设置的缩放因子。</td></tr>
<tr><td>绘图宽度</td><td>GdipGetDpiX</td><td>绘图宽度(图形,小数 @宽)</td><td>设置图形设备对象的显示设备的水平分辨率（以点/英寸为单位）。</td></tr>
<tr><td>绘图高度</td><td>GdipGetDpiY</td><td>绘图高度(图形,小数 @高)</td><td>获取图形设备对象的显示设备的垂直分辨率（以点/英寸为单位）。</td></tr>
<tr><td>绘转坐标</td><td>GdipTransformPointsI</td><td>绘转坐标(图形,目标,源坐标,点组,数量)</td><td>将点数组从一个<a href="#坐标空间">坐标空间</a>转换为另一个坐标空间。 转换基于此 图形设备 对象的当前世界和页面转换。</td></tr>
<tr><td>绘图近色</td><td>GdipGetNearestColor</td><td>绘图近色(图形,@颜色)</td><td>获取与传入的颜色最接近的颜色。此方法适用于每像素 8 位或具有 8 位调色板的较低显示设备。</td></tr>
<tr><td>绘半色板</td><td>GdipCreateHalftonePalette</td><td>半调色板(图形)</td><td>获取 Windows 半色调调色板。</td></tr>
<tr><td>绘图线条</td><td>GdipDrawLine</td><td>绘图线条(图形,笔,小数 x1,小数y1,小数x2,小数y2)</td><td>绘制连接两个点的线条。小数值</td></tr>
<tr><td>绘图画线</td><td>GdipDrawLineI</td><td>绘图画线(图形,笔,x1,y1,x2,y2)</td><td>绘制连接两个点的线条。整数值</td></tr>
<tr><td>绘图线序</td><td>GdipDrawLines</td><td>绘图线序(图形,笔,小数 点组,数量)</td><td>绘制连接线的序列。小数值数组</td></tr>
<tr><td>绘图线组</td><td>GdipDrawLinesI</td><td>绘图线组(图形,笔,点组,数量)</td><td>绘制连接线的序列。整数值数组</td></tr>
<tr><td>绘图弧线</td><td>GdipDrawArc</td><td>绘图弧线(图形,笔,左,顶,宽,高,起始角,扫视角)</td><td>小数值绘制弧线。弧线是椭圆的一部分。</td></tr>
<tr><td>绘制弧线</td><td>GdipDrawArcI</td><td>绘制弧线(图形,笔,左,顶,宽,高,起始角,扫视角)</td><td>整数值绘制弧线（角度为小数）。弧线是椭圆的一部分。</td></tr>
<tr><td>绘图曲线</td><td>GdipDrawBezier</td><td>绘图曲线(图形,笔,x1,y1,x2,y2,x3,y3,x4,y4)</td><td>小数值绘制贝塞尔曲线。</td></tr>
<tr><td>绘制曲线</td><td>GdipDrawBezierI</td><td>绘制曲线(图形,笔,x1,y1,x2,y2,x3,y3,x4,y4)</td><td>整数值绘制贝塞尔曲线。</td></tr>
<tr><td>绘点曲线</td><td>GdipDrawBeziers</td><td>绘点曲线(图形,笔,点组,数量)</td><td>小数值数组绘制连接的贝塞尔样条序列。</td></tr>
<tr><td>绘组曲线</td><td>GdipDrawBeziersI</td><td>绘组曲线(图形,笔,点组,数量)</td><td>整数值数组绘制连接的贝塞尔样条序列。</td></tr>
<tr><td>绘图矩形</td><td>GdipDrawRectangle</td><td>绘图矩形(图形,笔,左,顶,宽,高)</td><td>小数值绘制矩形。</td></tr>
<tr><td>绘制矩形</td><td>GdipDrawRectangleI</td><td>绘制矩形(图形,笔,左,顶,宽,高)</td><td>整数值绘制矩形。</td></tr>
<tr><td>绘多矩形</td><td>GdipDrawRectangles</td><td>绘多矩形(图形,笔,点组,数量)</td><td>小数值矩形数组绘制一系列矩形。</td></tr>
<tr><td>绘组矩形</td><td>GdipDrawRectanglesI</td><td>绘组矩形(图形,笔,点组,数量)</td><td>整数值矩形数组绘制一系列矩形。</td></tr>
<tr><td>绘图方块</td><td>GdipFillRectangle</td><td>绘图方块(图形,刷子,左,顶,宽,高)</td><td>使用笔刷填充矩形的内部。（小数值）</td></tr>
<tr><td>绘制方块</td><td>GdipFillRectangleI</td><td>绘制方块(图形,刷子,左,顶,宽,高)</td><td>使用笔刷填充矩形的内部。（整数值）</td></tr>
<tr><td>绘多方块</td><td>GdipFillRectangles</td><td>绘多方块(图形,刷子,数组,数量)</td><td>使用笔刷填充矩形的内部。（小数矩形数组）</td></tr>
<tr><td>绘组方块</td><td>GdipFillRectanglesI</td><td>绘组方块(图形,刷子,数组,数量)</td><td>使用笔刷填充矩形的内部。（整数矩形数组）</td></tr>
<tr><td>绘图椭圆</td><td>GdipDrawEllipse</td><td>绘图椭圆(图形,笔,左,顶,宽,高)</td><td>小数值绘制椭圆形。</td></tr>
<tr><td>绘制椭圆</td><td>GdipDrawEllipseI</td><td>绘制椭圆(图形,笔,左,顶,宽,高)</td><td>整数值绘制椭圆形。</td></tr>
<tr><td>绘图椭面</td><td>GdipFillEllipse</td><td>绘图椭面(图形,刷子,左,顶,宽,高)</td><td>小数值绘制画刷填充的椭圆形。</td></tr>
<tr><td>绘制椭面</td><td>GdipFillEllipseI</td><td>绘制椭面(图形,刷子,左,顶,宽,高)</td><td>整数值绘制画刷填充的椭圆形。</td></tr>
<tr><td>绘图画饼</td><td>GdipDrawPie</td><td>绘图画饼(图形,笔,左,顶,宽,高,起始角,扫视角)</td><td>小数值绘制饼图。</td></tr>
<tr><td>绘制画饼</td><td>GdipDrawPieI</td><td>绘制画饼(图形,笔,左,顶,宽,高,起始角,扫视角)</td><td>整数值绘制饼图（角度为小数）。</td></tr>
<tr><td>绘图饼面</td><td>GdipFillPie</td><td>绘图饼面(图形,笔,刷子,顶,宽,高,起始角,扫视角)</td><td>小数值绘制画刷填充的饼图。</td></tr>
<tr><td>绘制饼面</td><td>GdipFillPieI</td><td>绘制饼面(图形,笔,刷子,顶,宽,高,起始角,扫视角)</td><td>整数值绘制画刷填充的饼图（角度为小数）。</td></tr>
<tr><td>绘图多边</td><td>GdipDrawPolygon</td><td>绘图多边(图形,笔,点组,数量)</td><td>小数值坐标点数组绘制多边形。</td></tr>
<tr><td>绘制多边</td><td>GdipDrawPolygonI</td><td>绘制多边(图形,笔,点组,数量)</td><td>整数值坐标点数组绘制多边形。</td></tr>
<tr><td>绘图多面</td><td>GdipFillPolygon</td><td>绘图多面(图形,刷子,点组,数量,模式)</td><td>小数值坐标点数组绘制画刷填充的多边形。<a href="#填充模式">填充模式</a>:0奇偶,1缠绕</td></tr>
<tr><td>绘制多面</td><td>GdipFillPolygonI</td><td>绘制多面(图形,刷子,点组,数量,模式)</td><td>整数值坐标点数组绘制画刷填充的多边形。<a href="#填充模式">填充模式</a>:0奇偶,1缠绕</td></tr>
<tr><td>绘图多形</td><td>GdipFillPolygon</td><td>绘图多形(图形,刷子,点组,数量)</td><td>小数值坐标点数组绘制画刷填充的多边形。填充模式为0奇偶</td></tr>
<tr><td>绘制多形</td><td>GdipFillPolygonI</td><td>绘制多形(图形,刷子,点组,数量)</td><td>整数值坐标点数组绘制画刷填充的多边形。填充模式为0奇偶</td></tr>
<tr><td>绘图路径</td><td>GdipDrawPath</td><td>绘图路径(图形,笔,路径)</td><td>绘制由路径对象定义的线条和曲线序列。</td></tr>
<tr><td>绘图片区</td><td>GdipFillPath</td><td>绘图片区(图形,笔,路径)</td><td>使用画刷填充路径的内部。若路径未闭合,会将图形的起点和终点的连线闭合。</td></tr>
<tr><td>绘图闭弧</td><td>GdipDrawCurve</td><td>绘图闭弧(图形,笔,点组,数量)</td><td>小数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘制闭弧</td><td>GdipDrawCurveI</td><td>绘制闭弧(图形,笔,点组,数量)</td><td>整数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘图弧度</td><td>GdipDrawCurve2</td><td>绘图弧度(图形,笔,点组,数量,曲率)</td><td>小数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘制弧度</td><td>GdipDrawCurve2I</td><td>绘制弧度(图形,笔,点组,数量,曲率)</td><td>整数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘图弧形</td><td>GdipDrawCurve3</td><td>绘图弧形(图形,笔,点组,数量,偏移,段数,曲率)</td><td>小数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘制弧形</td><td>GdipDrawCurve3I</td><td>绘制弧形(图形,笔,点组,数量,偏移,段数,曲率)</td><td>整数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘图封闭</td><td>GdipDrawClosedCurve</td><td>绘图封闭(图形,笔,点组,数量,弧度)</td><td>小数值坐标点数组绘制封闭的基数样条。</td></tr>
<tr><td>绘制封闭</td><td>GdipDrawClosedCurveI</td><td>绘制封闭(图形,笔,点组,数量,弧度)</td><td>整数值坐标点数组绘制封闭的基数样条。</td></tr>
<tr><td>绘图闭合</td><td>GdipDrawClosedCurve2</td><td>绘图闭合(图形,笔,点组,数量)</td><td>小数值坐标点数组绘制封闭的基数样条。</td></tr>
<tr><td>绘制闭合</td><td>GdipDrawClosedCurve2I</td><td>绘制闭合(图形,笔,点组,数量)</td><td>整数值坐标点数组绘制封闭的基数样条。</td></tr>
<tr><td>绘图填充</td><td>GdipFillClosedCurve</td><td>绘图填充(图形,刷子,点组,数量)</td><td>小数值坐标点数组绘制闭合的基数样条并填充。</td></tr>
<tr><td>绘制填充</td><td>GdipFillClosedCurveI</td><td>绘制填充(图形,刷子,点组,数量)</td><td>整数值坐标点数组绘制闭合的基数样条。</td></tr>
<tr><td>绘图填封</td><td>GdipFillClosedCurve2</td><td>绘图填封(图形,刷子,点组,数量,弧度,模式)</td><td>小数值坐标点数组绘制闭合的基数样条并填充。<a href="#填充模式">填充模式</a>:0奇偶,1缠绕</td></tr>
<tr><td>绘制填封</td><td>GdipFillClosedCurve2I</td><td>绘制填封(图形,刷子,点组,数量,弧度,模式)</td><td>整数值坐标点数组绘制闭合的基数样条并填充。<a href="#填充模式">填充模式</a>:0奇偶,1缠绕</td></tr>
<tr><td>绘刷区域</td><td>GdipFillRegion</td><td>绘刷区域(图形,刷子,区域)</td><td>使用画刷填充指定区域。</td></tr>
<tr><td>绘图注释</td><td>GdipComment</td><td>绘图注释(图形,长度,注释)</td><td>向现有的图元文件添加文本注释。</td></tr>
<tr><td>绘图定点</td><td>GdipDrawImage</td><td>绘图定点(图形,图片,X,Y)</td><td>在指定位置(单精度)绘制图像。</td></tr>
<tr><td>绘制定点</td><td>GdipDrawImageI</td><td>绘制定点(图形,图片,X,Y)</td><td>在指定位置(整数)绘制图像。</td></tr>
<tr><td>绘图定区</td><td>GdipDrawImageRect</td><td>绘图定区(图形,图片,左,顶,宽,高)</td><td>在指定区域(单精度)绘制图像。</td></tr>
<tr><td>绘制定区</td><td>GdipDrawImageRectl</td><td>绘制定区(图形,图片,左,顶,宽,高)</td><td>在指定区域(整数)绘制图像。</td></tr>
<tr><td>绘图点组</td><td>GdipDrawImagePoints</td><td>绘图点组(图形,图片,点组,数量)</td><td>在指定坐标点数组(单精度)绘制图像。</td></tr>
<tr><td>绘制点组</td><td>GdipDrawImagePointsl</td><td>绘制点组(图形,图片,点组,数量)</td><td>在指定坐标点数组(整数)绘制图像。</td></tr>
<tr><td>绘图点区</td><td>GdipDrawImagePointsRect</td><td>绘图点区(图形,图片,点组,数量,源左,源顶,<br>源宽,源高,单位,属性,回调,附加)</td><td>在指定点数组(单精度)绘制指定区域图像。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>绘制点区</td><td>GdipDrawImagePointsRectl</td><td>绘制点区(图形,图片,点组,数量,源左,源顶,<br>源宽,源高,单位,属性,回调,附加)</td><td>在指定点数组(整数)绘制指定区域图像。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>绘图区块</td><td>GdipDrawImageRectRect</td><td>绘图区块(图形,图片,左,顶,宽,高,源左,源顶,<br>源宽,源高,单位,属性,回调,附加)</td><td>在指定区域(单精度)绘制指定区域图像。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>区块整数</td><td>GdipDrawImageRectRectl</td><td>区块整数(图形,图片,左,顶,宽,高,源左,源顶,<br>源宽,源高,单位,属性,回调,附加)</td><td>在指定区域(整数)绘制指定区域图像。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>绘图特效</td><td>GdipDrawImageFX</td><td>绘图特效(图形,图片,矩形,矩阵,效果,属性,单位)</td><td>用指定效果后绘制图像的一部分。</td></tr>
<tr><td>绘图元点</td><td>GdipEnumerateMetafileDestPoint</td><td>绘图元点(图形,图元,坐标,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。坐标为小数</td></tr>
<tr><td>绘制元点</td><td>GdipEnumerateMetafileDestPointI</td><td>绘制元点(图形,图元,坐标,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。坐标为整数</td></tr>
<tr><td>绘图元区</td><td>GdipEnumerateMetafileDestRect</td><td>绘图元区(图形,图元,矩形,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。矩形为小数</td></tr>
<tr><td>绘制元区</td><td>GdipEnumerateMetafileDestRectI</td><td>绘制元区(图形,图元,矩形,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。矩形为整数</td></tr>
<tr><td>绘元点组</td><td>GdipEnumerateMetafileDestPointsI</td><td>绘元点组(图形,图元,点组,数量,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。坐标点数组为整数</td></tr>
<tr><td>绘元区点</td><td>GdipEnumerateMetafileSrcRectDestPointI</td><td>绘元区点(图形,图元,坐标,源区<br>,单位,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。坐标点和源区矩形为整数</td></tr>
<tr><td>绘元区块</td><td>GdipEnumerateMetafileSrcRectDestRect</td><td>绘元区块(图形,图元,矩形,源区<br>,单位,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。目标区矩形和源区矩形为小数</td></tr>
<tr><td>绘元块区</td><td>GdipEnumerateMetafileSrcRectDestRectI</td><td>绘元块区(图形,图元,矩形,源区<br>,单位,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。目标区矩形和源区矩形为整数</td></tr>
<tr><td>绘元区组</td><td>GdipEnumerateMetafileSrcRectDestPoints</td><td>绘元区组(图形,图元,点组,数量,<br>源区,单位,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。目标点数组和源区矩形为小数</td></tr>
<tr><td>绘元区系</td><td>GdipEnumerateMetafileSrcRectDestPoints</td><td>绘元区系(图形,图元,点组,数量,<br>源区,单位,回调,附加,属性)</td><td>为指定图元文件中的每条记录调用应用程序定义的<a href="#枚举图元回调">回调函数</a>。目标点数组和源区矩形为整数</td></tr>
<tr><td>绘元播放</td><td>GdipPlayMetafileRecord</td><td>绘元播放(图元,元类,标志,大小,数据)</td><td>播放图元文件记录。</td></tr>
<tr><td>绘图合面</td><td>GdipSetClipGraphics</td><td>绘图合面(图形,源图形,模式)</td><td>将两个图形设备对象的剪切区域进行组合。<a href="#区域组合">区域组合模式</a></td></tr>
<tr><td>绘图合区</td><td>GdipSetClipRect</td><td>绘图合区(图形,左,顶,宽,高,模式)</td><td>将图形设备对象的剪切区域和指定矩形区域进行组合。左顶宽高为小数;<a href="#区域组合">区域组合模式</a></td></tr>
<tr><td>绘制合区</td><td>GdipSetClipRectI</td><td>绘制合区(图形,左,顶,宽,高,模式)</td><td>将图形设备对象的剪切区域和指定矩形区域进行组合。左顶宽高为整数;<a href="#区域组合">区域组合模式</a></td></tr>
<tr><td>绘合路径</td><td>GdipSetClipPath</td><td>绘合路径(图形,路径,模式)</td><td>将图形设备对象的剪切区域和指定路径区域进行组合。<a href="#区域组合">区域组合模式</a></td></tr>
<tr><td>绘合区域</td><td>GdipSetClipRegion</td><td>绘合区域(图形,区域,模式)</td><td>将图形设备对象的剪切区域和指定区域进行组合。<a href="#区域组合">区域组合模式</a></td></tr>
<tr><td>绘合设备</td><td>GdipSetClipHrgn</td><td>绘合设备(图形,设备,模式)</td><td>将图形设备对象的剪切区域和指定GDI图形设备进行组合。<a href="#区域组合">区域组合模式</a></td></tr>
<tr><td>绘区无限</td><td>GdipResetClip</td><td>绘区无限(图形)</td><td>将此图形设备对象的剪切区域设置为无限区域。</td></tr>
<tr><td>绘区转换</td><td>GdipTranslateClip</td><td>绘区转换(图形,小数 左, 小数 上)</td><td>转换此图形设备对象的剪裁区域。</td></tr>
<tr><td>绘区平移</td><td>GdipTranslateClipI</td><td>绘区平移(图形,左,上)</td><td>转换此图形设备对象的剪裁区域。</td></tr>
<tr><td>绘图区域</td><td>GdipGetClip</td><td>绘图区域(图形,@区域)</td><td>获取对象的剪裁区域。</td></tr>
<tr><td>绘图剪区</td><td>GdipGetClipBounds</td><td>绘图剪区(图形,矩形)</td><td>获取此图形设备对象的一个矩形(小数)剪裁区域。</td></tr>
<tr><td>绘制剪区</td><td>GdipGetClipBoundsI</td><td>绘制剪区(图形,矩形)</td><td>获取此图形设备对象的一个矩形(整数)剪裁区域。</td></tr>
<tr><td>绘图空区</td><td>GdipIsClipEmpty</td><td>绘图空区(图形,@是否)</td><td>确定此图形设备对象的剪辑区域是否为空。</td></tr>
<tr><td>绘图显区</td><td>GdipGetVisibleClipBounds</td><td>绘图显区(图形,矩形)</td><td>获取此图形设备对象与窗口交集的矩形(小数)可见剪裁区域</td></tr>
<tr><td>绘制显区</td><td>GdipGetVisibleClipBoundsI</td><td>绘制显区(图形,矩形)</td><td>获取此图形设备对象与窗口交集的矩形(整数)可见剪裁区域。</td></tr>
<tr><td>绘图空显</td><td>GdipIsVisibleClipEmpty</td><td>绘图空显(图形,@是否)</td><td>确定此图形设备对象的可见剪裁区域是否为空。</td></tr>
<tr><td>点在绘区</td><td>GdipIsVisiblePoint</td><td>点在绘区(图形,小数 x,小数 y,@是否)</td><td>确定指定的点是否在此图形设备对象的可见剪裁区域之内。</td></tr>
<tr><td>点在视区</td><td>GdipIsVisiblePointI</td><td>点在视区(图形,左,上,@是否)</td><td>确定指定的点是否在此图形设备对象的可见剪裁区域之内。</td></tr>
<tr><td>绘区相交</td><td>GdipIsVisibleRect</td><td>绘区相交(图形,左,顶,宽,高,@是否)</td><td>确定指定的矩形(小数)是否与此图形设备对象的可见剪裁区域相交。</td></tr>
<tr><td>绘域相交</td><td>GdipIsVisibleRectI</td><td>绘域相交(图形,左,顶,宽,高,@是否)</td><td>确定指定的矩形(整数)是否与此图形设备对象的可见剪裁区域相交。</td></tr>
<tr><td>绘图保存</td><td>GdipSaveGraphics</td><td>绘图保存(图形,@状态)</td><td>保存此图形设备对象的<a href="#绘图状态">当前状态</a> (转换、剪辑区域和质量设置) 。</td></tr>
<tr><td>绘图还原</td><td>GdipRestoreGraphics</td><td>绘图还原(图形,状态)</td><td>将此图形设备对象的状态恢复到保存之前的<a href="#绘图状态">绘图状态</a>。</td></tr>
<tr><td>绘图容器</td><td>GdipBeginContainer</td><td>绘图容器(图形,矩形,源区,单位,@状态)</td><td>开始新的图形容器。目标矩形和源区矩形是小数</td></tr>
<tr><td>绘制容器</td><td>GdipBeginContainerI</td><td>绘制容器(图形,矩形,源区,单位,@状态)</td><td>开始新的图形容器。目标矩形和源区矩形是整数</td></tr>
<tr><td>绘新容器</td><td>GdipBeginContainer2</td><td>绘新容器(图形,@状态)</td><td>开始新的图形容器。</td></tr>
<tr><td>绘关容器</td><td>GdipEndContainer</td><td>绘关容器(图形,@状态)</td><td>关闭图形容器。</td></tr>
</table><b><a name="枚举图元回调">枚举图元回调</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>枚举图元回调</td><td>EnumerateMetafileProc</td><td>5</td><td>在应用程序中为枚举图元文件记录实现的回调函数。</td></tr>
<tr><th colspan=4>枚举图元回调——参数表</th></tr>
<tr><td>分类</td><td>unnamedParam1</td><td>整数</td><td>WMF、EMF 或 EMF+ 记录类型。</td></tr>
<tr><td>标志</td><td>unnamedParam2</td><td>整数</td><td>标志;对于 WMF/EMF 记录，始终为 0。</td></tr>
<tr><td>大小</td><td>unnamedParam3</td><td>整数</td><td>记录数据的大小 (字节) ;如果没有数据，则为 0。</td></tr>
<tr><td>数据</td><td>unnamedParam4</td><td>整数</td><td>指向记录数据的指针;如果没有数据，则为 0 。</td></tr>
<tr><td>附加</td><td>unnamedParam5</td><td>整数</td><td>指向 附加（如果有）参数的指针。</td></tr>
</table><p><font color="#0000FF" size=6><a name="区域组合">区域组合</a>-CombineMode 枚举指定新区域与现有区域的组合方式。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>合区替换</td><td>CombineModeReplace</td><td>0</td><td>指定将现有区域替换为新区域。</td></tr>
<tr><td>合区交集</td><td>CombineModeIntersect</td><td>1</td><td>指定将现有区域替换为自身与新区域的交集。</td></tr>
<tr><td>合区联合</td><td>CombineModeUnion</td><td> 2</td><td>指定将现有区域替换为自身和新区域的联合。</td></tr>
<tr><td>合区异或</td><td>CombineModeXor</td><td>3</td><td>指定将现有区域替换为执行 的结果这两个区域的 XOR。</td></tr>
<tr><td>合区排除</td><td>CombineModeExclude</td><td> 4</td><td>指定将现有区域替换为位于新区域外部的自身部分。</td></tr>
<tr><td>合区补充</td><td>CombineModeComplement</td><td>5</td><td>指定将现有区域替换为现有区域外部的新区域部分。</td></tr>
</table><p><font color="#0000FF" size=6><a name="伽玛修正">伽玛修正</a>-CompositingQuality 指定在颜色与背景色混合时是否应用伽玛修正。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>CompositingQualityInvalid</td><td>-1</td><td>无效数值,不要使用</td></tr>
<tr><td>CompositingQualityDefault</td><td>0</td><td>指定不应用伽玛校正。默认</td></tr>
<tr><td>CompositingQualityHighSpeed</td><td>1</td><td>指定不应用伽玛校正。高速</td></tr>
<tr><td>CompositingQualityHighQuality</td><td>2</td><td>指定应用伽玛修正。高品质</td></tr>
<tr><td>CompositingQualityGammaCorrected</td><td>3</td><td>指定应用伽玛修正。伽玛校正</td></tr>
<tr><td>CompositingQualityAssumeLinear</td><td>4</td><td>指定不应用伽玛校正。呈现线性</td></tr>
</table><p><font color="#0000FF" size=6><a name="平滑模式">平滑模式</a>-SmoothingMode指定应用于线条和曲线的平滑 (抗锯齿) 的类型。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>SmoothingModeInvalid</td><td>-1</td><td>无效数值,不要使用</td></tr>
<tr><td>SmoothingModeDefault</td><td>0</td><td>指定不应用平滑。</td></tr>
<tr><td>SmoothingModeHighSpeed</td><td>1</td><td>指定不应用平滑。</td></tr>
<tr><td>SmoothingModeHighQuality</td><td>2</td><td>指定使用 8 X 4 框筛选器应用平滑。</td></tr>
<tr><td>SmoothingModeNone</td><td>3</td><td>指定不应用平滑。</td></tr>
<tr><td>SmoothingModeAntiAlias</td><td>4</td><td>指定使用 8 X 4 框筛选器应用平滑。</td></tr>
<tr><td>SmoothingModeAntiAlias8x4</td><td>5</td><td>指定使用 8 X 4 框筛选器应用平滑。</td></tr>
<tr><td>SmoothingModeAntiAlias8x8</td><td>6</td><td>指定使用 8 X 8 框筛选器应用平滑。</td></tr>
</table><p><font color="#0000FF" size=6><a name="像素偏移">像素偏移</a>-PixelOffsetMode 指定 图形设备 对象的像素偏移模式。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>PixelOffsetModeInvalid</td><td>-1</td><td>无效数值,不要使用</td></tr>
<tr><td>PixelOffsetModeDefault</td><td>0</td><td>指示像素中心具有整数坐标。默认</td></tr>
<tr><td>PixelOffsetModeHighSpeed</td><td>1</td><td>指示像素中心具有整数坐标。高速</td></tr>
<tr><td>PixelOffsetModeHighQuality</td><td>2</td><td>指示像素中心的坐标介于整数值之间。高品质</td></tr>
<tr><td>PixelOffsetModeNone</td><td>3</td><td>指示像素中心具有整数坐标。无像素偏移</td></tr>
<tr><td>PixelOffsetModeHalf</td><td>4</td><td>指示像素中心的坐标介于整数值之间。偏移-0.5，半偏用于快速防混叠性能</td></tr>
</table><p><font color="#0000FF" size=6><a name="呈现文本">呈现文本</a>-TextRenderingHint 枚举指定用于呈现文本的过程。 该过程会影响文本的质量。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>TextRenderingHintSystemDefault</td><td>0</td><td>指定使用当前所选系统字体平滑模式绘制字符 (也称为呈现提示) 。</td></tr>
<tr><td>TextRenderingHintSingleBitPerPixelGridFit</td><td>1</td><td>指定使用字符字形位图和提示绘制字符，以改进词干和曲率上的字符外观。</td></tr>
<tr><td>TextRenderingHintSingleBitPerPixel</td><td>2</td><td>指定使用字符字形位图绘制字符，且不显示提示。 这会在牺牲质量的情况下获得更好的性能。</td></tr>
<tr><td>TextRenderingHintAntiAliasGridFit</td><td>3</td><td>指定使用字符抗锯齿字形位图和提示绘制字符。 由于抗锯齿以更高的性能成本进行抗锯齿，因此质量要好得多。</td></tr>
<tr><td>TextRenderingHintAntiAlias</td><td>4</td><td>指定使用其抗锯齿字形位图绘制字符且不显示提示。 由于关闭了提示，主干宽度差可能会比较明显。</td></tr>
<tr><td>TextRenderingHintClearTypeGridFit</td><td>5</td><td>指定使用字符字形 ClearType 位图和提示绘制字符。 此类文本呈现不能与 CompositingModeSourceCopy 一起使用。</td></tr>
</table><p><font color="#0000FF" size=6><a name="缩放旋转">缩放旋转算法</a>-InterpolationMode 枚举指定缩放或旋转图像时使用的算法。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>InterpolationModeInvalid</td><td>-1</td><td>无效数值,不要使用</td></tr>
<tr><td>InterpolationModeDefault</td><td>0</td><td>指定默认内插模式。</td></tr>
<tr><td>InterpolationModeLowQuality</td><td>1</td><td>指定低质量模式。</td></tr>
<tr><td>InterpolationModeHighQuality</td><td>2</td><td>指定高质量模式。</td></tr>
<tr><td>InterpolationModeBilinear</td><td>3</td><td>指定双线性插值法。 不进行预筛选。 将图像收缩为原始大小的 50% 以下时，此模式不适用。</td></tr>
<tr><td>InterpolationModeBicubic</td><td>4</td><td>指定双三次插值法。 不进行预筛选。 将图像收缩为原始大小的 25% 以下时，此模式不适用。</td></tr>
<tr><td>InterpolationModeNearestNeighbor</td><td>5</td><td>指定最临近插值法。</td></tr>
<tr><td>InterpolationModeHighQualityBilinear</td><td>6</td><td>指定高质量的双线性插值法。 执行预筛选以确保高质量的收缩。</td></tr>
<tr><td>InterpolationModeHighQualityBicubic</td><td>7</td><td>指定高质量的双三次插值法。 执行预筛选以确保高质量的收缩。 此模式可产生质量最高的转换图像。</td></tr>
</table><p><font color="#0000FF" size=6><a name="坐标空间">坐标空间</a>-CoordinateSpace 将点从一个坐标空间转换为另一个坐标空间。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>CoordinateSpaceWorld</td><td>0</td><td>指定世界坐标空间。</td></tr>
<tr><td>CoordinateSpacePage</td><td>1</td><td>指定页面坐标空间。</td></tr>
<tr><td>CoordinateSpaceDevice</td><td>2</td><td>指定设备坐标空间。</td></tr>
</table><p><font color="#0000FF" size=6><a name="填充模式">填充模式</a>-FillMode 枚举指定如何填充当路径或曲线本身相交时形成的区域。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>FillModeAlternate</td><td>0</td><td>指定根据偶数奇偶校验规则填充区域。 根据此规则，可以确定测试点位于封闭曲线内部还是外部，如下所示：从测试点绘制一条线到距离曲线较远的点。 如果该线条与曲线相交奇数次，则测试点位于曲线内;否则，测试点位于曲线之外。</td></tr>
<tr><td>FillModeWinding</td><td>1</td><td>指定根据非零缠绕规则填充区域。 根据此规则，可以确定测试点位于封闭曲线内部还是外部，如下所示：从测试点绘制一条线到距离曲线较远的点。 计算曲线从左到右穿过测试线的次数，并计算曲线从右到左交叉测试线的次数。 如果这两个数字相同，则测试点在曲线之外：否则，测试点位于曲线内。</td></tr>
</table><p><font color="#0000FF" size=6><a name="绘图状态">绘图状态</a>-Status 枚举指示 Windows GDI+ 方法调用的结果。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>Ok</td><td>0</td><td>指示方法调用成功。</td></tr>
<tr><td>GenericError</td><td>1</td><td>指示方法调用上存在错误，该错误被标识为此枚举的其他元素定义的错误。</td></tr>
<tr><td>InvalidParameter</td><td>2</td><td>指示传递给方法的参数之一无效。</td></tr>
<tr><td>OutOfMemory</td><td>3</td><td>指示操作系统内存不足，无法分配内存来处理方法调用。 有关构造函数如何使用 OutOfMemory 状态的说明，请参阅本主题末尾的“备注”部分。</td></tr>
<tr><td>ObjectBusy</td><td>4</td><td>指示 API 调用中指定的参数之一已在另一个线程中使用。</td></tr>
<tr><td>InsufficientBuffer</td><td>5</td><td>指示在 API 调用中指定为参数的缓冲区不够大，无法容纳要接收的数据。</td></tr>
<tr><td>NotImplemented</td><td>6</td><td>指示方法未实现。</td></tr>
<tr><td>Win32Error</td><td>7</td><td>指示 方法生成了 Win32 错误。</td></tr>
<tr><td>WrongState</td><td>8</td><td>指示对象处于无效状态以满足 API 调用。 例如，调用不是单一纯色的笔中的 Pen：：GetColor 会导致错误状态。</td></tr>
<tr><td>Aborted</td><td>9</td><td>指示方法已中止。</td></tr>
<tr><td>FileNotFound</td><td>10</td><td>指示找不到指定的图像文件或图元文件。</td></tr>
<tr><td>ValueOverflow</td><td>11</td><td>指示 方法执行生成数值溢出的算术运算。</td></tr>
<tr><td>AccessDenied</td><td>12</td><td>指示不允许对指定的文件执行写入操作。</td></tr>
<tr><td>UnknownImageFormat</td><td>13</td><td>指示指定的图像文件格式未知。</td></tr>
<tr><td>FontFamilyNotFound</td><td>14</td><td>指示找不到指定的字体系列。 字体系列名称不正确或字体系列未安装。</td></tr>
<tr><td>FontStyleNotFound</td><td>15</td><td>指示指定的样式不适用于指定的字体系列。</td></tr>
<tr><td>NotTrueTypeFont</td><td>16</td><td>指示从 中检索到的字体HDC 或LOGFONT 不是 TrueType 字体，不能与 GDI+一起使用。</td></tr>
<tr><td>UnsupportedGdiplusVersion</td><td>17</td><td>指示安装在系统上的 GDI+ 版本与编译应用程序的版本不兼容。</td></tr>
<tr><td>GdiplusNotInitialized</td><td>18</td><td>指示 GDI+API 未处于初始化状态。 若要正常工作，所有 GDI+ 对象都需要 GDI+ 处于初始化状态。 通过调用初始化 GDI+GdiplusStartup。</td></tr>
<tr><td>PropertyNotFound</td><td>19</td><td>指示图像中不存在指定的属性。</td></tr>
<tr><td>PropertyNotSupported</td><td>20</td><td>指示指定的属性不受图像格式支持，因此无法设置。</td></tr>
<tr><td>ProfileNotFound</td><td>21</td><td>指示找不到以 CMYK 格式保存图像所需的颜色配置文件。</td></tr>
</table><p><font color="#0000FF" size=6><a name="矩阵顺序">矩阵顺序</a>-MatrixOrder 枚举指定新矩阵乘以现有矩阵时的乘法顺序。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>MatrixOrderPrepend</td><td>0</td><td>指定新矩阵位于左侧，现有矩阵位于右侧。</td></tr>
<tr><td>MatrixOrderAppend</td><td>1</td><td>指定现有矩阵位于左侧，新矩阵位于右侧。</td></tr>
</table><p><font color="#0000FF" size=6><a name="画笔画刷">画笔画刷</a></font></p>
画笔对象是用于绘制线条和曲线，简称笔。画刷对象用于绘制图形形状的内部（简称刷），例如矩形、椭圆形、饼、多边形和路径等填充内部。<br>
阴影画刷对象定义具有阴影样式、前景色和背景色的矩形画笔。简称影刷，有六种阴影样式。 前景色定义阴影线的颜色;背景色定义绘制阴影线的颜色。<br>
线性渐变画刷对象绘制颜色渐变，简称线刷。其中颜色从线性渐变画笔的起始边界线均匀变化到线性渐变画笔的结束边界线。线性渐变画笔的边界线是两条平行直线。<br>
颜色渐变垂直于线性渐变画笔的边界线，在从起始边界线到结束边界线的笔划中逐渐变化。 颜色渐变在起始边界线处有一种颜色，在结束边界线有另一种颜色。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>画笔创建</td><td>GdipCreatePen1</td><td>画笔创建(颜色,小数 宽度,单位,@画笔)</td><td>创建使用指定颜色和宽度的画笔对象。<a href="#画笔单位">画笔单位</a></td></tr>
<tr><td>画笔新建</td><td>GdipCreatePen2</td><td>画笔新建(刷子,小数 宽度,单位,@画笔)</td><td>使用指定刷子颜色和宽度创建画笔对象。<a href="#画笔单位">画笔单位</a></td></tr>
<tr><td>画笔克隆</td><td>GdipClonePen</td><td>画笔克隆(画笔,@新笔)</td><td>复制画笔对象。</td></tr>
<tr><td>画笔删除</td><td>GdipDeletePen</td><td>画笔删除(画笔)</td><td>释放画笔对象使用的资源。</td></tr>
<tr><td>笔改宽度</td><td>GdipSetPenWidth</td><td>笔改宽度(画笔,小数 宽度)</td><td>设置此画笔对象的宽度。</td></tr>
<tr><td>笔取宽度</td><td>GdipGetPenWidth</td><td>笔取宽度(画笔,小数 @宽度)</td><td>获取此画笔对象的宽度。</td></tr>
<tr><td>笔改单位</td><td>GdipSetPenUnit</td><td>笔改单位(画笔,单位)</td><td>设置此画笔对象的度量单位。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>笔取单位</td><td>GdipGetPenUnit</td><td>笔取单位(画笔,@单位)</td><td>获取此画笔对象的度量单位。<a href="#度量单位">度量单位</a></td></tr>
<tr><td>笔改样式</td><td>GdipSetPenLineCap197819</td><td>笔改样式(画笔,开始,结束,短线)</td><td>设置用此笔绘制的线条中<a href="#线头形状">开始、结束</a>和<a href="#短线形状">短划线</a>的上限样式。</td></tr>
<tr><td>笔改起点</td><td>GdipSetPenStartCap</td><td>笔改起点(画笔,形状)</td><td>设置此画笔对象的起始上限。<a href="#线头形状">线头形状</a></td></tr>
<tr><td>笔改终点</td><td>GdipSetPenEndCap </td><td>笔改终点(画笔,形状)</td><td>设置此画笔对象的结束上限。<a href="#线头形状">线头形状</a></td></tr>
<tr><td>笔改短划</td><td>GdipSetPenDashCap197819 </td><td>笔改短划(画笔,形状)</td><td>设置此画笔对象的短划线大写样式。<a href="#短线形状">短划线形状</a></td></tr>
<tr><td>笔取起点</td><td>GdipGetPenStartCap </td><td>笔取起点(画笔,@形状)</td><td>获取此画笔对象的起始上限。<a href="#线头形状">线头形状</a></td></tr>
<tr><td>笔取终点</td><td>GdipGetPenEndCap </td><td>笔取终点(画笔,@形状)</td><td>获取此画笔对象的结束上限。<a href="#线头形状">线头形状</a></td></tr>
<tr><td>笔取短划</td><td>GdipGetPenDashCap197819</td><td>笔取短划(画笔,@形状)</td><td>获取此画笔对象的短划线大写样式。<a href="#短线形状">短划线形状</a></td></tr>
<tr><td>笔改线结</td><td>GdipSetPenLineJoin</td><td>笔改线结(画笔,方式)</td><td>设置此画笔对象的线条联接。<a href="#线条连接">线条连接</a></td></tr>
<tr><td>笔取线结</td><td>GdipGetPenLineJoin</td><td>笔取线结(画笔,@方式)</td><td>获取此画笔对象的线条联接。<a href="#线条连接">线条连接</a></td></tr>
<tr><td>笔改定起</td><td>GdipSetPenCustomStartCap </td><td>笔改定起(画笔,线帽)</td><td>设置此画笔对象的自定义起始上限。</td></tr>
<tr><td>笔取定起</td><td>GdipGetPenCustomStartCap </td><td>笔取定起(画笔,@线帽)</td><td>获取此画笔对象的自定义起始上限。</td></tr>
<tr><td>笔改定终</td><td>GdipSetPenCustomEndCap </td><td>笔改定终(画笔,线帽)</td><td>设置此画笔对象的自定义结束上限。</td></tr>
<tr><td>笔取定终</td><td>GdipGetPenCustomEndCap </td><td>笔取定终(画笔,@线帽)</td><td>获取此画笔对象的自定义结束上限。</td></tr>
<tr><td>笔改接长</td><td>GdipSetPenMiterLimit </td><td>笔改接长(画笔,小数 长度)</td><td>设置此画笔对象的斜接长度。</td></tr>
<tr><td>笔取接长</td><td>GdipGetPenMiterLimit</td><td>笔取接长(画笔,小数 @长度)</td><td>获取此画笔对象的斜接长度。</td></tr>
<tr><td>笔改对齐</td><td>GdipSetPenMode </td><td>笔改对齐(画笔,方式)</td><td>设置此画笔对象的对齐方式。0=线条中心对齐,1=多边形内边对齐</td></tr>
<tr><td>笔取对齐</td><td>GdipGetPenMode </td><td>笔取对齐(画笔,@方式)</td><td>获取此画笔对象的对齐方式。0=线条中心对齐,1=多边形内边对齐</td></tr>
<tr><td>笔改转矩</td><td>GdipSetPenTransform </td><td>笔改转矩(画笔,对象)</td><td>设置此画笔对象的世界转换矩阵。</td></tr>
<tr><td>笔取转矩</td><td>GdipGetPenTransform </td><td>笔取转矩(画笔,@对象)</td><td>获取此画笔对象的世界转换矩阵。</td></tr>
<tr><td>笔转标识</td><td>GdipResetPenTransform </td><td>笔转标识(画笔)</td><td>设置此画笔对象的世界转换矩阵设置为标识矩阵。</td></tr>
<tr><td>笔乘矩阵</td><td>GdipMultiplyPenTransform </td><td>笔乘矩阵(画笔,矩阵,顺序)</td><td>使用自身和另一个矩阵的乘积更新此画笔对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>笔乘转换</td><td>GdipTranslatePenTransform </td><td>笔乘转换(画笔,小数 x缩,小数 y缩,顺序)</td><td>此画笔对象的世界转换矩阵设置为等于自身和转换矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>笔乘缩放</td><td>GdipScalePenTransform </td><td>笔乘缩放(画笔,小数 x缩,小数 y缩,顺序)</td><td>此画笔对象的世界转换矩阵设置为等于自身和缩放矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>笔乘旋转</td><td>GdipRotatePenTransform </td><td>笔乘旋转(画笔,小数 角度,顺序)</td><td>使用自身乘积和旋转矩阵更新此画笔对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>笔改颜色</td><td>GdipSetPenColor</td><td>笔改颜色(画笔,颜色)</td><td>设置此画笔对象的颜色。</td></tr>
<tr><td>笔取颜色</td><td>GdipGetPenColor</td><td>笔取颜色(画笔,@颜色)</td><td>获取此画笔对象的颜色。</td></tr>
<tr><td>笔改刷子</td><td>GdipSetPenBrushFill</td><td>笔改刷子(画笔,刷子)</td><td>设置此画笔对象用于填充线条的刷子对象。</td></tr>
<tr><td>笔取刷子</td><td>GdipGetPenBrushFill</td><td>笔取刷子(画笔,@刷子)</td><td>获取此画笔对象用于填充线条的刷子对象。</td></tr>
<tr><td>笔取类型</td><td>GdipGetPenFillType</td><td>笔取类型(画笔,颜色)</td><td>获取此画笔对象设置的类型。</td></tr>
<tr><td>笔取线样</td><td>GdipGetPenDashStyle</td><td>笔取线样(画笔,@颜色)</td><td>获取此画笔对象设置的短划线样式。<a href="#线条样式">线条样式</a></td></tr>
<tr><td>笔改线样</td><td>GdipSetPenDashStyle</td><td>笔改线样(画笔,颜色)</td><td>设置此画笔对象设置的短划线样式。<a href="#线条样式">线条样式</a></td></tr>
<tr><td>笔取距离</td><td>GdipGetPenDashOffset </td><td>笔取距离(画笔,小数 @距离)</td><td>获取此画笔从行开始到虚线中第一个空格开始的距离。</td></tr>
<tr><td>笔改距离</td><td>GdipSetPenDashOffset </td><td>笔改距离(画笔,小数 距离)</td><td>设置此画笔从行开始到虚线中第一个空格开始的距离。</td></tr>
<tr><td>笔短线数</td><td>GdipGetPenDashCount</td><td>笔短线数(画笔,@数量)</td><td>获取短划线图案数组中的元素数。</td></tr>
<tr><td>笔改短线</td><td>GdipSetPenDashArray</td><td>笔改短线(画笔,小数 组,数量)</td><td>设置此画笔的自定义短划线和空格的数组。</td></tr>
<tr><td>笔取短线</td><td>GdipGetPenDashArray</td><td>笔取短线(画笔,小数 @组,数量)</td><td>获取此画笔自定义短划线和空格的数组。</td></tr>
<tr><td>笔复合数</td><td>GdipGetPenCompoundCount</td><td>笔复合数(画笔,@数量)</td><td>获取复合数组中的元素数。</td></tr>
<tr><td>笔改复合</td><td>GdipSetPenCompoundArray</td><td>笔改复合(画笔,小数 组,数量)</td><td>设置此画笔的复合数组。</td></tr>
<tr><td>笔取复合</td><td>GdipGetPenCompoundArray</td><td>笔取复合(画笔,小数 组,数量)</td><td>获取此画笔的复合数组。</td></tr>
<tr><td>画刷克隆</td><td>GdipCloneBrush</td><td>画刷克隆(画刷,@刷子)</td><td>基于此画刷创建新的画刷对象。</td></tr>
<tr><td>画刷删除</td><td>GdipDeleteBrush</td><td>画刷删除(画刷)</td><td>清理画刷对象使用的资源。</td></tr>
<tr><td>画刷类型</td><td>GdipGetBrushType</td><td>画刷类型(画刷,@类型)</td><td>获取此画刷的类型。<a href="#画刷类型">画刷类型</a></td></tr>
<tr><td>阴影画刷</td><td>GdipCreateHatchBrush</td><td>阴影画刷(样式,前景,背景,@刷子)</td><td>基于<a href="#阴影图案">阴影样式</a>、前景色和背景色创建 阴影画刷 对象。</td></tr>
<tr><td>影刷样式</td><td>GdipGetHatchStyle</td><td>影刷样式(刷子,@样式)</td><td>获取此阴影画笔的<a href="#阴影图案">阴影样式</a>。</td></tr>
<tr><td>影刷前景</td><td>GdipGetHatchForegroundColor</td><td>影刷前景(刷子,@颜色)</td><td>获取此阴影画笔的前景色。</td></tr>
<tr><td>影刷背景</td><td>GdipGetHatchBackgroundColor</td><td>影刷背景(刷子,@颜色)</td><td>获取此阴影画笔的背景色。</td></tr>
<tr><td>纯色画刷</td><td>GdipCreateSolidFill</td><td>纯色画刷(颜色,@纯刷)</td><td>基于颜色创建 纯色画刷 对象</td></tr>
<tr><td>纯刷改色</td><td>GdipSetSolidFillColor</td><td>纯刷改色(纯刷,颜色)</td><td>设置此纯色画笔的颜色。</td></tr>
<tr><td>纯刷取色</td><td>GdipGetSolidFillColor</td><td>纯刷取色(纯刷,@颜色)</td><td>获取此纯色画笔的颜色。</td></tr>
<tr><td>线性细刷</td><td>GdipCreateLineBrush</td><td>线性细刷(起点,终点,起色,末色,@线刷)</td><td>从一组边界点和边界颜色创建线性画刷对象。坐标点为小数</td></tr>
<tr><td>线性刷子</td><td>GdipCreateLineBrushI</td><td>线性刷子(起点,终点,起色,末色,@线刷)</td><td>从一组边界点和边界颜色创建线性画刷对象。坐标点为整数</td></tr>
<tr><td>线性宽刷</td><td>GdipCreateLineBrushFromRect</td><td>线性宽刷(矩形,起色,末色,<a href="#线刷方向">线刷方向</a>,<a href="#平铺模式">模式</a>,@线刷)</td><td>基于矩形和模式创建线性画刷对象。矩形为小数</td></tr>
<tr><td>线性排刷</td><td>GdipCreateLineBrushFromRectI</td><td>线性排刷(矩形,起色,末色,<a href="#线刷方向">线刷方向</a>,<a href="#平铺模式">模式</a>,@线刷)</td><td>基于矩形和方向模式创建线性画刷对象。矩形为整数</td></tr>
<tr><td>线性粗刷</td><td>GdipCreateLineBrushFromRectWithAngle</td><td>线性粗刷(矩形,起色,末色,角度,缩放,<a href="#平铺模式">模式</a>,@线刷)</td><td>基于矩形和角度模式创建线性画刷对象。矩形为小数;缩放为真时方向线角度为中心角(小数)</td></tr>
<tr><td>线性大刷</td><td>GdipCreateLineBrushFromRectWithAngleI</td><td>线性大刷(矩形,起色,末色,角度,缩放,<a href="#平铺模式">模式</a>,@线刷)</td><td>基于矩形和角度模式创建线性画刷对象。矩形为整数;缩放为假时方向线角度为顶角(小数)</td></tr>
<tr><td>线刷改色</td><td>GdipSetLineColors</td><td>线刷改色(线刷,起始颜色,结束颜色)</td><td>设置此线性渐变画笔的起始颜色和结束颜色。</td></tr>
<tr><td>线刷取色</td><td>GdipGetLineColors</td><td>线刷取色(线刷,@颜色组)</td><td>获取此线性渐变画笔的起始颜色和结束颜色。</td></tr>
<tr><td>线刷边界</td><td>GdipGetLineRect</td><td>线刷边界(线刷,@矩形)</td><td>获取定义渐变边界的矩形。矩形为小数</td></tr>
<tr><td>线刷矩形</td><td>GdipGetLineRectI</td><td>线刷矩形(线刷,@矩形)</td><td>获取定义渐变边界的矩形。矩形为整数</td></tr>
<tr><td>线刷修正</td><td>GdipSetLineGammaCorrection</td><td>线刷修正(线刷,是否)</td><td>指定是否为此线性渐变画笔启用伽玛校正。</td></tr>
<tr><td>线刷校正</td><td>GdipGetLineGammaCorrection</td><td>线刷校正(线刷,@是否)</td><td>获取是否启用了伽玛校正。</td></tr>
<tr><td>线刷混数</td><td>GdipGetLineBlendCount</td><td>线刷混数(线刷,@数量)</td><td>获取当前设置的混合因子的数目。</td></tr>
<tr><td>线刷取混</td><td>GdipGetLineBlend</td><td>线刷取混(线刷,@因子,@位置,数量)</td><td>获取此线性渐变画笔混合因子和混合位置。混合因子和位置为小数值数组</td></tr>
<tr><td>线刷改混</td><td>GdipSetLineBlend</td><td>线刷改混(线刷,因子,位置,数量)</td><td>设置此线性渐变画笔混合因子和混合位置。混合因子和位置为小数值数组</td></tr>
<tr><td>线刷插数</td><td>GdipGetLinePresetBlendCount</td><td>线刷插数(线刷,@数量)</td><td>获取当前设置为为此线性渐变画笔内插的颜色数。</td></tr>
<tr><td>线刷取插</td><td>GdipGetLineColors</td><td>线刷取插(线刷,@颜色组,@位置组,数量)</td><td>获取当前设置为为此线性渐变画笔内插的颜色及其相应的混合位置。</td></tr>
<tr><td>线刷改插</td><td>GdipSetLineColors</td><td>线刷改插(线刷,颜色组,位置组,数量)</td><td>设置要为此线性渐变画笔插入的颜色及其相应的混合位置。</td></tr>
<tr><td>线刷钟形</td><td>GdipSetLineSigmaBlend</td><td>线刷钟形(线刷,边距,混色)</td><td>设置此线性渐变画笔的混合形状，以基于钟形曲线创建自定义混合。<br>边距是边界线之间距离的百分比，混色是始末颜色混合百分比,都是0.0 到1.0 之间。</td></tr>
<tr><td>线刷三角</td><td>GdipSetLineLinearBlend</td><td>线刷三角(线刷,边距,混色)</td><td>设置此线性渐变画笔的混合形状，以基于三角形创建自定义混合。<br>边距是边界线之间距离的百分比，混色是始末颜色混合百分比,都是0.0 到1.0 之间。</td></tr>
<tr><td>线改平铺</td><td>GdipSetLineWrapMode</td><td>线改平铺(线刷,模式)</td><td>设置此线性渐变画笔的<a href="#平铺模式">环绕模式</a>。</td></tr>
<tr><td>线取平铺</td><td>GdipGetLineWrapMode</td><td>线取平铺(线刷,@模式)</td><td>获取此画笔的<a href="#平铺模式">换行模式</a>。确定如何平铺区域。</td></tr>
<tr><td>线取转矩</td><td>GdipGetLineTransform</td><td>线取转矩(线刷,@矩阵)</td><td>获取此线性渐变画笔的转换矩阵。</td></tr>
<tr><td>线改转矩</td><td>GdipSetLineTransform </td><td>线改转矩(线刷,矩阵)</td><td>设置此线性渐变画笔的转换矩阵。</td></tr>
<tr><td>线刷标识</td><td>GdipResetLineTransform</td><td>线刷标识(线刷,@矩阵)</td><td>将此线性渐变画笔的转换矩阵重置为标识矩阵。这意味着不会发生任何转换。</td></tr>
<tr><td>线乘矩阵</td><td>GdipMultiplyLineTransform </td><td>线乘矩阵(线刷,矩阵,顺序)</td><td>使用自身和另一个矩阵的乘积更新此线刷对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>线乘转换</td><td>GdipTranslateLineTransform </td><td>线乘转换(线刷,小数 x缩,小数 y缩,顺序)</td><td>此线刷对象的世界转换矩阵设置为等于自身和转换矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>线乘缩放</td><td>GdipScaleLineTransform </td><td>线乘缩放(线刷,小数 x缩,小数 y缩,顺序)</td><td>此线刷对象的世界转换矩阵设置为等于自身和缩放矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>线乘旋转</td><td>GdipRotateLineTransform </td><td>线乘旋转(线刷,小数 角度,顺序)</td><td>使用自身乘积和旋转矩阵更新此线刷对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
</table><p><font color="#0000FF" size=6><a name="度量单位">度量单位</a>-Unit 枚举指定给定数据类型的度量单位。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>单位世界</td><td>UnitWorld</td><td>0</td><td>指定世界坐标，一个非物理单位。</td></tr>
<tr><td>单位显示</td><td>UnitDisplay</td><td>1</td><td>指定显示单位。 例如，如果显示设备是监视器，则单位为 1 像素。</td></tr>
<tr><td>单位像素</td><td>UnitPixel</td><td>2</td><td>指定单位为 1 像素。</td></tr>
<tr><td>单位打印</td><td>UnitPoint</td><td>3</td><td>指定单位为 1 磅(打印点)或 1/72 英寸。</td></tr>
<tr><td>单位英寸</td><td>UnitInch</td><td>4</td><td>指定单位为 1 英寸。</td></tr>
<tr><td>单位文档</td><td>UnitDocument</td><td>5</td><td>指定单位为 1/300 英寸。</td></tr>
<tr><td>单位毫米</td><td>UnitMillimeter</td><td>6</td><td>指定单位为 1 毫米。</td></tr>
</table><p><font color="#0000FF" size=6><a name="画刷类型">画刷的类型</a>-常量数值</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>实心画刷</td><td>BrushTypeSolidColor</td><td>0</td><td>指示 实心 类型的画笔。 纯色画笔可绘制不透明或透明的单一恒定颜色。</td></tr>
<tr><td>填充画刷</td><td>BrushTypeHatchFill</td><td>1</td><td>阴影画笔绘制背景，并在该背景上绘制线条、点、短划线、方块、十字线或这些图案的某种变体。<br> 阴影画笔由两种颜色组成：一种用于背景，一种用于背景上的图案。 背景的颜色称为背景色，图案的颜色称为前景色。</td></tr>
<tr><td>纹理画刷</td><td>BrushTypeTextureFill</td><td>2</td><td>纹理画笔绘制图像。 图像或纹理 是指定图像的一部分或指定图像的缩放版本。<br> 图像类型 (图元文件或非元数据) 确定纹理是图像的一部分还是图像的缩放版本。</td></tr>
<tr><td>渐变画刷</td><td>BrushTypePathGradient</td><td>3</td><td>路径渐变画笔绘制颜色渐变，其中颜色从中心点向外变化，变为由闭合曲线或路径定义的边界。<br> 颜色渐变在中心点有一种颜色，在边界处有一种或多种颜色。</td></tr>
<tr><td>线性画刷</td><td>BrushTypeLinearGradient</td><td>4</td><td>线性渐变画笔绘制颜色渐变，其中颜色从线性渐变画笔的起始边界线到线性渐变画笔的结束边界线均匀变化。<br> 颜色渐变垂直于线性渐变画笔的边界线，在笔划中从起始边界线到结束边界线逐渐变化。<br>颜色渐变在起始边界线具有一种颜色，在结束边界线具有另一种颜色。</td></tr>
</table><p><font color="#0000FF" size=6><a name="线条连接">线条连接</a>-指定如何联接由同一笔绘制且两端相交的两条线。 在两条线的交汇处，线联接使联接看起来更连续。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>LineJoinMiter</td><td>0</td><td>指定斜联接。 这将产生一个锐角或切除角，具体取决于斜联接的长度是否超过斜联接限制。</td></tr>
<tr><td>LineJoinBevel</td><td>1</td><td>指定成斜角的联接。 这将产生一个斜角。</td></tr>
<tr><td>LineJoinRound</td><td>2</td><td>指定圆形联接。 这将在两条线之间产生平滑的圆弧。</td></tr>
<tr><td>LineJoinMiterClipped</td><td>3</td><td>指定斜联接。 这将产生一个锐角或斜角，具体取决于斜联接的长度是否超过斜联接限制。</td></tr>
</table><p><font color="#0000FF" size=6><a name="线条样式">线条样式</a>-绘制的线条的线条样式。可以使用多种预定义样式或自定义样式之一绘制线条。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>DashStyleSolid</td><td>0</td><td>指定实线。</td></tr>
<tr><td>DashStyleDash</td><td>1</td><td>指定虚线。</td></tr>
<tr><td>DashStyleDot</td><td>2</td><td>指定虚线。</td></tr>
<tr><td>DashStyleDashDot</td><td>3</td><td>指定交替的虚线-点线。</td></tr>
<tr><td>DashStyleDashDotDot</td><td>4</td><td>指定交替的虚线-点-点线。</td></tr>
<tr><td>DashStyleCustom</td><td>5</td><td>指定用户定义的自定义虚线。</td></tr>
</table><p><font color="#0000FF" size=6><a name="线刷方向">线刷方向</a>-LinearGradientMode 枚举指定线性渐变画笔的颜色更改方向。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>LinearGradientModeHorizontal</td><td>0</td><td>指定要从屏幕左侧到屏幕右侧的水平方向变化的颜色。</td></tr>
<tr><td>LinearGradientModeVertical</td><td>1</td><td>指定要从显示器顶部到屏幕底部的垂直方向变化的颜色。</td></tr>
<tr><td>LinearGradientModeForwardDiagonal</td><td>2</td><td>指定要从屏幕左上角到右下角的对角线方向更改的颜色。</td></tr>
<tr><td>LinearGradientModeBackwardDiagonal</td><td>3</td><td>指定要从屏幕右上角到左下角的向后对角方向变化的颜色。</td></tr>
</table><p><font color="#0000FF" size=6><a name="平铺模式">平铺模式</a>-WrapMode 枚举指定如何使用图像的重复副本来平铺区域。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>WrapModeTile</td><td>0</td><td>指定不翻转的平铺。</td></tr>
<tr><td>WrapModeTileFlipX</td><td>1</td><td>指定在一行中从一个磁贴移动到下一个磁贴时水平翻转磁贴。</td></tr>
<tr><td>WrapModeTileFlipY</td><td>2</td><td>指定在列中从一个磁贴移动到下一个磁贴时垂直翻转磁贴。</td></tr>
<tr><td>WrapModeTileFlipXY</td><td>3</td><td>指定在沿行移动时水平翻转磁贴，在沿列移动时垂直翻转磁贴。</td></tr>
<tr><td>WrapModeClamp</td><td>4</td><td>指定不进行平铺。</td></tr>
</table><p><font color="#0000FF" size=6><a name="阴影图案">阴影图案</a>-HatchStyle 枚举指定由 阴影画刷使用的阴影图案。 阴影图案由纯色背景色和在背景上绘制的线条组成。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>HatchStyleHorizontal</td><td>0</td><td>指定水平线。</td></tr>
<tr><td>HatchStyleVertical</td><td>1</td><td>指定垂直线。</td></tr>
<tr><td>HatchStyleForwardDiagonal</td><td>2</td><td>指定从顶点到下点向右倾斜的对角线。 这些行已抗锯齿。</td></tr>
<tr><td>HatchStyleBackwardDiagonal</td><td>3</td><td>指定从顶点到下点向左倾斜的对角线。 这些行已抗锯齿。</td></tr>
<tr><td>HatchStyleCross</td><td>4</td><td>指定以 90 度角交叉的水平线和垂直线。</td></tr>
<tr><td>HatchStyleDiagonalCross</td><td>5</td><td>指定以 90 度角交叉的对角线和后向对角线。 这些行已抗锯齿。</td></tr>
<tr><td>HatchStyle05Percent</td><td>6</td><td>指定 5% 阴影。 前景色与背景色的比率为 5：100。</td></tr>
<tr><td>HatchStyle10Percent</td><td>7</td><td>指定 10% 阴影。 前景色与背景色的比率为 10：100。</td></tr>
<tr><td>HatchStyle20Percent</td><td>8</td><td>指定 20% 阴影。 前景色与背景色的比率为 20：100。</td></tr>
<tr><td>HatchStyle25Percent</td><td>9</td><td>指定 25% 阴影。 前景色与背景色的比率为 25：100。</td></tr>
<tr><td>HatchStyle30Percent</td><td>10</td><td>指定 30% 阴影。 前景色与背景色的比率为 30：100。</td></tr>
<tr><td>HatchStyle40Percent</td><td>11</td><td>指定 40% 阴影。 前景色与背景色的比率为 40：100。</td></tr>
<tr><td>HatchStyle50Percent</td><td>12</td><td>指定 50% 阴影。 前景色与背景色的比率为 50：100。</td></tr>
<tr><td>HatchStyle60Percent</td><td>13</td><td>指定 60% 阴影。 前景色与背景色的比率为 60：100。</td></tr>
<tr><td>HatchStyle70Percent</td><td>14</td><td>指定 70% 阴影。 前景色与背景色的比率为 70：100。</td></tr>
<tr><td>HatchStyle75Percent</td><td>15</td><td>指定 75% 阴影。 前景色与背景色的比率为 75：100。</td></tr>
<tr><td>HatchStyle80Percent</td><td>16</td><td>指定 80% 阴影。 前景色与背景色的比例为 80:100。</td></tr>
<tr><td>HatchStyle90Percent</td><td>17</td><td>指定 90% 阴影。 前景色与背景色的比率为 90：100。</td></tr>
<tr><td>HatchStyleLightDownwardDiagonal</td><td>18</td><td>指定从顶点到底点向右倾斜的对角线，其间距比 HatchStyleForwardDiagonal 更近 50%，但不抗锯齿。</td></tr>
<tr><td>HatchStyleLightUpwardDiagonal</td><td>19</td><td>指定从顶点到底部点向左倾斜的对角线，其间距比 HatchStyleBackwardDiagonal 更近 50%，但不抗锯齿。</td></tr>
<tr><td>HatchStyleDarkDownwardDiagonal</td><td>20</td><td>指定从顶点到底部点向右倾斜的对角线，其间距比 HatchStyleForwardDiagonal 更近 50%，并且宽度是 HatchStyleForwardDiagonal 的两倍，但不抗锯齿。</td></tr>
<tr><td>HatchStyleDarkUpwardDiagonal</td><td>21</td><td>指定从顶点到底部点向左倾斜的对角线，其间距比 HatchStyleBackwardDiagonal 更近 50%，并且宽度是 HatchStyleBackwardDiagonal 的两倍，但不抗锯齿。</td></tr>
<tr><td>HatchStyleWideDownwardDiagonal</td><td>22</td><td>指定从顶点到下点向右倾斜的对角线，其间距与 HatchStyleForwardDiagonal 相同，并且宽度为 HatchStyleForwardDiagonal 的三倍，但不抗锯齿。</td></tr>
<tr><td>HatchStyleWideUpwardDiagonal</td><td>23</td><td>指定从顶点到下点向左倾斜的对角线，其间距与 HatchStyleBackwardDiagonal 相同，并且宽度是 HatchStyleBackwardDiagonal 的三倍，但不抗锯齿。</td></tr>
<tr><td>HatchStyleLightVertical</td><td>24</td><td>指定间距比 HatchStyleVertical 更近 50% 的垂直线。</td></tr>
<tr><td>HatchStyleLightHorizontal</td><td>25</td><td>指定间距比 HatchStyleHorizontal 更近 50% 的水平线。</td></tr>
<tr><td>HatchStyleNarrowVertical</td><td>26</td><td>指定间距比 HatchStyleVertical (更近 75% 或比 HatchStyleLightVertical) 更近 25% 的垂直线。</td></tr>
<tr><td>HatchStyleNarrowHorizontal</td><td>27</td><td>指定间距比 HatchStyleHorizontal ( 更近 75% 或比 HatchStyleLightHorizontal) 更近 25% 的水平线。</td></tr>
<tr><td>HatchStyleDarkVertical</td><td>28</td><td>指定间距比 HatchStyleVerical 更近 50% 且宽度是 HatchStyleVertical 两倍的垂直线。</td></tr>
<tr><td>HatchStyleDarkHorizontal</td><td>29</td><td>指定间距比 HatchStyleHorizontal 更近 50% 且宽度是 HatchStyleHorizontal 两倍的水平线。</td></tr>
<tr><td>HatchStyleDashedDownwardDiagonal</td><td>30</td><td>指定由正对角线组成的水平线。</td></tr>
<tr><td>HatchStyleDashedUpwardDiagonal</td><td>31</td><td>指定由向后对角线组成的水平线。</td></tr>
<tr><td>HatchStyleDashedHorizontal</td><td>32</td><td>指定水平虚线。</td></tr>
<tr><td>HatchStyleDashedVertical</td><td>33</td><td>指定垂直虚线。</td></tr>
<tr><td>HatchStyleSmallConfetti</td><td>34</td><td>指定带有五彩纸屑外观的阴影。</td></tr>
<tr><td>HatchStyleLargeConfetti</td><td>35</td><td>指定具有五彩纸屑的外观的阴影，它由比 HatchStyleSmallConfetti 更大的部分组成。</td></tr>
<tr><td>HatchStyleZigZag</td><td>36</td><td>指定锯齿形的水平线。</td></tr>
<tr><td>HatchStyleWave</td><td>37</td><td>指定平铺的水平线。</td></tr>
<tr><td>HatchStyleDiagonalBrick</td><td>38</td><td>指定一个阴影，该阴影具有向后对角方向铺设的砖墙的外观。</td></tr>
<tr><td>HatchStyleHorizontalBrick</td><td>39</td><td>指定具有水平放置砖墙外观的阴影。</td></tr>
<tr><td>HatchStyleWeave</td><td>40</td><td>指定具有织物外观的阴影。</td></tr>
<tr><td>HatchStylePlaid</td><td>41</td><td>指定具有格子花呢材料外观的阴影。</td></tr>
<tr><td>HatchStyleDivot</td><td>42</td><td>指定具有草皮层外观的阴影。</td></tr>
<tr><td>HatchStyleDottedGrid</td><td>43</td><td>指定以 90 度角交叉的水平和垂直虚线。</td></tr>
<tr><td>HatchStyleDottedDiamond</td><td>44</td><td>指定以 90 度角交叉的正对角线和后向对角虚线。</td></tr>
<tr><td>HatchStyleShingle</td><td>45</td><td>指定一个阴影，该阴影具有在向前对角线方向放置的带状带状体的外观。</td></tr>
<tr><td>HatchStyleTrellis</td><td>46</td><td>指定具有格架外观的阴影。</td></tr>
<tr><td>HatchStyleSphere</td><td>47</td><td>指定具有球体棋盘外观的阴影。</td></tr>
<tr><td>HatchStyleSmallGrid</td><td>48</td><td>指定以 90 度角交叉且间距比 HatchStyleCross 更近 50% 的水平线和垂直线。</td></tr>
<tr><td>HatchStyleSmallCheckerBoard</td><td>49</td><td>指定带有棋盘外观的阴影。</td></tr>
<tr><td>HatchStyleLargeCheckerBoard</td><td>50</td><td>指定具有棋盘外观的阴影，其正方形是 HatchStyleSmallCheckerBoard 的两倍。</td></tr>
<tr><td>HatchStyleOutlinedDiamond</td><td>51</td><td>指定以 90 度角交叉但不抗锯齿的正对角线和后向对角线。</td></tr>
<tr><td>HatchStyleSolidDiamond</td><td>52</td><td>指定具有对角放置的棋盘外观的阴影。</td></tr>
<tr><td>HatchStyleTotal</td><td>53</td><td>指定无阴影，从而允许画笔透明。</td></tr>
<tr><td>HatchStyleLargeGrid</td><td>54</td><td>指定 HatchStyleCross。</td></tr>
<tr><td>HatchStyleMin</td><td>55</td><td>指定 HatchStyleHorizonal。</td></tr>
<tr><td>HatchStyleMax</td><td>56</td><td>指定 HatchStyleSolidDiamond。</td></tr>
</table><p><font color="#0000FF" size=6><a name="定制线帽">定制线帽</a></font></p>
自定义线帽对象定义用于绘制线条末端的图形样式。它可以是各种形状，如方形、圆形或菱形。 自定义线条上限由绘制它的路径定义。<br>
使用 笔 对象绘制形状轮廓或使用 画刷 对象填充内部来绘制路径。线帽可以在线条的任一端或两端使用。 可以在端帽和线条之间调整间距。<br>
可调整箭头帽 对象是 自定义线帽 的子类对象。 此类生成类似于箭头的线条帽,简称箭帽。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>线帽创建</td><td>GdipCreateCustomLineCap</td><td>线帽创建(填充,描边,形状,插值,@线帽)</td><td>根据填充和描边路径对象、<a href="#线头形状">线头形状</a>、基本插值（小数）创建自定义线帽。</td></tr>
<tr><td>线帽删除</td><td>GdipDeleteCustomLineCap</td><td>线帽删除(线帽)</td><td>清理自定义线帽对象使用的资源。</td></tr>
<tr><td>线帽克隆</td><td>GdipCloneCustomLineCap</td><td>线帽克隆(线帽,@线帽)</td><td>复制现有自定义线帽对象到新的线帽对象。</td></tr>
<tr><td>线帽类型</td><td>GdipGetCustomLineCapType</td><td>线帽类型(线帽,@类型)</td><td>获取自定义线帽对象的<a href="#线帽类型">线帽类型</a>。</td></tr>
<tr><td>帽改线头</td><td>GdipSetCustomLineCapStrokeCaps</td><td>帽改线头(线帽,开始,结束)</td><td>设置自定义线帽对象开始和结束<a href="#线头形状">线头形状</a>。</td></tr>
<tr><td>帽取线头</td><td>GdipGetCustomLineCapStrokeCaps</td><td>帽取线头(线帽,@开始,@结束)</td><td>获取自定义线帽对象开始和结束<a href="#线头形状">线头形状</a>。</td></tr>
<tr><td>帽改线结</td><td>GdipSetCustomLineCapStrokeJoin</td><td>帽改线结(线帽,样式)</td><td>设置自定义线帽对象的<a href="#线头连接">线条联接样式</a>。</td></tr>
<tr><td>帽取线结</td><td>GdipGetCustomLineCapStrokeJoin</td><td>帽取线结(线帽,@样式)</td><td>设置自定义线帽对象的<a href="#线头连接">线条联接样式</a>。</td></tr>
<tr><td>帽改末尾</td><td>GdipSetCustomLineCapBaseCap</td><td>帽改末尾(线帽,形状)</td><td>设置自定义线帽对象用作线条末尾的顶端基帽的<a href="#线头形状">线头形状</a>。</td></tr>
<tr><td>帽取末尾</td><td>GdipGetCustomLineCapBaseCap</td><td>帽取末尾(线帽,形状)</td><td>获取自定义线帽对象用作线条末尾的顶端基帽的<a href="#线头形状">线头形状</a>。</td></tr>
<tr><td>帽改插值</td><td>GdipSetCustomLineCapBaseInset</td><td>帽改插值(线帽,小数 插值)</td><td>设置此自定义线帽的基内插值。这是线条的终点和起始之间的距离。</td></tr>
<tr><td>帽取插值</td><td>GdipGetCustomLineCapBaseInset</td><td>帽取插值(线帽,小数 @插值)</td><td>获取此自定义线帽的基内插值。这是线条的终点和起始之间的距离。</td></tr>
<tr><td>帽改缩放</td><td>GdipSetCustomLineCapWidthScale</td><td>帽改缩放(线帽,比例)</td><td>设置此自定义线帽对象的宽度缩放比例。这是相对于绘制线条的笔宽缩放的量。默认值 1.0 不会缩放线条上限。</td></tr>
<tr><td>帽取缩放</td><td>GdipGetCustomLineCapWidthScale</td><td>帽取缩放(线帽,@比例)</td><td>获取此自定义线帽对象的宽度缩放比例。这是相对于绘制线条的笔宽缩放的量。默认值 1.0 不会缩放线条上限。</td></tr>
<tr><td>箭帽创建</td><td>GdipCreateAdjustableArrowCap</td><td>箭帽创建(高度,宽度,填充,@箭帽)</td><td>创建具有指定小数值高度和宽度的可调整箭头线帽。填充可以是真或假。中间的插入值默认为零。</td></tr>
<tr><td>箭帽改高</td><td>GdipSetAdjustableArrowCapHeight</td><td>箭帽改高(箭帽,小数 高度)</td><td>设置箭头帽的高度。这是从箭头的底部到其顶点的距离。</td></tr>
<tr><td>箭帽取高</td><td>GdipGetAdjustableArrowCapHeight</td><td>箭帽取高(箭帽,小数 @高度)</td><td>获取箭头帽的高度。这是从箭头的底部到其顶点的距离。</td></tr>
<tr><td>箭帽改宽</td><td>GdipSetAdjustableArrowCapWidth</td><td>箭帽改宽(箭帽,小数 宽度)</td><td>设置箭头帽的宽度。这是箭头底部端点之间的距离。</td></tr>
<tr><td>箭帽取宽</td><td>GdipGetAdjustableArrowCapWidth</td><td>箭帽取宽(箭帽,小数 @宽度)</td><td>获取箭头帽的宽度。这是箭头底部端点之间的距离。</td></tr>
<tr><td>箭帽改插</td><td>GdipSetAdjustableArrowCapMiddleInset</td><td>箭帽改插(箭帽,小数 插值)</td><td>设置箭头帽的底部中点向顶点移动的单位数。</td></tr>
<tr><td>箭帽取插</td><td>GdipGetAdjustableArrowCapMiddleInset</td><td>箭帽取插(箭帽,小数 @插值)</td><td>获取箭头帽的底部中点向顶点移动的单位数。</td></tr>
<tr><td>箭帽改实</td><td>GdipSetAdjustableArrowCapFillState</td><td>箭帽改实(箭帽,实心)</td><td>设置箭头帽的填充状态。如果未填充箭头帽，则仅绘制轮廓。</td></tr>
<tr><td>箭帽取实</td><td>GdipGetAdjustableArrowCapFillState</td><td>箭帽取实(箭帽,@实心)</td><td>获取箭头帽的填充状态。</td></tr>
</table><p><font color="#0000FF" size=6><a name="线头形状">线头形状</a>-绘制的线条末尾使用的图形形状的类型</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>LineCapFlat</td><td>0</td><td>指定行在最后一点结束。 结束是平方的。</td></tr>
<tr><td>LineCapSquare</td><td>1</td><td>指定一个方帽。 正方形的中心是线条中的最后一个点。 正方形的高度和宽度是线条宽度。</td></tr>
<tr><td>LineCapRound</td><td>2</td><td>指定圆形大写字母。 圆的中心是线条中的最后一个点。 圆的直径是线条宽度。</td></tr>
<tr><td>LineCapTriangle</td><td>3</td><td>指定三角帽。 三角形的底是线条中的最后一个点。 三角形的底部是线条宽度。</td></tr>
<tr><td>LineCapNoAnchor</td><td>0x10</td><td>指定行尾未定位。</td></tr>
<tr><td>LineCapSquareAnchor</td><td>0x11</td><td>指定用正方形定位线条的终点。 正方形的中心是线条中的最后一个点。 正方形的高度和宽度是线条宽度。</td></tr>
<tr><td>LineCapRoundAnchor</td><td>0x12</td><td>指定用圆圈定位线条的终点。 圆的中心位于线条的最后一点。 圆比线宽。</td></tr>
<tr><td>LineCapDiamondAnchor</td><td>0x13</td><td>指定用菱形 (以 45 度) 旋转的正方形固定线条端。 菱形的中心位于线条中的最后一点。 菱形比线宽。</td></tr>
<tr><td>LineCapArrowAnchor</td><td>0x14</td><td>指定用箭头定位线条的终点。 箭头点位于线条中的最后一个点。 箭头比线条宽。</td></tr>
<tr><td>LineCapCustom</td><td>0xff</td><td>指定行尾由CustomLineCap。</td></tr>
<tr><td>LineCapAnchorMask</td><td>0xf0</td><td></td></tr>
</table><p><font color="#0000FF" size=6><a name="短线形状">短线形状</a>-在虚线中每个短划线的两端使用的图形形状的类型。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>DashCapFlat</td><td>0</td><td>指定每一划线段的两端均为方形的方帽。</td></tr>
<tr><td>DashCapRound</td><td>2</td><td>指定每一划线段的两端均为圆角的圆帽。</td></tr>
<tr><td>DashCapTriangle</td><td>3</td><td>指定每一划线段的两端均为带尖的三角帽。</td></tr>
</table><p><font color="#0000FF" size=6><a name="线帽类型">线帽类型</a>-CustomLineCapType指定自定义线帽的类型</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>CustomLineCapTypeDefault</td><td>0</td><td>默认类型。</td></tr>
<tr><td>CustomLineCapTypeAdjustableArrowtd><td>1</td><td>可调整箭头。</td></tr>
</table><p><font color="#0000FF" size=6><a name="文本字体">文本字体</a></font></p>
文字格式对象包含文本布局信息(例如对齐、方向、制表位和剪裁)和显示操作(例如剪裁、对请求的字体不支持的字符的字体替换，以及不使用西欧数字的语言) 的数字替换。<br>
使用文字格式对象可以绘制文字，以设置字符串的格式。<font color="#FF0000">文字格式对象简称为字形</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>绘图文字</td><td>GdipDrawString</td><td>绘图文字(图形,宽字,长度,字体,布局,字形,刷子)</td><td>根据字体、布局矩形和字形格式绘制字符串。</td></tr>
<tr><td>绘字范围</td><td>GdipMeasureString</td><td>绘字范围(图形,宽字,长度,字体,布局,字形,@矩形,@字数,@行数)</td><td>测量指定字体、格式和布局矩形中的字符串范围。</td></tr>
<tr><td>绘字区域</td><td>GdipMeasureCharacterRanges</td><td>绘字区域(图形,宽字,长度,字体,布局,字形,区数,@区组)</td><td>获取一组区域，每个区域在字符串中绑定一系列字符位置。</td></tr>
<tr><td>绘控制字</td><td>GdipDrawDriverString</td><td>绘控制字(图形,宽字,长度,字体,刷子,点组,选项,矩阵)</td><td>在指定位置绘制字符。使客户端可以完全控制文本的<a href="#文字选项">外观选项</a>。假定客户端已设置要应用的格式和布局。</td></tr>
<tr><td>绘字边界</td><td>GdipMeasureDriverString</td><td>绘字边界(图形,宽字,长度,字体,刷子,点组,选项,矩阵,@边界)</td><td>测量指定字符及其相应位置的边界框。</td></tr>
<tr><td>字形创建</td><td>GdipCreateStringFormat</td><td>字形创建(格式,语言,@字形)</td><td>基于<a href="#文字格式">字符串格式标志</a>和语言创建 文字形式 对象。</td></tr>
<tr><td>字形默认</td><td>GdipStringFormatGetGenericDefault</td><td>字形默认(@字形)</td><td>创建一个泛型的默认 文字形式 对象。</td></tr>
<tr><td>字形排版</td><td>GdipStringFormatGetGenericTypographic</td><td>字形排版(@字形)</td><td>创建泛型排版的文字格式对象。</td></tr>
<tr><td>字形删除</td><td>GdipDeleteStringFormat</td><td>字形删除(字形)</td><td>释放 文字形式 对象使用的资源。</td></tr>
<tr><td>字形克隆</td><td>GdipCreateStringFormat</td><td>字形克隆(字形,@新字形)</td><td>复制另一个 文字形式 对象的副本。</td></tr>
<tr><td>字改标志</td><td>GdipSetStringFormatFlags</td><td>字改标志(字形,标志)</td><td>设置文字形式对象的<a href="#文字格式">字符串格式标志</a>。</td></tr>
<tr><td>字取标志</td><td>GdipGetStringFormatFlags</td><td>字取标志(字形,@标志)</td><td>获取文字形式对象的<a href="#文字格式">字符串格式标志</a>。</td></tr>
<tr><td>字改对齐</td><td>GdipSetStringFormatAlign</td><td>字改对齐(字形,对齐)</td><td>设置文字形式对象的<a href="#文字对齐">线条对齐方式</a>相对于布局矩形的原点。</td></tr>
<tr><td>字取对齐</td><td>GdipGetStringFormatAlign</td><td>字取对齐(字形,@对齐)</td><td>获取文字形式对象的<a href="#文字对齐">线条对齐方式</a>相对于布局矩形的原点。</td></tr>
<tr><td>字改线齐</td><td>GdipSetStringFormatLineAlign</td><td>字改线齐(字形,对齐)</td><td>设置文字形式对象的<a href="#文字对齐">线条对齐方式</a>相对于布局矩形的原点。</td></tr>
<tr><td>字取线齐</td><td>GdipGetStringFormatLineAlign</td><td>字取线齐(字形,@对齐)</td><td>获取文字形式对象的<a href="#文字对齐">线条对齐方式</a>相对于布局矩形的原点。</td></tr>
<tr><td>字改剪裁</td><td>GdipSetStringFormatTrimming</td><td>字改剪裁(字形,剪裁)</td><td>设置文字形式对象的<a href="#文字剪裁">剪裁样式</a>。</td></tr>
<tr><td>字取剪裁</td><td>GdipGetStringFormatTrimming</td><td>字取剪裁(字形,@剪裁)</td><td>获取文字形式对象的<a href="#文字剪裁">剪裁样式</a>。</td></tr>
<tr><td>字改热键</td><td>GdipSetStringFormatHotkeyPrefix</td><td>字改热键(字形,热键)</td><td>设置文字形式对象的<a href="#文字热键">如何显示热键</a>。</td></tr>
<tr><td>字取热键</td><td>GdipGetStringFormatHotkeyPrefix</td><td>字取热键(字形,@热键)</td><td>获取文字形式对象的<a href="#文字热键">如何显示热键</a>。</td></tr>
<tr><td>字改偏移</td><td>GdipSetStringFormatTabStops</td><td>字改偏移(字形,初始偏移,偏移数量,偏移数组)</td><td>设置文字形式对象的制表位的偏移量。</td></tr>
<tr><td>字取偏移</td><td>GdipGetStringFormatTabStops</td><td>字取偏移(字形,偏移数量,@初始偏移,@偏移数组)</td><td>获取文字形式对象的制表位的偏移量。</td></tr>
<tr><td>字偏移数</td><td>GdipGetStringFormatTabStopCount</td><td>字偏移数(格式,语言,@字形)</td><td>获取文字格式对象的制表位偏移数量。</td></tr>
<tr><td>字改替换</td><td>GdipSetStringFormatDigitSubstitution</td><td>字改替换(字形,语言,替换)</td><td>设置文字形式对象的<a href="#文字替换">数字替换方式</a>。</td></tr>
<tr><td>字取替换</td><td>GdipGetStringFormatDigitSubstitution</td><td>字取替换(字形,@语言,@替换)</td><td>获取文字形式对象的<a href="#文字替换">数字替换方式</a>。</td></tr>
<tr><td>字改段数</td><td>GdipSetStringFormatMeasurableCharacterRangeCount</td><td>字改段数(字形,数量,范围数组)</td><td>设置文字形式对象的一系列字符范围。</td></tr>
<tr><td>字取段数</td><td>GdipGetStringFormatMeasurableCharacterRangeCount</td><td>字取段数(字形,@范围数)</td><td>获取当前设置的可度量字符范围的数量。</td></tr>
</table><p><font color="#0000FF" size=6><a name="绘图字体">绘图字体</a></font></p>
字体对象定义特定字体的特征，例如系列、高度、大小和样式 (或样式) 组合。 绘制字符串时使用字体对象。<br>
字体系列对象包含组成字体系列的一组字体，简称字系。 字体系列是一组具有相同字样但样式不同的字体。<br>
字体集合类是抽象基类，简称字集。 它包含用于枚举字体集合中字体系列的方法。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>字体设备</td><td>GdipCreateFontFromDC</td><td>字体设备(设备,@字体)</td><td>基于当前选定到指定设备的字体对象创建字体对象。</td></tr>
<tr><td>字体逻辑</td><td>GdipCreateFontFromLogfontA</td><td>字体逻辑(设备,逻辑,@字体)</td><td>直接从GDI<a href="#逻辑字体类">逻辑字体</a>创建字体对象。</td></tr>
<tr><td>逻辑字体</td><td>GdipCreateFontFromLogfontW</td><td>逻辑字体(设备,逻辑,@字体)</td><td>直接从GDI<a href="#逻辑字体类">逻辑字体</a>创建字体对象。宽字符版</td></tr>
<tr><td>字体创建</td><td>GdipCreateFont</td><td>字体创建(宽字系名,字号,样式,单位,@字体)</td><td>基于字体系列、字号(小数)、<a href="#字体样式">字体样式</a>、<a href="#度量单位">度量单位</a>创建字体对象。</td></tr>
<tr><td>字体克隆</td><td>GdipCloneFont</td><td>字体克隆(字体,@字体)</td><td>基于此字体对象创建新的字体对象。</td></tr>
<tr><td>字体删除</td><td>GdipDeleteFont</td><td>字体删除(字体)</td><td>未实现。</td></tr>
<tr><td>字体系列</td><td>GdipGetFamily</td><td>字体系列(字体,@字系)</td><td>获取此字体所基于的字体系列。</td></tr>
<tr><td>字体样式</td><td>GdipGetFontStyle</td><td>字体样式(字体,@样式)</td><td>获取此字体的<a name="字体样式">字体样式</a>。</td></tr>
<tr><td>字体大小</td><td>GdipGetFontSize</td><td>字体大小(字体,小数 @字号)</td><td>获取此字体对象的字体大小。</td></tr>
<tr><td>字体单位</td><td>GdipGetFontUnit</td><td>字体单位(字体,@单位)</td><td>获取此字体对象的<a href="#度量单位">度量单位</a>。</td></tr>
<tr><td>字体高度</td><td>GdipGetFontHeight</td><td>字体高度(字体,图形,@高度)</td><td>获取指定图形设备对象的当前单位中此字体的行距(小数)。</td></tr>
<tr><td>字体行距</td><td>GdipGetFontHeightGivenDPI</td><td>字体行距(字体,垂直分辨率,@字号)</td><td>获取此字体的行距（以像素为单位）。</td></tr>
<tr><td>字体结构</td><td>GdipGetLogFontA</td><td>字体结构(字体,@逻辑)</td><td>获取此字体对象的<a href="#逻辑字体类">逻辑字体</a>属性。</td></tr>
<tr><td>字体属性</td><td>GdipGetLogFontW</td><td>字体属性(字体,@逻辑)</td><td>获取此字体对象的<a href="#逻辑字体类">逻辑字体</a>属性。</td></tr>
<tr><td>字体新类</td><td>GdipNewInstalledFontCollection</td><td>字体新类(@字集)</td><td>定义一个类，该类表示安装在系统上的字体。字集是字体的集合类。</td></tr>
<tr><td>字体集合</td><td>GdipNewPrivateFontCollection</td><td>字体集合(@字集)</td><td>集合中的字体可以包括已安装的字体以及尚未安装在系统上的字体。</td></tr>
<tr><td>字集删除</td><td>GdipDeletePrivateFontCollection</td><td>字集删除(字集)</td><td>删除创建的字体集合对象。</td></tr>
<tr><td>字集数量</td><td>GdipGetFontCollectionFamilyCount</td><td>字集数量(字集,数量)</td><td>获取此字体对象的字体大小。</td></tr>
<tr><td>字集列表</td><td>GdipGetFontCollectionFamilyList</td><td>字集列表(字集,数量,@数组,@已收)</td><td>获取此字体对象的字体大小。</td></tr>
<tr><td>字集文件</td><td>GdipPrivateAddFontFile</td><td>字集文件(字集,宽文件名)</td><td>将字体文件添加到此专用字体集合。</td></tr>
<tr><td>字集内存</td><td>GdipPrivateAddMemoryFont</td><td>字集内存(字体,小数 @字号)</td><td>将包含在系统内存中的字体添加到字体集合。</td></tr>
<tr><td>字系创建</td><td>GdipCreateFontFamilyFromName</td><td>字系创建(宽字体名,字集,@字系)</td><td>基于指定的字体系列创建字体系列对象。</td></tr>
<tr><td>字系克隆</td><td>GdipCloneFontFamily</td><td>字系克隆(字系,@字系)</td><td>使用字系对象创建新的字系对象副本。</td></tr>
<tr><td>字系删除</td><td>GdipDeleteFontFamily</td><td>字系删除(字系)</td><td>释放创建的字系对象。</td></tr>
<tr><td>字系无衬</td><td>GdipGetGenericFontFamilySansSerif</td><td>字系无衬(@字系)</td><td>获取一个字系对象，该对象指定泛型无衬线字样。</td></tr>
<tr><td>字系衬线</td><td>GdipGetGenericFontFamilySerif</td><td>字系衬线(@字系)</td><td>获取一个字系对象，该对象指定泛型衬线字样。</td></tr>
<tr><td>字系单间</td><td>GdipGetGenericFontFamilyMonospace</td><td>字系单间(@字系)</td><td>获取一个字系对象，该对象指定泛型单空间字样。</td></tr>
<tr><td>字系名称</td><td>GdipGetFamilyName</td><td>字系名称(字系)</td><td>获取此字体系列的名称。</td></tr>
<tr><td>字系取样</td><td>GdipIsStyleAvailable</td><td>字系取样(字系,样式,@是否)</td><td>确定指定的<a href="#字体样式">字体样式</a>是否可用于此字体系列。</td></tr>
<tr><td>字系高度</td><td>GdipGetEmHeight</td><td>字系高度(字系,样式,@大小)</td><td>获取此字体系列的设计单位(通常称为字号或字高)的大小。</td></tr>
<tr><td>字系升序</td><td>GdipGetCellAscent</td><td>字系升序(字系,样式,@上升)</td><td>获取指定<a href="#字体样式">字体样式</a>或样式组合的此字体族的单元格升序（以设计单位为单位）。</td></tr>
<tr><td>字系降序</td><td>GdipGetCellDescent</td><td>字系降序(字系,样式,@下降)</td><td>获取指定<a href="#字体样式">字体样式</a>或样式组合的此字体系列的单元格降序（以设计单位表示）。</td></tr>
<tr><td>字系行距</td><td>GdipGetLineSpacing</td><td>字系行距(字系,样式,@行距)</td><td>获取指定<a href="#字体样式">字体样式</a>或样式组合的此字体系列的行距（以设计单位为单位）。</td></tr>
</table><p><font color="#0000FF" size=6><a name="字体样式">字体样式</a>-FontStyle 枚举指定字体的字体样式。 样式可以组合使用。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>字样正常</td><td>FontStyleRegular</td><td>0</td><td>指定字样的正常粗细或粗细。</td></tr>
<tr><td>字样粗体</td><td>FontStyleBold</td><td>1</td><td>指定粗体字样。 粗体表示较重的粗细。</td></tr>
<tr><td>字样斜体</td><td>FontStyleItalic</td><td>2</td><td>指定斜体字样，该字样对字符的垂直词干产生明显的倾斜。</td></tr>
<tr><td>字样粗斜</td><td>FontStyleBoldItalic</td><td>3</td><td>将字样指定为粗体和斜体。</td></tr>
<tr><td>字样下划</td><td>FontStyleUnderline</td><td>4</td><td>指定下划线，在字符基线下方显示一行。</td></tr>
<tr><td>字样删除</td><td>FontStyleStrikeout</td><td>8</td><td>指定删除线，它显示通过字符中间绘制的水平线。</td></tr>
</table><p><font color="#0000FF" size=6><a name="文字对齐">文字对齐</a>-StringAlignment 枚举指定字符串在引用边界矩形时如何对齐。边界矩形用于定义文本显示的区域。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>对齐近点</td><td>StringAlignmentNear</td><td>0</td><td>指定对齐方式接近边框的原点。可用于沿行对齐字符或矩形内线条的对齐。 对于从右到左的边框，原点位于右上角。</td></tr>
<tr><td>对齐居中</td><td>StringAlignmentCenter</td><td>1</td><td>指定对齐方式在原点和范围之间居中 (宽度) 格式矩形。</td></tr>
<tr><td>对齐远点</td><td>StringAlignmentFar</td><td>2</td><td>指定对齐方式远 (格式矩形的右侧) 。</td></tr>
</table><p><font color="#0000FF" size=6><a name="文字选项">文字选项</a>-DriverStringOptions 枚举指定驱动程序字符串的呈现间距、方向和质量。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>DriverStringOptionsCmapLookup</td><td>1</td><td>指定字符串数组包含 Unicode 字符值。如果未设置此标志，数组中的每个值将解释为字体字形的索引，该字形定义要显示的字符。</td></tr>
<tr><td>DriverStringOptionsVertical</td><td>2</td><td>指定字符串垂直显示。</td></tr>
<tr><td>DriverStringOptionsRealizedAdvance</td><td>4</td><td>指定从第一个字形的位置计算字形位置。 如果未设置此标志，则从坐标数组获取字形位置。</td></tr>
<tr><td>DriverStringOptionsLimitSubpixel</td><td>8</td><td>指定应将更少的内存用于缓存抗锯齿字形。 这也会产生较低的质量。 如果未设置此标志，则会使用更多内存，但质量会更高。</td></tr>
</table><p><font color="#0000FF" size=6><a name="文字格式">文字格式</a>-StringFormatFlags 枚举指定文本布局信息 (如方向和剪裁) 和显示操作 (，如省略号插入、数字替换和字体) 不支持的字符的表示形式。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>StringFormatFlagsDirectionRightToLeft</td><td>0x00000001</td><td>指定读取顺序为从右到左。 对于水平文本，字符从右到左读取。 对于垂直文本，列从右到左读取。 默认情况下，从左到右读取水平或垂直文本。</td></tr>
<tr><td>StringFormatFlagsDirectionVertical</td><td>0x00000002</td><td>指定在显示设备上垂直绘制单个文本行。 默认情况下，文本行是水平行，每一个新行都低于上一行。</td></tr>
<tr><td>StringFormatFlagsNoFitBlackBox</td><td>0x00000004</td><td>指定允许部分字符悬停字符串的布局矩形。 默认情况下，字符首先在矩形的边界内对齐，然后重新定位仍悬停边界的任何字符，以避免任何悬垂，从而避免影响布局矩形外部的像素。 斜体小写字母f是可能具有悬垂部分的字符的一个示例。 设置此标志可确保字符在视觉上与上方和下方的线条对齐，但可能会导致部分字符（位于布局矩形外）被剪裁或绘制。</td></tr>
<tr><td>StringFormatFlagsDisplayFormatControl</td><td>0x00000020</td><td>指定使用代表字符显示 Unicode 布局控制字符。</td></tr>
<tr><td>StringFormatFlagsNoFontFallback</td><td>0x00000400</td><td>指定对请求的字体中不支持的字符使用备用字体。 默认情况下，任何缺失字符都以“缺少字体”字符显示，通常是一个开放的正方形。</td></tr>
<tr><td>StringFormatFlagsMeasureTrailingSpaces</td><td>0x00000800</td><td>指定每行末尾的空格包含在字符串度量中。 默认情况下，由 返回的边界矩形 绘字范围 方法排除每行末尾的空间。 设置此标志以在度量中包含该空间。</td></tr>
<tr><td>StringFormatFlagsNoWrap</td><td>0x00001000</td><td>指定禁止将文本换行到下一行。 使用原点而不是布局矩形时，隐含 NoWrap。 在矩形内绘制文本时，默认情况下，文本在矩形边界内的最后一个单词边界处被断开，并换行到下一行。</td></tr>
<tr><td>StringFormatFlagsLineLimit</td><td>0x00002000</td><td>指定在布局矩形中仅布局整条线。 默认情况下，布局一直持续到文本末尾或直到剪裁导致不再显示行，以先到者为准。 默认设置允许最后一行被不是行高度的整个倍数的布局矩形部分遮盖。 若要确保只看到整条线，请设置此标志，并注意提供至少与一行高度相同的布局矩形。</td></tr>
<tr><td>StringFormatFlagsNoClip</td><td>0x00004000</td><td>指定允许显示悬停在布局矩形上的字符和在布局矩形外延伸的文本。 默认情况下，将剪裁所有悬垂字符和布局矩形外的文本。 在布局矩形外延伸) 行尾的任何尾随空格 (空格均被剪裁。 因此，如果度量中包含尾随空格，则此标志的设置将影响字符串度量。 如果启用了剪裁，则度量中不包括在布局矩形外延伸的尾随空格。 如果禁用剪裁，则所有尾随空格都包含在度量中，无论它们是否在布局矩形之外。</td></tr>
<tr><td>StringFormatFlagsBypassGDI</td><td>0x80000000</td><td>避开GDI绘制</td></tr>
</table><p><font color="#0000FF" size=6><a name="文字剪裁">文字剪裁</a>-StringTrimming 枚举指定如何剪裁字符串中的字符，以便字符串适合布局矩形。布局矩形用于定位和调整显示字符串的大小。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>StringTrimmingNone</td><td>0</td><td>指定不执行剪裁。</td></tr>
<tr><td>StringTrimmingCharacter</td><td>1</td><td>指定在布局矩形内最后一个字符的边界处断开字符串。 这是默认值。</td></tr>
<tr><td>StringTrimmingWord</td><td>2</td><td>指定在布局矩形内最后一个单词的边界处断开字符串。</td></tr>
<tr><td>StringTrimmingEllipsisCharacter</td><td>3</td><td>指定在布局矩形内最后一个字符的边界处断开字符串，并在字符后面插入省略号 (...) 。</td></tr>
<tr><td>StringTrimmingEllipsisWord</td><td>4</td><td>指定字符串在布局矩形内最后一个单词的边界处断开，并在单词后面插入省略号 (...) 。</td></tr>
<tr><td>StringTrimmingEllipsisPath</td><td>5</td><td>指定从字符串中删除中心并替换为省略号。 该算法尽可能保留字符串的最后一部分。</td></tr>
</table><p><font color="#0000FF" size=6><a name="文字热键">文字热键</a>-HotkeyPrefix 枚举指定如何显示热键。 有三个选项：不执行任何操作、显示带下划线的热键和隐藏热键下划线。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>HotkeyPrefixNone</td><td>0</td><td>指定不发生热键处理。</td></tr>
<tr><td>HotkeyPrefixShow</td><td>1</td><td>指定扫描 Unicode 文本 (&) 的和号，这些文本被解释为热键标记，与在 Windows 用户界面中处理菜单和对话框资源的方式相同。 所有与数对都由单个和号替换。 删除所有单和号，第一个单和号后面的第一个字符显示为下划线。</td></tr>
<tr><td>HotkeyPrefixHide</td><td>2</td><td>指定扫描 Unicode 文本以查找 (&) 的和号，这些文本将作为 HotkeyPrefixShow 中的替换和删除，但不显示下划线。 当不需要辅助功能热键下划线时，可以使用此选项。</td></tr>
</table><p><font color="#0000FF" size=6><a name="文字替换">文字替换</a>-StringDigitSubstitute 枚举指定如何根据用户的区域设置或语言替换字符串中的数字。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>StringDigitSubstituteUser</td><td>0</td><td>指定用户定义的替换方案。</td></tr>
<tr><td>StringDigitSubstituteNone</td><td>1</td><td>指定禁用替换。</td></tr>
<tr><td>StringDigitSubstituteNational</td><td>2</td><td>指定与用户区域设置的正式国家/地区语言相对应的替换数字位。</td></tr>
<tr><td>StringDigitSubstituteTraditional</td><td>3</td><td>指定与用户的本机脚本或语言（可能与用户区域设置的正式国家/地区语言不同）相对应的替换数字位。</td></tr>
</table><p><font color="#0000FF" size=6><a name="路径迭代">路径迭代</a></font></p>
<font color="#FF0000">路径渐变笔刷对象</font>存储颜色渐变的属性，可用于用逐渐变化的颜色填充路径的内部。路径渐变画笔具有边界路径、边界颜色、中心点和中心颜色。<br>
使用路径渐变画笔绘制区域时，从边界路径移动到中心点时，颜色会逐渐从边界颜色更改为中心颜色。<font color="#FF0000">路径渐变笔刷对象简称为路刷</font><br>
<font color="#FF0000">图形路径</font>对象存储一系列线条、曲线和形状。可以通过调用图形对象的绘制路径方法来绘制整个序列。可以将线条、曲线和形状序列划分为图形，借助图形路径迭代器对象，可以绘制所选图形。<br>
还可以在序列中放置标记，以便绘制路径的选定部分。图形路径迭代器提供用于隔离图形路径对象中存储的路径的选定子集的方法。 路径由一个或多个数字组成。<font color="#FF0000">图形路径对象简称为路径</font><br>
可以使用图形路径迭代器来隔离其中一个或多个数字。 路径还可以具有将路径划分为多个部分的标记。可以使用图形路径迭代器对象来隔离其中一个或多个部分。<font color="#FF0000">图形路径迭代器对象简称为迭代</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>路刷创建</td><td>GdipCreatePathGradient</td><td>路刷创建(点组,数量,模式,@路刷)</td><td>基于小数坐标点数组创建路径渐变笔刷对象。初始化路径渐变画笔的<a href="#平铺模式">环绕模式</a>。</td></tr>
<tr><td>路刷新建</td><td>GdipCreatePathGradientI</td><td>路刷新建(点组,数量,模式,@路刷)</td><td>基于整数坐标点数组创建路径渐变笔刷对象。初始化路径渐变画笔的<a href="#平铺模式">环绕模式</a>。</td></tr>
<tr><td>路径变刷</td><td>GdipCreatePathGradientFromPath</td><td>路径变刷(路径,@路刷)</td><td>基于路径对象创建路径渐变笔刷对象。</td></tr>
<tr><td>路取中色</td><td>GdipGetPathGradientCenterColor</td><td>路取中色(路刷,@颜色)</td><td>获取此路径渐变画笔的中心点的颜色。</td></tr>
<tr><td>路改中色</td><td>GdipSetPathGradientCenterColor</td><td>路改中色(路刷,颜色)</td><td>设置此路径渐变画笔的中心点的颜色。</td></tr>
<tr><td>路取边色</td><td>GdipGetPathGradientSurroundColorsWithCount</td><td>路取边色(路刷,@颜色组,@组数)</td><td>获取此路径渐变画笔的中心点的颜色。</td></tr>
<tr><td>路改边色</td><td>GdipGetPathGradientSurroundColorsWithCount</td><td>路改边色(路刷,颜色组,@组数)</td><td>设置此路径渐变画笔的中心点的颜色。</td></tr>
<tr><td>路取中心</td><td>GdipGetPathGradientCenterPoint</td><td>路取中心(路刷,@点组)</td><td>获取此路径渐变画笔的小数值中心点。</td></tr>
<tr><td>路改中心</td><td>GdipSetPathGradientCenterPoint</td><td>路改中心(路刷,点组)</td><td>设置此路径渐变画笔的小数值中心点。</td></tr>
<tr><td>路取中点</td><td>GdipGetPathGradientCenterPointI</td><td>路取中点(路刷,@点组)</td><td>获取此路径渐变画笔的整数值中心点。</td></tr>
<tr><td>路改中点</td><td>GdipSetPathGradientCenterPointI</td><td>路改中点(路刷,点组)</td><td>设置此路径渐变画笔的整数值中心点。</td></tr>
<tr><td>路刷边界</td><td>GdipGetPathGradientRect</td><td>路刷边界(路刷,@点组)</td><td>获取包含此路径渐变画笔的边界路径的最小矩形。</td></tr>
<tr><td>路刷矩形</td><td>GdipGetPathGradientRectI</td><td>路刷矩形(路刷,点组)</td><td>获取包含此路径渐变画笔的边界路径的最小矩形。</td></tr>
<tr><td>路刷点数</td><td>GdipGetPathGradientPointCount</td><td>路刷点数(路刷,@点组)</td><td>获取定义此画笔边界路径的点数组中的点数。</td></tr>
<tr><td>路边色数</td><td>GdipGetPathGradientSurroundColorCount</td><td>路边色数(路刷,@数量)</td><td>获取已为此路径渐变画笔的边界路径指定的颜色数。</td></tr>
<tr><td>路取校正</td><td>GdipGetPathGradientGammaCorrection</td><td>路取校正(路刷,@是否)</td><td>确定是否为此路径渐变画笔启用伽玛校正。</td></tr>
<tr><td>路改校正</td><td>GdipSetPathGradientGammaCorrection</td><td>路改校正(路刷,是否)</td><td>指定是否为此路径渐变画笔启用伽玛校正。</td></tr>
<tr><td>路刷因数</td><td>GdipGetPathGradientBlendCount</td><td>路刷因数(路刷,@数量)</td><td>获取当前为此路径渐变画笔设置的混合因子数。</td></tr>
<tr><td>路取混合</td><td>GdipGetPathGradientBlend</td><td>路取混合(路刷,@因子,@点组,数量)</td><td>获取当前为此路径渐变画笔设置的混合因子和相应的混合位置。</td></tr>
<tr><td>路改混合</td><td>GdipSetPathGradientBlend</td><td>路改混合(路刷,因子,点组,数量)</td><td>设置此路径渐变画笔的混合因子和混合位置。</td></tr>
<tr><td>路颜色数</td><td>GdipGetPathGradientPresetBlendCount</td><td>路颜色数(路刷,@数量)</td><td>获取当前为此路径渐变画笔指定的预设颜色数。</td></tr>
<tr><td>路取混色</td><td>GdipGetPathGradientPresetBlend</td><td>路取混色(路刷,@色组,@点组,数量)</td><td>获取当前为此路径渐变画笔设置的混合因子和相应的混合位置。</td></tr>
<tr><td>路改混色</td><td>GdipSetPathGradientPresetBlend</td><td>路改混色(路刷,色组,点组,数量)</td><td>设置此路径渐变画笔的预设颜色和混合位置。</td></tr>
<tr><td>路混原形</td><td>GdipSetPathGradientSigmaBlend</td><td>路混原形(路刷,中心强度,边界强度)</td><td>设置此路径渐变画笔的混合形状。</td></tr>
<tr><td>路混线性</td><td>GdipSetPathGradientLinearBlend</td><td>路混线性(路刷,中心强度,边界强度)</td><td>设置此路径渐变画笔的混合形状。</td></tr>
<tr><td>路改平铺</td><td>GdipSetPathGradientWrapMode</td><td>路改平铺(路刷,模式)</td><td>设置此路径线性渐变画笔的<a href="#平铺模式">环绕模式</a>。</td></tr>
<tr><td>路取平铺</td><td>GdipGetPathGradientWrapMode</td><td>路取平铺(路刷,@模式)</td><td>获取此路径线性渐变画笔的<a href="#平铺模式">换行模式</a>。确定如何平铺区域。</td></tr>
<tr><td>路取转矩</td><td>GdipGetPathGradientTransform</td><td>路取转矩(路刷,@矩阵)</td><td>获取此路径线性渐变画笔的转换矩阵。</td></tr>
<tr><td>路改转矩</td><td>GdipSetPathGradientTransform </td><td>路改转矩(路刷,矩阵)</td><td>设置此路径线性渐变画笔的转换矩阵。</td></tr>
<tr><td>路刷标识</td><td>GdipResetPathGradientTransform</td><td>路刷标识(路刷,@矩阵)</td><td>将此路径线性渐变画笔的转换矩阵重置为标识矩阵。这意味着不会发生任何转换。</td></tr>
<tr><td>路乘矩阵</td><td>GdipMultiplyPathGradientTransform </td><td>路乘矩阵(路刷,矩阵,顺序)</td><td>使用自身和另一个矩阵的乘积更新此线刷对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>路乘转换</td><td>GdipTranslatePathGradientTransform </td><td>路乘转换(路刷,平缩,纵缩,顺序)</td><td>此路径线性渐变画刷对象的世界转换矩阵设置为等于自身和转换矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>路乘缩放</td><td>GdipScalePathGradientTransform </td><td>路乘缩放(路刷,横缩,纵缩,顺序)</td><td>此路径线性渐变画刷对象的世界转换矩阵设置为等于自身和缩放矩阵的乘积。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>路乘旋转</td><td>GdipRotatePathGradientTransform </td><td>路乘旋转(路刷,小数 角度,顺序)</td><td>使用自身乘积和旋转矩阵更新此线刷对象的世界转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>路取比例</td><td>GdipGetPathGradientFocusScales</td><td>路取比例(路刷,@横比,@纵比)</td><td>获取此路径渐变画笔的焦点比例。</td></tr>
<tr><td>路改比例</td><td>GdipSetPathGradientFocusScales</td><td>路改比例(路刷,横比,纵比)</td><td>设置此路径渐变画笔的焦点比例。</td></tr>
<tr><td>路径创建</td><td>GdipCreatePath</td><td>路径创建(模式,@路径)</td><td>创建路径对象并初始化<a href="#填充模式">填充模式</a>。这是默认构造函数。</td></tr>
<tr><td>路径新建</td><td>GdipCreatePath2</td><td>路径新建(点组,类组,数量,模式,@路径)</td><td>基于小数值点数组、<a href="#路径点类型">类型字节数组</a>和<a href="#填充模式">填充模式</a>创建路径对象。</td></tr>
<tr><td>路径建立</td><td>GdipCreatePath2I</td><td>路径建立(点组,类组,数量,模式,@路径)</td><td>基于整数值点数组、<a href="#路径点类型">类型字节数组</a>和<a href="#填充模式">填充模式</a>创建路径对象。</td></tr>
<tr><td>路径克隆</td><td>GdipClonePath</td><td>路径克隆(路径,@新路径)</td><td>创建新的路径对象，并使用此路径对象的内容对其进行初始化。</td></tr>
<tr><td>路径删除</td><td>GdipDeletePath</td><td>路径删除(路径)</td><td>释放路径对象使用的资源。</td></tr>
<tr><td>路径重置</td><td>GdipResetPath</td><td>路径重置(路径)</td><td>清空路径并将填充模式设置为0奇偶交替。</td></tr>
<tr><td>路径点数</td><td>GdipGetPointCount</td><td>路径点数(路径,@数量)</td><td>获取此路径的数据点数组中的点数。这与路径的点类型数组中的类型数相同。</td></tr>
<tr><td>路径类型</td><td>GdipGetPathTypes</td><td>路径类型(路径,@类型组,数量)</td><td>获取此路径的<a href="#路径点类型">点类型</a>的字节数组。</td></tr>
<tr><td>路径点组</td><td>GdipGetPathPoints</td><td>路径点组(路径,@点组,数量)</td><td>获取此路径的小数值点数组。包含用于绘制路径的线条和贝塞尔样条的端点和控制点。</td></tr>
<tr><td>路径点集</td><td>GdipGetPathPointsI</td><td>路径点集(路径,@点组,数量)</td><td>获取此路径的整数值点数组。包含用于绘制路径的线条和贝塞尔样条的端点和控制点。</td></tr>
<tr><td>路取填充</td><td>GdipGetPathFillMode</td><td>路取填充(路径,@模式)</td><td>获取此路径的<a href="#填充模式">填充模式</a>。</td></tr>
<tr><td>路改填充</td><td>GdipSetPathFillMode</td><td>路改填充(路径,模式)</td><td>设置此路径的<a href="#填充模式">填充模式</a>。</td></tr>
<tr><td>路径数据</td><td>GdipGetPathData</td><td>路径数据(路径,路径数据类)</td><td>从此路径获取点数组和点类型的数组。<a href="#路径点类">路径点类</a>的两个数组一起定义此路径的线条、曲线、图形和标记。</td></tr>
<tr><td>路开新图</td><td>GdipStartPathFigure</td><td>路开新图(路径)</td><td>不闭合当前图形即开始一个新图形。添加到此路径的后续点将添加到新图中。</td></tr>
<tr><td>路关现图</td><td>GdipClosePathFigure</td><td>路关现图(路径)</td><td>关闭此路径的当前图。</td></tr>
<tr><td>路关全图</td><td>GdipClosePathFigures</td><td>路关全图(路径)</td><td>关闭此路径中的所有打开的图形。</td></tr>
<tr><td>路径标记</td><td>GdipSetPathMarker</td><td>路径标记(路径)</td><td>将此路径中的最后一个点指定为标记点。</td></tr>
<tr><td>路清标识</td><td>GdipClearPathMarkers</td><td>路清标识(路径)</td><td>清除此路径中的标记。</td></tr>
<tr><td>路径反转</td><td>GdipReversePath</td><td>路径反转(路径)</td><td>反转定义此路径的线条和曲线的点的顺序。</td></tr>
<tr><td>路径终点</td><td>GdipGetPathLastPoint</td><td>路径终点(路径,@终点)</td><td>获取此路径中最后一个图形的终点。</td></tr>
<tr><td>路加线段</td><td>GdipAddPathLine</td><td>路加线段(路径,左,上,右,下)</td><td>向此路径的当前图形添加一条线段。</td></tr>
<tr><td>路加多线</td><td>GdipAddPathLine2</td><td>路加多线(路径,点组,数量)</td><td>向此路径的当前图形添加多条线段。</td></tr>
<tr><td>路加圆弧</td><td>GdipAddPathArc</td><td>路加圆弧(路径,左,顶,宽,高,起始角,扫视角)</td><td>向此路径的当前图形添加椭圆弧。</td></tr>
<tr><td>路加曲线</td><td>GdipAddPathBezier</td><td>路加曲线(路径,x1,y1,x2,y2,x3,y3,x4,y4)</td><td>向此路径的当前图形添加贝塞尔样条。</td></tr>
<tr><td>路多曲线</td><td>GdipAddPathBeziers</td><td>路多曲线(路径,点组,数量)</td><td>向此路径的当前图形添加一系列贝塞尔样条。</td></tr>
<tr><td>路加弧线</td><td>GdipAddPathCurve</td><td>路加弧线(路径,点组,数量)</td><td>将基数样条添加到此路径的当前图形。</td></tr>
<tr><td>路加弧度</td><td>GdipAddPathCurve2</td><td>路加弧度(路径,点组,数量,曲率)</td><td>将基数样条添加到此路径的当前图形。</td></tr>
<tr><td>路加弧形</td><td>GdipAddPathCurve3</td><td>路加弧形(路径,点组,组数,起始,段数,曲率)</td><td>将基数样条添加到此路径的当前图形。</td></tr>
<tr><td>路加闭合</td><td>GdipAddPathClosedCurve</td><td>路加闭合(路径,点组,组数)</td><td>将一个闭合的基数样条添加到此路径。</td></tr>
<tr><td>路加闭弧</td><td>GdipAddPathClosedCurve2</td><td>路加闭弧(路径,点组,组数,曲率)</td><td>将一个闭合的基数样条添加到此路径。</td></tr>
<tr><td>路加矩形</td><td>GdipAddPathRectangle</td><td>路加矩形(路径,点组,组数)</td><td>将一个矩形添加到此路径。</td></tr>
<tr><td>路加方组</td><td>GdipAddPathRectangles</td><td>路加方组(路径,点组,组数,曲率)</td><td>将多个矩形添加到此路径。</td></tr>
<tr><td>路加椭圆</td><td>GdipAddPathEllipse</td><td>路加椭圆(路径,左,顶,宽,高)</td><td>将一个椭圆添加到此路径。</td></tr>
<tr><td>路加饼图</td><td>GdipAddPathPie</td><td>路加饼图(路径,左,顶,宽,高,起始角,扫视角)</td><td>将一个饼图添加到此路径。</td></tr>
<tr><td>路加多边</td><td>GdipAddPathPolygon</td><td>路加多边(路径,点组,组数)</td><td>将一个多边形添加到此路径。</td></tr>
<tr><td>路加路径</td><td>GdipAddPathPath</td><td>路加路径(路径,路径,合并)</td><td>将一个路径添加到此路径。合并为真时原图是新图形的一部分</td></tr>
<tr><td>路加轮廓</td><td>GdipAddPathString</td><td>路加轮廓(路径,宽字,长度,字系,字样,字高,边框,字形)</td><td>将字符串的轮廓添加到此路径。边框矩形为小数,字高为小数世界单位;<a href="#字体样式">字样</a></td></tr>
<tr><td>路字轮廓</td><td>GdipAddPathStringI</td><td>路字轮廓(路径,宽字,长度,字系,字样,字高,边框,字形)</td><td>将字符串的轮廓添加到此路径。边框矩形为整数,字高为小数世界单位;<a href="#字体样式">字样</a></td></tr>
<tr><td>路径线段</td><td>GdipAddPathLineI</td><td>路径线段(路径,左,上,右,下)</td><td>向此路径的当前图形添加一条线段。</td></tr>
<tr><td>路径多线</td><td>GdipAddPathLine2I</td><td>路径多线(路径,点组,数量)</td><td>向此路径的当前图形添加多条线段。</td></tr>
<tr><td>路径圆弧</td><td>GdipAddPathArcI</td><td>路径圆弧(路径,左,顶,宽,高,起始角,扫视角)</td><td>向此路径的当前图形添加椭圆弧。</td></tr>
<tr><td>路径曲线</td><td>GdipAddPathBezierI</td><td>路径曲线(路径,x1,y1,x2,y2,x3,y3,x4,y4)</td><td>向此路径的当前图形添加贝塞尔样条。</td></tr>
<tr><td>路径曲组</td><td>GdipAddPathBeziersI</td><td>路径曲组(路径,点组,数量)</td><td>向此路径的当前图形添加一系列贝塞尔样条。</td></tr>
<tr><td>路径弧线</td><td>GdipAddPathCurveI</td><td>路径弧线(路径,点组,数量)</td><td>将基数样条添加到此路径的当前图形。</td></tr>
<tr><td>路径弧度</td><td>GdipAddPathCurve2I</td><td>路径弧度(路径,点组,数量,曲率)</td><td>将基数样条添加到此路径的当前图形。</td></tr>
<tr><td>路径弧形</td><td>GdipAddPathCurve3I</td><td>路径弧形(路径,点组,组数,起始,段数,曲率)</td><td>将基数样条添加到此路径的当前图形。</td></tr>
<tr><td>路径闭合</td><td>GdipAddPathClosedCurveI</td><td>路径闭合(路径,点组,组数)</td><td>将一个闭合的基数样条添加到此路径。</td></tr>
<tr><td>路径闭弧</td><td>GdipAddPathClosedCurve2I</td><td>路径闭弧(路径,点组,组数,曲率)</td><td>将一个闭合的基数样条添加到此路径。</td></tr>
<tr><td>路径矩形</td><td>GdipAddPathRectangleI</td><td>路径矩形(路径,点组,组数)</td><td>将一个矩形添加到此路径。</td></tr>
<tr><td>路径方组</td><td>GdipAddPathRectanglesI</td><td>路径方组(路径,点组,组数,曲率)</td><td>将多个矩形添加到此路径。</td></tr>
<tr><td>路径椭圆</td><td>GdipAddPathEllipseI</td><td>路径椭圆(路径,左,顶,宽,高)</td><td>将一个椭圆添加到此路径。</td></tr>
<tr><td>路径饼图</td><td>GdipAddPathPieI</td><td>路径饼图(路径,左,顶,宽,高,起始角,扫视角)</td><td>将一个饼图添加到此路径。</td></tr>
<tr><td>路径多边</td><td>GdipAddPathPolygonI</td><td>路径多边(路径,点组,组数)</td><td>将一个多边形添加到此路径。</td></tr>
<tr><td>路径平展</td><td>GdipFlattenPath</td><td>路径平展(路径,矩阵,平整度)</td><td>将转换应用于此路径，并将路径中的每个曲线转换为连接的线条序列。</td></tr>
<tr><td>路径卷边</td><td>GdipWindingModeOutline</td><td>路径卷边(路径,矩阵,平整度)</td><td>转换和平展此路径，然后转换此路径的数据点，以便它们仅表示路径的轮廓。</td></tr>
<tr><td>路径扩展</td><td>GdipWidenPath</td><td>路径扩展(路径,笔,矩阵,平整度)</td><td>将此路径替换为包含指定笔绘制此路径时所填充区域的曲线。此方法还会平展路径。</td></tr>
<tr><td>路径扭曲</td><td>GdipWarpPath</td><td>路径扭曲(路径,矩阵,点组,数组,左,顶,宽,高,平整度)</td><td>将扭曲转换应用于此路径。此方法还会平展 (转换为路径) 直线序列。</td></tr>
<tr><td>路径转换</td><td>GdipTransformPath</td><td>路径转换(路径,矩阵)</td><td>将此路径的每个数据点乘以指定的矩阵。</td></tr>
<tr><td>路径边框</td><td>GdipGetPathWorldBounds</td><td>路径边框(路径,@边框,矩阵,笔)</td><td>获取此路径的小数值边框矩形。</td></tr>
<tr><td>路径外框</td><td>GdipGetPathWorldBoundsI</td><td>路径外框(路径,@边框,矩阵,笔)</td><td>获取此路径的整数值边框矩形。</td></tr>
<tr><td>路径区点</td><td>GdipIsVisiblePathPoint</td><td>路径区点(路径,左,上,图形,@是否)</td><td>确定指定小数值点是否位于由指定的图形设备对象填充此路径时所填充的区域。</td></tr>
<tr><td>路径内点</td><td>GdipIsVisiblePathPointI</td><td>路径内点(路径,左,上,图形,@是否)</td><td>确定指定整数值点是否位于由指定的图形设备对象填充此路径时所填充的区域。</td></tr>
<tr><td>路径边线</td><td>GdipIsOutlineVisiblePathPoint</td><td>路径边线(路径,左,上,笔,图形,@是否)</td><td>确定当路径由指定的图形设备对象和指定的笔绘制时，指定的点是否触及此路径的轮廓。</td></tr>
<tr><td>路径边界</td><td>GdipIsOutlineVisiblePathPoint</td><td>路径迭代(路径,左,上,笔,图形,@是否)</td><td>确定当路径由指定的图形设备对象和指定的笔绘制时，指定的点是否触及此路径的轮廓。</td></tr>
<tr><td>路径迭代</td><td>GdipCreatePathIter</td><td>路径迭代(@迭代,路径)</td><td>创建新的迭代器对象，并将其与 路径 对象相关联。</td></tr>
<tr><td>删除迭代</td><td>GdipDeletePathIter</td><td>删除迭代(迭代)</td><td>释放迭代器对象使用的资源。</td></tr>
<tr><td>迭代索引</td><td>GdipPathIterNextSubpath</td><td>迭代索引(迭代,@结果,@起始,@结束,@闭合)</td><td>获取此迭代器的关联路径中下一个子路径(图)的起始索引和结束索引。</td></tr>
<tr><td>迭代子路</td><td>GdipPathIterNextSubpath</td><td>迭代子路(迭代,@结果,@路径,@闭合)</td><td>从此迭代器的关联路径获取下一个图 (子路径) 。</td></tr>
<tr><td>迭代同类</td><td>GdipPathIterNextPathType</td><td>迭代同类(迭代,@结果,@起始,@结束,@闭合)</td><td>获取全部具有相同类型的下一组数据点的起始索引和结束索引。</td></tr>
<tr><td>迭代标记</td><td>GdipPathIterNextMarker</td><td>迭代标记(迭代,@结果,@起始,@结束)</td><td>获取此迭代器的关联路径中下一个标记分隔节的起始索引和结束索引。</td></tr>
<tr><td>迭代记路</td><td>GdipPathIterNextMarkerPath</td><td>迭代记路(迭代,@结果,@路径)</td><td>获取此迭代器的关联路径的下一个标记分隔部分。</td></tr>
<tr><td>迭代点数</td><td>GdipPathIterGetCount</td><td>迭代点数(迭代,@点数)</td><td>返回路径中的数据点数。</td></tr>
<tr><td>迭代数目</td><td>GdipPathIterGetSubpathCount</td><td>迭代数目(迭代,@数目)</td><td>返回路径中子路径的数目。</td></tr>
<tr><td>迭代有效</td><td>GdipPathIterIsValid</td><td>迭代有效(迭代,@是否)</td><td>指示迭代器参数指定的路径迭代器是否有效。</td></tr>
<tr><td>迭代曲线</td><td>GdipPathIterHasCurve</td><td>迭代曲线(迭代,@是否)</td><td>确定路径是否具有任何曲线。</td></tr>
<tr><td>迭代倒放</td><td>GdipPathIterRewind</td><td>迭代倒放(迭代)</td><td>将此迭代器倒带到其关联路径的开头。</td></tr>
<tr><td>迭代枚举</td><td>GdipPathIterEnumerate</td><td>迭代枚举(迭代,@结果,@点组,@类组,数量)</td><td>将路径的数据点复制到小数值点数组，并将路径的点类型复制到字节数组。</td></tr>
<tr><td>迭代数据</td><td>GdipPathIterCopyData</td><td>迭代数据(迭代,@结果,@点组,@类组,起始,结束)</td><td>将路径数据点的子集复制到小数值点数组，并将路径的点类型的子集复制到字节数组。</td></tr>
</table><a name="路径点类型">路径点类型</a>PathPointType 路径中数据点的点类型和标志。0到2位指定点的类型，3到7位指定点属性的标志。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>路点开头</td><td>PathPointTypeStart</td><td>0</td><td>指示该点是图形的开头。</td></tr>
<tr><td>路点线段</td><td>PathPointTypeLine</td><td>1</td><td>指示该点是线条的两个端点之一。</td></tr>
<tr><td>贝塞尔点</td><td>PathPointTypeBezier</td><td>3</td><td>指示该点是三次方贝塞尔样条的端点或控制点。</td></tr>
<tr><td>路点掩码</td><td>PathPointTypePathTypeMask</td><td>0x07</td><td>掩码除三个低序位（指示点类型）之外的所有位。</td></tr>
<tr><td>路点虚线</td><td>PathPointTypeDashMode</td><td>0x10</td><td>未使用。</td></tr>
<tr><td>路点标记</td><td>PathPointTypePathMarker</td><td>0x20</td><td>指定该点为标记。</td></tr>
<tr><td>路点终点</td><td>PathPointTypeCloseSubpath</td><td>0x80</td><td>指定该点是封闭的子路径中的最后一个点(图) 。</td></tr>
</table><b><a name="路径点类">路径点类</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>路径点类</td><td>PathData</td><td>12</td><td>具有一个点数组和一个类型的数组。</td></tr>
<tr><th colspan=4>路径点类——成员表</th></tr>
<tr><td>数量</td><td>count</td><td>整数</td><td>数组元素的数量。</td></tr>
<tr><td>点组</td><td>Points</td><td>整数</td><td>指向小数坐标点数组的指针</td></tr>
<tr><td>类组</td><td>types</td><td>整数</td><td>指向点类型数组的指针。类型数组中的每个元素都是一个字节，用于指定点类型和点数组中对应元素的一组标志。 </td></tr>
</table>
<p><font color="#0000FF" size=6><a name="矩阵变换">矩阵变换</a></font></p>
<p>矩阵对象表示 3 ×3 矩阵，该矩阵又表示仿射转换。矩阵对象在 3 ×3 矩阵中仅存储 9 个小数值中的 6 个，因为表示仿射变换的所有 3 ×3 矩阵都具有相同的第三列 (0、0、1) 。</p>
[1] m11 指定第一行、第一列中元素的实数-水平缩放分量或旋转角度的余弦值。<br>

[2] m12 指定第一行、第二列中的元素的实数-水平剪切分量或旋转角度的正弦值。<br>

[3] m21 指定第二行、第一列中的元素的实数 - 垂直剪切分量或旋转角度的负正弦值。<br>

[4] m22 指定第二行、第二列中元素的实数-垂直缩放分量或旋转角度的余弦值。<br>

[5] dx 指定第三行、第一列（水平平移组件）中的元素的实数。<br>

[6] dy 指定第三行、第二列中的元素的实数-垂直转换组件。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>矩阵创建</td><td>GdipCreateMatrix</td><td>矩阵创建(@矩阵)</td><td>创建并初始化矩阵对象。</td></tr>
<tr><td>矩阵新建</td><td>GdipCreateMatrix2</td><td>矩阵新建(m11,m12,m21,m22,dx,dy,@矩阵)</td><td>基于定义仿射转换的六个数字创建并初始化矩阵对象。</td></tr>
<tr><td>矩阵建立</td><td>GdipCreateMatrix3</td><td>矩阵建立(矩形,点,@矩阵)</td><td>基于小数值的矩形和点创建矩阵对象。</td></tr>
<tr><td>矩阵建设</td><td>GdipCreateMatrix3I</td><td>矩阵建设(矩形,点,@矩阵)</td><td>基于整数值的矩形和点创建矩阵对象。</td></tr>
<tr><td>矩阵克隆</td><td>GdipCloneMatrix</td><td>矩阵克隆(矩阵,@新矩阵)</td><td>创建一个新的矩阵对象副本。</td></tr>
<tr><td>矩阵删除</td><td>GdipDeleteMatrix</td><td>矩阵删除(矩阵)</td><td>清理矩阵对象使用的资源。</td></tr>
<tr><td>矩阵修改</td><td>GdipSetMatrixElements</td><td>矩阵修改(矩阵,m11,m12,m21,m22,dx,dy)</td><td>设置此矩阵的元素。</td></tr>
<tr><td>矩阵相乘</td><td>GdipMultiplyMatrix</td><td>矩阵相乘(矩阵,矩阵2,顺序)</td><td>使用自身和另一个矩阵的乘积更新此矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>矩阵转换</td><td>GdipTranslateMatrix</td><td>矩阵转换(矩阵,矩阵2,顺序)</td><td>使用自身乘积和转换矩阵更新此矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>矩阵缩放</td><td>GdipScaleMatrix</td><td>矩阵缩放(矩阵,横缩,纵缩,顺序)</td><td>使用自身和缩放矩阵的乘积更新此矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>矩阵旋转</td><td>GdipRotateMatrix</td><td>矩阵旋转(矩阵,角度,顺序)</td><td>使用自身乘积和旋转矩阵更新此矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>矩阵剪切</td><td>GdipShearMatrix</td><td>矩阵剪切(矩阵,平剪,直剪,顺序)</td><td>使用自身乘积和剪切矩阵更新此矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>矩阵反转</td><td>GdipInvertMatrix</td><td>矩阵反转(矩阵)</td><td>将此矩阵的元素替换为其逆矩阵的元素。</td></tr>
<tr><td>矩乘点组</td><td>GdipTransformMatrixPoints</td><td>矩乘点组(矩阵,点组,数量)</td><td>将小数值数组中的每个点乘以此矩阵。每个点为一行。相乘时行矩阵在左侧，此矩阵在右侧。</td></tr>
<tr><td>矩乘点阵</td><td>GdipTransformMatrixPointsI</td><td>矩乘点阵(矩阵,点组,数量)</td><td>将整数值数组中的每个点乘以此矩阵。每个点为一行。相乘时行矩阵在左侧，此矩阵在右侧。</td></tr>
<tr><td>矩乘向量</td><td>GdipVectorTransformMatrixPoints</td><td>矩乘向量(矩阵,点组,数量)</td><td>将小数值数组中的每个向量乘以此矩阵。每个向量为一行。忽略第三行转换元素。</td></tr>
<tr><td>矩乘矢量</td><td>GdipVectorTransformMatrixPointsI</td><td>矩乘矢量(矩阵,点组,数量)</td><td>将整数值数组中的每个向量乘以此矩阵。每个向量为一行。忽略第三行转换元素。</td></tr>
<tr><td>矩阵元素</td><td>GdipGetMatrixElements</td><td>矩阵元素(矩阵,@点组)</td><td>获取此矩阵的元素。按 m11、m12、m21、m22、m31、m32 的顺序放置在数组中</td></tr>
<tr><td>矩阵可逆</td><td>GdipIsMatrixInvertible</td><td>矩阵可逆(矩阵,@是否)</td><td>确定此矩阵是否不可逆。返回真是不可逆</td></tr>
<tr><td>矩阵标识</td><td>GdipIsMatrixIdentity</td><td>矩阵标识(矩阵,@是否)</td><td>确定此矩阵是否为标识矩阵。</td></tr>
<tr><td>矩阵相等</td><td>GdipIsMatrixEqual</td><td>矩阵相等(矩阵,矩阵2,@是否)</td><td>确定此矩阵的元素是否等于另一个矩阵的元素。</td></tr>
</table>
<p><font color="#0000FF" size=6><a name="位图缓存">位图缓存</a></font></p>
位图是一个位数组，用于指定像素矩形数组中每个像素的颜色。位图对象用来存储与设备无关的图像和与应用程序无关的图像的标准格式。<br>
缓存位图对象以针对特定设备上显示进行优化的格式存储位图。<font color="#FF0000">缓存位图对象简称存图</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>文件取流</td><td>GdipCreateStreamOnFile</td><td>文件取流(名称,读写,@流)</td><td>基于文件获取指向<a href="#流对象">流对象</a>接口的指针。</td></tr>
<tr><td>文件取图</td><td>GdipCreateBitmapFromFile</td><td>文件取图(宽文件名,@位图)</td><td>基于图像文件创建位图对象。格式包括 BMP、GIF、JPEG、PNG、TIFF、Exif、WMF 和 EMF。</td></tr>
<tr><td>配置取图</td><td>GdipCreateBitmapFromFileICM</td><td>配置取图(宽文件名,@位图)</td><td>基于ICM配置文件的图像文件创建位图对象。</td></tr>
<tr><td>数据取图</td><td>GdipCreateBitmapFromStream</td><td>数据取图(流,@位图)</td><td>基于流创建位图对象。此函数使用ICM。</td></tr>
<tr><td>配流取图</td><td>GdipCreateBitmapFromStreamICM</td><td>配流取图(流,@位图)</td><td>基于ICM流创建位图对象。</td></tr>
<tr><td>定位取图</td><td>GdipCreateBitmapFromScan0</td><td>定位取图(宽,高,步幅,格式,字节组,@位图)</td><td>根据字节数组以及宽高和<a href="#像素格式">格式信息</a>创建位图对象。步幅:相邻行间隔字节数;</td></tr>
<tr><td>图形取图</td><td>GdipCreateBitmapFromGraphics</td><td>图形取图(宽,高,图形,@位图)</td><td>基于图形设备对象，宽度和高度创建位图对象。</td></tr>
<tr><td>图面取图</td><td>GdipCreateBitmapFromDirectDrawSurface</td><td>图面取图(驱动图面对象,@位图)</td><td>基于图像对象，宽度和高度创建位图对象。</td></tr>
<tr><td>结构取图</td><td>GdipCreateBitmapFromGdiDib</td><td>结构取图(结构,数组,@位图)</td><td>基于位图信息结构和像素数据数组创建位图对象。</td></tr>
<tr><td>位图取图</td><td>GdipCreateBitmapFromHBITMAP</td><td>位图取图(句柄,色板,@位图)</td><td>基于图形设备接口位图的句柄和GDI调色板的句柄创建位图对象。</td></tr>
<tr><td>位图绘图</td><td>GdipCreateHBITMAPFromBitmap</td><td>位图绘图(位图,@句柄,背景色)</td><td>从此位图对象创建Windows图形设备接口（GDI）位图句柄。</td></tr>
<tr><td>图标取图</td><td>GdipCreateBitmapFromHICON</td><td>图标取图(句柄,@位图)</td><td>根据图标创建位图对象。</td></tr>
<tr><td>图标绘图</td><td>GdipCreateHICONFromBitmap</td><td>图标绘图(位图,@句柄)</td><td>从此位图对象创建一个图标。</td></tr>
<tr><td>资源取图</td><td>GdipCreateBitmapFromResource</td><td>资源取图(实例,资源,@位图)</td><td>基于应用程序或动态链接库（DLL）实例句柄和位图资源的名称创建位图对象。</td></tr>
<tr><td>裁剪位图</td><td>GdipCloneBitmapArea</td><td>裁剪位图(小数 左,顶,宽,高,格式,源图,@位图)</td><td>通过复制该位图的一部分来创建新的位图对象。<a href="#像素格式">图像像素格式</a>。左顶宽高为小数</td></tr>
<tr><td>裁剪图像</td><td>GdipCloneBitmapAreal</td><td>裁剪图像(左,顶,宽,高,格式,源图,@位图)</td><td>通过复制该位图的一部分来创建新的位图对象。<a href="#像素格式">图像像素格式</a>。左顶宽高为整数</td></tr>
<tr><td>位图取色</td><td>GdipBitmapGetPixel</td><td>位图取色(位图,X,Y,@颜色)</td><td>获取此位图中指定像素的颜色。</td></tr>
<tr><td>位图改色</td><td>GdipBitmapSetPixel</td><td>位图改色(位图,X,Y,颜色)</td><td>设置此位图中指定像素的颜色。</td></tr>
<tr><td>位图锁定</td><td>GdipBitmapLockBits</td><td>位图锁定(位图,矩形,标志,格式,<a href="#位图数据类">数据</a>)</td><td>锁定此位图的矩形部分，并提供可用于以指定<a href="#像素格式">格式</a>读取或写入像素数据的临时缓冲区。<a href="#位图锁定">标志</a></td></tr>
<tr><td>位图解锁</td><td>GdipBitmapUnlockBits</td><td>位图解锁(位图,<a href="#位图数据类">数据</a>)</td><td>解锁此位图之前由 位图锁定 锁定的此位图的一部分。</td></tr>
<tr><td>位图尺寸</td><td>GdipBitmapSetResolution</td><td>位图尺寸(位图,小数 X,小数 Y)</td><td>设置此位图对象的水平和垂直分辨率大小。（以点/英寸为单位）</td></tr>
<tr><td>位图改色</td><td>GdipBitmapSetPixel</td><td>位图改色(位图,X,Y,颜色)</td><td>设置此位图中指定像素的颜色。</td></tr>
<tr><td>图转格式</td><td>GdipBitmapConvertFormat</td><td>图转格式(位图,像素,抖动,色板类型,色板组,透明度)</td><td>位图中的原始像素数据将替换为新的像素格式数据。<a href="#像素格式">像素格式</a>,<a href="#位图抖动">抖动类型</a>,<a href="#调色板格式">色板类型</a>,<a href="#色板数组类">色板数组类</a></td></tr>
<tr><td>初始色板</td><td>GdipInitializePalette</td><td>初始色板(@色板组,色板类型,颜色数,是否透明,位图)</td><td>初始化标准、最佳或自定义调色板。<a href="#色板数组类">色板数组类</a>,<a href="#调色板格式">色板类型</a></td></tr>
<tr><td>位图效果</td><td>GdipBitmapApplyEffect</td><td>位图效果(位图,效果,矩形,是否辅助,辅助数据,数据大小)</td><td>通过应用指定的效果来更改此位图对象。</td></tr>
<tr><td>建效果图</td><td>GdipBitmapCreateApplyEffect</td><td>位图效果(位图,数量,效果,矩形,@新矩形<br>,@新图,是否辅助,辅助数据,数据大小)</td><td>通过将指定的效果应用于现有位图对象来创建新的位图对象。</td></tr>
<tr><td>取直方图</td><td>GdipBitmapGetHistogram</td><td>取直方图(位图,直方格式,元素数,数组0,数组1,数组2,数组3)</td><td>为此位图对象的指定颜色通道返回一个或多个直方图。<a href="#直方图格式">直方图格式</a></td></tr>
<tr><td>直方数目</td><td>GdipBitmapGetHistogramSize</td><td>直方数目(直方格式,@元素数)</td><td>返回在调用 取直方图 函数之前必须分配的数组中元素的数目。<a href="#直方图格式">直方图格式</a></td></tr>
<tr><td>创建效果</td><td>GdipCreateEffect</td><td>创建效果(类标识,@效果)</td><td>通过类标识GUID创建效果对象。</td></tr>
<tr><td>改效果值</td><td>GdipSetEffectParameters</td><td>改效果值(效果,数量,参数组)</td><td>设置此效果对象的参数组数值。</td></tr>
<tr><td>取效果值</td><td>GdipGetEffectParameters</td><td>取效果值(效果,数量,参数组)</td><td>设置此位图中指定像素的颜色。</td></tr>
<tr><td>内测控制</td><td>GdipTestControl</td><td>内测控制(控制,@参数)</td><td>指定图像处理行为中的更改。控制:0=强制双线性(参数为真且非临近插值=惰性双线性),<br>1=非ICM(参数为真忽略ICM配置文件),2=取版本号(参数接收)</td></tr>
<tr><td>创建存图</td><td>GdipCreateCachedBitmap</td><td>创建存图(位图,图形,@存图)</td><td>基于位图对象和图形设备对象创建缓存位图对象。</td></tr>
<tr><td>删除存图</td><td>GdipDeleteCachedBitmap</td><td>删除存图(存图)</td><td>清理缓存位图对象使用的资源。</td></tr>
<tr><td>绘制存图</td><td>GdipDrawCachedBitmap</td><td>绘制存图(图形,存图,X,Y)</td><td>绘制存储在 缓存位图 对象中的图像。</td></tr>
</table><a name="位图数据类">位图数据类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>位图数据类</td><td>BitmapData</td><td>24</td><td>包含了位图数据相关信息的结构</td></tr>
<tr><th colspan=4>位图数据类——成员表</th></tr>
<tr><td>宽度</td><td>Width</td><td>整数</td><td>位图对象的像素宽度</td></tr>
<tr><td>高度</td><td>Height</td><td>整数</td><td>位图对象的像素高度</td></tr>
<tr><td>步长</td><td>stride</td><td>整数</td><td>位图对象的跨距宽度（也称为扫描宽度）</td></tr>
<tr><td>像素</td><td>PixelFormat</td><td>整数</td><td>位图对象的像素信息格式</td></tr>
<tr><td>扫描</td><td>scan0</td><td>整数</td><td>位图对象第一像素数据的地址</td></tr>
<tr><td>预留</td><td>Reserved</td><td>整数</td><td>保留。 请勿使用</td></tr>
</table><a name="色板数组类">色板数组类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>色板数组类</td><td>ColorPalette</td><td>12+</td><td>包含了位图数据相关信息的结构</td></tr>
<tr><th colspan=4>色板数组类——成员表</th></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td><a href="#调色板格式">标准调色板格式标志</a>的组合。</td></tr>
<tr><td>数量</td><td>Count</td><td>整数</td><td>数组中的元素数。</td></tr>
<tr><td>数组</td><td>Entries[1]</td><td>整数</td><td>ARGB 颜色数组。自定义长度</td></tr>
</table><p><font color="#0000FF" size=6><a name="调色板格式">标准调色板格式标志</a>-PaletteType标识多种标准调色板格式。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>PaletteTypeCustom</td><td>0</td><td>调用方提供的任意自定义调色板。</td></tr>
<tr><td>PaletteTypeOptimal</td><td>1</td><td>最适合特定位图的调色板。 若要创建最佳调色板，请将 PaletteTypeOptimal、调色板中所需的颜色数以及 位图 对象的地址传递给 初始色板 方法。</td></tr>
<tr><td>PaletteTypeFixedBW</td><td>2</td><td>具有两种颜色的调色板。 此调色板类型适用于每个像素存储 1 位的位图。</td></tr>
<tr><td>PaletteTypeFixedHalftone8</td><td>3</td><td>基于两个强度的调色板，每个强度 (红色、绿色和蓝色通道的关闭或完全) 。 还包含系统调色板的 16 种颜色。 由于红色、绿色和蓝色的所有 8 个开/关组合已在系统调色板中，因此此调色板与系统调色板相同。 此调色板类型适用于每个像素存储 4 位的位图。</td></tr>
<tr><td>PaletteTypeFixedHalftone27</td><td>4</td><td>基于红色、绿色和蓝色通道的三种强度的调色板。 还包含系统调色板的 16 种颜色。 16 种系统调色板颜色中有 8 种是红、绿、蓝三种三强度组合，因此调色板中的颜色总数为 35。 如果调色板还包含透明颜色，则颜色总数为 36。</td></tr>
<tr><td>PaletteTypeFixedHalftone64</td><td>5</td><td>基于红色、绿色和蓝色通道的四种强度的调色板。 还包含系统调色板的 16 种颜色。 16 种系统调色板颜色中有 8 种是红色、绿色和蓝色的 64 种四强度组合，因此调色板中的颜色总数为 72。 如果调色板还包含透明颜色，则颜色总数为 73。</td></tr>
<tr><td>PaletteTypeFixedHalftone125</td><td>6</td><td>基于红色、绿色和蓝色通道的五种强度的调色板。 还包含系统调色板的 16 种颜色。 16 种系统调色板颜色中有 8 种是红色、绿色和蓝色的 125 种五强度组合，因此调色板中的颜色总数为 133。 如果调色板还包含透明颜色，则颜色总数为 134。</td></tr>
<tr><td>PaletteTypeFixedHalftone216</td><td>7</td><td>基于红色、绿色和蓝色通道的六种强度的调色板。 还包含系统调色板的 16 种颜色。 16 种系统调色板颜色中有 8 种是红色、绿色和蓝色的 216 种六强度组合，因此调色板中的颜色总数为 224。 如果调色板还包含透明颜色，则颜色总数为 225。 此调色板有时称为 Windows 半色调调色板或 Web 调色板。</td></tr>
<tr><td>PaletteTypeFixedHalftone252</td><td>8</td><td>基于 6 个红色强度、7 个绿色强度和 6 个蓝色强度的调色板。 不包括系统调色板。 颜色总数为 252。 如果调色板还包含透明颜色，则颜色总数为 253。</td></tr>
<tr><td>PaletteTypeFixedHalftone256</td><td>9</td><td>基于 8 种红色强度、8 种绿色强度和 4 种蓝色强度的调色板。 不包括系统调色板。 颜色总数为 256。 如果此调色板中包含透明颜色，则必须替换 RGB 组合之一。</td></tr>
</table><p><font color="#0000FF" size=6><a name="像素格式">图像像素格式常量</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>像素1位索引</td><td>PixelFormat1bppIndexed</td><td>$30101</td><td>指定格式为每像素 1 位，已编制索引。</td></tr>
<tr><td>像素4位索引</td><td>PixelFormat4bppIndexed</td><td>$30402</td><td>指定格式为每像素 4 位而且已创建索引。</td></tr>
<tr><td>像素8位索引</td><td>PixelFormat8bppIndexed</td><td>$30803</td><td>指定格式为每像素 8 位而且已创建索引。</td></tr>
<tr><td>像素16位灰度</td><td>PixelFormat16bppGreyScale</td><td>$101004</td><td>指定格式为每像素 16 位灰度。</td></tr>
<tr><td>像素16位均色</td><td>PixelFormat16bppRGB555</td><td>$21005</td><td>指定格式为每像素 16 位；红色、绿色和蓝色分量各使用 5 位。 剩余的 1 位未使用。</td></tr>
<tr><td>像素16位偏绿</td><td>PixelFormat16bppRGB565</td><td>$21006</td><td>指定格式为每像素 16 位；红色分量使用 5 位，绿色分量使用 6 位，蓝色分量使用 5 位。</td></tr>
<tr><td>像素16位透明</td><td>PixelFormat16bppARGB1555</td><td>$61007</td><td>指定格式为每像素 16 位;1 位用于 alpha 分量，5 位分别用于红色、绿色和蓝色分量。</td></tr>
<tr><td>像素24位均色</td><td>PixelFormat24bppRGB</td><td>$21808</td><td>指定格式为每像素 24 位；红色、绿色和蓝色分量各使用 8 位。</td></tr>
<tr><td>像素32位均色</td><td>PixelFormat32bppRGB</td><td>$22009</td><td>指定格式为每像素 32 位；红色、绿色和蓝色分量各使用 8 位。 剩余的 8 位未使用。</td></tr>
<tr><td>像素32位透明</td><td>PixelFormat32bppARGB</td><td>$26200A</td><td>指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。</td></tr>
<tr><td>像素32位左乘</td><td>PixelFormat32bppPARGB</td><td>$E200B</td><td>指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。 根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。</td></tr>
<tr><td>像素48位均色</td><td>PixelFormat48bppRGB</td><td>$10300C</td><td>指定格式为每像素 48 位；红色、绿色和蓝色分量各使用 16 位。</td></tr>
<tr><td>像素64位透明</td><td>PixelFormat64bppARGB</td><td>$34400D</td><td>指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。</td></tr>
<tr><td>像素64位左乘</td><td>PixelFormat64bppPARGB</td><td>$1C400E</td><td>指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。 根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。</td></tr>
</table><p><font color="#0000FF" size=6><a name="位图锁定">位图锁定标志</a>-传递给 位图锁定 函数的 标志 参数的标志。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ImageLockModeRead</td><td>0x0001</td><td>指定锁定图像的一部分以便读取。</td></tr>
<tr><td>ImageLockModeWrite</td><td>0x0002</td><td>指定锁定图像的一部分以便写入。</td></tr>
<tr><td>ImageLockModeUserInputBuf</td><td>0x0004</td><td>指定由用户分配读取或写入像素数据时使用的缓冲区。如果设置了此标志则 数据 参数为输入,否则为输出</td></tr>
</table><p><font color="#0000FF" size=6><a name="位图抖动">位图抖动类型标志</a>-标识转换位图时用于抖变的可用算法。DitherType</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>DitherTypeNone</td><td>0</td><td>未执行抖振。 源位图中的像素映射到由 Bitmap：：ConvertFormat 方法的调色板参数指定的调色板中最近的颜色。 此算法可以与任何调色板一起使用。 如果 调色板参数指定的调色板 没有 PaletteType 枚举中列出的标准固定格式之一，请将 PaletteTypeCustom 传递给 palettetype 参数。</td></tr>
<tr><td>DitherTypeSolid</td><td>1</td><td>未执行抖振。 源位图中的像素映射到由 Bitmap：：ConvertFormat 方法的调色板参数指定的调色板中最近的颜色。 此算法可以与任何调色板一起使用。 如果 调色板参数指定的调色板 没有 PaletteType 枚举中列出的标准固定格式之一，请将 PaletteTypeCustom 传递给 palettetype 参数。</td></tr>
<tr><td>DitherTypeOrdered4x4</td><td>2</td><td>可以使用此算法根据其中一个标准固定调色板中的颜色执行抖动。 还可以使用此算法将位图转换为没有调色板的每像素 16 位格式。</td></tr>
<tr><td>DitherTypeOrdered8x8</td><td>3</td><td>使用其中一个标准固定调色板中的颜色执行抖动。</td></tr>
<tr><td>DitherTypeOrdered16x16</td><td>4</td><td>使用其中一个标准固定调色板中的颜色执行抖动。</td></tr>
<tr><td>DitherTypeSpiral4x4</td><td>5</td><td>使用其中一个标准固定调色板中的颜色执行抖动。</td></tr>
<tr><td>DitherTypeSpiral8x8</td><td>6</td><td>使用其中一个标准固定调色板中的颜色执行抖动。</td></tr>
<tr><td>DitherTypeDualSpiral4x4</td><td>7</td><td>使用其中一个标准固定调色板中的颜色执行抖动。</td></tr>
<tr><td>DitherTypeDualSpiral8x8</td><td>8</td><td>使用其中一个标准固定调色板中的颜色执行抖动。</td></tr>
<tr><td>DitherTypeErrorDiffusion</td><td>9</td><td>抖动是基于 图转格式函数的调色板参数指定的调色板执行的。 此算法可以与任何调色板一起使用。 如果 调色板参数指定的调色板 没有 PaletteType 枚举中列出的标准固定格式之一，请将 PaletteTypeCustom 传递给 palettetype 参数。</td></tr>
<tr><td>DitherTypeMax</td><td>10</td><td>TBD</td></tr>
</table><p><font color="#0000FF" size=6><a name="直方图格式">直方图格式标志</a>-HistogramFormat指定表示位图颜色通道的直方图的数量和类型。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>HistogramFormatARGB</td><td>0</td><td>指定 取直方图 函数返回四个直方图：透明、红色、绿色和蓝色通道各一个直方图。 透明 通道直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 红色通道直方图将写入 数组1 参数指向的缓冲区。 绿色通道直方图将写入 数组2 参数指向的缓冲区。 蓝色通道直方图写入 数组3 参数指向的缓冲区。</td></tr>
<tr><td>HistogramFormatPARGB</td><td>1</td><td>指定 取直方图 函数返回四个直方图：透明、红色、绿色和蓝色通道各一个直方图。 创建直方图之前，红色、绿色和蓝色通道分别乘以 透明 通道。 当颜色通道乘以 透明 通道时，位图不会永久更改;该乘法仅用于创建直方图。 透明 通道直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 红色通道直方图将写入 数组1 参数指向的缓冲区。 绿色通道直方图将写入 数组2 参数指向的缓冲区。 蓝色通道直方图写入 数组3 参数指向的缓冲区。</td></tr>
<tr><td>HistogramFormatRGB</td><td>2</td><td>指定 取直方图 函数返回三个直方图：红色、绿色和蓝色通道各一个直方图。 红色通道直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 绿色通道直方图将写入 数组1 参数指向的缓冲区。 蓝色通道直方图将写入 数组2 参数指向的缓冲区。 数组3 参数必须设置为 0。</td></tr>
<tr><td>HistogramFormatGray</td><td>3</td><td>指定将每个像素转换为 0 到 255 范围内的灰度值，然后根据这些灰度值返回一个直方图。 位图不会因转换为灰度值而永久更改;计算这些值只是为了创建直方图。 灰度直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 数组1、数组2 和 数组3 参数必须设置为 0。</td></tr>
<tr><td>HistogramFormatB</td><td>4</td><td>指定 取直方图 函数返回蓝色通道的直方图。 蓝色通道直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 数组1、数组2 和 数组3 参数必须设置为 0。</td></tr>
<tr><td>HistogramFormatG</td><td>5</td><td>指定 取直方图 函数返回绿色通道的直方图。 绿色通道直方图将写入 取直方图 函数的 数组0 参数指向的缓冲区。 数组1、数组2 和 数组3 参数必须设置为 0。</td></tr>
<tr><td>HistogramFormatR</td><td>6</td><td>指定 取直方图 函数返回红色通道的直方图。 红色通道直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 数组1、数组2 和 数组3 参数必须设置为 0。</td></tr>
<tr><td>HistogramFormatA</td><td>7</td><td>指定 取直方图 函数返回 透明 通道的直方图。 透明 通道直方图写入 取直方图 函数的 数组0 参数指向的缓冲区。 数组1、数组2 和 数组3 参数必须设置为 0。</td></tr>
</table><br></br>
<p><font color="#0000FF" size=6><a name="图像图元">图像图元</a></font></p>
图像对象提供用于 (位图加载和保存光栅图像的方法) 和矢量图像 (图元文件) 。可以从各种文件类型（包括 BMP、ICON、GIF、JPEG、Exif、PNG、TIFF、WMF 和 EMF）构造图像对象。<br>
图元文件对象定义图形图元文件。 图元文件包含描述图形 API 调用序列的记录。可以构造(录制)图元文件显示(播放)。<font color="#FF0000">图元文件对象简称图元</font><br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>文件载图</td><td>GdipLoadImageFromFile</td><td>文件载图(文件名,@图像)</td><td>根据文件创建图像对象。</td></tr>
<tr><td>配置载图</td><td>GdipLoadImageFromFileICM</td><td>配置载图(文件名,@图像)</td><td>根据ICM文件创建图像对象。</td></tr>
<tr><td>数据载图</td><td>GdipLoadImageFromStream</td><td>数据载图(流,@图像)</td><td>根据文件流创建图像对象。</td></tr>
<tr><td>配流载图</td><td>GdipLoadImageFromStreamICM</td><td>配流载图(文件流,@图像)</td><td>根据ICM文件流创建图像对象。</td></tr>
<tr><td>克隆图像</td><td>GdipCloneImage</td><td>克隆图像(图像,@新图)</td><td>创建一个新的图像对象，并使用此图像对象的内容进行初始化。</td></tr>
<tr><td>释放图像</td><td>GdipDisposeImage</td><td>释放图像(图像)</td><td>释放图像对象使用的资源。</td></tr>
<tr><td>添加存图</td><td>GdipSaveAdd</td><td>添加存图(图像,编码)</td><td>将所选帧从多帧图像保存到文件流。</td></tr>
<tr><td>添加新图</td><td>GdipSaveAddImage</td><td>添加新图(图像,新图,编码)</td><td>将所选帧从多帧图像保存到文件流。</td></tr>
<tr><td>文件存图</td><td>GdipSaveImageToFile</td><td>文件存图(图像,宽文件名,类号,编码)</td><td>将图像保存到文件。</td></tr>
<tr><td>数据存图</td><td>GdipSaveImageToStream</td><td>数据存图(图像,流,类号,编码)</td><td>将图像保存到流对象。</td></tr>
<tr><td>图像类型</td><td>GdipGetImageType</td><td>图像类型(图像,@类型)</td><td>获取此图像对象的类型。</td></tr>
<tr><td>图像宽度</td><td>GdipGetImageWidth</td><td>图像宽度(图像,@宽度)</td><td>获取此图像对象的宽度。</td></tr>
<tr><td>图像高度</td><td>GdipGetImageHeight</td><td>图像高度(图像,@高度)</td><td>获取此图像对象的高度。</td></tr>
<tr><td>图像边界</td><td>GdipGetImageBounds</td><td>图像边界(图像,矩形,@单位)</td><td>获取此图像对象的边界矩形。</td></tr>
<tr><td>图像宽高</td><td>GdipGetImageDimension</td><td>图像宽高(图像,@宽度,@高度)</td><td>获取此图像对象的宽度和高度(小数值)。</td></tr>
<tr><td>图像横值</td><td>GdipGetImageHorizontalResolution</td><td>图像横值(图像,@宽度)</td><td>获取此图像的水平分辨率（以英寸为单位）。</td></tr>
<tr><td>图像竖值</td><td>GdipGetImageVerticalResolution</td><td>图像竖值(图像,@高度)</td><td>获取此图像的垂直分辨率（以英寸为单位）。</td></tr>
<tr><td>图像标志</td><td>GdipGetImageFlags</td><td>图像标志(图像,@标志)</td><td>获取此图像对象的<a href="#图像标志">标志</a>。</td></tr>
<tr><td>图像标识</td><td>GdipGetImageRawFormat</td><td>图像标识(图像,@类号)</td><td>获取此图像对象的全局唯一标识符（GUID）。</td></tr>
<tr><td>图像格式</td><td>GdipGetImagePixelFormat</td><td>图像格式(图像,@格式)</td><td>获取此图像对象的<a href="#像素格式">像素格式</a>。</td></tr>
<tr><td>图像缩略</td><td>GdipGetImageThumbnail</td><td>图像缩略(图像,宽,高,@小图,回调,附加)</td><td>从图像对象获取缩略图。<a href="#图像完成">回调函数</a></td></tr>
<tr><td>编码表长</td><td>GdipGetEncoderParameterListSize</td><td>编码表长(图像,类号,@大小)</td><td>获取指定图像编码器的参数列表的大小（以字节为单位）。</td></tr>
<tr><td>编码列表</td><td>GdipGetEncoderParameterList</td><td>编码列表(图像,类号,大小,@缓冲区)</td><td>获取指定图像编码器支持的参数列表。</td></tr>
<tr><td>图像帧长</td><td>GdipImageGetFrameDimensionsCount</td><td>图像帧长(图像,类号,@大小)</td><td>获取此图像对象中的帧尺寸（GUID）数。</td></tr>
<tr><td>图像帧类</td><td>GdipImageGetFrameDimensionsList</td><td>图像帧类(图像,@类号,大小)</td><td>获取此图像对象的帧尺寸（GUID）的标识符</td></tr>
<tr><td>图像帧数</td><td>GdipImageGetFrameCount</td><td>图像帧数(图像,类号,@数量)</td><td>获取此图像对象中指定尺寸（GUID）的帧数。</td></tr>
<tr><td>图像选帧</td><td>GdipImageSelectActiveFrame</td><td>图像选帧(图像,类号,索引)</td><td>选择由标识（GUID）和索引指定的此图像对象中的帧。</td></tr>
<tr><td>图像旋转</td><td>GdipImageRotateFlip</td><td>图像旋转(图像,类型)</td><td>旋转和翻转此图像。<a href="#旋转翻转">旋转翻转类型</a></td></tr>
<tr><td>图像取板</td><td>GdipGetImagePalette</td><td>图像取板(图像,色板,大小)</td><td>获取此图像对象的<a href="#色板数组类">色板数组</a>。</td></tr>
<tr><td>图像改板</td><td>GdipSetImagePalette</td><td>图像改板(图像,色板)</td><td>获取此图像对象的<a href="#色板数组类">色板数组</a>。</td></tr>
<tr><td>图像板长</td><td>GdipGetImagePaletteSize</td><td>图像板长(图像,@大小)</td><td>获取此图像对象的调色板大小。</td></tr>
<tr><td>图像项数</td><td>GdipGetPropertyCount</td><td>图像项数(图像,@数量)</td><td>获取此图像对象的属性项数量。</td></tr>
<tr><td>图像项列</td><td>GdipGetPropertyIdList</td><td>图像项列(图像,数量,@数组)</td><td>获取此图像对象的元数据中使用的属性标识符的列表。</td></tr>
<tr><td>图像项长</td><td>GdipGetPropertyItemSize</td><td>图像项长(图像,序号,@大小)</td><td>获取此图像对象的的指定属性项的大小（以字节为单位）。</td></tr>
<tr><td>图像项值</td><td>GdipGetPropertyItem</td><td>图像项值(图像,序号,大小,@数据)</td><td>获取此图像对象的定的属性项一段元数据。</td></tr>
<tr><td>图像总项</td><td>GdipGetPropertySize</td><td>图像总项(图像,@大小,@项数)</td><td>获取此图像对象存储的所有属性项数和总大小（以字节为单位）。</td></tr>
<tr><td>图像全项</td><td>GdipGetAllPropertyItems</td><td>图像全项(图像,大小,项数,项数组)</td><td>获取此图像对象的元数据的全部<a href="#属性项类">属性项</a>。</td></tr>
<tr><td>图像删项</td><td>GdipRemovePropertyItem</td><td>图像删项(图像,序号)</td><td>从图像对象中删除属性项 (元数据) 片段。</td></tr>
<tr><td>图像改项</td><td>GdipSetPropertyItem</td><td>图像改项(图像,属性项)</td><td>设置此图像对象元数据的一个<a href="#属性项类">属性项</a>。</td></tr>
<tr><td>图像首项</td><td>GdipFindFirstImageItem</td><td>图像首项(图像,数据项)</td><td>检索此图像对象中第一个<a href="#图项数据类">元数据项</a>的说明和数据大小。</td></tr>
<tr><td>图像次项</td><td>GdipFindNextImageItem</td><td>图像次项(图像,数据项)</td><td>检索此图像对象中下一个<a href="#图项数据类">元数据项</a>的说明和数据大小。</td></tr>
<tr><td>图像取项</td><td>GdipGetImageItemData</td><td>图像取项(图像,数据项)</td><td>从此图像对象中获取一段<a href="#图项数据类">元数据项</a>。</td></tr>
<tr><td>图像中止</td><td>GdipImageSetAbort</td><td>图像中止(图像,@中止)</td><td>设置在耗时的呈现操作期间定期调用 中止 函数(无参数)。</td></tr>
<tr><td>图像验证</td><td>GdipImageForceValidation</td><td>图像项数(图像,@数量)</td><td>此函数强制验证映像。</td></tr>
<tr><td>图元转强</td><td>GdipConvertToEmfPlus</td><td>图元转强(图形,图元,@成功,<a href="#图元类型">类型</a>,描述,@强元)</td><td>将此 图元 对象转换为 EMF+ 格式。描述为可选宽字符</td></tr>
<tr><td>图元强文</td><td>GdipConvertToEmfPlusToFile</td><td>图元增强(图形,图元,@成功,宽名,<a href="#图元类型">类型</a>,描述,@强元)</td><td>将此 图元文件 对象转换为 EMF+ 格式。描述为可选宽字符</td></tr>
<tr><td>图元强流</td><td>GdipConvertToEmfPlusToStream</td><td>图元转强(图形,图元,@成功,流,<a href="#图元类型">类型</a>,描述,@强元)</td><td>将此 图元流 对象转换为 EMF+ 格式。描述为可选宽字符</td></tr>
<tr><td>图元标头</td><td>GdipGetMetafileHeaderFromWmf</td><td>图元标头(元窗口,标头,@副本)</td><td>获取图元标头。</td></tr>
<tr><td>强元标头</td><td>GdipGetMetafileHeaderFromEmf</td><td>强元标头(元窗口,@标头)</td><td>获取强图元标头。</td></tr>
<tr><td>文件标头</td><td>GdipGetMetafileHeaderFromFile</td><td>文件标头(宽文件名,@标头)</td><td>获取文件标头。</td></tr>
<tr><td>取流标头</td><td>GdipGetMetafileHeaderFromStream</td><td>取流标头(流,@标头)</td><td>获取流对象标头。</td></tr>
<tr><td>取元标头</td><td>GdipGetMetafileHeaderFromMetafile</td><td>取元标头(图元,@标头)</td><td>获取图元文件标头。</td></tr>
<tr><td>图元窗口</td><td>GdipGetHemfFromMetafile</td><td>图元窗口(图元,@窗口)</td><td>获取增强型图元文件 (EMF) 文件的窗口句柄。</td></tr>
<tr><td>新建图元</td><td>GdipCreateMetafileFromWmf</td><td>新建图元(窗口,删除,图元类,@图元)</td><td>创建用于录制的 Windows GDI+ 图元文件对象。</td></tr>
<tr><td>新建强元</td><td>GdipCreateMetafileFromEmf</td><td>新建强元(窗口,是否删除,@图元)</td><td>创建可以进行播放增强型图元文件 (EMF) 文件。</td></tr>
<tr><td>文件图元</td><td>GdipCreateMetafileFromFile</td><td>文件图元(宽文件名,@图元)</td><td>从文件创建用于播放的图元文件对象。</td></tr>
<tr><td>流建图元</td><td>GdipCreateMetafileFromStream</td><td>流建图元(流,@图元)</td><td>从流创建用于播放的图元文件对象。</td></tr>
<tr><td>录制图元</td><td>GdipRecordMetafile</td><td>录制图元(设备,边框,<a href="#框架单位">单位</a>,<a href="#图元类型">类型</a>,描述,@图元)</td><td>创建用于录制的图元文件对象。边框矩形为小数,描述为可选宽字符</td></tr>
<tr><td>记录图元</td><td>GdipRecordMetafileI</td><td>记录图元(设备,边框,<a href="#框架单位">单位</a>,<a href="#图元类型">类型</a>,描述,@图元)</td><td>创建用于录制的图元文件对象。边框矩形为整数,描述为可选宽字符</td></tr>
<tr><td>录制文元</td><td>GdipRecordMetafileFileName</td><td>录制文元(宽名,设备,边框,<a href="#框架单位">单位</a>,<a href="#图元类型">类型</a>,描述,@图元)</td><td>从宽文件名创建用于录制的图元文件对象。边框矩形为小数,描述为可选宽字符</td></tr>
<tr><td>记录文元</td><td>GdipRecordMetafileFileNameI</td><td>记录文元(宽名,设备,边框,<a href="#框架单位">单位</a>,<a href="#图元类型">类型</a>,描述,@图元)</td><td>从宽文件名创建用于录制的图元文件对象。边框矩形为整数,描述为可选宽字符</td></tr>
<tr><td>录制流元</td><td>GdipRecordMetafileStream</td><td>录制流元(流,设备,边框,<a href="#框架单位">单位</a>,<a href="#图元类型">类型</a>,描述,@图元)</td><td>从流对象创建用于录制的图元文件对象。边框矩形为小数,描述为可选宽字符</td></tr>
<tr><td>记录流元</td><td>GdipRecordMetafileStreamI</td><td>记录流元(流,设备,边框,<a href="#框架单位">单位</a>,<a href="#图元类型">类型</a>,描述,@图元)</td><td>从流对象创建用于录制的图元文件对象。边框矩形为整数,描述为可选宽字符</td></tr>
<tr><td>元改分辨</td><td>GdipSetMetafileDownLevelRasterizationLimit</td><td>元改分辨(图元,分辨率)</td><td>设置存储在此图元文件中的某些画笔位图的分辨率。</td></tr>
<tr><td>元取分辨</td><td>GdipGetMetafileDownLevelRasterizationLimit</td><td>元取分辨(图元,@分辨率)</td><td>获取存储在此图元文件中的某些画笔位图的分辨率。</td></tr>
</table><p><font color="#0000FF" size=6><a name="框架单位">框架单位</a>-MetafileFrameUnit 枚举指定图元文件框架矩形的度量单位。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>MetafileFrameUnitPixel</td><td>2</td><td>指定单位为 1 像素。</td></tr>
<tr><td>MetafileFrameUnitPoint</td><td>3</td><td>指定单位为 1 磅。</td></tr>
<tr><td>MetafileFrameUnitInch</td><td>4</td><td>指定单位为 1 英寸。</td></tr>
<tr><td>MetafileFrameUnitDocument</td><td>5</td><td>指定单位为 1/300 英寸。</td></tr>
<tr><td>MetafileFrameUnitMillimeter</td><td>6</td><td>指定单位为 1 毫米。</td></tr>
<tr><td>MetafileFrameUnitGdi</td><td>7</td><td>指定单位为 0.01 毫米。 提供此元素是为了与 GDI 兼容。</td></tr>
</table><p><font color="#0000FF" size=6><a name="图元类型">图元类型</a>-EmfType 枚举指定放置在增强型图元文件 (EMF) 文件中的记录的性质。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>EmfTypeEmfOnly</td><td>0</td><td>指定图元文件中的所有记录都是 EMF 记录，这些记录可由 GDI 或 GDI+ 显示。</td></tr>
<tr><td>EmfTypeEmfPlusOnly</td><td>1</td><td>指定图元文件中的所有记录都是 EMF+ 记录，这些记录可由 GDI+ 显示，但不能由 GDI 显示。</td></tr>
<tr><td>EmfTypeEmfPlusDual</td><td>2</td><td>指定图元文件中所有的 EMF+ 记录都与一个替换的 EMF 记录相关联。 EmfTypeEmfPlusDual 类型的图元文件可由 GDI 或 GDI+ 显示。</td></tr>
</table><p><font color="#0000FF" size=6><a name="图像标志">图像标志</a>-ImageFlags 枚举指定图像对象中包含的像素数据的属性。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ImageFlagsNone</td><td>0</td><td>不指定格式信息。</td></tr>
<tr><td>ImageFlagsScalable</td><td>0x0001</td><td>指定可以缩放映像。</td></tr>
<tr><td>ImageFlagsHasAlpha</td><td>0x0002</td><td>指定像素数据包含 alpha 值。</td></tr>
<tr><td>ImageFlagsHasTranslucent</td><td>0x0004</td><td>指定此像素数据有不同于 0（透明）和 255（不透明）的 alpha 值。</td></tr>
<tr><td>ImageFlagsPartiallyScalable</td><td>0x0008</td><td>指定像素数据可部分缩放，但存在一些限制。</td></tr>
<tr><td>ImageFlagsColorSpaceRGB</td><td>0x0010</td><td>指定使用 RGB 颜色空间存储图像。</td></tr>
<tr><td>ImageFlagsColorSpaceCMYK</td><td>0x0020</td><td>指定使用 CMYK 颜色空间存储图像。</td></tr>
<tr><td>ImageFlagsColorSpaceGRAY</td><td>0x0040</td><td>指定图像为灰度图像。</td></tr>
<tr><td>ImageFlagsColorSpaceYCBCR</td><td>0x0080</td><td>指定使用 YCBCR 颜色空间来存储图像。</td></tr>
<tr><td>ImageFlagsColorSpaceYCCK</td><td>0x0100</td><td>指定使用 YCCK 颜色空间来存储图像。</td></tr>
<tr><td>ImageFlagsHasRealDPI</td><td>0x1000</td><td>指定在图像中存储每英寸点数信息。</td></tr>
<tr><td>ImageFlagsHasRealPixelSize</td><td>0x2000</td><td>指定在图像中存储像素大小。</td></tr>
<tr><td>ImageFlagsReadOnly</td><td>0x00010000</td><td>指定像素数据为只读。</td></tr>
<tr><td>ImageFlagsCaching</td><td>0x00020000</td><td>指定可以缓存像素数据以加快访问速度。</td></tr>
</table><p><font color="#0000FF" size=6><a name="旋转翻转">旋转翻转</a>-RotateFlipType 枚举指定图像的旋转方向和用于翻转图像的轴。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>RotateNoneFlipNone</td><td>0</td><td>指定无旋转和不翻转。</td></tr>
<tr><td>Rotate90FlipNone</td><td>1</td><td>指定不翻转的 90 度旋转。</td></tr>
<tr><td>Rotate180FlipNone</td><td>2</td><td>指定不翻转的 180 度旋转。</td></tr>
<tr><td>Rotate270FlipNone</td><td>3</td><td>指定不翻转的 270 度旋转。</td></tr>
<tr><td>RotateNoneFlipX</td><td>4</td><td>指定无旋转和水平翻转。</td></tr>
<tr><td>Rotate90FlipX</td><td>5</td><td>指定后跟水平翻转的 90 度旋转。</td></tr>
<tr><td>Rotate180FlipX</td><td>6</td><td>指定后跟水平翻转的 180 度旋转。</td></tr>
<tr><td>Rotate270FlipX</td><td>7</td><td>指定后跟水平翻转的 270 度旋转。</td></tr>
<tr><td>RotateNoneFlipY</td><td>8</td><td>指定无旋转和垂直翻转。</td></tr>
<tr><td>Rotate90FlipY</td><td>9</td><td>指定后跟垂直翻转的 90 度旋转。</td></tr>
<tr><td>Rotate180FlipY</td><td>10</td><td>指定后跟垂直翻转的 180 度旋转。</td></tr>
<tr><td>Rotate270FlipY</td><td>11</td><td>指定后跟垂直翻转的 270 度旋转。</td></tr>
<tr><td>RotateNoneFlipXY</td><td>12</td><td>指定无旋转、水平翻转和垂直翻转。</td></tr>
<tr><td>Rotate90FlipXY</td><td>13</td><td>指定 90 度旋转，然后水平翻转，然后垂直翻转。</td></tr>
<tr><td>Rotate180FlipXY</td><td>14</td><td>指定 180 度旋转，然后水平翻转，然后垂直翻转。</td></tr>
<tr><td>Rotate270FlipXY</td><td>15</td><td>指定 270 度旋转，然后水平翻转，然后垂直翻转。</td></tr>
</table><br><a name="图像完成">图像完成</a></br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>图像完成</td><td>Imageabort</td><td>1</td><td>在应用程序中实现的回调函数的签名。在创建或检索缩略图或绘制图像的过程中，GDI+ 会调用此函数来中止该过程。</td></tr>
<tr><th colspan=4>图像完成——参数表</th></tr>
<tr><td>附加</td><td>unnamedParam1</td><td>整数</td><td>定义回调函数时程序指定的附加数据。</td></tr>
</table><a name="属性项类">属性项类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>属性项类</td><td>PropertyItem</td><td>4</td><td>包含一段图像元数据。</td></tr>
<tr><th colspan=4>属性项类——成员表</th></tr>
<tr><td>编号</td><td>propId</td><td>整数</td><td>标识存储在此结构中的元<a href="https://learn.microsoft.com/zh-cn/windows/win32/gdiplus/-gdiplus-constant-property-item-descriptions">数据类型</a>。</td></tr>
<tr><td>长度</td><td>Length</td><td>整数</td><td>值数组的大小（以字节为单位）。</td></tr>
<tr><td>分类</td><td>type</td><td>整形</td><td>标识值数组中值的<a href="#图像数据类型">数据类型</a>。</td></tr>
<tr><td>项值</td><td>value</td><td>整数</td><td>指向值数组的指针。数组中的每个值都具有由分类数据成员指定的数据类型。</td></tr>
</table><p><font color="#0000FF" size=6><a name="图像数据类型">数据类型</a>-RotateFlipType 枚举指定图像的旋转方向和用于翻转图像的轴。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>PropertyTagTypeByte</td><td>1</td><td>指定 值 数据成员是字节数组。</td></tr>
<tr><td>PropertyTagTypeASCII</td><td>2</td><td>指定 值 数据成员是以 null 结尾的 ASCII 字符串。如果设置此值则应将长度数据成员设置为字符串的长度，包括 0 终止符。 例如，字符串 HELLO 的长度为 6。</td></tr>
<tr><td>PropertyTagTypeShort</td><td>3</td><td>指定 值 数据成员是无符号短 (16 位) 整数的数组。</td></tr>
<tr><td>PropertyTagTypeLong</td><td>4</td><td>指定 值 数据成员是无符号长 (32 位) 整数的数组。</td></tr>
<tr><td>PropertyTagTypeRational</td><td>5</td><td>指定 值 数据成员是无符号长整数对的数组。 每对表示一个分数;第一个整数是分子，第二个整数是分母。</td></tr>
<tr><td>PropertyTagTypeUndefined</td><td>7</td><td>指定 值 数据成员是可以保存任何数据类型的值的字节数组。</td></tr>
<tr><td>PropertyTagTypeSLONG</td><td>9</td><td>指定 值 数据成员是带符号长 (32 位) 整数的数组。</td></tr>
<tr><td>PropertyTagTypeSRational</td><td>10</td><td>指定 值 数据成员是带符号长整数对的数组。 每对表示一个分数;第一个整数是分子，第二个整数是分母。</td></tr>
</table><br><a name="图项数据类">图项数据类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>图项数据类</td><td>ImageItemData</td><td>28</td><td>用于存储和检索自定义图像元数据。</td></tr>
<tr><th colspan=4>图项数据类——成员表</th></tr>
<tr><td>大小</td><td>Size</td><td>整数</td><td>指定此结构大小(28)。</td></tr>
<tr><td>位置</td><td>Position</td><td>整数</td><td><a href="#图像数据位置">数据位置</a> 枚举的元素，该元素指定图像文件中应存储一段自定义元数据的位置。</td></tr>
<tr><td>描述</td><td>Desc</td><td>整数</td><td>您创建的用于标识一段自定义元数据的字节序列。JPEG是一字节。PNG为四字节。GIF为11 字节。</td></tr>
<tr><td>字数</td><td>DescSize</td><td>整数</td><td>指定描述指向的标识符的大小（以字节为单位）的整数。JPEG 设置为 1，PNG 设置为 4，GIF 设置为 11。</td></tr>
<tr><td>数据</td><td>Data</td><td>整数</td><td>指向包含元数据的缓冲区的指针。</td></tr>
<tr><td>长度</td><td>DataSize</td><td>整数</td><td>指定数据缓冲区的大小（以字节为单位）。</td></tr>
<tr><td>身份</td><td>Cookie</td><td>整数</td><td>由 GDI+ 在内部使用。</td></tr>
</table><p><font color="#0000FF" size=6><a name="图像数据位置">数据位置</a>-ItemDataPosition 枚举用于指定自定义元数据在图像文件中的位置。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ItemDataPositionAfterHeader</td><td>0x0</td><td>指定自定义元数据存储在文件标头之后。 对 JPEG、PNG 和 GIF 有效。</td></tr>
<tr><td>ItemDataPositionAfterPalette</td><td>0x1</td><td>指定自定义元数据存储在调色板之后。 对 PNG 有效。</td></tr>
<tr><td>ItemDataPositionAfterBits</td><td>0x2</td><td>指定自定义元数据存储在像素数据之后。 对 GIF 和 PNG 有效。</td></tr>
</table><p><font color="#0000FF" size=6><a name="图像属性">图像属性</a></font></p>
图像属性对象包含有关如何在呈现期间操作位图和图元文件颜色的信息,简称图性。图像属性对象维护多个颜色调整设置，包括颜色调整矩阵、灰度调整矩阵、伽玛校正值、颜色映射表和颜色阈值。<br>
颜色调整矩阵包含25个小数值的 5×5 矩阵,简称色阵。图像属性对象的几种方法通过使用颜色矩阵调整图像颜色。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>图性创建</td><td>GdipCreateImageAttributes</td><td>图性创建(@图性)</td><td>创建图像属性对象。</td></tr>
<tr><td>图性克隆</td><td>GdipCloneImageAttributes</td><td>图性克隆(图性,@图性)</td><td>创建图像属性对象的副本。</td></tr>
<tr><td>图性释放</td><td>GdipDisposeImageAttributes</td><td>图性释放(图性)</td><td>释放图像属性对象使用的资源。</td></tr>
<tr><td>图性标识</td><td>GdipSetImageAttributesToIdentity</td><td>图性标识(图性,调整类别)</td><td>将指定类别的颜色调整矩阵设置为标识矩阵。五个<a href="#颜色调整">调整类别</a>：默认、位图、画笔、笔和文本。</td></tr>
<tr><td>图性重置</td><td>GdipResetImageAttributes</td><td>图性重置(图性)</td><td>创建图像属性对象。</td></tr>
<tr><td>图性色阵</td><td>GdipSetImageAttributesColorMatrix</td><td>图性色阵(图性,调整,启用,色阵,灰阵,标志)</td><td>为指定类别设置颜色调整矩阵。启用为真时<a href="#颜色调整">调整类别</a>启用单独的颜色调整。<a href="#颜色矩阵标志">标志</a>为1时灰阵用于调整灰色阴影的矩阵。</td></tr>
<tr><td>图性阈值</td><td>GdipSetImageAttributesThreshold</td><td>图性阈值(图性,类别,启用,阈值)</td><td>为指定类别设置阈值（小数透明范围）。启用为真时<a href="#颜色调整">调整类别</a>启用单独的阈值，为假清除。</td></tr>
<tr><td>图性校正</td><td>GdipSetImageAttributesGamma</td><td>图性校正(图性,类别,启用,伽玛)</td><td>为指定类别设置伽玛值(小数)。透明为真时<a href="#颜色调整">调整类别</a>启用单独的伽玛。为假禁用。</td></tr>
<tr><td>图性调整</td><td>GdipSetImageAttributesNoOp</td><td>图性调整(图性,类别,启用)</td><td>为指定类别关闭颜色调整。启用为真时<a href="#颜色调整">调整类别</a>启用单独的颜色调整，为假清除。类别为0恢复以前设置。</td></tr>
<tr><td>图性色键</td><td>GdipSetImageAttributesColorKeys</td><td>图性色键(图性,类别,启用,低位色,高位色)</td><td>为指定类别设置颜色键（透明范围）。启用为真时<a href="#颜色调整">调整类别</a>启用单独的透明度范围，为假清除。</td></tr>
<tr><td>图性通道</td><td>GdipSetImageAttributesOutputChannel</td><td>图性通道(图性,类别,启用,通道)</td><td>为指定类别设置<a href="#颜色通道">输出通道</a>0青色-1品红-2黄色-4黑色(CMYK) 。启用为真时<a href="#颜色调整">调整类别</a>启用单独的输出通道，为假清除。</td></tr>
<tr><td>图性配置</td><td>GdipSetImageAttributesOutputChannelColorProfile</td><td>图性配置(图性,类别,启用,宽文件名)</td><td>为指定类别设置输出通道颜色配置文件。启用为真时<a href="#颜色调整">调整类别</a>启用单独的配置文件，为假清除。</td></tr>
<tr><td>图性映射</td><td>GdipSetImageAttributesRemapTable</td><td>图性映射(图性,类别,启用,组数,映射数组)</td><td>为指定类别设置<a href="#变色类">颜色重新映射表</a>。启用为真时<a href="#颜色调整">调整类别</a>启用单独的映射表，为假清除。</td></tr>
<tr><td>图性平铺</td><td>GdipSetImageAttributesWrapMode</td><td>图性平铺(图性,模式,颜色,0)</td><td>设置图像属性对象的<a href="#平铺模式">平铺模式</a>。</td></tr>
<tr><td>图性管理</td><td>GdipSetImageAttributesICMMode</td><td>图性管理(图性,启用)</td><td>如果启用为真，则图像颜色管理 (ICM) 用于所有颜色调整。为假则不使用ICM。</td></tr>
<tr><td>图性色板</td><td>GdipGetImageAttributesAdjustedPalette</td><td>图性色板(图性,色板组,类别)</td><td>根据指定<a href="#颜色调整">类别</a>的调整设置，调整<a href="#色板数组类">调色板</a>中的颜色。</td></tr>
<tr><td>图性缓存</td><td>GdipSetImageAttributesCachedBackground</td><td>图性缓存(图性,启用)</td><td>设置或清除指定图像属性对象的缓存背景成员。此函数不起作用。</td></tr>
</table><p><font color="#0000FF" size=6><a name="颜色调整">颜色调整</a>-ColorAdjustType 枚举指定哪些 GDI+ 对象使用颜色调整信息。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ColorAdjustTypeDefault</td><td>0</td><td>指定颜色或灰度调整应用于没有自己的调整设置的所有类别。</td></tr>
<tr><td>ColorAdjustTypeBitmap</td><td>1</td><td>指定颜色或灰度调整应用于位图图像。</td></tr>
<tr><td>ColorAdjustTypeBrush</td><td>2</td><td>指定颜色或灰度调整应用于图元文件中的画笔操作。</td></tr>
<tr><td>ColorAdjustTypePen</td><td>3</td><td>指定颜色或灰度调整应用于图元文件中的笔操作。</td></tr>
<tr><td>ColorAdjustTypeText</td><td>4</td><td>指定颜色或灰度调整应用于在图元文件中绘制的文本。</td></tr>
<tr><td>ColorAdjustTypeCount</td><td>5</td><td>在内部用于记录颜色调整类型的数量。</td></tr>
<tr><td>ColorAdjustTypeAny</td><td>6</td><td>保留</td></tr>
</table><p><font color="#0000FF" size=6><a name="颜色矩阵标志">颜色矩阵标志</a>-ColorMatrixFlags 枚举指定受 图像属性 对象的颜色和灰度调整设置影响的图像和颜色的类型。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ColorMatrixFlagsDefault</td><td>0</td><td>指定 (包括灰色) 的所有颜色值都由同一颜色调整矩阵调整。</td></tr>
<tr><td>ColorMatrixFlagsSkipGrays</td><td>1</td><td>指定调整颜色，但不调整灰色底纹。 灰色底纹是指其红色、绿色和蓝色分量的值都相同的任何颜色。</td></tr>
<tr><td>ColorMatrixFlagsAltGray</td><td>2</td><td>指定颜色由一个矩阵调整，灰色阴影由另一个矩阵调整。</td></tr>
</table><p><font color="#0000FF" size=6><a name="颜色通道">颜色通道</a>-ColorChannelFlags 枚举指定 CMYK (青色、洋红色、黄色、黑色) 颜色空间中的单个通道。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ColorChannelFlagsC</td><td>0</td><td>指定青色通道。</td></tr>
<tr><td>ColorChannelFlagsM</td><td>1</td><td>指定洋红色颜色通道。</td></tr>
<tr><td>ColorChannelFlagsY</td><td>2</td><td>指定黄色通道。</td></tr>
<tr><td>ColorChannelFlagsK</td><td>3</td><td>指定黑色通道。</td></tr>
</table><a name="变色类">变色类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>变色类</td><td>ColorMap</td><td>8</td><td>定义两个转换颜色的映射。</td></tr>
<tr><th colspan=4>变色类——成员表</th></tr>
<tr><td>旧色</td><td>oldColor</td><td>整数</td><td>要转换至的新颜色结构。</td></tr>
<tr><td>新色</td><td>newColor</td><td>整数</td><td>要转换至的现有颜色结构。</td></tr>
</table><p><font color="#0000FF" size=6><a name="纹理图刷">纹理图刷</a></font></p>
<br>纹理图刷对象定义一个<a href="#画笔画刷">画刷</a>对象，该对象包含用于填充的<a href="#图像文件">图像</a>对象。可以使用画刷对象中包含的本地<a href="#矩阵变换">矩阵</a>对象转换填充图像。</br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>纹理创建</td><td>GdipCreateTexture</td><td>纹理创建(图像,模式,@纹理)</td><td>基于图像和<a href="#平铺模式">平铺模式</a>创建纹理刷子对象。</td></tr>
<tr><td>纹理单模</td><td>GdipCreateTexture2</td><td>纹理单模(图像,模式,左,顶,宽,高,@纹理)</td><td>基于图像、<a href="#平铺模式">平铺模式</a>和定义坐标集创建纹理刷子对象。</td></tr>
<tr><td>纹理整模</td><td>GdipCreateTexture2I</td><td>纹理整模(图像,模式,左,顶,宽,高,@纹理)</td><td>基于图像、<a href="#平铺模式">平铺模式</a>和定义坐标集创建纹理刷子对象。</td></tr>
<tr><td>纹理单属</td><td>GdipCreateTextureIA</td><td>纹理单属(图像,属性,左,顶,宽,高,@纹理)</td><td>基于图像、定义矩形和一组图像属性创建纹理刷子对象。</td></tr>
<tr><td>纹理整属</td><td>GdipCreateTextureIAI</td><td>纹理整属(图像,属性,左,顶,宽,高,@纹理)</td><td>基于图像、定义矩形和一组图像属性创建纹理刷子对象。</td></tr>
<tr><td>纹理取图</td><td>GdipGetTextureImage</td><td>纹理取图(纹理,@图像)</td><td>获取由此纹理画笔定义的图像对象的指针。</td></tr>
<tr><td>纹取矩阵</td><td>GdipGetTextureTransform</td><td>纹取矩阵(纹理,@矩阵)</td><td>获取此纹理画笔的变换矩阵。</td></tr>
<tr><td>纹改矩阵</td><td>GdipSetTextureTransform</td><td>纹改矩阵(纹理,矩阵)</td><td>设置此纹理画笔的变换矩阵。</td></tr>
<tr><td>纹取平铺</td><td>GdipGetTextureWrapMode</td><td>纹取平铺(纹理,@模式)</td><td>获取当前为此纹理画笔设置的<a href="#平铺模式">平铺模式</a>。</td></tr>
<tr><td>纹改平铺</td><td>GdipGetTextureWrapMode</td><td>纹改平铺(纹理,模式)</td><td>设置当前为此纹理画笔设置的<a href="#平铺模式">平铺模式</a>。</td></tr>
<tr><td>纹理标识</td><td>GdipResetTextureTransform</td><td>纹理标识(纹理)</td><td>将此纹理画笔的变换矩阵重置为标识矩阵。这意味着不会发生转换。</td></tr>
<tr><td>纹乘矩阵</td><td>GdipMultiplyTextureTransform</td><td>纹乘矩阵(纹理,矩阵,顺序)</td><td>使用本身和另一个矩阵的乘积更新此转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>纹乘转换</td><td>GdipTranslateTextureTransform</td><td>纹乘转换(纹理,水平量,垂直量,顺序)</td><td>使用自身和转换矩阵的乘积更新此转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>纹乘缩放</td><td>GdipScaleTextureTransform</td><td>纹乘缩放(纹理,水平量,垂直量,顺序)</td><td>使用本身和缩放矩阵的乘积更新此转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
<tr><td>纹乘旋转</td><td>GdipRotateTextureTransform</td><td>纹乘旋转(纹理,小数 角度,顺序)</td><td>使用自身乘积和旋转矩阵更新此转换矩阵。<a href="#矩阵顺序">乘法顺序</a>:0新矩阵在左侧,1在右侧</td></tr>
</table><p><font color="#0000FF" size=6><a name="图面区域">图面区域</a></font></p>
区域对象描述显示图面的区域。该区域可以是任何形状，区域的边界可以是曲线和直线的组合。还可以从矩形、路径的内部或这些矩形、路径的内部创建区域。区域用于剪辑和命中测试操作。<br>
基本图形库GDI的区域跟GDI+的区域同时使用时，GDI的区域称之为老区。</br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>区域创建</td><td>GdipCreateRegion</td><td>区域创建(@区域)</td><td>创建无限的区域。这是默认构造函数。</td></tr>
<tr><td>区域矩形</td><td>GdipCreateRegionRect</td><td>区域矩形(矩形,@区域)</td><td>创建由小数值矩形定义的区域。</td></tr>
<tr><td>矩形区域</td><td>GdipCreateRegionRectI</td><td>矩形区域(矩形,@区域)</td><td>创建由整数值矩形定义的区域。</td></tr>
<tr><td>路径区域</td><td>GdipCreateRegionPath</td><td>路径区域(路径,@区域)</td><td>创建由路径对象定义且具有包含在路径对象中的填充模式的区域。</td></tr>
<tr><td>数据区域</td><td>GdipCreateRegionRgnData</td><td>数据区域(数据,大小,@区域)</td><td>创建由从另一个区域获取的数据定义的区域。</td></tr>
<tr><td>区域转型</td><td>GdipCreateRegionHrgn</td><td>区域转型(老区,@区域)</td><td>创建一个区域，该区域与GDI区域的句柄指定的区域相同。</td></tr>
<tr><td>区域克隆</td><td>GdipCloneRegion</td><td>区域克隆(区域,@区域)</td><td>创建区域对象的副本。</td></tr>
<tr><td>区域删除</td><td>GdipDeleteRegion</td><td>区域删除(区域)</td><td>释放区域对象使用的资源。</td></tr>
<tr><td>区域无限</td><td>GdipSetInfinite</td><td>区域无限(区域)</td><td>将此区域改为无限区域。</td></tr>
<tr><td>区域清空</td><td>GdipSetEmpty</td><td>区域清空(区域)</td><td>将此区域改为空区域。不会在显示设备上占用空间。</td></tr>
<tr><td>区交矩形</td><td>GdipCombineRegionRect</td><td>区交矩形(区域,矩形,模式)</td><td>将此区域更新为与指定小数值矩形内部相交的自身部分。<a href="#区域组合">模式</a></td></tr>
<tr><td>区交方形</td><td>GdipCombineRegionRectI</td><td>区交方形(区域,矩形,模式)</td><td>将此区域更新为与指定整数值矩形内部相交的自身部分。<a href="#区域组合">模式</a></td></tr>
<tr><td>区交路径</td><td>GdipCombineRegionPath</td><td>区交路径(区域,路径,模式)</td><td>将此区域更新为与指定路径内部相交的自身部分。<a href="#区域组合">模式</a></td></tr>
<tr><td>区交区域</td><td>GdipCombineRegionRegion</td><td>区交区域(区域,区域2,模式)</td><td>将此区域更新为与另一个区域相交的自身部分。<a href="#区域组合">模式</a></td></tr>
<tr><td>区域转向</td><td>GdipTranslateRegion</td><td>区域转向(区域,水平量,垂直量)</td><td>在水平和垂直方向按指定量偏移此区域。</td></tr>
<tr><td>区域偏转</td><td>GdipTranslateRegionI</td><td>区域偏转(区域,水平量,垂直量)</td><td>在水平和垂直方向按指定量偏移此区域。</td></tr>
<tr><td>区乘矩阵</td><td>GdipTransformRegion</td><td>区乘矩阵(区域,矩阵)</td><td>通过将该区域的每个数据点乘以指定的矩阵来转换此区域。</td></tr>
<tr><td>区域边框</td><td>GdipGetRegionBounds</td><td>区域边框(区域,图形,@矩形)</td><td>获取包含此区域的小数值矩形。</td></tr>
<tr><td>区域方框</td><td>GdipGetRegionBoundsI</td><td>区域方框(区域,图形,@矩形)</td><td>获取包含此区域的整数值矩形。</td></tr>
<tr><td>区域建区</td><td>GdipCloneRegion</td><td>区域建区(区域,图形,@老区)</td><td>从此区域创建 GDI 区域。</td></tr>
<tr><td>区域为空</td><td>GdipIsEmptyRegion</td><td>区域为空(区域,图形,@是否)</td><td>确定此区域是否为空。</td></tr>
<tr><td>区取无限</td><td>GdipIsInfiniteRegion</td><td>区取无限(区域,图形,@是否)</td><td>确定此区域是否是无限的。</td></tr>
<tr><td>区域相等</td><td>GdipIsEqualRegion</td><td>区域相等(区域,二区,图形,@是否)</td><td>确定此区域是否等于指定区域。</td></tr>
<tr><td>区域大小</td><td>GdipGetRegionDataSize</td><td>区域大小(区域,@区域)</td><td>获取描述此区域的数据字节数。</td></tr>
<tr><td>区取数据</td><td>GdipGetRegionData</td><td>区取数据(区域,@数据,大小,@已收)</td><td>获取描述此区域的数据。</td></tr>
<tr><td>区域查点</td><td>GdipIsVisibleRegionPoint</td><td>区域查点(区域,左,上,图形,@是否)</td><td>确定某个小数值的点是否在此区域内。</td></tr>
<tr><td>区域内点</td><td>GdipIsVisibleRegionPointI</td><td>区域内点(区域,左,上,图形,@是否)</td><td>确定某个整数值的点是否在此区域内。</td></tr>
<tr><td>区域重合</td><td>GdipIsVisibleRegionRect</td><td>区域重合(区域,左,顶,宽,高,图形,@是否)</td><td>确定小数值矩形是否与该区域相交。</td></tr>
<tr><td>区域重叠</td><td>GdipIsVisibleRegionRectI</td><td>区域重叠(区域,左,顶,宽,高,图形,@是否)</td><td>确定整数值矩形是否与该区域相交。</td></tr>
<tr><td>区矩形数</td><td>GdipGetRegionScansCount</td><td>区矩形数(区域,@数量,矩阵)</td><td>获取与该区域近似的矩形数。在计算矩形之前，区域由指定的矩阵进行转换。</td></tr>
<tr><td>区矩形组</td><td>GdipGetRegionScans</td><td>区矩形组(区域,@矩形,@数量,矩阵)</td><td>获取与该区域近似的小数值矩形数组。在计算矩形之前，区域由指定的矩阵进行转换。</td></tr>
<tr><td>区方形组</td><td>GdipGetRegionScans</td><td>区方形组(区域,@矩形,@数量,矩阵)</td><td>获取与该区域近似的整数值矩形数组。在计算矩形之前，区域由指定的矩阵进行转换。</td></tr>
</table><p><font color="#0000FF" size=6><a name="编码解码">编码解码</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>解码信息</td><td>GdipGetImageDecoders</td><td>解码信息(数量,长度,数据)</td><td>获取包含有关可用图像解码器信息的<a href="#图码信息类">图码信息类</a>结构数组。</td></tr>
<tr><td>解码大小</td><td>GdipGetImageDecodersSize</td><td>解码大小(@数量,@长度)</td><td>获取包含有关可用图像解码器信息的数量和结构数组长度。</td></tr>
<tr><td>编码信息</td><td>GdipGetImageEncoders</td><td>编码信息(数量,长度,数据)</td><td>获取包含有关可用图像解码器信息的<a href="#图码信息类">图码信息类</a>结构数组。</td></tr>
<tr><td>编码大小</td><td>GdipGetImageEncodersSize</td><td>编码大小(@数量,@长度)</td><td>获取包含有关可用图像解码器信息的数量和结构数组长度。</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>编解码类</td><td>EncoderParameters</td><td>24</td><td>包含GdiplusStartup函数所需的一个参数块。</td></tr>
<tr><th colspan=4>编解码类——成员表</th></tr>
<tr><td>数量</td><td>count</td><td>整数</td><td>编解码器的总数量</td></tr>
<tr><td>数1</td><td>Data1</td><td>整数</td><td>Clsid结构数据1</td></tr>
<tr><td>数2</td><td>Data2</td><td>整数</td><td>Clsid结构数据2</td></tr>
<tr><td>数3</td><td>Data3</td><td>整数</td><td>Clsid结构数据3</td></tr>
<tr><td>数4</td><td>Data4</td><td>整数</td><td>Clsid结构数据4</td></tr>
<tr><td>个数</td><td>NumberOfValues</td><td>整数</td><td>图像编解码器设定参数值的个数</td></tr>
<tr><td>编码</td><td>EncoderParameterValueType</td><td>整数</td><td>指定图像编解码器数据类型</td></tr>
<tr><td>数值</td><td>value</td><td>整数</td><td>指定图像编解码器转换质量等的数值地址。</td></tr>
</table>
<b><a name="图码信息类">图码信息类</a></b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>图码信息类</td><td>ImageCodecInfo</td><td>80</td><td>存储有关图像编解码器（编码器/解码器）的信息。</td></tr>
<tr><th colspan=4>图码信息类——成员表</th></tr>
<tr><td>类号</td><td>ClassID[16]</td><td>文本</td><td>编解码器标识符。</td></tr>
<tr><td>格式</td><td>FormatID[16]</td><td>文本</td><td>文件格式标识符。标识各种文件格式（ImageFormatBMP、ImageFormatEMF 等）</td></tr>
<tr><td>码名</td><td>CodecName</td><td>整数</td><td>指向包含编解码器名称的以 0 结尾的字符串的指针。</td></tr>
<tr><td>库名</td><td>DllName</td><td>整数</td><td>指向以 0 结尾的字符串的指针，该字符串包含编解码器所在的 DLL 的路径名。如果编解码器不在 DLL 中，则此指针为 0。</td></tr>
<tr><td>说明</td><td>FormatDescription</td><td>整数</td><td>指向以 0 结尾的字符串的指针，该字符串包含编解码器使用的文件格式的名称。</td></tr>
<tr><td>扩展</td><td>FilenameExtension</td><td>整数</td><td>指向以 0 结尾的字符串的指针，该字符串包含与编解码器关联的所有文件扩展名。扩展名用分号分隔。</td></tr>
<tr><td>头类</td><td>MimeType</td><td>整数</td><td>指向以 0 结尾的字符串的指针，该字符串包含编解码器的 mime 类型。</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td><a href="#图像编码">图像编码</a>中的标志组合。</td></tr>
<tr><td>版本</td><td>Version</td><td>整数</td><td>指示编解码器版本的整数。</td></tr>
<tr><td>名数</td><td>SigCount</td><td>整数</td><td>指示与编解码器关联的文件格式使用的签名数的整数。</td></tr>
<tr><td>名长</td><td>SigSize</td><td>整数</td><td>指示每个签名中的字节数的整数。</td></tr>
<tr><td>模式</td><td>SigPattern</td><td>整数</td><td>指向包含每个签名的模式的字节数组的指针。</td></tr>
<tr><td>掩码</td><td>SigMask</td><td>整数</td><td>指向包含每个签名掩码的字节数组的指针。</td></tr>
</table><p><font color="#0000FF" size=6><a name="图像编码">图像编码</a>-ImageCodecFlags 枚举指示图像编解码器的属性。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ImageCodecFlagsEncoder</td><td>0x00000001</td><td>指示编解码器支持编码 (保存) 。</td></tr>
<tr><td>ImageCodecFlagsDecoder</td><td>0x00000002</td><td>指示编解码器支持解码 (读取) 。</td></tr>
<tr><td>ImageCodecFlagsSupportBitmap</td><td>0x00000004</td><td>指示编解码器支持光栅图像 (位图) 。</td></tr>
<tr><td>ImageCodecFlagsSupportVector</td><td>0x00000008</td><td>指示编解码器支持向量图像 (图元文件) 。</td></tr>
<tr><td>ImageCodecFlagsSeekableEncode</td><td>0x00000010</td><td>指示编码器需要可查找的输出流。</td></tr>
<tr><td>ImageCodecFlagsBlockingDecode</td><td>0x00000020</td><td>指示解码器在解码过程中具有阻塞行为。</td></tr>
<tr><td>ImageCodecFlagsBuiltin</td><td>0x00010000</td><td>指示编解码器内置于 GDI+ 中。</td></tr>
<tr><td>ImageCodecFlagsSystem</td><td>0x00020000</td><td>在 GDI+ 1.0 版中不使用。</td></tr>
<tr><td>ImageCodecFlagsUser</td><td>0x00040000</td><td>在 GDI+ 1.0 版中不使用。</td></tr>
</table><br>
<p><font color="#0000FF" size=6><a name="访问权限">Win32编程常用函数-advapi32库</a></font></p>
某些函数需要特殊 权限 才能正确运行。 在某些情况下，函数只能由某些用户或特定组的成员运行。 最常见的要求是用户是本地管理员。 其他函数要求用户帐户启用特定权限。<br>

为了降低未经授权的代码能够获得控制权的可能性，系统应以所需的最低特权运行。 需要调用需要特殊权限的函数的应用程序可能会使系统保持开放状态，以受到黑客的攻击。 此类应用程序应设计为短时间运行，并应告知用户所涉及的安全隐患。<br>

使用管理员权限运行<br>
确定应用程序需要在哪种类型的帐户下运行的第一步是检查应用程序将使用的资源以及它将调用哪些特权 API。 你可能会发现应用程序或其大部分不需要管理员权限。<br> 
Michael Howard 和 David LeBlanc 撰写的安全代码很好地介绍了如何进行此评估，强烈建议使用。 (此资源可能在某些语言和国家/地区不可用。)<br> 

可以通过使用以下方法之一来提供应用程序所需的特权，减少受到恶意攻击的风险：<br> 

在特权较低的帐户下运行。 执行此操作的一种方法是使用 PrivilegeCheck 来确定令牌中启用了哪些权限。 如果可用权限不足以执行当前操作，则可以禁用该代码，并要求用户使用管理员权限登录到帐户。<br> 
闯入需要管理员权限的单独应用程序功能。 可以为用户提供执行 RunAs 命令的快捷方式。 有关如何设置快捷方式的详细说明，请在“帮助”中搜索“runas”。 可以通过编程方式为应用程序配置 AppId Key 注册表项下的 RunAs 命令。<br> 
通过调用 CredUIPromptForCredentials (GUI) 或 CredUICmdLinePromptForCredentials (命令行) 对用户进行身份验证，以获取用户名和密码。<br> 
模拟用户。 在系统等高特权帐户下启动的进程可以通过调用 ImpersonateLoggedOnUser 或类似的 Impersonate 函数来模拟用户帐户，从而降低特权级别。 但是，如果将对 RevertToSelf 的调用注入到线程中，则进程将返回到原始系统特权。<br> 
如果已确定应用程序必须在具有管理员特权的帐户下运行，并且管理员密码必须存储在软件系统中，请参阅 处理密码 ，了解安全执行此操作的方法。<br> 

向用户询问凭据<br> 
应用程序可能需要提示用户输入用户名和密码信息，以避免存储管理员密码或验证令牌是否具有适当的权限。<br> 

但是，仅提示输入凭据可能会训练用户将这些凭据提供给屏幕上显示的任何随机、未识别的对话框。 建议执行以下过程来降低训练效果。<br> 

正确获取用户凭据<br> 

通过使用明确属于应用程序的消息通知用户，他们将看到一个对话框，请求其用户名和密码。 还可以在调用 CredUIPromptForCredentials 时使用 CREDUI_INFO 结构来传达标识数据或消息。<br> 
调用 CredUIPromptForCredentials。 请注意，为用户名和密码信息指定的最大字符数包括终止 null 字符。<br> 
调用 CredUIParseUserName 和 CredUIConfirmCredentials 以验证是否获得了适当的凭据。<br> 
以下示例演示如何调用 CredUIPromptForCredentials 以要求用户输入用户名和密码。 首先，使用有关使用提示的信息填充CREDUI_INFO结构。 接下来，代码用零填充两个缓冲区。<br>
这样做是为了确保不会将任何信息传递给可能会向用户显示旧用户名或密码的函数。 调用 CredUIPromptForCredentials 将打开对话框。<br>
出于安全原因，此示例使用 CREDUI_FLAGS_DO_NOT_PERSIST 标志来阻止操作系统存储密码，因为随后可能会公开密码。<br>
如果没有错误， CredUIPromptForCredentials 将填充 pszName 和 pszPwd 变量并返回零。 应用程序使用完凭据后，应在缓冲区中放置零，以防止意外泄露信息。<br>
更改令牌中的特权<br>
可以通过两种方式更改主要令牌或模拟令牌中的特权：<br>

使用 AdjustTokenPrivileges 函数启用或禁用特权。<br>
使用 CreateRestrictedToken 函数限制或删除特权。<br>
AdjustTokenPrivileges 无法添加或删除令牌中的特权。 它只能启用当前已禁用的现有特权或禁用当前启用的现有特权。<br>

若要向用户帐户分配权限，请参阅 向帐户分配特权。<br>

CreateRestrictedToken 具有更广泛的功能，如下所示：<br>

删除权限。 请注意，删除权限与禁用权限不同。 从令牌中删除权限后，无法将其放回。<br>
将仅拒绝属性附加到令牌中的 SID。 这具有禁止特定组或帐户的效果，例如，拒绝“每个人”组删除对特定文件的访问权限。 有关限制 SID 的详细信息，请参阅 访问令牌中的 SID 属性。<br>
指定令牌中限制 SID 的列表。 有关限制 SID 的信息，请参阅 受限令牌。<br>
可以通过使用本地安全策略 Microsoft 管理控制台 (MMC) 管理单元 (Secpol.msc) 或通过调用 LsaAddAccountRights 函数向帐户分配权限。<br>

向帐户分配权限不会影响现有用户令牌。 用户必须注销，然后重新登录才能使用新分配的权限获取访问令牌。<br>

若要使用本地安全策略 MMC 管理单元分配权限，请编辑 安全设置/本地策略/用户权限分配下列出的每个特权的用户列表。<br>
InitiateSystemShutdown 和 InitiateSystemShutdownEx 函数显示一个对话框，通知用户系统正在关闭。 在关闭超时期间， AbortSystemShutdown 函数可能会阻止系统关闭。<br>

Windows Server 2003 和 Windows XP SP1： 如果要关闭的计算机是终端服务服务器，系统会向所有本地和远程用户显示一个对话框，警告他们已启动关闭。<br>
如果 AbortSystemShutdown 阻止关闭，系统会向用户显示对话框，告知他们服务器不再关闭。<br>

若要阻止本地计算机关闭，调用进程必须具有SE_SHUTDOWN_NAME特权。 若要阻止远程计算机关闭，调用进程必须在远程计算机上具有SE_REMOTE_SHUTDOWN_NAME特权。<br>
默认情况下，用户可以在登录的计算机上启用SE_SHUTDOWN_NAME特权，管理员可以在远程计算机上启用SE_REMOTE_SHUTDOWN_NAME特权。 失败的常见原因包括计算机名称无效、计算机不可访问或权限不足。<br>


若要关闭本地计算机，调用线程必须具有 SE_SHUTDOWN_NAME 特权。 若要关闭远程计算机，调用线程必须在远程计算机上具有 SE_REMOTE_SHUTDOWN_NAME 特权。<br>
默认情况下，用户可以在登录的计算机上启用 SE_SHUTDOWN_NAME 特权，管理员可以在远程计算机上启用 SE_REMOTE_SHUTDOWN_NAME 特权。 有关详细信息，请参阅使用特殊特权运行。<br>

失败的常见原因包括计算机名无效或不可访问或权限不足。 如果指定的计算机上正在进行关闭，则返回错误 ERROR_SHUTDOWN_IN_PROGRESS 。<br>
如果启用了快速用户切换，但没有用户登录，则可能会返回错误 ERROR_NOT_READY 。<br>

非零返回值并不意味着注销已成功或将成功。 关闭是一个异步过程，它可能在 API 调用已返回后很长时间发生，也可能根本不发生。 即使超时值为零，应用程序、服务甚至系统仍可能中止关闭。<br>
非零返回值指示权限和参数验证成功，并且系统已接受关闭请求。<br>

调用此函数时，调用方必须指定是否应强制关闭具有未保存更改的应用程序。 如果调用方选择不强制关闭这些应用程序，并且具有未保存更改的应用程序正在控制台会话上运行，则关闭将保持进行状态，<br>
直到登录到控制台会话的用户中止关闭、保存更改、关闭应用程序或强制关闭应用程序。 在此期间，除主机用户外，关闭可能不会中止，并且可能不会启动另一个关闭。<br>

请注意，使用 bForceAppsClosed 参数的值设置为 TRUE 调用此函数可避免这种情况。 请记住，这样做可能会导致数据丢失。<br>

Windows Server 2003 和 Windows XP： 如果计算机已锁定，并且 bForceAppsClosed 参数为 FALSE，则 最后一个错误代码ERROR_MACHINE_LOCKED。<br>
如果系统尚未准备好处理请求，则会 ERROR_NOT_READY最后一个错误代码。 应用程序应稍等片刻，然后重试调用。<br>
 例如，如果用户尝试登录系统的同时发出关闭请求，系统可能未准备启动关闭并返回 ERROR_NOT_READY。 在这种情况下，应用程序应稍等片刻，然后重试调用。<br>
特权常量（授权）<br>
权限决定了用户帐户可以执行的系统操作的类型。管理员为用户帐户和组帐户分配权限。每个用户的权限包括授予用户和用户所属组的权限。<br>

获取和调整访问令牌中的特权的函数使用本地唯一标识符 （LUID） 类型来标识特权。使用 LookupPrivilegeValue 函数确定本地系统上与特权常量对应的 LUID。<br>
使用 LookupPrivilegeName 函数将 LUID 转换为其相应的字符串常量。<br>

操作系统使用下表的“说明”列中“用户权限”后面的字符串表示特权。操作系统在本地安全设置 Microsoft 管理控制台 （MMC） 管理单元的“用户权限分配”节点的“策略”列中显示用户权限字符串。<br>
<a name="关机错误">关机错误</a></font><br>
<table border="1" cellspacing="0" cellpadding="0" style="font-size: 14px;">
<tr><td>英文名称</td><td>常量</td><td width=660>作用解释</td><td>用户权限</td></tr>
<tr><td>SE_ASSIGNPRIMARYTOKEN_NAME</td><td>"SeAssignPrimaryTokenPrivilege"</td><td>需要分配进程的主令牌。</td><td>替换进程级令牌。</td></tr>
<tr><td>SE_AUDIT_NAME</td><td>"SeAuditPrivilege"</td><td>需要生成审核日志条目。将此权限授予安全服务器。</td><td>生成安全审核。</td></tr>
<tr><td>SE_BACKUP_NAME</td><td>"SeBackupPrivilege"</td><td>需要执行备份操作。此权限使系统授予对任何文件的所有读取访问控制权，而不考虑为文件指定的访问控制列表 （ACL）。<br>
除读取以外的任何访问请求仍使用 ACL 进行评估。RegSaveKey 和 RegSaveKeyEx函数需要此权限。<br>
如果持有此权限，则授予以下访问权限：READ_CONTROL,ACCESS_SYSTEM_SECURITY,FILE_GENERIC_READ,FILE_TRAVERSE;<br>
如果文件位于可移动驱动器上，并且启用了“审核可移动存储”，则SE_SECURITY_NAME需要具有ACCESS_SYSTEM_SECURITY。</td><td>备份文件和目录。</td></tr>
<tr><td>SE_CHANGE_NOTIFY_NAME</td><td>"SeChangeNotifyPrivilege"</td><td>需要接收文件或目录更改的通知。此权限还会导致系统跳过所有遍历访问检查。默认情况下，它对所有用户启用。</td><td>绕过遍历检查。</td></tr>
<tr><td>SE_CREATE_GLOBAL_NAME</td><td>"SeCreateGlobalPrivilege"</td><td>在终端服务会话期间，需要在全局命名空间中创建命名文件映射对象。默认情况下，为管理员、服务和本地系统帐户启用此权限。</td><td>创建全局对象。</td></tr>
<tr><td>SE_CREATE_PAGEFILE_NAME</td><td>"SeCreatePagefilePrivilege"</td><td>创建分页文件是必需的。</td><td>创建页面文件。</td></tr>
<tr><td>SE_CREATE_PERMANENT_NAME</td><td>"SeCreatePermanentPrivilege"</td><td>创建永久对象是必需的。</td><td>创建永久共享对象。</td></tr>
<tr><td>SE_CREATE_SYMBOLIC_LINK_NAME</td><td>"SeCreateSymbolicLinkPrivilege"</td><td>需要创建符号链接。</td><td>创建符号链接。</td></tr>
<tr><td>SE_CREATE_TOKEN_NAME</td><td>"SeCreateTokenPrivilege"</td><td>创建主令牌是必需的。您无法将此权限添加到具有“创建令牌对象”策略的用户帐户。<br>
此外，不能使用 Windows API 将此权限添加到拥有的进程。<br>Windows XP SP1 及更早版本：API 可以将此权限添加到拥有的进程。</td><td>创建令牌对象。</td></tr>
<tr><td>SE_DEBUG_NAME</td><td>"SeDebugPrivilege"</td><td>需要调试和调整另一个帐户拥有的进程的内存。</td><td>调试程序。</td></tr>
<tr><td>SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME</td><td>"SeDelegateSessionUserImpersonatePrivilege"</td><td>需要获取同一会话中其他用户的模拟令牌。</td><td>模拟其他用户。</td></tr>
<tr><td>SE_ENABLE_DELEGATION_NAME</td><td>"SeEnableDelegationPrivilege"</td><td>需要将用户和计算机帐户标记为受信任的委派。</td><td>允许信任计算机和用户帐户进行委派。</td></tr>
<tr><td>SE_IMPERSONATE_NAME</td><td>"SeImpersonatePrivilege"</td><td>需要模拟。</td><td>身份验证后模拟客户端。</td></tr>
<tr><td>SE_INC_BASE_PRIORITY_NAME</td><td>"SeIncreaseBasePriorityPrivilege"</td><td>需要提高进程的基本优先级。</td><td>提高调度优先级。</td></tr>
<tr><td>SE_INCREASE_QUOTA_NAME</td><td>"SeIncreaseQuotaPrivilege"</td><td>需要增加分配给进程的配额。</td><td>调整进程的内存配额。</td></tr>
<tr><td>SE_INC_WORKING_SET_NAME</td><td>"SeIncreaseWorkingSetPrivilege"</td><td>需要为在用户上下文中运行的应用程序分配更多内存。</td><td>增加进程工作集。</td></tr>
<tr><td>SE_LOAD_DRIVER_NAME</td><td>"SeLoadDriverPrivilege"</td><td>加载或卸载设备驱动程序时需要。</td><td>加载和卸载设备驱动程序。</td></tr>
<tr><td>SE_LOCK_MEMORY_NAME</td><td>"SeLockMemoryPrivilege"</td><td>需要锁定内存中的物理页。</td><td>锁定内存中的页面。</td></tr>
<tr><td>SE_MACHINE_ACCOUNT_NAME</td><td>"SeMachineAccountPrivilege"</td><td>需要创建计算机帐户。</td><td>将工作站添加到域。</td></tr>
<tr><td>SE_MANAGE_VOLUME_NAME</td><td>"SeManageVolumePrivilege"</td><td>需要启用卷管理权限。</td><td>管理卷上的文件。</td></tr>
<tr><td>SE_PROF_SINGLE_PROCESS_NAME</td><td>"SeProfileSingleProcessPrivilege"</td><td>需要收集单个进程的分析信息。</td><td>分析单个进程。</td></tr>
<tr><td>SE_RELABEL_NAME</td><td>"SeRelabelPrivilege"</td><td>需要修改对象的强制完整性级别。</td><td>修改对象标签。</td></tr>
<tr><td>SE_REMOTE_SHUTDOWN_NAME</td><td>"SeRemoteShutdownPrivilege"</td><td>使用网络请求关闭系统时需要。</td><td>从远程系统强制关闭。</td></tr>
<tr><td>SE_RESTORE_NAME</td><td>"SeRestorePrivilege"</td><td>执行还原操作所必需的。此权限使系统授予对任何文件的所有写入访问控制权，而不考虑为该文件指定的 ACL。<br>
除写入以外的任何访问请求仍使用 ACL 进行评估。此外，此权限允许您将任何有效的用户或组 SID 设置为文件的所有者。<br>RegLoadKey 函数需要此权限。如果持有此权限，则授予以下访问权限：
WRITE_DAC,WRITE_OWNER,ACCESS_SYSTEM_SECURITY,FILE_GENERIC_WRITE,FILE_ADD_FILE,FILE_ADD_SUBDIRECTORY,DELETE。<br>
如果文件位于可移动驱动器上，并且启用了“审核可移动存储”，则SE_SECURITY_NAME需要具有ACCESS_SYSTEM_SECURITY。</td><td>恢复文件和目录。</td></tr>
<tr><td>SE_SECURITY_NAME</td><td>"SeSecurityPrivilege"</td><td>需要执行许多与安全相关的功能，例如控制和查看审核消息。此权限将其持有者标识为安全操作员。</td><td>管理审核和安全日志。</td></tr>
<tr><td>SE_SHUTDOWN_NAME</td><td>"SeShutdownPrivilege"</td><td>需要关闭本地系统。</td><td>关闭系统。</td></tr>
<tr><td>SE_SYNC_AGENT_NAME</td><td>"SeSyncAgentPrivilege"</td><td>域控制器使用轻型目录访问协议目录同步服务是必需的。<br>
此权限使持有者能够读取目录中的所有对象和属性，而不管对象和属性的保护情况如何。<br>
默认情况下，它分配给域控制器上的管理员和 LocalSystem 帐户。</td><td>同步目录服务数据。</td></tr>
<tr><td>SE_SYSTEM_ENVIRONMENT_NAME</td><td>"SeSystemEnvironmentPrivilege"</td><td>需要修改使用此类型存储器来存储配置信息的系统的非易失性 RAM。</td><td>修改固件环境值。</td></tr>
<tr><td>SE_SYSTEM_PROFILE_NAME</td><td>"SeSystemProfilePrivilege"</td><td>需要收集整个系统的性能分析信息。</td><td>分析系统性能。</td></tr>
<tr><td>SE_SYSTEMTIME_NAME</td><td>"SeSystemtimePrivilege"</td><td>需要修改系统时间。</td><td>更改系统时间。</td></tr>
<tr><td>SE_TAKE_OWNERSHIP_NAME</td><td>"SeTakeOwnershipPrivilege"</td><td>需要在不被授予自由裁量访问权限的情况下取得对象的所有权。<br>
此权限仅允许将所有者值设置为持有者可以合法地分配为对象所有者的那些值。</td><td>获取文件或其他对象的所有权。</td></tr>
<tr><td>SE_TCB_NAME</td><td>"SeTcbPrivilege"</td><td>此权限将其持有者标识为受信任计算机库的一部分。某些受信任的受保护子系统被授予此权限。</td><td>作为操作系统的一部分。</td></tr>
<tr><td>SE_TIME_ZONE_NAME</td><td>"SeTimeZonePrivilege"</td><td>需要调整与计算机内部时钟关联的时区。</td><td>更改时区。</td></tr>
<tr><td>SE_TRUSTED_CREDMAN_ACCESS_NAME</td><td>"SeTrustedCredManAccessPrivilege"</td><td>需要以受信任的调用方身份访问凭据管理器。</td><td>以受信任的调用方身份访问 Credential Manager。</td></tr>
<tr><td>SE_UNDOCK_NAME</td><td>"SeUndockPrivilege"</td><td>需要拔出笔记本电脑。</td><td>从坞站中取出计算机。</td></tr>
<tr><td>SE_UNSOLICITED_INPUT_NAME</td><td>"SeUnsolicitedInputPrivilege"</td><td>需要读取来自终端设备的未经请求的输入。</td><td>不适用。</td></tr>
</table><a name="关机原因">关机原因</a></font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>SHTDN_REASON_MAJOR_APPLICATION</td><td>0x00040000</td><td>应用程序问题。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_HARDWARE</td><td>0x00010000</td><td>硬件问题。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_LEGACY_API</td><td>0x00070000</td><td>使用 InitiateSystemShutdown 函数而不是 InitiateSystemShutdownEx。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_OPERATINGSYSTEM</td><td>0x00020000</td><td>操作系统问题。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_OTHER</td><td>0x00000000</td><td>其他问题。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_POWER</td><td>0x00060000</td><td>电源故障。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_SOFTWARE</td><td>0x00030000</td><td>软件问题。</td></tr>
<tr><td>SHTDN_REASON_MAJOR_SYSTEM</td><td>0x00050000</td><td>系统故障。</td></tr>
<tr><td>SHTDN_REASON_MINOR_BLUESCREEN</td><td>0x0000000F</td><td>蓝屏崩溃事件。</td></tr>
<tr><td>SHTDN_REASON_MINOR_CORDUNPLUGGED</td><td>0x0000000b</td><td>拔出。</td></tr>
<tr><td>SHTDN_REASON_MINOR_DISK</td><td>0x00000007</td><td>。</td></tr>
<tr><td>SHTDN_REASON_MINOR_ENVIRONMENT</td><td>0x0000000c</td><td>环境。</td></tr>
<tr><td>SHTDN_REASON_MINOR_HARDWARE_DRIVER</td><td>0x0000000d</td><td>司机。</td></tr>
<tr><td>SHTDN_REASON_MINOR_HOTFIX</td><td>0x00000011</td><td>热修复。</td></tr>
<tr><td>SHTDN_REASON_MINOR_HOTFIX_UNINSTALL</td><td>0x00000017</td><td>热修复卸载。</td></tr>
<tr><td>SHTDN_REASON_MINOR_HUNG</td><td>0x00000005</td><td>反应 迟钝。</td></tr>
<tr><td>SHTDN_REASON_MINOR_INSTALLATION</td><td>0x00000002</td><td>安装。</td></tr>
<tr><td>SHTDN_REASON_MINOR_MAINTENANCE</td><td>0x00000001</td><td>维护。</td></tr>
<tr><td>SHTDN_REASON_MINOR_MMC</td><td>0x00000019</td><td>MMC 问题。</td></tr>
<tr><td>SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY</td><td>0x00000014</td><td>网络连接。</td></tr>
<tr><td>SHTDN_REASON_MINOR_NETWORKCARD</td><td>0x00000009</td><td>网络卡。</td></tr>
<tr><td>SHTDN_REASON_MINOR_OTHER</td><td>0x00000000</td><td>其他问题。</td></tr>
<tr><td>SHTDN_REASON_MINOR_OTHERDRIVER</td><td>0x0000000e</td><td>其他驱动程序事件。</td></tr>
<tr><td>SHTDN_REASON_MINOR_POWER_SUPPLY</td><td>0x0000000a</td><td>电源。</td></tr>
<tr><td>SHTDN_REASON_MINOR_PROCESSOR</td><td>0x00000008</td><td>处理器。</td></tr>
<tr><td>SHTDN_REASON_MINOR_RECONFIG</td><td>0x00000004</td><td>配置。</td></tr>
<tr><td>SHTDN_REASON_MINOR_SECURITY</td><td>0x00000013</td><td>安全问题。</td></tr>
<tr><td>SHTDN_REASON_MINOR_SECURITYFIX</td><td>0x00000012</td><td>安全修补程序。</td></tr>
<tr><td>SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL</td><td>0x00000018</td><td>安全修补程序卸载。</td></tr>
<tr><td>SHTDN_REASON_MINOR_SERVICEPACK</td><td>0x00000010</td><td>Service Pack。</td></tr>
<tr><td>SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL</td><td>0x00000016</td><td>Service Pack 卸载。</td></tr>
<tr><td>SHTDN_REASON_MINOR_TERMSRV</td><td>0x00000020</td><td>终端服务。</td></tr>
<tr><td>SHTDN_REASON_MINOR_UNSTABLE</td><td>0x00000006</td><td>稳定。</td></tr>
<tr><td>SHTDN_REASON_MINOR_UPGRADE</td><td>0x00000003</td><td>升级。</td></tr>
<tr><td>SHTDN_REASON_MINOR_WMI</td><td>0x00000015</td><td>WMI 问题。</td></tr>
<tr><td>SHTDN_REASON_FLAG_USER_DEFINED</td><td>0x40000000</td><td>原因代码由用户定义。</td></tr>
<tr><td>SHTDN_REASON_FLAG_PLANNED</td><td>0x80000000</td><td>计划关闭。 系统 (SSD) 文件生成系统状态数据。 </td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>关计算机</td><td>AbortSystemShutdownA</td><td>关计算机(机名)</td><td>停止已启动的系统。机名为0关闭本地计算机</td></tr>
<tr><td>开启关机</td><td>InitiateShutdownA</td><td>开启关机(机名,提示,秒数,标志,原因)</td><td>启动指定计算机的关闭和重启，并重启已注册重启的任何应用程序。<a href="#关机标志">标志</a><a href="#关机原因">原因</a></td></tr>
<tr><td>直接关机</td><td>InitiateSystemShutdownA</td><td>直接关机(机名,提示,秒数,强制,重启)</td><td>启动指定计算机的关闭和可选重启。秒数不过10年(315360000)强制和重启是真和假</td></tr>
<tr><td>关机重启</td><td>InitiateSystemShutdownExA</td><td>关机重启(机名,提示,秒数,强制,重启,原因)</td><td>启动指定计算机的关闭和可选重启。秒数不过10年(315360000)强制和重启是真和假;<a href="#关机原因">原因</a></td></tr>
<tr><td>访问检查</td><td>AccessCheck</td><td>访问检查(安全,令牌,掩码,映射,权集,权长,授权,权限)</td><td>检查客户端对对象的访问权限。</td></tr>
<tr><td>访问授权</td><td>AddAccessAllowedAce</td><td>访问授权(访问,级别,掩码,用户)</td><td>将允许访问的访问控制项添加到访问控制列表（ACL）中。访问权限被授予指定的安全标识符 （SID）。</td></tr>
<tr><td>访问加权</td><td>AddAccessAllowedAceEx</td><td>访问加权(访问,级别,标志,掩码,用户)</td><td>允许访问的访问控制项添加到(DACL)任意访问控制列表的末尾。</td></tr>
<tr><td>访问对象</td><td>AddAccessAllowedObjectAce</td><td>访问对象(访问,级别,标志,掩码,新类,继承,用户)</td><td>添加新的ACE可以授予对对象的访问权限，或者授予对对象的属性集或属性的访问权限。</td></tr>
<tr><td>访问拒绝</td><td>AddAccessDeniedAce</td><td>访问拒绝(访问,级别,掩码,用户)</td><td>拒绝访问访问控制项添加到访问控制列表。</td></tr>
<tr><td>访问拒加</td><td>AddAccessDeniedAceEx</td><td>访问拒加(访问,级别,标志,掩码,用户)</td><td>拒绝访问访问控制项添加到任意访问控制列表末尾。</td></tr>
<tr><td>拒绝对象</td><td>AddAccessDeniedObjectAce</td><td>拒绝对象(访问,级别,标志,掩码,新类,继承,用户)</td><td>拒绝对对象或对象的属性集或属性的访问。</td></tr>
<tr><td>访问控制</td><td>AddAce</td><td>访问控制(访问,级别,位置,表组,长度)</td><td>将一个或多个访问控制项添加到指定的访问控制列表。</td></tr>
<tr><td>访问审核</td><td>AddAuditAccessAce</td><td>访问审核(访问,级别,掩码,新类,继承,用户,成功,失败)</td><td>将系统审核访问控制项(ACE)添加到系统访问控制列表(ACL) 。审核指定安全标识符 (SID) 的访问。</td></tr>
<tr><td>访问加审</td><td>AddAuditAccessAceEx</td><td>访问加审(访问,级别,标志,掩码,进程号,成功,失败)</td><td>系统审核访问控制项添加到系统访问控制列表的末尾， (SACL) 。</td></tr>
<tr><td>审核对象</td><td>AddAuditAccessObjectAce</td><td>审核对象(访问,级别,标志,掩码,新类,继承,用户,成功,失败)</td><td>新的 ACE 可以审核对对象或对象上属性集或属性的访问。</td></tr>
<tr><td>安全标识</td><td>AllocateAndInitializeSid</td><td>安全标识(机构,数量,子权0,子权1,2,3,4,5,6,7,@SID)</td><td>分配和初始化一个安全标识符， (SID) 最多八个子授权。</td></tr>
<tr><td>本地标识</td><td>AllocateLocallyUniqueId</td><td>本地标识(LUID)</td><td>分配本地唯一标识符 （LUID）。</td></tr>
<tr><td>已授全权</td><td>AreAllAccessesGranted</td><td>已授全权(授权,请求)</td><td>检查是否已授予一组请求的访问权限。</td></tr>
<tr><td>已授权限</td><td>AreAnyAccessesGranted</td><td>已授权限(授权,请求)</td><td>测试是否已授予一组请求的访问权限中的任何一项。</td></tr>
<tr><td>已授权限</td><td>AreAnyAccessesGranted</td><td>已授权限(授权,请求)</td><td>使用调用方指定的数据初始化EXPLICIT_ACCESS结构。 受信人由名称字符串标识。</td></tr>
<tr><td>复制标识</td><td>CopySid</td><td>复制标识(长度,@数据,SID)</td><td>将安全标识符 (SID) 复制到缓冲区。</td></tr>
<tr><td>私对象号</td><td>CreatePrivateObjectSecurity</td><td>私对象号(父目录,描述,@新描述,容器,令牌,映射)</td><td>为新的私有对象分配和初始化自相对安全描述符。</td></tr>
<tr><td>私分对象</td><td>CreatePrivateObjectSecurityEx</td><td>私分对象(父目录,描述,@新描述,类号,容器,标志,令牌,映射)</td><td>分配和初始化由资源管理器调用此函数创建的新私有对象的自相对安全描述符。</td></tr>
<tr><td>删除访问</td><td>DeleteAce</td><td>删除访问(访问,序号)</td><td>从访问控制列表 (ACL) 中删除访问控制项 (ACE) 。</td></tr>
<tr><td>销毁私号</td><td>DestroyPrivateObjectSecurity</td><td>销毁私号(描述)</td><td>删除私有对象的安全描述符。</td></tr>
<tr><td>安全同域</td><td>EqualDomainSid</td><td>安全同域(SID1,SID2,@真假)</td><td>确定两个 SID 是否来自同一个域。</td></tr>
<tr><td>安全同姓</td><td>EqualPrefixSid</td><td>安全同姓(SID1,SID2)</td><td>测试两个安全标识符 (SID) 前缀值是否相等。</td></tr>
<tr><td>安全同值</td><td>EqualSid</td><td>安全同值(SID1,SID2)</td><td>测试两个安全标识符 (SID) 值是否相等。 两个 SID 必须完全匹配才能被视为相等。</td></tr>
<tr><td>访问首字</td><td>EqualPrefixSid</td><td>访问首字(访问,@指针)</td><td>检索指向访问控制列表中的第一个自由字节的指针 (ACL) 。</td></tr>
<tr><td>安全释放</td><td>FreeSid</td><td>安全释放(SID)</td><td>释放以前使用 安全标识 函数分配 (SID) 安全标识符。</td></tr>
<tr><td>安全长度</td><td>GetLengthSid</td><td>安全长度(SID)</td><td>返回有效安全标识符的长度（以字节为单位）。</td></tr>
<tr><td>取访问项</td><td>GetAce</td><td>取访问项(访问,序号,@项目)</td><td>访问控制列表中的访问控制项 。</td></tr>
<tr><td>取访问表</td><td>GetAclInformation</td><td>取访问表(访问,@数据,大小,信息类)</td><td>检索有关访问控制列表的信息。</td></tr>
<tr><td>改访问表</td><td>SetAclInformation</td><td>改访问表(访问,数据,大小,信息类)</td><td>设置有关访问控制列表的信息。</td></tr>
<tr><td>取件安全</td><td>GetFileSecurityA</td><td>取件安全(文件名,信息,@描述,大小,@已收)</td><td>获取有关文件或目录安全性的指定信息。</td></tr>
<tr><td>改件安全</td><td>SetFileSecurityA</td><td>改件安全(文件名,信息,描述)</td><td>获取有关文件或目录安全性的指定信息。</td></tr>
<tr><td>取内对象</td><td>GetKernelObjectSecurity</td><td>取内对象(对象,信息,@描述,大小,@已收)</td><td>检索保护内核对象的安全描述符的副本。</td></tr>
<tr><td>改内对象</td><td>SetKernelObjectSecurity</td><td>改内对象(对象,信息,描述)</td><td>设置保护内核对象的安全描述符的副本。</td></tr>
<tr><td>取名安全</td><td>GetNamedSecurityInfoA</td><td>取名安全(名称,<a href="#安全对象类型">类型</a>,@持有,@主组,@任意,@系统,@数据)</td><td>检索由名称指定的对象的安全描述符的副本。</td></tr>
<tr><td>改名安全</td><td>SetNamedSecurityInfoA</td><td>改名安全(名称,<a href="#安全对象类型">类型</a>,<a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecAuthZ/security-information">信息</a>,持有,主组,任意,系统)</td><td>按名称标识对象的安全描述符中设置指定的安全信息。</td></tr>
<tr><td>取私对象</td><td>GetPrivateObjectSecurity</td><td>取私对象(描述,部件,@描述,大小,@剩余)</td><td>从私有对象的安全描述符检索信息。</td></tr>
<tr><td>改私对象</td><td>SetPrivateObjectSecurity</td><td>改私对象(描述,部件,@描述,映射,令牌)</td><td>从私有对象的安全描述符检索信息。</td></tr>
<tr><td>取安全符</td><td>GetSecurityInfo</td><td>取安全符(对象,<a href="#安全对象类型">类型</a>,@持有,@主组,@任意,@系统,@数据)</td><td>检索句柄指定的对象的安全描述符的副本。</td></tr>
<tr><td>改安全符</td><td>SetSecurityInfo</td><td>改安全符(对象,<a href="#安全对象类型">类型</a>,信息,持有,主组,任意,系统)</td><td>在句柄标识对象的安全描述符中设置指定的安全信息。</td></tr>
<tr><td>名称委托</td><td>BuildExplicitAccessWithNameA</td><td>名称委托(委托,名称,权限,模式,<a href="#访问继承标志">继承</a>)</td><td>指定的数据初始化<a href="#访问委托类">访问委托类</a>结构。受信人由名称字符串标识。</td></tr>
<tr><td>模拟登陆</td><td>ImpersonateLoggedOnUser</td><td>模拟登陆(令牌)</td><td>允许调用线程模拟登录用户的安全上下文。</td></tr>
</table><a name="访问委托类">访问委托类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>访问委托类</td><td>EXPLICIT_ACCESS_A</td><td>32</td><td>定义指定受托人的访问控制信息。</td></tr>
<tr><th colspan=4>安全描述类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>权限</td><td>grfAccessPermissions</td><td>整数</td><td>使用访问掩码指定 ACE 允许、拒绝或审核受托人的访问权限。</td></tr>
<tr><td>模式</td><td>grfAccessMode</td><td>整数</td><td>指示访问控制列表的<a href="#安全访问模式">访问模式</a>。</td></tr>
<tr><td>继承</td><td>grfInheritance</td><td>整数</td><td>用于确定其他容器或对象是否可以从附加 ACL 的主对象继承 ACE。</td></tr>
<tr><td>委托</td><td>Trustee</td><td>整数</td><td>用于标识用户、组或程序 的 TRUSTEE 结构。</td></tr>
</table><a name="访问继承标志">访问继承标志</a></font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>NO_INHERITANCE</td><td>0</td><td>不继承。</td></tr>
<tr><td>OBJECT_INHERIT_ACE</td><td>1</td><td>主对象包含的非容器对象继承 ACE。</td></tr>
<tr><td>CONTAINER_INHERIT_ACE</td><td>2</td><td>主对象包含的其他容器继承 ACE。</td></tr>
<tr><td>NO_PROPAGATE_INHERIT_ACE</td><td>4</td><td>OBJECT_INHERIT_ACE和CONTAINER_INHERIT_ACE标志不会传播到继承的 ACE。</td></tr>
<tr><td>INHERIT_ONLY_ACE</td><td>8</td><td>ACE 不适用于附加 ACL 的主对象，但主对象包含的对象将继承 ACE。</td></tr>
<tr><td>SUB_OBJECTS_ONLY_INHERIT</td><td>1</td><td>主对象包含的非容器对象继承 ACE。 此标志对应于OBJECT_INHERIT_ACE标志。</td></tr>
<tr><td>SUB_CONTAINERS_ONLY_INHERIT</td><td>2</td><td>主对象包含的其他容器继承 ACE。 此标志对应于CONTAINER_INHERIT_ACE标志。</td></tr>
<tr><td>SUB_CONTAINERS_AND_OBJECTS_INHERIT</td><td>3</td><td>主对象包含的容器和非容器对象都继承 ACE。 此标志对应于CONTAINER_INHERIT_ACE和OBJECT_INHERIT_ACE标志的组合。</td></tr>
<tr><td>INHERIT_NO_PROPAGATE</td><td>4</td><td>继承但不传播。</td></tr>
<tr><td>INHERIT_ONLY</td><td>8</td><td>仅继承。</td></tr>
</table><a name="安全访问模式">安全访问模式</a></font><br>
指示EXPLICIT_ACCESS结构中的访问权限如何应用于受托人。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>NOT_USED_ACCESS</td><td>0</td><td>未使用值。</td></tr>
<tr><td>GRANT_ACCESS</td><td>1</td><td>指示ACCESS_ALLOWED_ACE 结构。 新的 ACE 将指定权限与受托人的任何现有允许或拒绝权限组合在一起。</td></tr>
<tr><td>SET_ACCESS</td><td>2</td><td>指示允许指定权限 的ACCESS_ALLOWED_ACE 结构。输入时，此值将放弃受托人的任何现有访问控制信息。</td></tr>
<tr><td>DENY_ACCESS</td><td>3</td><td>指示ACCESS_DENIED_ACE 拒绝指定权限的结构。输入时，除受托人当前拒绝的任何权利外，此值还会拒绝指定权限。</td></tr>
<tr><td>REVOKE_ACCESS</td><td>4</td><td>指示所有现有 ACCESS_ALLOWED_ACE 或删除 指定受托人的SYSTEM_AUDIT_ACE结构。</td></tr>
<tr><td>SET_AUDIT_SUCCESS</td><td>5</td><td>指示一个 SYSTEM_AUDIT_ACE 结构，该结构为成功尝试使用指定访问权限生成审核消息。输入时，此值将指定权限与受托人的任何现有审核访问权限组合在一起。</td></tr>
<tr><td>SET_AUDIT_FAILURE</td><td>6</td><td>指示SYSTEM_AUDIT_ACE 结构，为使用指定访问权限的失败尝试生成审核消息。输入时，此值将指定权限与受托人的任何现有审核访问权限组合在一起。</td></tr>
</table><a name="关机标志">关机标志</a></font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>SHUTDOWN_FORCE_OTHERS</td><td>1</td><td>强制注销所有会话。 如果未设置此标志，并且当前用户以外的用户登录到 由 机名 参数指定的计算机，则此函数将失败，返回值 ERROR_SHUTDOWN_USERS_LOGGED_ON。</td></tr>
<tr><td>SHUTDOWN_FORCE_SELF</td><td>2</td><td>指定强制注销原始会话。 如果未设置此标志，则会以交互方式关闭原始会话，因此即使函数成功返回，也不能保证关闭。</td></tr>
<tr><td>SHUTDOWN_GRACE_OVERRIDE</td><td>0x20</td><td>替代宽限期，以便立即关闭计算机。</td></tr>
<tr><td>SHUTDOWN_HYBRID</td><td>0x200</td><td>从在 Windows 8 上运行的 InitiateShutdown 开始，必须包含此表中的一个或多个标志的 SHUTDOWN_HYBRID 标志，以指定关机选项。从 Windows 8 开始，如果缺少SHUTDOWN_HYBRID标志，则 InitiateShutdown 始终启动完全系统关闭。</td></tr>
<tr><td>SHUTDOWN_INSTALL_UPDATES</td><td>0x00000040 (0x40)</td><td>计算机在开始关闭之前安装任何更新。</td></tr>
<tr><td>SHUTDOWN_NOREBOOT</td><td>0x00000010 (0x10)</td><td>计算机已关闭，但未关闭或重新启动。</td></tr>
<tr><td>SHUTDOWN_POWEROFF</td><td>0x00000008 (0x8)</td><td>计算机已关闭并关机。</td></tr>
<tr><td>SHUTDOWN_RESTART</td><td>0x00000004 (0x4)</td><td>计算机已关闭并重新启动。</td></tr>
<tr><td>SHUTDOWN_RESTARTAPPS</td><td>0x00000080 (0x80)</td><td>使用带有 EWX_RESTARTAPPS 标志的 ExitWindowsEx 函数重新启动系统。 这会使用 RegisterApplicationRestart 函数重启已注册重启的任何应用程序。</td></tr>
</table><a name="关机错误">关机错误</a></font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>ERROR_ACCESS_DENIED</td><td>5</td><td>调用方没有执行此操作所需的权限 (SE_SHUTDOWN_PRIVILEGE 或SE_REMOTE_SHUTDOWN_PRIVILEGE) 。</td></tr>
<tr><td>ERROR_BAD_NETPATH</td><td>53</td><td>指定的计算机不存在或无法访问。</td></tr>
<tr><td>ERROR_INVALID_COMPUTERNAME</td><td>1210</td><td>指定的计算机名称不是有效的计算机名称。</td></tr>
<tr><td>ERROR_INVALID_FUNCTION</td><td>1</td><td>指定的计算机不支持关闭接口。</td></tr>
<tr><td>ERROR_INVALID_PARAMETER</td><td>87</td><td>传递的参数集无效。 </td></tr>
<tr><td>ERROR_SHUTDOWN_IN_PROGRESS</td><td>1115</td><td>已在指定的计算机上启动关闭。</td></tr>
<tr><td>ERROR_SHUTDOWN_IS_SCHEDULED</td><td>1190</td><td>已计划关闭指定的计算机，但未启动。 要使此函数成功，必须设置 0x20 标志。</td></tr>
<tr><td>ERROR_SHUTDOWN_USERS_LOGGED_ON</td><td>1191</td><td>当前用户以外的一个或多个用户登录到指定的计算机上，并且未设置 1 标志。</td></tr>
</table><a name="安全对象类型">安全对象类型</a></font><br>
SE_OBJECT_TYPE 枚举包含的值对应于支持安全性的 Windows 对象类型。 
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>SE_UNKNOWN_OBJECT_TYPE</td><td>0</td><td>未知的对象类型。</td></tr>
<tr><td>SE_FILE_OBJECT</td><td>1</td><td>指示文件或目录。 ..\FileName 或 FileName.dat、d:\sec\sec.dat 或 \\ComputerName\ShareName\FileName.dat。</td></tr>
<tr><td>SE_SERVICE</td><td>2</td><td>指示 Windows 服务。 服务对象可以是本地服务（如 ServiceName）或远程服务（如 \\ComputerName\ServiceName）。</td></tr>
<tr><td>SE_PRINTER</td><td>3</td><td>指示打印机。 打印机对象可以是本地打印机（如 PrinterName）或远程打印机（如 \\ComputerName\PrinterName）。</td></tr>
<tr><td>SE_REGISTRY_KEY</td><td>4</td><td>指示注册表项。 本地注册表（如 CLASSES_ROOT\SomePath ）远程注册表中，如 \\ComputerName\CLASSES_ROOT\SomePath。</td></tr>
<tr><td>SE_LMSHARE</td><td>5</td><td>指示网络共享。 共享对象可以是本地对象（如 ShareName）或远程对象（如 \\ComputerName\ShareName）。</td></tr>
<tr><td>SE_KERNEL_OBJECT</td><td>6</td><td>指示本地内核对象。取/改名安全：信号灯、事件、互斥体、计时器和文件映射。取/改安全符支持所有</td></tr>
<tr><td>SE_WINDOW_OBJECT</td><td>7</td><td>指示本地计算机上的窗口工作站或桌面对象。</td></tr>
<tr><td>SE_DS_OBJECT</td><td>8</td><td>指示目录服务对象或目录服务对象的属性集或属性。例如：CN=SomeObject,OU=ou2,OU=ou1,DC=DomainName,DC=CompanyName,DC=com,O=internet</td></tr>
<tr><td>SE_DS_OBJECT_ALL</td><td>9</td><td>指示目录服务对象及其所有属性集和属性。</td></tr>
<tr><td>SE_PROVIDER_DEFINED_OBJECT</td><td>10</td><td>指示提供程序定义的 对象。</td></tr>
<tr><td>SE_WMIGUID_OBJECT</td><td>11</td><td>指示 WMI 对象。</td></tr>
<tr><td>SE_REGISTRY_WOW64_32KEY</td><td>12</td><td>指示 WOW64 下的注册表项的对象。</td></tr>
<tr><td>SE_REGISTRY_WOW64_64KEY</td><td>13</td><td>指示 WOW64 下的注册表项的对象。</td></tr>
</table><p><font color="#0000FF" size=6><a name="进程令牌">进程令牌</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>改令牌组</td><td>AdjustTokenGroups</td><td>改令牌组(令牌,默认,权组,长度,状态,大小)</td><td>启用或禁用指定访问令牌中已存在的组。</td></tr>
<tr><td>令牌权限</td><td>AdjustTokenPrivileges</td><td>令牌权限(令牌,禁用,权组,长度,状态,大小)</td><td>启用或禁用指定访问令牌中的权限。</td></tr>
<tr><td>新建令牌</td><td>CreateRestrictedToken</td><td>新建令牌(令牌,选项,数目,用户组</td><td>删数,删权,新数,新组,新牌)创建一个新的访问令牌，该令牌是现有访问令牌的受限版本。</td></tr>
<tr><td>再造令牌</td><td>DuplicateToken</td><td>再造令牌(令牌,级别,新牌)</td><td>创建一个新的访问令牌，该令牌复制已存在的访问令牌。</td></tr>
<tr><td>复制令牌</td><td>DuplicateTokenEx</td><td>复制令牌(令牌,访问,<a href="#安全属性类">属性</a>,级别,类型,@新牌)</td><td>创建一个复制现有令牌的新访问令牌。</td></tr>
<tr><td>令牌信息</td><td>GetTokenInformation</td><td>令牌信息(令牌,类集,信息,长度,大小)</td><td>检索有关访问令牌的指定类型的信息。调用进程必须具有适当的访问权限才能获取信息。</td></tr>
<tr><td>信息令牌</td><td>SetTokenInformation</td><td>信息令牌(令牌,类集,信息,长度,大小)</td><td>为指定的访问令牌设置各种类型的信息。</td></tr>
<tr><td>是否限牌</td><td>IsTokenRestricted</td><td>是否限牌(令牌)</td><td>指示令牌是否包含受限制的安全标识符 （SID） 的列表。</td></tr>
<tr><td>进程令牌</td><td>OpenProcessToken</td><td>进程令牌(进程,访问,令牌)</td><td>打开与进程关联的访问令牌。</td></tr>
<tr><td>线程令牌</td><td>OpenThreadToken</td><td>线程令牌(线程,访问,令牌)</td><td>打开与线程关联的访问令牌。</td></tr>
<tr><td>线程发牌</td><td>SetThreadToken</td><td>线程发牌(线程,令牌)</td><td>将模拟令牌分配给线程。该函数还可能导致线程停止使用模拟令牌。</td></tr>
<tr><td>安全令牌</td><td>ImpersonateSelf</td><td>安全令牌(级别)</td><td>获取模拟调用进程的安全上下文的访问令牌。令牌将分配给调用线程。</td></tr>
<tr><td>权限检查</td><td>PrivilegeCheck</td><td>权限检查(令牌,权集,权限)</td><td>确定是否在访问令牌中启用了一组指定的权限。</td></tr>
<tr><td>匿名令牌</td><td>ImpersonateAnonymousToken</td><td>匿名令牌(进程)</td><td>使指定的线程能够模拟系统的匿名登录令牌。远程访问前使用</td></tr>
</table><p><font color="#0000FF" size=6><a name="日志事件">日志事件</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>备份日志</td><td>BackupEventLogA</td><td>备份日志(日志,路径)</td><td>将指定的事件日志保存到备份文件。该函数不会清除事件日志。</td></tr>
<tr><td>清除日志</td><td>ClearEventLogA</td><td>清除日志(日志,路径)</td><td>清除指定的事件日志，并选择性地将日志的当前副本保存到备份文件。</td></tr>
<tr><td>关闭日志</td><td>CloseEventLog</td><td>关闭日志(日志)</td><td>关闭指定的事件日志。</td></tr>
<tr><td>注销日志</td><td>DeregisterEventSource</td><td>注销日志(日志)</td><td>注销指定的事件日志。</td></tr>
<tr><td>日志数量</td><td>GetNumberOfEventLogRecords</td><td>日志数量(日志,@数量)</td><td>检索指定事件日志中的记录数。</td></tr>
<tr><td>日志编号</td><td>GetOldestEventLogRecord</td><td>日志编号(日志,@编号)</td><td>检索指定事件日志中最旧记录的绝对记录号。</td></tr>
<tr><td>事件通知</td><td>NotifyChangeEventLog</td><td>事件通知(日志,事件)</td><td>使应用程序能够在将事件写入指定的事件日志时接收通知。</td></tr>
<tr><td>打开备份</td><td>OpenBackupEventLogA</td><td>打开备份(服务名,路径)</td><td>打开指定事件日志的句柄。</td></tr>
<tr><td>事件日志</td><td>OpenEventLogA</td><td>事件日志(服务名,路径)</td><td>打开指定事件日志的句柄。</td></tr>
<tr><td>读取日志</td><td>ReadEventLogA</td><td>读取日志(日志,选项,序号,内容,长度,大小,0)</td><td>从指定的事件日志中读取指定数目的条目。该函数可用于按时间顺序或反向时间顺序读取日志条目。</td></tr>
<tr><td>报告事件</td><td>ReportEventA</td><td>报告事件(日志,选项,类别,标识</td><td>,用户,字数,数据,内容,缓冲)从指定的事件日志中读取指定数目的条目。该函数可用于按时间顺序或反向时间顺序读取日志条目。</td></tr>
<tr><td>注册事件</td><td>RegisterEventSource</td><td>源=注册事件(机名,源名)</td><td>取得事件源句柄</td></tr>
<tr><td>已注事件</td><td>RegisterEventSourceA</td><td>已注事件(服务器名,@事件源)</td><td>检索指定事件日志的已注册句柄。本机为0</td></tr>
</table><p><font color="#0000FF" size=6><a name="加密算法">加密算法</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>加密服务</td><td>CryptAcquireContextA</td><td>加密服务(@服务,密名,服名,类型,选项)</td><td>用于获取特定加密服务提供程序（CSP）中特定密钥容器的句柄。</td></tr>
<tr><td>加密引用</td><td>CryptContextAddRef</td><td>加密引用(服务,0,0)</td><td>将一个添加到 HCRYPTPROV 加密服务提供程序 （CSP） 句柄的引用计数中。</td></tr>
<tr><td>创建哈希</td><td>CryptCreateHash</td><td>创建哈希(服务,算法,密钥,摘要,@哈希)</td><td>启动数据流的哈希处理。算法可参见下表,密钥和摘要一般为0</td></tr>
<tr><td>加密解密</td><td>CryptDecrypt</td><td>加密解密(密钥,哈希,完成,选项,内容,长度)</td><td>使用哈希算法对数据内容进行解密(加密的内容解密后写回内容缓冲区和长度),选项$20不检查填充 $40最佳非对称加密填充</td></tr>
<tr><td>派生密钥</td><td>CryptDeriveKey</td><td>派生密钥(服务,算法,哈希,选项,@密钥)</td><td>生成从基本数据值派生的加密会话密钥。</td></tr>
<tr><td>销毁哈希</td><td>CryptDestroyHash</td><td>销毁哈希(密钥)</td><td>销毁指定的哈希对象。</td></tr>
<tr><td>销毁密钥</td><td>CryptDestroyKey</td><td>销毁密钥(密钥)</td><td>销毁指定的密钥对象。</td></tr>
<tr><td>哈希副本</td><td>CryptDuplicateHash</td><td>哈希副本(哈希,0,0,@副本)</td><td>在复制完成后制作哈希的精确副本(包含状态)。</td></tr>
<tr><td>密钥副本</td><td>CryptDuplicateKey</td><td>密钥副本(密钥,0,0,@副本)</td><td>创建密钥和密钥状态的精确副本。</td></tr>
<tr><td>密钥加密</td><td>CryptEncrypt</td><td>密钥加密(密钥,哈希,完成,选项,内容,长度,大小)</td><td>使用指定密钥加密数据。</td></tr>
<tr><td>检索加密</td><td>CryptEnumProvidersA</td><td>检索加密(序号,0,0,类型,名称,长度)</td><td>检索第一个或下一个可用的加密服务，循环检索可遍历所有服务</td></tr>
<tr><td>查加密类</td><td>CryptEnumProviderTypesA</td><td>查加密类(序号,0,0,类型,名称,长度)</td><td>检索第一个或下一个支持类型的加密服务，循环检索可遍历所有服务</td></tr>
<tr><td>导出密钥</td><td>CryptExportKey</td><td>导出密钥(密钥,新密,类型,选项,内容,长度)</td><td>以安全的方式从加密服务中导出加密密钥或密钥对。</td></tr>
<tr><td>生成密钥</td><td>CryptGenKey</td><td>生成密钥(服务,算法,选项,@密钥)</td><td>生成随机加密会话密钥或公钥/私钥对。</td></tr>
<tr><td>加密随机</td><td>CryptExportKey</td><td>加密随机(服务,长度,内容)</td><td>使用加密随机字节填充缓冲区。</td></tr>
<tr><td>默认加密</td><td>CryptGetDefaultProviderA</td><td>默认加密(类,0,选项,名称,长度)</td><td>查找本地计算机或当前用户的指定提供程序类型的默认加密服务提供程序（CSP）。类:1 PROV_RSA_FULL... 选项:1计算机 2用户</td></tr>
<tr><td>加密数据</td><td>CryptGetHashParam</td><td>加密数据(哈希,参数,数据,长度,0)</td><td>检索控制哈希对象操作的数据的哈希值等。参数:1哈希算法 2哈希值 4值大小</td></tr>
<tr><td>加密密钥</td><td>CryptGetKeyParam</td><td>加密密钥(密钥,类型,内容,长度,0)</td><td>检索控制密钥操作的数据。</td></tr>
<tr><td>加密参数</td><td>CryptGetProvParam</td><td>加密参数(服务,类型,内容,长度,0)</td><td>检索控制加密服务操作的参数。</td></tr>
<tr><td>用户密钥</td><td>CryptGetUserKey</td><td>用户密钥(服务,私钥,@密钥)</td><td>检索用户的两个公钥/私钥对之一的句柄。</td></tr>
<tr><td>哈希数据</td><td>CryptHashData</td><td>哈希数据(哈希,数据,长度,0)</td><td>将数据添加到指定的哈希对象。可多次调用</td></tr>
<tr><td>哈希密钥</td><td>CryptHashSessionKey</td><td>哈希密钥(哈希,密钥,选项)</td><td>计算会话密钥对象的加密哈希(可多次调用或者跟"哈希数据"混用)。选项=1小端序(低位数据存储在低位内存)0大端序(数据反向存储)</td></tr>
<tr><td>导入密钥</td><td>CryptImportKey</td><td>导入密钥(服务,数据,长度,公钥,选项,@密钥)</td><td>将加密密钥从密钥数据传输到加密服务。</td></tr>
<tr><td>释放加密</td><td>CryptReleaseContext</td><td>释放加密(服务,0)</td><td>释放加密服务和密钥容器的句柄。</td></tr>
<tr><td>定义哈希</td><td>CryptSetHashParam</td><td>定义哈希(哈希,参数,数据,0)</td><td>自定义哈希对象的操作，包括设置初始哈希内容和选择特定的哈希算法。参数 2:哈希值 5:HMAC信息</td></tr>
<tr><td>定义密钥</td><td>CryptSetKeyParam</td><td>定义密钥(哈希,参数,数据,选项)</td><td>自自定义会话密钥操作的各个方面。参数为 7 KP_ALGID时,选项可以保存密钥大小等值</td></tr>
<tr><td>定默加密</td><td>CryptSetProviderA</td><td>定默加密(名称,类型)</td><td>指定当前用户的默认加密服务提供程序 （CSP）。</td></tr>
<tr><td>定义加密</td><td>CryptSetProvParam</td><td>定义加密(服务,参数,数据,选项)</td><td>自定义加密服务提供程序 （CSP） 的操作。此函数通常用于在与 CSP 关联的密钥容器上设置安全描述符</td></tr>
<tr><td>加密签名</td><td>CryptSignHashA</td><td>加密签名(哈希,私钥,0,选项,签名,长度)</td><td>数据进行哈希处理之后,获取数据加密的签名。选项 1:未设对象标识 4:ANSI X9.31标准</td></tr>
<tr><td>验证签名</td><td>CryptVerifySignatureA</td><td>验证签名(哈希,签名数据,长度,公钥,0,选项)</td><td>验证哈希对象的签名。选项 1:未设对象标识 4:ANSI X9.31标准</td></tr>
<tr><td>解密文件</td><td>DecryptFileA</td><td>解密文件(路径,0)</td><td>解密加密的文件或目录。</td></tr>
<tr><td>加密文件</td><td>EncryptFileA</td><td>加密文件(路径)</td><td>加密文件或目录。目录中所有新文件都将被加密。</td></tr>
<tr><td>打开加密</td><td>OpenRawA</td><td>打开加密(路径,选项,@块)</td><td>打开加密文件以备份（导出）或还原（导入）文件。选项 0备份 1还原 2目录 4覆盖隐藏文件</td></tr>
<tr><td>关闭加密</td><td>CloseRaw</td><td>关闭加密(块)</td><td>在备份或还原操作后关闭加密文件，并释放关联的系统资源。</td></tr>
<tr><td>导出加密</td><td>ReadRaw</td><td>导出加密(@回调,块数据,块)</td><td>备份（导出）加密文件，同时将文件保持在加密状态。回调函数收到三个参数(写数据,块数据,大小)</td></tr>
<tr><td>导入加密</td><td>WriteRaw</td><td>导入加密(@回调,块数据,块)</td><td>恢复（导入）加密文件。回调函数收到三个参数(收数据,块数据,大小)</td></tr>
</table><p><font color="#0000FF" size=6><a name="注册表">注册表</a></font></p>
注册表是系统定义的数据库，应用程序和系统组件在其中存储和检索配置数据。 存储在注册表中的数据因 Microsoft Windows 版本而异。<br>
应用程序使用注册表 API 检索、修改或删除注册表数据。<br>

除非绝对必要，否则不应编辑不属于应用程序的注册表数据。 如果注册表中存在错误，则表示系统可能无法正常工作。<br>
如果发生这种情况，可以将注册表还原到上次成功启动计算机时的状态。<br>
<b>注册表的结构</b><br>
注册表是一个分层数据库，其中包含对 Windows 的操作以及 Windows 上运行的应用程序和服务至关重要的数据。 数据以树格式进行结构化。 树中的每个节点称为 键。<br>
每个键可以同时包含 子项 和数据条目（称为 值）。 有时，密钥的存在是应用程序所需的所有数据;其他时候，应用程序会打开一个密钥并使用与该键关联的值。<br>
键可以有任意数量的值，值可以采用任何形式。 有关详细信息，请参阅注册表值类型和注册表元素大小限制。<br>

每个键都有一个由一个或多个可打印字符组成的名称。 键名称不区分大小写。 键名称不能包含反斜杠字符 (\) ，但可以使用任何其他可打印字符。 <br>

值名称和数据可以包含反斜杠字符。每个子项的名称对于层次结构中紧靠在它的上方的键而言是唯一的。 键名称未本地化为其他语言，但值可能为 。<br>

下图是注册表编辑器显示的示例注册表项结构。<br>
<img src="https://learn.microsoft.com/zh-cn/windows/win32/sysinfo/images/regtree.png" alt="注册表编辑器窗口"><br>
每个值都包含一个值名称及其关联的数据。注册表树的深度可以为 512 级。 通过单个注册表 API 调用，一次最多可以创建 32 个级别。<br>
<b>注册表存储空间</b><br>
尽管应用程序可以在注册表中存储的数据的类型和大小几乎没有技术限制，但存在某些实用准则以提高系统效率。<br>
应用程序应将配置和初始化数据存储在注册表中，并将其他类型的数据存储在其他地方。<br>

通常超过一两千字节的数据应存储为文件，并使用注册表中的键引用，而不是作为值存储。<br>
应用程序应将数据保存为文件并引用文件，而不是在注册表中复制大块数据。 可执行的二进制代码绝不应存储在注册表中。<br>

值项使用的注册表空间比键少得多。为了节省空间，应用程序应将类似数据分组为结构，并将结构存储为值，而不是将每个结构成员存储为单独的键。<br>
注册表文件的视图在计算机缓存地址空间中映射。 因此，无论注册表数据的大小如何，其费用不超过 4 MB。注册表配置单元的最大大小为 2 GB，系统配置单元除外。<br>
<b>预定义键</b><br>
应用程序必须先打开密钥，然后才能将数据添加到注册表。 若要打开密钥，应用程序必须向注册表中已打开的另一个项提供句柄。 系统定义始终打开的预定义密钥。<br>
预定义键可帮助应用程序在注册表中导航，并可以开发允许系统管理员操作数据类别的工具。 将数据添加到注册表的应用程序应始终在预定义键的框架中工作，因此管理工具可以找到并使用新数据。<br>

应用程序可以使用这些键的句柄作为注册表的入口点。 尽管这些句柄的使用可能因平台而异，但这些句柄对所有注册表实现都有效。 此外，已针对特定平台定义了其他预定义句柄。<br> 
<p><font color="#0000FF">下面是预定义键的句柄。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>表键类根</td><td>HKEY_CLASSES_ROOT</td><td>0x80000000</td><td>从属于此项的注册表项定义类型 (或类) 文档以及与这些类型关联的属性。 Shell 和 COM 应用程序使用此密钥下存储的信息。</td></tr>
<tr><td>表键当前</td><td>HKEY_CURRENT_USER</td><td>0x80000001</td><td>从属于此键的注册表项定义当前用户的首选项。包括环境变量的设置、有关程序组、颜色、打印机、网络连接和应用程序首选项的数据。</td></tr>
<tr><td>表键本机</td><td>HKEY_LOCAL_MACHINE</td><td>0x80000002</td><td>从属于此键的注册表项定义计算机的物理状态，包括有关总线类型、系统内存以及已安装硬件和软件的数据。</td></tr>
<tr><td>表键用户</td><td>HKEY_USERS</td><td>0x80000003</td><td>从属于此项的注册表项定义本地计算机上新用户的默认用户配置和当前用户的用户配置。</td></tr>
<tr><td>表键数据</td><td>HKEY_PERFORMANCE_DATA</td><td>0x80000004</td><td>从属于此键的注册表项允许访问性能数据。数据实际上不存储在注册表中;注册表函数会导致系统从其源收集数据。</td></tr>
<tr><td>表键配置</td><td>HKEY_CURRENT_CONFIG</td><td>0x80000005</td><td>包含有关本地计算机系统的当前硬件配置文件的信息。信息仅描述了当前硬件配置与标准配置之间的差异。</td></tr>
<tr><td>表键首选</td><td>HKEY_CURRENT_USER_LOCAL_SETTINGS</td><td>0x80000007</td><td>从属于此项的注册表项定义当前用户的首选项，这些首选项是计算机的本地用户。漫游用户配置文件的按用户注册表部分不包括这些条目。</td></tr>
<tr><td>表键英语</td><td>HKEY_PERFORMANCE_TEXT</td><td>0x80000050</td><td>从属于此键的注册表项引用描述美国英语计数器的文本字符串。</td></tr>
<tr><td>表键本语</td><td>HKEY_PERFORMANCE_NLSTEXT</td><td>0x80000060</td><td>从属于此键的注册表项引用以运行计算机系统的区域的本地语言描述计数器的文本字符串。</td></tr>
</table>
<b>注册表配置单元</b><br>
配置单元是注册表中键、子项和值的逻辑组，在操作系统启动或用户登录时，这些键、子项和值具有一组加载到内存中的支持文件。<br>

每次新用户登录到计算机时，都会为该用户创建一个新的配置单元，其中包含用于用户配置文件的单独文件。 这称为 用户配置文件配置单元。<br>
用户的配置单元包含与用户的应用程序设置、桌面、环境、网络连接和打印机相关的特定注册表信息。 用户配置文件配置单元位于 HKEY_USERS 键下。<br>

配置单元的大多数支持文件位于 %SystemRoot%\System32\Config 目录中。 每次用户登录时，这些文件都会更新。<br>
这些目录中文件的文件扩展名（或在某些情况下缺少扩展名）指示它们包含的数据类型。 下表列出了这些扩展以及文件中数据的说明。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>扩展名</td><td>说明</td></tr>
<tr><td>无</td><td>配置单元数据的完整副本。</td></tr>
<tr><td>.Alt</td><td>关键 HKEY_LOCAL_MACHINE\System 配置单元的备份副本。 只有 System 键具有 .alt 文件。</td></tr>
<tr><td>.log</td><td>配置单元中键和值条目的更改的事务日志。</td></tr>
<tr><td>.sav</td><td>配置单元的备份副本。.sav 文件用于还原配置单元数据。</td></tr>
</table>下表列出了标准配置单元及其支持文件。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>注册表配置单元</td><td>支持文件</td></tr>
<tr><td>HKEY_CURRENT_CONFIG</td><td>System、System.alt、System.log、System.sav</td></tr>
<tr><td>HKEY_CURRENT_USER</td><td>Ntuser.dat、Ntuser.dat.log</td></tr>
<tr><td>HKEY_LOCAL_MACHINE\SAM</td><td>Sam、Sam.log、Sam.sav</td></tr>
<tr><td>HKEY_LOCAL_MACHINE\Security</td><td>Security、Security.log、Security.sav</td></tr>
<tr><td>HKEY_LOCAL_MACHINE\Software</td><td>Software、Software.log、Software.sav</td></tr>
<tr><td>HKEY_LOCAL_MACHINE\System</td><td>System、System.alt、System.log、System.sav</td></tr>
<tr><td>HKEY_USERS\.DEFAULT</td><td>Default、Default.log、Default.sav</td></tr>
</table>
<b>数据的类别</b><br>
在将数据放入注册表之前，应用程序应将数据分为两类：计算机特定的数据和用户特定的数据。
通过进行此区分，应用程序可以支持多个用户，并通过网络查找特定于用户的数据，并在不同的位置使用该数据，从而允许与位置无关的用户配置文件数据。<br>

安装应用程序后，它应在 HKEY_LOCAL_MACHINE 键下记录特定于计算机的数据。 具体而言，它应为公司名称、产品名称和版本号创建密钥，如以下示例所示：<br>

**HKEY_LOCAL_MACHINE\Software\**MyCompany\MyProduct\1.0<br>

如果应用程序支持 COM，则应在 HKEY_LOCAL_MACHINE\Software\Classes下记录该数据。<br>

应用程序应在 HKEY_CURRENT_USER 键下记录特定于用户的数据，如以下示例所示：<br>

**HKEY_CURRENT_USER\Software\**MyCompany\MyProduct\1.0<br>
<p><font color="#0000FF">注册表数据类型</font></p><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>表无形</td><td>REG_NONE</td><td>0</td><td>没有定义的值类型。</td></tr>
<tr><td>表文本</td><td>REG_SZ</td><td>1</td><td>以 0 结尾的字符串。 </td></tr>
<tr><td>表环境</td><td>REG_EXPAND_SZ</td><td>2</td><td>包含对环境变量 (例如“%PATH%”) 的未扩展引用的 0 终止字符串。</td></tr>
<tr><td>表数据</td><td>REG_BINARY</td><td>3</td><td>任意格式的二进制数据。</td></tr>
<tr><td>表整数</td><td>REG_DWORD</td><td>4</td><td>32 位数字。</td></tr>
<tr><td>表大端</td><td>REG_DWORD_BIG_ENDIAN</td><td>5</td><td>采用高位在前大端序格式的32位数字。</td></tr>
<tr><td>表链接</td><td>REG_LINK</td><td>6</td><td>Unicode 符号链接。</td></tr>
<tr><td>表宽字</td><td>REG_MULTI_SZ</td><td>7</td><td>以两个 0 结尾的字符串数组，宽字符。</td></tr>
<tr><td>表资源</td><td>REG_RESOURCE_LIST</td><td>8</td><td>设备驱动程序资源列表。</td></tr>
<tr><td>表描述</td><td>REG_FULL_RESOURCE_DESCRIPTOR</td><td>9</td><td>完整资源描述符</td></tr>
<tr><td>表需求</td><td>REG_RESOURCE_REQUIREMENTS_LIST</td><td>10</td><td>资源需求列表</td></tr>
<tr><td>表大数</td><td>REG_QWORD</td><td>11</td><td>64 位数字。</td></tr>
</table>
<b>打开、创建和关闭键</b><br>
应用程序必须先创建或打开密钥，然后应用程序才能将数据添加到注册表。 若要创建或打开密钥，应用程序始终将密钥引用为当前打开的密钥的子项。<br>
始终打开以下预定义键：表键本机、表键类根、 表键用户和表键当前。 应用程序使用 打开表密 函数打开密钥，并使用 创建表密 函数创建密钥。<br>
注册表树的深度可以为 512 级。 通过单个注册表 API 调用，一次最多可以创建 32 个级别。<br>

应用程序可以使用 关闭表项 函数关闭某个键，并将它包含的数据写入注册表。 关闭表项 在返回之前不一定将数据写入注册表;缓存刷新到硬盘可能需要几秒钟的时间。<br>
如果应用程序必须将注册表数据显式写入硬盘，则可以使用 更新表项 函数。 但是，更新表项 使用许多系统资源，并且仅在绝对必要时才应调用。<br>
<b>写入和删除注册表数据</b><br>
应用程序可以使用 改子项值 函数将值及其数据与键相关联。 有关 改子项值 支持的值类型的列表，请参阅 注册表值类型。<br>

若要从键中删除值，应用程序可以使用 删除值名 函数。若要删除密钥，可以使用 删除子项 函数。在关闭该密钥的最后一个句柄之前，不会删除已删除的密钥。<br>

在写入操作期间无法锁定注册表项以同步对数据的访问。 但是，可以使用安全属性控制对注册表项的访问。 有关详细信息，请参阅 注册表项安全和访问权限。<br>

可以在单个事务中执行多个注册表操作。 若要将注册表项与事务关联，应用程序可以使用 表键事务 或 表项事务 函数。<br>
<b>从注册表检索数据</b><br>
若要从注册表中检索数据，应用程序通常会枚举项的子项，直到找到特定的项，然后从与其关联的值检索数据。 应用程序可以调用 枚举表项 函数来枚举给定密钥的子项。<br>

若要检索有关特定子项的详细数据，应用程序可以调用 查询表项 函数。 表项信息 函数检索保护密钥的安全描述符的副本。<br>

应用程序可以使用 枚举项值 函数枚举给定键的值，并使用 查询值项 函数检索键的特定值。 应用程序通常调用 枚举项值 来确定值名称，然后 调用 查询值项 来检索名称的数据。<br>

查询项值 函数检索与打开的注册表项关联的值名称列表的类型和数据。 此函数对于动态密钥提供程序很有用，因为它通过在原子操作中检索多个值来确保数据的一致性。<br>

由于其他应用程序可以在应用程序读取值并使用该值之间更改注册表值中的数据，因此可能需要确保应用程序具有最新数据。<br>
可以使用 表项变动 函数在注册表项的属性或内容发生更改时通知调用线程，或者如果删除了该键。 函数向事件对象发出信号，以通知调用方。<br>
如果调用 表项变动 的线程退出，则会发出事件信号，并停止对注册表项的监视。<br>

可以通过使用通知筛选器或标志来控制或指定应报告哪些更改。 通常，更改是通过向函数发出指定的事件信号来报告的。 请注意， 表项变动 函数不适用于远程句柄。<br>
<b>注册表文件</b><br>
应用程序可以将注册表的一部分保存在文件中，然后将文件的内容加载回注册表。 当正在操作大量数据、在注册表中创建多个条目时，或者当数据是临时的并且必须加载然后再次卸载时，<br> 
注册表文件非常有用。备份和还原部分注册表的应用程序可能使用注册表文件。<br>

若要将键及其子项和值保存到注册表文件，应用程序可以调用 修改子项 或 改子项值 函数。<br>

修改子项 和 改子项值 使用 archive 属性创建文件。 文件在本地密钥进程的当前目录中创建，在远程密钥的 %systemroot%\system32 目录中创建。<br>

注册表文件具有以下两种格式：标准格式和最新格式。 标准格式是 Windows 2000 支持的唯一格式。 为了向后兼容，更高版本的 Windows 也支持它。 修改子项 以标准格式创建文件。<br>

从 Windows XP 开始，支持最新格式。 无法在 Windows 2000 上加载以此格式创建的注册表文件。 改子项值 可以通过指定REG_STANDARD_FORMAT或REG_LATEST_FORMAT，<br>
以任一格式保存注册表文件。 因此，它可用于将使用标准格式的注册表文件转换为最新格式。<br>

若要将注册表文件写回到注册表，应用程序可以使用 加载子项 替换表项 或 读取表项 函数，如下所示。<br>

加载子项 将注册表数据从指定文件加载到调用应用程序的计算机上或远程计算机上的 HKEY_USERS 或 HKEY_LOCAL_MACHINE 下的指定子项中。<br>
如果指定的子项尚不存在，则函数将创建该子项。 调用此函数后，应用程序可以使用 卸载子项 函数将注册表还原到其以前的状态。<br>
替换表项 将注册表项及其注册表中的所有子项和值替换为指定文件中包含的数据。 新数据在下次启动系统时生效。<br>
读取表项 将注册表数据从指定文件加载到调用应用程序的计算机上或远程计算机上的指定键中。 此函数将指定键下面的子项和值替换为文件中顶级键后面的子项和值。<br>
连接表项 函数与另一台计算机上的预定义注册表句柄建立连接。 应用程序使用此函数主要用于从网络环境中其他计算机上的远程注册表访问信息，也可以使用注册表编辑器执行此操作。<br>
你可能想要访问远程注册表以备份注册表或规范对它的网络访问。 请注意，必须具有适当的权限才能使用此函数访问远程注册表。<br>


<b>注册表项安全和访问权限</b><br>
 Windows 安全模型使你能够控制对注册表项的访问。 有关安全性的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecAuthZ/access-control-model">访问控制模型</a>。<br>

调用 创建表密 或 改表信息 函数时，可以为注册表项指定安全描述符。如果指定0则密钥将获取默认安全描述符。密钥的默认安全描述符中的ACL继承自其直接父密钥。<br>

若要获取注册表项的安全描述符，请调用 表项信息、 取名安全 或 取安全符 函数。<br>

注册表项的有效访问权限包括 DELETE、READ_CONTROL、WRITE_DAC和WRITE_OWNER <a href="https://learn.microsoft.com/zh-cn/windows/win32/secauthz/standard-access-rights">标准访问权限。</a> 注册表项不支持 SYNCHRONIZE 标准访问权限。<br>

<p><font color="#0000FF">注册表访问权限</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用</td></tr>
<tr><td>KEY_ALL_ACCESS</td><td>0xF003F</td><td>合并 全权访问、查询值、设置值、创建子项、枚举子项、更改通知和创建链接访问权限。</td></tr>
<tr><td>KEY_CREATE_LINK</td><td>0x0020</td><td>预留给系统使用。</td></tr>
<tr><td>KEY_CREATE_SUB_KEY</td><td>0x0004</td><td>创建注册表项的子项所必需的。</td></tr>
<tr><td>KEY_ENUMERATE_SUB_KEYS</td><td>0x0008</td><td>枚举注册表项的子项所必需的。</td></tr>
<tr><td>KEY_EXECUTE</td><td>0x20019</td><td>等效于 KEY_READ。</td></tr>
<tr><td>KEY_NOTIFY</td><td>0x0010</td><td>请求对注册表项或注册表项的子项的更改通知是必需的。</td></tr>
<tr><td>KEY_QUERY_VALUE</td><td>0x0001</td><td>查询注册表项的值所必需的。</td></tr>
<tr><td>KEY_READ</td><td>0x20019</td><td>合并 读取信息、查询值、枚举子项和更改通知值。</td></tr>
<tr><td>KEY_SET_VALUE</td><td>0x0002</td><td>创建、删除或设置注册表值所必需的。</td></tr>
<tr><td>KEY_WOW64_32KEY</td><td>0x0200</td><td>指示 64 位 Windows 上的应用程序应在 32 位注册表视图上运行。32 位 Windows 会忽略此标志。必须使用 OR 运算符将此标志与此表中查询或访问注册表值的其他标志结合使用。</td></tr>
<tr><td>KEY_WOW64_64KEY</td><td>0x0100</td><td>指示 64 位 Windows 上的应用程序应在 64 位注册表视图上运行。 32 位 Windows 会忽略此标志。必须使用 OR 运算符将此标志与此表中查询或访问注册表值的其他标志结合使用。</td></tr>
<tr><td>KEY_WRITE</td><td>0x20006</td><td>合并 读写信息、设置值和创建子项 访问权限。</td></tr>
</table><br>
<b>注册表元素大小限制</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>元素</td><td>大小限制</td></tr>
<tr><td>项名</td><td>255 个字符。 键名称包括注册表中项的绝对路径，始终从主键开始，例如，表键本机。</td></tr>
<tr><td>值名称</td><td>16，383 个字符。 Windows 2000： 260 个 ANSI 字符或 16，383 个 Unicode 字符。</td></tr>
<tr><td>值</td><td>可用内存 (最新格式) 1 MB (标准格式)</td></tr>
<tr><td>树</td><td>注册表树的深度可以为 512 级。 通过单个注册表 API 调用，一次最多可以创建 32 个级别。</td></tr>
</table><br>
(超过 2，048 字节的长值) 应存储在文件中，文件的位置应存储在注册表中。 这有助于注册表高效执行。<br>
文件位置可以是值的名称或值的数据。如果某个文件位置在键名称的 255 个字符限制内，则文件位置也可以是键的名称。<br>
<b>注册表中的 32 位和 64 位应用程序数据</b><br>
在 64 位 Windows 上，部分注册表项分别存储为 32 位应用程序和 64 位应用程序，并使用注册表重定向器和注册表反射映射到单独的逻辑注册表视图中，<br>
因为 64 位版本的应用程序可能使用不同于 32 位版本的注册表项和值。 还有未重定向或反映的 共享注册表项 。<br>

每个 64 位注册表节点的父节点是 Image-Specific 节点或 ISN。 注册表重定向程序以透明方式将应用程序的注册表访问定向到相应的 ISN 子节点。<br>
注册表树中的重定向子节点由 WOW64 组件使用名称 Wow6432Node 自动创建。 因此，必须不命名创建 Wow6432Node 的任何注册表项。<br>

KEY_WOW64_64KEY和KEY_WOW64_32KEY标志分别允许显式访问 64 位注册表视图和 32 位视图。 <br>
<p><font color="#0000FF">注册表函数</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>关闭表项</td><td>RegCloseKey</td><td>关闭表项(表项)</td><td>关闭指定注册表项的句柄。</td></tr>
<tr><td>连接表项</td><td>RegConnectRegistryA</td><td>连接表项(机名,主键,@表项)</td><td>建立与另一台计算机上的预定义注册表项的连接。</td></tr>
<tr><td>创建表项</td><td>RegCreateKeyA</td><td>创建表项(主键,子项,@表项)</td><td>创建指定的注册表项。如果注册表中已存在该项，则该函数将打开它。</td></tr>
<tr><td>创建表密</td><td>RegCreateKeyExA</td><td>创建表密(主键,子项,0,类,选项,权限,属性,@表项,处置)</td><td>创建或打开指定的注册表项。键名称不区分大小写。<a href="#安全属性类">属性</a>;处置:1新建,2只读;<a href="#表密选项">选项</a></td></tr>
<tr><td>删除子项</td><td>RegDeleteKeyA</td><td>删除子项(主键,子项)</td><td>删除注册表子项及其值。子项键名不区分大小写。</td></tr>
<tr><td>删除值名</td><td>RegDeleteValueA</td><td>删除值名(主键,值名)</td><td>从指定的注册表项中删除命名值。值名称不区分大小写。</td></tr>
<tr><td>枚举子项</td><td>RegEnumKeyA</td><td>枚举子项(主键,序号,名称,长度)</td><td>枚举指定的打开的注册表项的子项。(连续查询)</td></tr>
<tr><td>枚举表项</td><td>RegEnumKeyExA</td><td>枚举表项(主键,序号,名称,长度,0,类,数据,时间)</td><td>枚举指定打开的注册表项的子项。 函数在每次调用时检索有关一个子项的信息。</td></tr>
<tr><td>枚举项值</td><td>RegEnumValueA</td><td>枚举项值(主键,序号,名称,长度,0,类,数据,大小)</td><td>枚举指定的打开的注册表项的值。获取指定索引的值名称、数据类型和数据块。</td></tr>
<tr><td>更新表项</td><td>RegFlushKey</td><td>更新表项(主键)</td><td>将指定的打开的注册表项的所有属性写入注册表。</td></tr>
<tr><td>表项信息</td><td>RegGetKeySecurity</td><td>表项信息(安全键,安全信息,@安全描述,@长度)</td><td>检索保护指定打开的注册表项的安全描述符的副本。</td></tr>
<tr><td>加载子项</td><td>RegLoadKeyA</td><td>加载子项(主键,子项,文件名)</td><td>在用户或本机主键下创建一个子项，并将指定注册表配置单元中的数据加载到该子项中。</td></tr>
<tr><td>表键事务</td><td>RegCreateKeyTransactedA</td><td>表键事务(主键,子项,0,类,选项,<br>权限,属性,@表项,处置,事务,0)</td><td>创建或打开指定的注册表项并将其与事务相关联。<a href="#安全属性类">属性</a>;处置:1新建,2只读;<a href="#表密选项">选项</a>:1可变,4忽略权限</td></tr>
<tr><td>表项事务</td><td>RegOpenKeyTransactedA</td><td>表项事务(主键,子项,0,权限,@表项,事务,0)</td><td>打开指定的注册表项并将其与事务相关联。键名称不区分大小写。</td></tr>
<tr><td>表项变动</td><td>RegNotifyChangeKeyValue</td><td>表项变动(主键,项,选项,事件,立即)</td><td>通知调用方对指定注册表项的属性或内容的更改。项为真时包括子项变动,立即为真立即返回,选项=1子项变更 2密钥属性 4密钥值 8密钥描述</td></tr>
<tr><td>打开表项</td><td>RegOpenKeyA</td><td>打开表项(主键,子项,@表项)</td><td>打开指定的注册表项。</td></tr>
<tr><td>打开表密</td><td>RegOpenKeyExA</td><td>打开表密(主键,子项,选项,权限,@表项)</td><td>打开指定的注册表项。名称不区分大小写。选项:2链接</td></tr>
<tr><td>映射表项</td><td>RegOverridePredefKey</td><td>映射表项(主键,表项)</td><td>将预定义的注册表项映射到指定的注册表项。</td></tr>
<tr><td>查询表项</td><td>RegQueryInfoKeyA</td><td>查询表项(主键,@类,@大小,0,@项数,@名长,@子类长,<br>@值数,@键长,@值长,@描述长,@时间)</td><td>检索有关指定注册表项的信息。</td></tr>
<tr><td>查询项值</td><td>RegQueryMultipleValuesA</td><td>查询项值(主键,值表,值数,数据,长度)</td><td>检索与打开的注册表项关联的值名称列表的类型和数据。</td></tr>
<tr><td>查询值名</td><td>RegQueryValueA</td><td>查询值名(主键,子项,数据,长度)</td><td>检索与指定注册表项的默认值或未命名值关联的文本数据。</td></tr>
<tr><td>查询值项</td><td>RegQueryValueExA</td><td>查询值项(主键,子项,0,类型,数据,长度)</td><td>检索与打开的注册表项关联的指定值名称的类型和数据。</td></tr>
<tr><td>替换表项</td><td>RegReplaceKeyA</td><td>替换表项(主键,子项,新名,旧名)</td><td>将支持注册表项及其所有子项的文件替换为另一个文件，下次启动系统时，此项使用新文件中。</td></tr>
<tr><td>读取表项</td><td>RegRestoreKeyA</td><td>读取表项(表项/主键,文件名,选项)</td><td>读取指定文件中的注册表信息，并将其复制到指定的注册表项上。选项1不保存 8还原</td></tr>
<tr><td>保存表项</td><td>RegSaveKeyA</td><td>保存表项(表项/主键,文件名,属性)</td><td>将指定的键及其所有子项和值以标准格式保存到新文件中。<a href="#安全属性类">属性</a></td></tr>
<tr><td>保存表键</td><td>RegSaveKeyExA</td><td>保存表键(表项,文件名,属性,格式)</td><td>将指定的键及其所有子项和值以标准格式保存到新文件中。<a href="#安全属性类">属性</a>;格式:1标准,2最新,4无压缩</td></tr>
<tr><td>改表信息</td><td>RegSetKeySecurity</td><td>改表信息(安全键,安全信息,安全描述)</td><td>用于设置指定项的安全特性。<a href="#安全描述类">安全描述</a></td></tr>
<tr><td>修改子项</td><td>RegSetValueA</td><td>修改子项(表项,子项,类型,数据,长度)</td><td>设置指定注册表项的默认值或未命名值的数据。数据必须是文本字符串。</td></tr>
<tr><td>改子项值</td><td>RegSetValueExA</td><td>改子项值(表项,值名,0,类型,数据,长度)</td><td>设置注册表项下指定值的数据和类型。</td></tr>
<tr><td>卸载子项</td><td>RegUnLoadKeyA</td><td>卸载子项(表项,子项)</td><td>从注册表中卸载指定的注册表项及其子项。</td></tr>
</table><a name="表密选项">表密选项标志</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>值</td><td>作用解释</td></tr>
<tr><td>REG_OPTION_BACKUP_RESTORE</td><td>4</td><td>忽略 权限 参数，并尝试使用备份或还原密钥所需的访问权限打开密钥。</td></tr>
<tr><td>REG_OPTION_CREATE_LINK</td><td>2</td><td>此键是符号链接。 目标路径分配给键的 L“SymbolicLinkValue”值。 目标路径必须是绝对注册表路径。</td></tr>
<tr><td>REG_OPTION_NON_VOLATILE</td><td>0</td><td>此键不是易失的;这是默认值。信息存储在文件中，并在系统重启时保留。</td></tr>
<tr><td>REG_OPTION_VOLATILE</td><td>1</td><td>函数创建的所有键都是可变的。此信息存储在内存中，并且在卸载相应的注册表配置单元时不保留此信息。</td></tr>
</table><a name="安全描述类">安全描述类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>安全描述类</td><td>SECURITY_DESCRIPTOR</td><td>20</td><td>包含与 对象关联的安全信息。 应用程序使用此结构来设置和查询对象的安全状态。</td></tr>
<tr><th colspan=4>安全描述类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>修订</td><td>Revision</td><td>整形</td><td>指定安全描述符的修订级别。</td></tr>
<tr><td>描述</td><td>Control</td><td>整形</td><td>安全描述符的控制信息。</td></tr>
<tr><td>权人</td><td>Owner</td><td>整数</td><td>指向所有者安全标识符的指针。</td></tr>
<tr><td>主组</td><td>Group</td><td>整数</td><td>指向主组安全标识符的指针。</td></tr>
<tr><td>系统</td><td>Sacl</td><td>整数</td><td>指向系统访问控制列表的指针 (SACL) 。</td></tr>
<tr><td>任意</td><td>Dacl</td><td>整数</td><td>指向任意访问控制列表的指针 (DACL) 。</td></tr>
</table><a name="安全属性类">安全属性类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>安全属性类</td><td>SECURITY_ATTRIBUTES</td><td>12</td><td>包含对象的安全描述符，并指定通过指定此结构检索的句柄是否可继承。</td></tr>
<tr><th colspan=4>安全属性类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>nLength</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>描述</td><td>lpSecurityDescriptor</td><td>整数</td><td>指向控制对对象的访问的<a href="#安全描述类">安全描述类</a>结构的指针。</td></tr>
<tr><td>继承</td><td>bInheritHandle</td><td>整数</td><td>一个布尔值，该值指定在创建新进程时是否继承返回的句柄。如果此成员为 TRUE，则新进程将继承句柄。</td></tr>
</table><p><font color="#0000FF" size=6><a name="服务管理">服务管理</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>关闭服务</td><td>CloseServiceHandle</td><td>关闭服务(服务)</td><td>关闭服务控制管理器或服务对象的句柄。</td></tr>
<tr><td>控制服务</td><td>ControlService</td><td>控制服务(服务,控制,@状态)</td><td>将控制代码发送到服务。</td></tr>
<tr><td>服务控制</td><td>ControlServiceExA</td><td>服务控制(服务,控制,级别,@参数)</td><td>将控制代码发送到服务。</td></tr>
<tr><td>关闭服务</td><td>DeleteService</td><td>删除服务(服务)</td><td>将指定的服务标记为从服务控制管理器数据库中删除。</td></tr>
<tr><td>注册服务</td><td>RegisterServiceCtrlHandlerA</td><td>注册服务(服务名,@处理函数)</td><td>注册用于处理服务控制请求的函数。</td></tr>
<tr><td>开服务库</td><td>OpenSCManagerA</td><td>开服务库(计算机,0,权限)</td><td>打开指定的服务控制管理器数据库。</td></tr>
<tr><td>打开服务</td><td>OpenServiceA</td><td>打开服务(服务库,服务名,权限)</td><td>打开现有服务。</td></tr>
<tr><td>改服务类</td><td>SetServiceBits</td><td>改服务类(服务,类型,设置,更新)</td><td>向服务控制管理器和服务器服务注册服务类型。设置为假是清除;更新为真立即更新</td></tr>
<tr><td>服务对象</td><td>SetServiceObjectSecurity</td><td>服务对象(服务,信息,描述)</td><td>设置服务对象的安全描述符。</td></tr>
<tr><td>服务状态</td><td>SetServiceStatus</td><td>服务状态(服务,状态)</td><td>更新调用服务的服务控制管理器的状态信息。</td></tr>
<tr><td>启动服务</td><td>StartServiceA</td><td>启动服务(服务,长度,名称)</td><td>启动服务</td></tr>
<tr><td>开主服务</td><td>StartServiceCtrlDispatcherA</td><td>开主服务(服务,长度,名称)</td><td>将服务进程的main线程连接到服务控制管理器，这会使线程成为调用进程的服务控制调度程序线程。</td></tr>
</table>
<font color="#0000FF">Win32常用哈希算法对应数值</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>标识符</td><td>数值</td><td>描述</td></tr>
<tr><td>CALG_3DES</td><td>$6603</td><td>三重 DES 加密算法。</td></tr>
<tr><td>CALG_3DES_112</td><td>$6609</td><td>双密钥三重 DES 加密，有效密钥长度等于 112 位。</td></tr>
<tr><td>CALG_AES</td><td>$6611</td><td>高级加密标准 （AES）。此算法受微软AES 加密提供程序支持。</td></tr>
<tr><td>CALG_AES_128</td><td>$660E</td><td>128 位 AES。此算法受微软AES 加密提供程序支持。</td></tr>
<tr><td>CALG_AES_192</td><td>$660F</td><td>192 位 AES。此算法受微软AES 加密提供程序支持。</td></tr>
<tr><td>CALG_AES_256</td><td>$6610</td><td>256 位 AES。此算法受微软AES 加密提供程序支持。</td></tr>
<tr><td>CALG_AGREEDKEY_ANY</td><td>$AA03</td><td>Diffie-HellmAn-Agreed keys的句柄的临时算法标识符。</td></tr>
<tr><td>CALG_CYLINK_MEK</td><td>$660C</td><td>一种算法，用于创建具有奇偶校验位和归零密钥位的 40 位 DES 密钥，以使其密钥长度为 64 位。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_DES</td><td>$6601</td><td>DES 加密算法。</td></tr>
<tr><td>CALG_DESX</td><td>$6604</td><td>DESX 加密算法。</td></tr>
<tr><td>CALG_DH_EPHEM</td><td>$AA02</td><td>Diffie-HellmAn 瞬时密钥交换算法。</td></tr>
<tr><td>CALG_DH_SF</td><td>$AA01</td><td>Diffie-HellmAn存储和转发密钥交换算法。</td></tr>
<tr><td>CALG_DSS_SIGN</td><td>$2200</td><td>DSA 公钥签名算法。</td></tr>
<tr><td>CALG_ECDH</td><td>$AA05</td><td>椭圆曲线 Diffie-HellmAn 密钥交换算法。WinXP和2003不支持。</td></tr>
<tr><td>CALG_ECDH_EPHEM</td><td>$AE06</td><td>临时椭圆曲线Diffie-HellmAn密钥交换算法。WinXP和2003不支持</td></tr>
<tr><td>CALG_ECDSA</td><td>$2203</td><td>椭圆曲线数字签名算法。WinXP和2003不支持</td></tr>
<tr><td>CALG_ECMQV</td><td>$A001</td><td>椭圆曲线美内塞斯、Qu 和 VAnstone （MQV） 密钥交换算法。不支持此算法。</td></tr>
<tr><td>CALG_HASH_REPLACE_OWF</td><td>$800B</td><td>单向函数哈希算法。</td></tr>
<tr><td>CALG_HUGHES_MD5</td><td>$A003</td><td>休斯 MD5 哈希算法。</td></tr>
<tr><td>CALG_HMAC</td><td>$8009</td><td>HMAC 键控哈希算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_KEA_KEYX</td><td>$AA04</td><td>KEA密钥交换算法（FORTEZZA）。不支持此算法。</td></tr>
<tr><td>CALG_MAC</td><td>$8005</td><td>MAC 键控哈希算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_MD2</td><td>$8001</td><td>MD2 哈希算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_MD4</td><td>$8002</td><td>MD4 哈希算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_MD5</td><td>$8003</td><td>MD5 哈希算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_NO_SIGN</td><td>$2000</td><td>无签名算法。</td></tr>
<tr><td>CALG_OID_INFO_CNG_ONLY</td><td>$ffffffff</td><td>该算法仅在 CNG 中实现。</td></tr>
<tr><td>CALG_OID_INFO_PARAMETERS</td><td>$fffffffe</td><td>该算法在编码参数中定义。</td></tr>
<tr><td>CALG_PCT1_MASTER</td><td>$4C04</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_RC2</td><td>$6602</td><td>RC2 块加密算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_RC4</td><td>$6801</td><td>RC4 流加密算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_RC5</td><td>$660D</td><td>RC5 块加密算法。</td></tr>
<tr><td>CALG_RSA_KEYX</td><td>$A400</td><td>RSA 公钥交换算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_RSA_SIGN</td><td>$2400</td><td>RSA 公钥签名算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_SCHANNEL_ENC_KEY</td><td>$4C07</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_SCHANNEL_MAC_KEY</td><td>$4C03</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_SCHANNEL_MASTER_HASH</td><td>$4C02</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_SEAL</td><td>$6802</td><td>SEAL 加密算法。不支持此算法。</td></tr>
<tr><td>CALG_SHA</td><td>$8004</td><td>SHA 哈希算法。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_SHA1</td><td>$8004</td><td>与CALG_SHA相同。此算法受微软基本加密提供程序支持。</td></tr>
<tr><td>CALG_SHA_256</td><td>$800C</td><td>256 位 SHA 哈希算法。MiCrosoft EnhAnCed RSA 和 AES 加密提供程序支持此算法。</td></tr>
<tr><td>CALG_SHA_384</td><td>$800D</td><td>384 位 SHA 哈希算法。MiCrosoft EnhAnCed RSA 和 AES 加密提供程序支持此算法。</td></tr>
<tr><td>CALG_SHA_512</td><td>$800E</td><td>512 位 SHA 哈希算法。MiCrosoft EnhAnCed RSA 和 AES 加密提供程序支持此算法。</td></tr>
<tr><td>CALG_SKIPJACK</td><td>$660A</td><td>SkipjACk BloCk enCryption Algorithm （FORTEZZA）.不支持此算法。</td></tr>
<tr><td>CALG_SSL2_MASTER</td><td>$4C05</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_SSL3_MASTER</td><td>$4C01</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_SSL3_SHAMD5</td><td>$8008</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_TEK</td><td>$660B</td><td>TEK （FORTEZZA）.不支持此算法。</td></tr>
<tr><td>CALG_TLS1_MASTER</td><td>$4C06</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
<tr><td>CALG_TLS1PRF</td><td>$800A</td><td>由 SChAnnel.dll 操作系统使用。应用程序不应使用此ALG_ID。</td></tr>
 </table>
<p><font color="#0000FF" size=6><a name="界面拖曳">Win32常用函数-shell32库</a></font></p>
判断(消息)<font color="#0000FF">为 拖放文件 拖曳文件(参数)</font>//在窗体消息里增加拖放文件消息到来时的处理<br>
<font color="#0000FF">
<pre>程序段 拖曳文件(拖曳)
	整数 序号=0,数量=查询拖曳(拖曳,-1,0,0)
	文本 名称[32]
	循环(序号<数量){
	查询拖曳(拖曳,序号,名称,32)
	发送消息(列表,列表添加,0,名称)
	序号++}释放拖曳(拖曳)
结束</pre></font><br>
窗体消息收到拖放文件的消息时,第三参数是拖曳的对象指针<br>
查询拖曳时序号写-1,查询总共拖放进来的文件数量<br>
然后让序号递增循环查询拖曳对象里的文件名称<br>
把查询到的文件名显示到列表框,循环完成后释放拖曳对象<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>接受拖曳</td><td>DragAcceptFiles</td><td>接受拖曳(窗口,真)</td><td>登记窗口是否接受拖曳的文件</td></tr>
<tr><td>释放拖曳</td><td>DragFinish</td><td>释放拖曳(拖曳)</td><td>释放系统分配用于将文件名传输到应用程序的内存</td></tr>
<tr><td>查询拖曳</td><td>DragQueryFileA</td><td>查询拖曳(拖曳,序号,名称,大小)</td><td>检索由成功的拖放操作生成的文件名称</td></tr>
<tr><td>拖曳位置</td><td>DragQueryPoint</td><td>拖曳位置(拖曳,坐标)</td><td>检索在拖放操作时鼠标指针的位置</td></tr>
</table><br>
<p><font size="6"><a name="托盘图标">托盘图标</a>、菜单和提示信息</font></p>
先申请一个全局的托盘类变量：托盘，定义一个托盘消息的常量<br>
<font color="#0000FF">常量 托盘消息=$3FF;</font><br>
托盘类 托盘(长度=488,标识=7,回调=$3FF,超时=12000,信息图标=4,提示="测试程序",标题="提示",信息="鼠标右键右下角图标可以弹出菜单！");<br>
标识=1回调+2图标+4提示;回调消息的值要跟定义的托盘消息数值相同,定义此值会向指定的窗口发送托盘消息<br>
判断(消息)<font color="#0000FF">为 托盘消息 托盘点击(数据)</font>//在窗体消息里增加托盘消息到来时的处理<br>
<font color="#0000FF">程序段 窗体启动</font>//在窗体启动的时候添加托盘图标<br>
<font color="#0000FF">托盘图标(托盘添加,托盘)</font>//添加托盘图标,托盘是在全局变量定义的结构体数据<br><br>
<font color="#0000FF">程序段 按钮1_点击</font>//在按钮事件里更新托盘<br>
<font color="#0000FF">托盘.标识=$17</font>;//托盘标识增加了$10气泡信息<br>
<font color="#0000FF">托盘图标(托盘更新,托盘)</font>//更新托盘会在窗口右下角弹出托盘消息<br>

<font color="#0000FF"><pre>程序段 托盘点击(动作)
	判断(动作)
	为 释放左键 显隐窗口(窗体, 窗口显示)
	为 释放右键 显隐窗口(窗体, 窗口隐藏)
结束</pre></font><br>
窗体消息的第四个参数:数据,可以判断鼠标点击的点击的动作<br>
根据鼠标动作执行相应的程序代码<br>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>函数名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>托盘图标</td><td>Shell_NotifyIconA</td><td>托盘图标(方式,托盘类)</td><td>控制任务栏右下角图标,<a href="#托盘方式">方式</a>:0添加，1更新，2删除;<a href="#托盘类">托盘类</a></td></tr>
<tr><td>图标边框</td><td>Shell_NotifyIconGetRect</td><td>托盘图标(边框,矩形类)</td><td>获取通知图标的<a href="#图标边界类">边框</a>的屏幕坐标。</td></tr>
</table><a name="托盘方式">托盘图标方式</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>托盘添加</td><td>0</td><td>NIM_ADD</td><td>将图标添加到状态区域。</td></tr>
<tr><td>托盘更新</td><td>1</td><td>NIM_MODIFY</td><td>修改状态区域中的图标。</td></tr>
<tr><td>托盘删除</td><td>2</td><td>NIM_DELETE</td><td>从状态区域中删除图标。</td></tr>
<tr><td>托盘焦点</td><td>3</td><td>NIM_SETFOCUS</td><td>将焦点返回到任务栏通知区域。</td></tr>
<tr><td>托盘版本</td><td>4</td><td>NIM_SETVERSION</td><td>指示通知区域按照指定的版本号的行为</td></tr>
</table><a name="图标边界类">图标边界类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>图标边界类</td><td>NOTIFYICONIDENTIFIER</td><td>28</td><td>用于标识要检索边界矩形的图标的信息。</td></tr>
<tr><th colspan=4>图标边界类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>通知的回调函数使用的父窗口的句柄。</td></tr>
<tr><td>标号</td><td>uID</td><td>整数</td><td>通知图标的应用程序定义的标识符。</td></tr>
<tr><td>类号</td><td>guidItem[16]</td><td>文本</td><td>标识图标的已注册 GUID。 如果图标未通过 GUID 标识，请使用 GUID_NULL 。</td></tr>
</table><a name="托盘类">托盘类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>托盘类</td><td>NOTIFYICONDATA</td><td>英文88</td><td>用来向任务栏托盘区域添加图标和发送消息</td></tr>
<tr><th colspan=4>托盘类 成员 中文(5.0)488字节，英文不包含5.0版本的成员，只有88字节</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>指向所在窗口的句柄。</td></tr>
<tr><td>标号</td><td>uID</td><td>整数</td><td>程序定义的任务栏图标编号</td></tr>
<tr><td>标识</td><td>uFlags</td><td>整数</td><td>表明哪些成员有效:1回调;2图标;4提示;8状态;$10气泡信息</td></tr>
<tr><td>回调</td><td>uCallbackMessage</td><td>整数</td><td>程序定义的消息常量。托盘图标发生鼠标等事件时，向指定窗口发送此消息。</td></tr>
<tr><td>图标</td><td>hIcon</td><td>整数</td><td>指向托盘图标的句柄。</td></tr>
<tr><td>提示</td><td>szTip</td><td>文本</td><td>鼠标指向托盘图标时的提示信息，英文64个字符，中文128字节</td></tr>
<tr><td>状态</td><td>dwState(5.0)</td><td>整数</td><td>图标的状态，可选值：1隐藏,2共享</td></tr>
<tr><td>状态值</td><td>dwStateMask(5.0)</td><td>整数</td><td>指明dwState状态在哪种状态下可以访问。</td></tr>
<tr><td>信息</td><td>szInfo(5.0)</td><td>文本</td><td>气球提示信息的内容。最长256字节</td></tr>
<tr><td>超时</td><td>uTimeout(5.0)</td><td>整数</td><td>单位为毫秒，到时间后气球提示将消失。最小值为10秒，最大值为30秒</td></tr>
<tr><td>标题</td><td>szInfoTitle(5.0)</td><td>文本</td><td>气球提示的标题，小于64个字符</td></tr>
<tr><td>信息图标</td><td>dwInfoFlags(5.0)</td><td>整数</td><td>1信息图标、2警告图标、3错误图标、4用户自定图标</td></tr>
</table><br>
<p><font size="6"><a name="图标提取">图标提取</a></font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>函数名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>副本图标</td><td>DuplicateIcon</td><td>图标=副本图标(实例,图标)</td><td>创建指定图标的副本。</td></tr>
<tr><td>关联图标</td><td>ExtractAssociatedIconA</td><td>关联图标(实例,路径,索引)</td><td>获取作为资源存储在文件中的图标或存储在文件关联的可执行文件中的图标的句柄。</td></tr>
<tr><td>相关图标</td><td>ExtractAssociatedIconExA</td><td>相关图标(实例,路径,索引,编号)</td><td>获取作为资源存储在文件中的图标或存储在文件关联的可执行文件中的图标的句柄。</td></tr>
<tr><td>文件图标</td><td>ExtractIconA</td><td>文件图标(实例,路径,索引)</td><td>获取指定可执行文件、DLL 或图标文件中图标的句柄。索引从0开始,如果是-1获取图标数</td></tr>
<tr><td>提取图标</td><td>ExtractIconEx</td><td>提取图标(路径,索引,大图组,小图组,数量)</td><td>从指定的可执行文件、DLL 或图标文件中提取的大图标或小图标创建一个句柄数组。<br>索引从0开始,如果是-1获取图标数</td></tr>
</table><br>
<p><font size="6"><a name="应用消息">应用栏消息</a>、关于消息框和运行程序</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>函数名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>关于程序</td><td>ShellAboutA</td><td>关于程序(窗口,标题,信息,图标)</td><td>显示“命令行管理程序关于”对话框。</td></tr>
<tr><td>运行程序</td><td>ShellExecuteA</td><td>运行程序(窗口,操作,文件名,参数,目录,显示)</td><td>对指定文件执行操作</td></tr>
<tr><td>执行文件</td><td>ShellExecuteExA</td><td>执行文件(执行类)</td><td>对指定文件执行操作<a href="#执行类">执行类</a></td></tr>
<tr><td>应用消息</td><td>SHAppBarMessage</td><td>应用消息(消息,应用栏类)</td><td>向系统发送<a href="#应用栏消息">应用栏消息</a>。<a href="#应用栏类">应用栏类</a></td></tr>
</table><a name="执行类">执行类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>执行类</td><td>SHELLEXECUTEINFO</td><td>60</td><td>用来运行一个外部程序或者打开文件、目录、网址以及打印文件。</td></tr>
<tr><th colspan=4>执行类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>长度</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>标志</td><td>fMask</td><td>整数</td><td>用来设置其他成员的有效性</td></tr>
<tr><td>窗口</td><td>hwnd</td><td>整数</td><td>指向本程序窗口的句柄。</td></tr>
<tr><td>动作</td><td>lpVerb</td><td>整数</td><td>设定执行的动作。"edit"编辑文档，"explore"打开资源管理器，"find"指定目录搜索<br>"open"打开对应文件，"print"打印文档，"properties"显示文件或文件夹的属性</td></tr>
<tr><td>路径</td><td>lpFile</td><td>整数</td><td>指向操作对象路径的文本</td></tr>
<tr><td>参数</td><td>lpParameters</td><td>整数</td><td>运行/打开程序的参数</td></tr>
<tr><td>目录</td><td>lpDirectory</td><td>整数</td><td>指定工作目录，默认为当前目录</td></tr>
<tr><td>显示</td><td>nShow</td><td>整数</td><td>运行程序显示的模式</td></tr>
<tr><td>回执</td><td>hInstApp</td><td>整数</td><td>如果运行成功，该项的值将大于32，否则是对应的错误值</td></tr>
<tr><td>标识</td><td>lpIDList</td><td>整数</td><td>一个itemidlist结构的地址，用来存储成员的特别标识符</td></tr>
<tr><td>类别</td><td>lpClass</td><td>整数</td><td>用以指明文件类别的名字或GUID，fMask包括see_mask_classname</td></tr>
<tr><td>注册</td><td>hkeyClass</td><td>整数</td><td>获得已注册的文件类型的句柄，fMask包括see_mask_classkey</td></tr>
<tr><td>热键</td><td>dwHotKey</td><td>整数</td><td>程序的热键关联，参照wm_sethotkey消息的描述，fmask包括see_mask_hotkey<</td></tr>
<tr><td>图标</td><td>hIcon_OR_Monitor</td><td>整数</td><td>取得对应文件类型图标和文档显示的句柄，当fMask不含SEE_MASK_ICON时图标无效，不含SEE_MASK_HMONITOR时文档无效</td></tr>
<tr><td>句柄</td><td>hProcess</td><td>整数</td><td>fMask设为see_mask_nocloseprocess且程序运行成功，可返回目标程序的句俩</td></tr>
</table><a name="应用栏消息">应用栏消息常量</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>值</td><td>作用解释</td></tr>
<tr><td>ABM_NEW</td><td>0</td><td>注册新的应用栏，并指定系统应用来向应用栏发送通知消息的消息标识符。</td></tr>
<tr><td>ABM_REMOVE</td><td>1</td><td>取消注册应用栏，从系统的内部列表中删除该应用栏。</td></tr>
<tr><td>ABM_QUERYPOS</td><td>2</td><td>请求应用栏的大小和屏幕位置。</td></tr>
<tr><td>ABM_SETPOS</td><td>3</td><td>设置应用栏的大小和屏幕位置。</td></tr>
<tr><td>ABM_GETSTATE</td><td>4</td><td>检索 Windows 任务栏的自动隐藏状态和始终处于顶部状态。</td></tr>
<tr><td>ABM_GETTASKBARPOS</td><td>5</td><td>检索 Windows 任务栏的边框。 请注意，这仅适用于系统任务栏。 其他对象（特别是第三方软件提供的工具栏）也可以存在。</td></tr>
<tr><td>ABM_ACTIVATE</td><td>6</td><td>通知系统激活或停用应用栏。 应用栏类 的 附加 成员设置为 TRUE 以激活或设置为 FALSE 以停用。</td></tr>
<tr><td>ABM_GETAUTOHIDEBAR</td><td>7</td><td>检索与屏幕的特定边缘关联的自动隐藏应用栏的句柄。</td></tr>
<tr><td>ABM_SETAUTOHIDEBAR</td><td>8</td><td>注册或注销屏幕边缘的自动隐藏应用栏。</td></tr>
<tr><td>ABM_WINDOWPOSCHANGED</td><td>9</td><td>当应用栏的位置发生更改时通知系统。</td></tr>
<tr><td>ABM_SETSTATE</td><td>10</td><td>Windows XP 及更高版本： 设置应用栏的自动隐藏和始终位于顶部的属性的状态。</td></tr>
<tr><td>ABM_GETAUTOHIDEBAREX</td><td>11</td><td>Windows XP 及更高版本： 检索与特定监视器的特定边缘关联的自动隐藏应用栏的句柄。</td></tr>
<tr><td>ABM_SETAUTOHIDEBAREX</td><td>12</td><td>Windows XP 及更高版本： 注册或取消注册特定监视器边缘的自动隐藏应用栏。</td></tr>
</table><a name="应用栏类">应用栏类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>应用栏类</td><td>APPBARDATA</td><td>36</td><td>包含有关系统应用栏消息的信息。</td></tr>
<tr><th colspan=4>应用栏类 成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>指定这个结构的大小，以字节为单位。</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>应用栏窗口的句柄。</td></tr>
<tr><td>消息</td><td>uCallbackMessage</td><td>整数</td><td>应用程序定义的消息标识符。发送 ABM_NEW 消息时使用此成员。</td></tr>
<tr><td>边缘</td><td>uEdge</td><td>整数</td><td>指定屏幕的边缘。0左边;1上边;2右边;3下边</td></tr>
<tr><td>左边</td><td>rc.left</td><td>整数</td><td>指定坐标矩形左上角的 x 坐标。</td></tr>
<tr><td>上边</td><td>rc.top</td><td>整数</td><td>指定坐标矩形左上角的 y 坐标。</td></tr>
<tr><td>右边</td><td>rc.right</td><td>整数</td><td>指定坐标矩形右下角的 x 坐标。</td></tr>
<tr><td>下边</td><td>rc.bottom</td><td>整数</td><td>指定坐标矩形右下角的 y 坐标。</td></tr>
<tr><td>附加</td><td>lParam</td><td>整数</td><td>依赖于消息的值。</td></tr>
</table><br>
<p><font size="6"><a name="磁盘路径">磁盘路径</a>、目录路径转换</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>函数名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>目录选框</td><td>SHBrowseForFolderA</td><td>目录选框(目录框类)</td><td>显示一个对话框，使用户能够选择文件夹。</td></tr>
<tr><td>特定位置</td><td>SHGetSpecialFolderLocation</td><td>特定位置(0,标识,@项目)</td><td>检索指向特殊文件夹的指针。</td></tr>
<tr><td>特定路径</td><td>SHGetSpecialFolderPathA</td><td>特定路径(0,路径,特定,创建)</td><td>检索由其<a href="#特定目录">特定标识</a>的文件夹的路径。创建非零自动创建文件夹</td></tr>
<tr><td>转换数据</td><td>SHGetDataFromIDListA</td><td>转换数据(接口,标识,格式,缓冲,大小)</td><td>从相对标识符列表中检索扩展属性数据。格式:1系统文件;2网络资源;3描述结构体;</td></tr>
<tr><td>转换路径</td><td>SHGetPathFromIDListA</td><td>转换路径(项目,路径)</td><td>将项目标识符列表转换为文件系统路径。</td></tr>
<tr><td>磁盘信息</td><td>SHGetDiskFreeSpaceExA</td><td>磁盘信息(卷,@可用,@总数,@剩余)</td><td>检索磁盘卷的磁盘空间信息。</td></tr>
<tr><td>驱动类型</td><td>SHGetDriveMedia</td><td>驱动类型(驱动器,@类型)</td><td>返回给定驱动器中的媒体类型。</td></tr>
<tr><td>文件信息</td><td>SHGetFileInfoA</td><td>文件信息(路径,属性,结构,大小,标志)</td><td>检索文件或目录的信息</td></tr>
</table><p><font size="6"><a name="特定目录">系统特定目录</a>——常量数值</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>常量</td><td>英文名称</td><td>释义</td></tr>
<tr><td>桌面目录</td><td>0</td><td>CSIDL_DESKTOP</td><td>表示Windows桌面的虚拟文件夹，命名空间的根目录。</td></tr>
<tr><td>上网目录</td><td>1</td><td>CSIDL_INTERNET</td><td>Internet Explorer 的虚拟文件夹。</td></tr>
<tr><td>程序目录</td><td>2</td><td>CSIDL_PROGRAMS</td><td>包含用户程序组的文件系统目录</td></tr>
<tr><td>控制面板</td><td>3</td><td>CSIDL_CONTROLS</td><td>包含控制面板应用程序的图标的虚拟文件夹。</td></tr>
<tr><td>打印目录</td><td>4</td><td>CSIDL_PRINTERS</td><td>包含已安装打印机的虚拟文件夹。</td></tr>
<tr><td>文档目录</td><td>5</td><td>CSIDL_PERSONAL</td><td>表示“我的文档”桌面项的虚拟文件夹。</td></tr>
<tr><td>收藏目录</td><td>6</td><td>CSIDL_FAVORITES</td><td>用作用户收藏项的公共存储库的文件系统目录。</td></tr>
<tr><td>启动目录</td><td>7</td><td>CSIDL_STARTUP</td><td>对应于用户的启动程序组的文件系统目录。</td></tr>
<tr><td>最近记录</td><td>8</td><td>CSIDL_RECENT</td><td>包含用户最近使用的文档的快捷方式的文件系统目录。</td></tr>
<tr><td>发送目录</td><td>9</td><td>CSIDL_SENDTO</td><td>包含“ 发送到” 菜单项的文件系统目录。</td></tr>
<tr><td>回收目录</td><td>10</td><td>CSIDL_BITBUCKET</td><td>包含用户 回收站中的对象的虚拟文件夹。</td></tr>
<tr><td>开始菜单</td><td>11</td><td>CSIDL_STARTMENU</td><td>包含 “开始” 菜单项的文件系统目录。</td></tr>
<tr><td>用户桌面</td><td>16</td><td>CSIDL_DESKTOPDIRECTORY</td><td>用于在桌面上物理存储文件对象的文件系统目录 (不要与桌面文件夹本身混淆) 。</td></tr>
<tr><td>我的电脑</td><td>17</td><td>CSIDL_DRIVES</td><td>表示“我的电脑”的虚拟文件夹，其中包含本地计算机上的所有内容</td></tr>
<tr><td>网络目录</td><td>18</td><td>CSIDL_NETWORK</td><td>表示网络邻里（网络命名空间层次结构的根）的虚拟文件夹。</td></tr>
<tr><td>网上邻居</td><td>19</td><td>CSIDL_NETHOOD</td><td>包含“网上邻居”虚拟文件夹中可能存在的链接对象。</td></tr>
<tr><td>字体目录</td><td>20</td><td>CSIDL_FONTS</td><td>包含字体的虚拟文件夹。典型路径为 C:\Windows\Fonts。</td></tr>
<tr><td>模板目录</td><td>21</td><td>CSIDL_TEMPLATES</td><td>用作文档模板通用存储库的文件系统目录。</td></tr>
<tr><td>公用菜单</td><td>22</td><td>CSIDL_COMMON_STARTMENU</td><td>包含所有用户的“开始”菜单上都出现的程序和文件夹。</td></tr>
<tr><td>公用程序</td><td>23</td><td>CSIDL_COMMON_PROGRAMS</td><td>包含所有用户在 “开始” 菜单上显示的常见程序组的目录。</td></tr>
<tr><td>公用开始</td><td>24</td><td>CSIDL_COMMON_STARTUP</td><td>包含在所有用户的“开始”文件夹中都出现的程序的文件系统目录。</td></tr>
<tr><td>公用桌面</td><td>25</td><td>CSIDL_COMMON_DESKTOPDIRECTORY</td><td>包含在所有用户桌面上出现的文件和文件夹的文件系统目录。</td></tr>
<tr><td>应用数据</td><td>26</td><td>CSIDL_APPDATA</td><td>用作应用程序特定数据的通用存储库的文件系统目录。 </td></tr>
<tr><td>用户打印</td><td>27</td><td>CSIDL_PRINTHOOD</td><td>文件系统目录，包含“打印机”虚拟文件夹中可能存在的链接对象。</td></tr>
<tr><td>虚程序组</td><td>29</td><td>CSIDL_ALTSTARTUP</td><td>对应于用户的非本地化启动程序组的文件系统目录。(已弃用)</td></tr>
<tr><td>公程序组</td><td>30</td><td>CSIDL_COMMON_ALTSTARTUP</td><td>与所有用户的非本地化启动程序组对应的文件系统目录。(已弃用)</td></tr>
<tr><td>公用收藏</td><td>31</td><td>CSIDL_COMMON_FAVORITES</td><td>文件系统目录，用作所有用户通用的收藏夹项目的通用存储库。</td></tr>
<tr><td>网络缓存</td><td>32</td><td>CSIDL_INTERNET_CACHE</td><td>用作临时 Internet 文件的通用存储库的文件系统目录。</td></tr>
<tr><td>信息缓存</td><td>33</td><td>CSIDL_COOKIES</td><td>用作 Internet Cookie 通用存储库的文件系统目录。</td></tr>
<tr><td>历史记录</td><td>34</td><td>CSIDL_HISTORY</td><td>用作Internet历史记录项的公共存储库的文件系统目录。</td></tr>
</table><br>
<p><font size="6"><a name="系统环境">系统环境</a>、桌面内存托管实例</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>函数名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>命令参数</td><td>CommandLineToArgvW</td><td>命令参数(命令,@数量)</td><td>分析宽字命令行字符串，并返回参数的数组以及参数的数量</td></tr>
<tr><td>环境变量</td><td>DoEnvironmentSubstA</td><td>环境变量(内容,长度)</td><td>分析包含对一个或多个环境变量的字符串，并将其替换为其完全扩展的值。</td></tr>
<tr><td>初始网址</td><td>InitNetworkAddressControl</td><td>初始网址</td><td>控制任务栏右下角图标,方式0是添加，1是更新，2是删除</td></tr>
<tr><td>查找程序</td><td>FindExecutableA</td><td>实例=查找程序(名称,目录,路径)</td><td>检索与特定文档文件关联的可执行文件的名称和实例句柄。目录可选</td></tr>
<tr><td>项目跟踪</td><td>SHAddToRecentDocs</td><td>项目跟踪(消息,数据)</td><td>通知系统已访问某个项目，以便跟踪最近和最频繁使用的那些项目。数据为0清除所有使用情况。</td></tr>
<tr><td>更新通知</td><td>SHChangeNotify</td><td>更新通知(事件,选项,值1,值2)</td><td>通知系统应用程序已执行的事件。</td></tr>
<tr><td>清回收站</td><td>SHEmptyRecycleBinA</td><td>清回收站(窗口,路径,选项)</td><td>清空指定驱动器上的回收站。选项:1不显确认 2不显进度 4不放声音</td></tr>
<tr><td>格式化框</td><td>SHFormatDrive</td><td>格式化框(窗口,盘号,$FFFF,选项)</td><td>打开命令行管理程序的“格式”对话框。盘号0=A: 2=C: 选项1=快格 2启动盘</td></tr>
<tr><td>文件操作</td><td>SHFileOperationA</td><td>文件操作(SHFILEOPSTRUCTA)</td><td>复制、移动、重命名或删除文件系统对象。</td></tr>
<tr><td>释放映射</td><td>SHFreeNameMappings</td><td>释放映射(对象)</td><td>释放由 文件操作 函数检索的文件名映射对象。</td></tr>
<tr><td>桌面接口</td><td>SHGetDesktopFolder</td><td>桌面接口(接口)</td><td>检索桌面文件夹的IShellFolder接口，该文件夹是Shell命名空间的根。</td></tr>
<tr><td>托管实例</td><td>SHGetInstanceExplorer</td><td>托管实例(接口)</td><td>检索允许托管Shell扩展和其他组件防止其主机进程过早关闭的IUnknown接口。 </td></tr>
<tr><td>内存实例</td><td>SHGetMalloc</td><td>内存实例(接口)</td><td>检索指向 Shell 的 IMalloc 接口的指针。</td></tr>
<tr><td>快捷名称</td><td>SHGetNewLinkInfoA</td><td>快捷名称(目标,目录,名称,@复制,选项)</td><td>为新快捷方式创建一个名称。复制非零目标指定复制快捷方式;选项:1目标是PIDL;2不检查目录检查;4前面加"快捷方式";8不加.lnk;</td></tr>
<tr><td>框架选项</td><td>SHGetSettings</td><td>框架选项(设置,选项)</td><td>检索当前的Shell框架界面的选项设置。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文件信息类</td><td>SHFILEINFOA</td><td>352</td><td>用来获取文件名称和时间等属性。</td></tr>
<tr><th colspan=4>文件信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>图标</td><td>hIcon</td><td>整数</td><td>表示文件的图标的句柄。</td></tr>
<tr><td>索引</td><td>iIcon</td><td>整数</td><td>系统映像列表中的图标图像的索引。</td></tr>
<tr><td>属性</td><td>dwAttributes</td><td>整数</td><td>一个值数组，指示文件对象的属性。</td></tr>
<tr><td>名称</td><td>szDisplayName</td><td>文本</td><td>260字节长度的文件名称</td></tr>
<tr><td>备用名</td><td>szTypeName</td><td>文本</td><td>80字节长度的备用文件名</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>回收站类</td><td>SHQUERYRBINFO</td><td>12</td><td>用来获取文件名称和时间等属性。</td></tr>
<tr><th colspan=4>回收站类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>结构大小（以字节为单位）。</td></tr>
<tr><td>长度</td><td>i64Size</td><td>整数</td><td>指定回收站中所有对象的总大小（以字节为单位）。</td></tr>
<tr><td>数量</td><td>i64NumItems</td><td>整数</td><td>指定回收站中的项目总数。</td></tr>
</table><br>
<p><font size="6"><a name="文字查找">文字查找</a>、字符比较</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>函数名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>查找字符</td><td>StrChrA</td><td>查找字符(文字1,33)</td><td>查找字符编码在文字1中出现的内存位置</td></tr>
<tr><td>查找字母</td><td>StrChrIA</td><td>查找字母(文字1,\a)</td><td>查找字符编码在文字1中出现的内存位置,不区分大小写</td></tr>
<tr><td>开头比较</td><td>StrCmpNA</td><td>开头比较(文字1,文字2,n)</td><td>文字1和文字2的前面n个字符进行比较,相等返回0</td></tr>
<tr><td>开头字串</td><td>StrCmpNIA</td><td>开头字母(文字1,文字2,n)</td><td>文字1和文字2的前面n个字符进行比较,不区分大小写</td></tr>
<tr><td>倒查单字</td><td>StrRChrIA</td><td>倒查单字(文字1,截止,32)</td><td>从右边查找字符码在文字1中出现的内存位置,截止地址可以为0</td></tr>
<tr><td>倒查字母</td><td>StrRChrIA</td><td>倒查字母(文字1,截止,\a)</td><td>从右边查找字符码在文字1中出现的内存位置,不区分大小写</td></tr>
<tr><td>倒查文字</td><td>StrRStrIA</td><td>倒查文字(文字1,截止,文字2)</td><td>从右边查找,文字2在文字1中出现的内存位置,截止地址可以为0</td></tr>
<tr><td>倒查字串</td><td>StrRStrIA</td><td>倒查字串(文字1,截止,文字2)</td><td>从右边查找,文字2在文字1中出现的内存位置,不区分大小写</td></tr>
<tr><td>查找文本</td><td>StrStrA</td><td>查找文本(文字1,文字2)</td><td>查找文字2在文字1中出现的内存位置</td></tr>
<tr><td>查找字串</td><td>StrStrIA</td><td>查找字串(文字1,文字2)</td><td>查找文字2在文字1中出现的内存位置</td></tr>
</table><br>
<font color="#0000FF"><a name="通信协议">网络编程</a>常用函数-wsock32库</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>地址类</td><td>sockaddr_in</td><td>16</td><td>用来存储IP地址和端口的数据</td></tr>
<tr><th colspan=4>地址类——成员表</th></tr>
<tr><td>协议</td><td>sin_family</td><td>正数</td><td>AF_INET=2（地址族）PF_INET=2（协议族）</td></tr>
<tr><td>端口</td><td>sin_port</td><td>正数</td><td>必须是网络数据格式,可以用htons函数转换</td></tr>
<tr><td>地址</td><td>sin_addr</td><td>整数</td><td>网络IP地址</td></tr>
<tr><td>预留</td><td>sin_zero</td><td>整数</td><td>未使用</td></tr>
<tr><td>备用</td><td></td><td>整数</td><td>未使用</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>接受</td><td>accept</td><td>接受(接口,地址类,长度)</td><td>在网络接口接受一个连接。地址和长度是可选项</td></tr>
<tr><td>绑定</td><td>bind</td><td>绑定(接口,地址类,长度)</td><td>将一个本地IP地址类与网络接口捆绑。</td></tr>
<tr><td>关闭</td><td>closesocket</td><td>关闭(接口)</td><td>关闭一个网络接口。</td></tr>
<tr><td>连网</td><td>connect</td><td>连网(接口,地址类,长度)</td><td>用于建立与指定网络接口的连接。</td></tr>
<tr><td>远程地址</td><td>getpeername</td><td>远程地址(接口,地址类,长度)</td><td>获取与网络接口相连的(对方)端口和IP地址</td></tr>
<tr><td>本机地址</td><td>getsockname</td><td>本机地址(接口,地址类,长度)</td><td>获取网络接口的本机端口和IP地址</td></tr>
<tr><td>接口选项</td><td>getsockopt</td><td>接口选项(接口,层,选项,@数据,长度)</td><td>获取一个网络接口的选项</td></tr>
<tr><td>设置接口</td><td>setsockopt</td><td>设置接口(接口,层,选项,@数据,@长度)</td><td>设置一个网络接口的(高层)选项</td></tr>
<tr><td>反整数</td><td>htonl</td><td>l=反整数(数字)</td><td>将32位主机数转换成无符号长整型的网络字节顺序(高低位反转)</td></tr>
<tr><td>反转</td><td>htons</td><td>i=反转(数字)</td><td>将无符号短整形数转换成16位网络字节顺序(四个反转函数性质相同,端口转换用这一个就行了)</td></tr>
<tr><td>整数反转</td><td>ntohl</td><td>接受(数字)</td><td>将一个无符号长整形数从网络字节顺序转换为主机字节顺序</td></tr>
<tr><td>整形反转</td><td>ntohs</td><td>整形反转(数字)</td><td>将一个16位数由网络字节顺序转换为主机字节顺序</td></tr>
<tr><td>控制模式</td><td>ioctlsocket</td><td>接口模式(接口,命令,@模式)</td><td>用于获取与网络接口相关的控制模式</td></tr>
<tr><td>转换地址</td><td>inet_addr</td><td>地址=转换地址("127.0.0.1")</td><td>将一个点分十进制的IP字符串转换成一个长整数型数</td></tr>
<tr><td>地址转换</td><td>inet_ntoa</td><td>IPs=地址转换(地址)</td><td>将一个长整数型数转换成一个点分十进制的IP字符串</td></tr>
<tr><td>监听</td><td>listen</td><td>监听(接口,队列数)</td><td>监听已经"绑定"IP端口的网络接口,申请进入的连接请求排队等待"接受"</td></tr>
<tr><td>接收</td><td>recv</td><td>接收(接口,内容,长度,0)</td><td>接收对方发来的网络数据</td></tr>
<tr><td>收取</td><td>recvfrom</td><td>收取(接口,内容,长度,0,地址,长度)</td><td>接收一个数据报文,可同时获取对方IP端口地址,地址长度可选</td></tr>
<tr><td>轮询</td><td>select</td><td>轮询(接口,可用,0,0,超时)</td><td>通过查询接口的状态,如果在超时限制内没有数据发送,则中断此接口,去发送其它活动接口</td></tr>
<tr><td>发送</td><td>send</td><td>发送(接口,内容,长度,0)</td><td>向对方发送网络数据</td></tr>
<tr><td>发到</td><td>sendto</td><td>发到(接口,内容,长度,0,地址,长度)</td><td>向指定IP端口发送一个报文数据</td></tr>
<tr><td>禁止</td><td>shutdown</td><td>禁止(接口,方式)</td><td>方式0禁收数据,1禁发数据,2禁止收发数据</td></tr>
<tr><td>分配</td><td>socket</td><td>接口=分配(网络型,数据流,流协议)</td><td>指定的地址族、数据类型和协议来分配一个网络接口<br>(网络型,数据报,报协议)用来UDP通讯</td></tr>
<tr><td>主机信息</td><td>gethostbyaddr</td><td>信息=主机信息(IP地址,4,网络型)</td><td>通过IP地址获取主机名等信息</td></tr>
<tr><td>解析域名</td><td>gethostbyname</td><td>信息=解析域名(域名)</td><td>通过解析域名获取主机名字和IP地址等信息</td></tr>
<tr><td>解析协议</td><td>getprotobyname</td><td>协议=解析协议("tcp")</td><td>解析tcp可得到协议名,可选名队列和数字6,只有数字6有用</td></tr>
<tr><td>获取协议</td><td>getprotobynumber</td><td>信息=获取协议(协议号)</td><td>通过协议号获取协议号和协议名等信息,比如通过数字6可得到一个数字6和协议名</td></tr>
<tr><td>服务信息</td><td>getservbyname</td><td>信息=服务信息("domain","udp")</td><td>通过给定服务名和协议名来获取服务名,协议名,端口号等相关服务信息</td></tr>
<tr><td>服务端口</td><td>getservbyport</td><td>信息=服务端口(反转(3389),"tcp")</td><td>通过给定端口号和协议名来获取服务名,协议名,端口号等相关服务信息</td></tr>
<tr><td>取主机名</td><td>gethostname</td><td>取主机名(名称,长度)</td><td>获取本地主机的标准主机名。</td></tr>
<tr><td>异步通知</td><td>WSAAsyncSelect</td><td>异步通知(接口,窗口,消息,事件集)</td><td>请求基于窗口消息的网络事件通知。</td></tr>
<tr><td>异步信息</td><td>WSAAsyncGetServByName</td><td>异步信息(窗口,消息,名称,协议,数据,大小)</td><td>通过给定服务名和协议名来异步获取服务器的服务名,协议名,端口号等相关服务信息</td></tr>
<tr><td>异步域名</td><td>WSAAsyncGetHostByName</td><td>异步域名(窗口,消息,域名,数据,大小)</td><td>是用来获取对应于一个主机名的主机名称和地址信息。</td></tr>
<tr><td>取消异步</td><td>WSACancelAsyncRequest</td><td>取消异步(异步)</td><td>取消不完整的异步操作。</td></tr>
<tr><td>异步事件</td><td>WSACreateEvent</td><td>事件=异步事件</td><td>创建一个新的事件对象。允许应用程序在一个或多个接口上，接收以事件为基础的网络事件通知</td></tr>
<tr><td>关闭事件</td><td>WSACloseEvent</td><td>关闭事件(事件)</td><td>关闭打开的事件对象句柄。</td></tr>
<tr><td>事件记录</td><td>WSAEnumNetworkEvents</td><td>事件记录(接口,事件,数据)</td><td>获取指定接口的网络事件、清除内部网络事件记录和重置事件对象（可选）。</td></tr>
<tr><td>关联事件</td><td>WSAEventSelect</td><td>关联事件(接口,对象,事件集)</td><td>指定要与指定的网络事件集关联的事件对象。</td></tr>
<tr><td>闲置事件</td><td>WSAResetEvent</td><td>闲置事件(事件)</td><td>将指定事件对象的状态重置为无信号。</td></tr>
<tr><td>发送数据</td><td>WSASend</td><td>发送数据(接口,数组,数量,号码,标志,0,0)</td><td>在连接的套接字上发送数据。</td></tr>
<tr><td>接收数据</td><td>WSARecv</td><td>接收数据(接口,数组,数量,已收,标志,0,0)</td><td>从连接的套接字或绑定的无连接套接字接收数据。</td></tr>
<tr><td>网络错误</td><td>WSAGetLastError</td><td>错码=网络错误</td><td>返回上次发生的网络错误</td></tr>
<tr><td>设置错码</td><td>WSASetLastError</td><td>设置错码(错码)</td><td>为当前线程设置错误代码</td></tr>
<tr><td>网络启动</td><td>WSAStartup</td><td>网络启动(版本,信息)</td><td>完成对Winsock服务的初始化，获取网络接口的相关信息</td></tr>
<tr><td>网络终止</td><td>WSACleanup</td><td>网络终止</td><td>获取本地主机的标准主机名。</td></tr>
</table>
<font color="#0000FF">网络编程常用常量定义</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名</td><td>英文名</td><td>数值</td><td>作用</td></tr>
<tr><td>接口读</td><td>FD_READ</td><td>1</td><td>网络数据已到达，可供读取。</td></tr>
<tr><td>接口写</td><td>FD_WRITE</td><td>2</td><td>现在可以发送其他数据。</td></tr>
<tr><td>接口读外</td><td>FD_OOB</td><td>4</td><td>可读取带外数据。</td></tr>
<tr><td>接口请求</td><td>FD_ACCEPT</td><td>8</td><td>远程主机正在发出连接请求。</td></tr>
<tr><td>接口连接</td><td>FD_CONNECT</td><td>$10</td><td>已完成与远程主机或多播会话的连接。</td></tr>
<tr><td>接口关闭</td><td>FD_CLOSE</td><td>$20</td><td>远程主机已关闭连接。</td></tr>
<tr><td>本地型</td><td>AF_UNIX</td><td>1</td><td>主机通讯。</td></tr>
<tr><td>网络型</td><td>AF_INET</td><td>2</td><td>互联网通讯。包含本机,局域网和广域网,23种只有这一种最常用</td></tr>
<tr><td>数据流</td><td>SOCK_STREAM</td><td>1</td><td>TCP协议使用的方式。</td></tr>
<tr><td>数据报</td><td>SOCK_DGRAM</td><td>2</td><td>UDP协议使用的方式</td></tr>
<tr><td>流协议</td><td>IPPROTO_TCP</td><td>6</td><td>TCP协议</td></tr>
<tr><td>报协议</td><td>IPPROTO_UDP</td><td>17</td><td>UDP协议</td></tr>
<tr><td>设置选项</td><td>IP_OPTIONS</td><td>1</td><td>设置新选项将覆盖以前指定的所有选项,设置前要先获取</td></tr>
<tr><td>多播接口</td><td>IP_MULTICAST_IF</td><td>2</td><td>确定要用于多播的接口</td></tr>
<tr><td>多播时间</td><td>IP_MULTICAST_TTL</td><td>3</td><td>设置多播会话时间到实时控制范围</td></tr>
<tr><td>多播回送</td><td>IP_MULTICAST_LOOP</td><td>4</td><td>设置/获取IP多播数据回送</td></tr>
<tr><td>添加多播</td><td>IP_ADD_MEMBERSHIP</td><td>5</td><td>添加多播成员会话</td></tr>
<tr><td>删除多播</td><td>IP_DROP_MEMBERSHIP</td><td>6</td><td>删除多播成员会话</td></tr>
<tr><td>存包时间</td><td>IP_TTL</td><td>7</td><td>设置/获取数据包的保存时间</td></tr>
<tr><td>服务选项</td><td>IP_TOS</td><td>8</td><td>设置/获取服务的最小时延、最大吞吐量、最高可靠性和最小费用</td></tr>
<tr><td>不要分段</td><td>IP_DONTFRAGMENT</td><td>9</td><td>设置/获取IP不分段标志</td></tr>
<tr><td>接口调试</td><td>SO_DEBUG</td><td>1</td><td>打开调试信息记录</td></tr>
<tr><td>是否侦听</td><td>SO_ACCEPTCONN</td><td>2</td><td>获取是否处于侦听模式</td></tr>
<tr><td>地址重用</td><td>SO_REUSEADDR</td><td>4</td><td>允许本地地址重用</td></tr>
<tr><td>保持连接</td><td>SO_KEEPALIVE</td><td>8</td><td>保持连接活动</td></tr>
<tr><td>不要路由</td><td>SO_DONTROUTE</td><td>$10</td><td>仅使用本网络接口地址</td></tr>
<tr><td>允许广播</td><td>SO_BROADCAST</td><td>$20</td><td>允许发送广播消息</td></tr>
<tr><td>地址回送</td><td>SO_USELOOPBACK</td><td>$40</td><td>使用本地环回地址</td></tr>
<tr><td>延迟关闭</td><td>SO_LINGER</td><td>$80</td><td>如果有数据，则延迟关闭</td></tr>
<tr><td>边界数据</td><td>SO_OOBINLINE</td><td>$100</td><td>超出边界的数据</td></tr>
<tr><td>发送缓冲</td><td>SO_SNDBUF</td><td>$1001</td><td>发送缓冲区大小</td></tr>
<tr><td>接收缓冲</td><td>SO_RCVBUF</td><td>$1002</td><td>接收缓冲区大小</td></tr>
<tr><td>最小发送</td><td>SO_SNDLOWAT</td><td>$1003</td><td>发送最小字节数</td></tr>
<tr><td>最小接收</td><td>SO_RCVLOWAT</td><td>$1004</td><td>接收最小字节数</td></tr>
<tr><td>发送超时</td><td>SO_SNDTIMEO</td><td>$1005</td><td>发送超时</td></tr>
<tr><td>接收超时</td><td>SO_RCVTIMEO</td><td>$1006</td><td>接收超时</td></tr>
<tr><td>接口错误</td><td>SO_ERROR</td><td>$1007</td><td>获取错误状态并清除</td></tr>
<tr><td>接口类型</td><td>SO_TYPE</td><td>$1008</td><td>获取网络接口类型</td></tr>
</table><hr>
<p><font color="#0000FF" size=6><a name="数据类型">数据类型</a></font></p>
<font color="#0000FF">Win32编程常用函数-odbc32库</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>数据分配</td><td>SQLAllocHandle</td><td>数据分配(类型,输入,输出)</td><td>分配环境=1、连接=2、语句=3或描述符=4句柄。</td></tr>
<tr><td>数据绑定</td><td>SQLBindParameter</td><td>数据绑定(语句柄,序号,参类,C类,SQL类,大小,列数,缓冲,长度,指针)</td><td>将缓冲区绑定到SQL语句中的参数标记。</td></tr>
<tr><td>数据连接</td><td>SQLConnectA</td><td>数据连接(连接,数据源,字长,用户,字长,密码,长度)</td><td>与驱动程序和数据源建立连接。</td></tr>
<tr><td>数据关闭</td><td>SQLDisconnect</td><td>数据关闭(连接)</td><td>关闭与特定连接句柄关联的连接。</td></tr>
<tr><td>驱动连接</td><td>SQLDriverConnectA</td><td>驱动连接(连接,窗口,连接字符,字长,已连字符,字长,0,标志)</td><td>与驱动程序和数据源建立连接。</td></tr>
<tr><td>提交执行</td><td>SQLExecDirectA</td><td>提交执行(语句柄,语句,长度)</td><td>提交 SQL 语句以进行一次性执行。</td></tr>
<tr><td>数据执行</td><td>SQLExecute</td><td>数据执行(语句柄)</td><td>使用参数标记变量的当前值执行已准备的语句。</td></tr>
<tr><td>数据换行</td><td>SQLFetch</td><td>数据换行(语句柄)</td><td>从结果集中提取下一行数据集，并返回所有绑定列的数据。</td></tr>
<tr><td>数据释放</td><td>SQLFreeHandle</td><td>数据释放(类型,对象)</td><td>释放与特定环境、连接、语句或描述符句柄关联的资源。</td></tr>
<tr><td>获取数据</td><td>SQLGetData</td><td>获取数据(语句柄,列,C类,缓冲,长度,已读)</td><td>在结果集中检索单个列的数据</td></tr>
<tr><td>数据参数</td><td>SQLNumParams</td><td>数据参数(语句柄,数量)</td><td>返回 SQL 语句中的参数数量。</td></tr>
<tr><td>数据列数</td><td>SQLNumResultCols</td><td>数据列数(语句柄,列数)</td><td>返回结果集中的列数。</td></tr>
<tr><td>参数数据</td><td>SQLParamData</td><td>参数数据(语句柄,缓冲)</td><td>返回 数据绑定 中指定的缓冲区的地址</td></tr>
<tr><td>写入数据</td><td>SQLPutData</td><td>写入数据(语句柄,缓冲,长度)</td><td>许应用程序在语句执行时向驱动程序发送参数或列的二进制数据。</td></tr>
<tr><td>数据变数</td><td>SQLRowCount</td><td>数据变数(语句柄,行数)</td><td>返回受 UPDATE、 INSERT 或 DELETE 语句影响的行数; </td></tr>
<tr><td>连接属性</td><td>SQLGetConnectAttrA</td><td>连接属性(连接,属性,缓冲,长度,已取)</td><td>获取连接属性的当前设置。</td></tr>
<tr><td>设置连接</td><td>SQLSetConnectAttrA</td><td>设置连接(连接,属性,值,长度)</td><td>设置连接方面的属性。</td></tr>
<tr><td>环境属性</td><td>SQLGetEnvAttr</td><td>环境属性(环境,属性,缓冲,长度,已取)</td><td>获取管理环境方面的属性。</td></tr>
<tr><td>设置环境</td><td>SQLSetEnvAttr</td><td>设置环境(环境,属性,值,长度)</td><td>设置管理环境方面的属性。</td></tr>
<tr><td>语句属性</td><td>SQLGetStmtAttrA</td><td>语句属性(语句,属性,缓冲,长度,已取)</td><td>获取语句属性的当前设置。</td></tr>
<tr><td>设置语句</td><td>SQLSetStmtAttrA</td><td>设置语句(语句,属性,值,长度)</td><td>设置与语句相关的属性。</td></tr>
<tr><td>数据插入</td><td>SQLBulkOperations</td><td>数据插入(语句,操作)</td><td>执行批量插入和批量书签操作，包括通过书签进行更新、删除和提取。</td></tr>
<tr><td>数据游标</td><td>SQLSetPos</td><td>数据游标(语句,行号,操作,锁方式)</td><td>设置行集中的游标位置，并允许应用程序刷新行集中的数据或更新或删除结果集中的数据。</td></tr>
</table>
<font color="#0000FF"> ODBC中的 C 数据类型</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>C 类型标识符</td><td>ODBC C typedef</td><td>C 类型</td></tr>
<tr><td>SQL_C_CHAR</td><td>SQLCHAR *</td><td>unsigned char *</td></tr>
<tr><td>SQL_C_WCHAR</td><td>SQLWCHAR *</td><td>wchar_t *</td></tr>
<tr><td>SQL_C_SSHORT[j]</td><td>SQLSMALLINT</td><td>short int</td></tr>
<tr><td>SQL_C_USHORT[j]</td><td>SQLUSMALLINT</td><td>unsigned short int</td></tr>
<tr><td>SQL_C_SLONG[j]</td><td>SQLINTEGER</td><td>long int</td></tr>
<tr><td>SQL_C_ULONG[j]</td><td>SQLUINTEGER</td><td>unsigned long int</td></tr>
<tr><td>SQL_C_FLOAT</td><td>SQLREAL</td><td>FLOAT</td></tr>
<tr><td>SQL_C_DOUBLE</td><td>SQLDOUBLE、SQLFLOAT</td><td>double</td></tr>
<tr><td>SQL_C_BIT</td><td>SQLCHAR</td><td>unsigned char</td></tr>
<tr><td>SQL_C_STINYINT[j]</td><td>SQLSCHAR</td><td>signed char</td></tr>
<tr><td>SQL_C_UTINYINT[j]</td><td>SQLCHAR</td><td>unsigned char</td></tr>
<tr><td>SQL_C_SBIGINT</td><td>SQLBIGINT</td><td>_int64[h]</td></tr>
<tr><td>SQL_C_UBIGINT</td><td>SQLUBIGINT</td><td>unsigned _int64[h]</td></tr>
<tr><td>SQL_C_BINARY</td><td>SQLCHAR *</td><td>unsigned char *</td></tr>
<tr><td>SQL_C_BOOKMARK[i]</td><td>书签</td><td>unsigned long int[d]</td></tr>
<tr><td>SQL_C_VARBOOKMARK</td><td>SQLCHAR *</td><td>unsigned char *</td></tr>
</table>
<p><font color="#0000FF" size=6><a name="图形窗口">图形窗口</a></font></p>
<font color="#0000FF">Win32编程常用函数-opengl32库</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td width=66>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>累积缓冲</td><td>glAccum</td><td>累积缓冲(操作,小数值)</td><td>对累积缓冲区进行操作。</td></tr>
<tr><td>透明函数</td><td>glAlphaFunc</td><td>透明函数(比较函数,引用值)</td><td>使应用程序能够设置透明通道测试函数。</td></tr>
<tr><td>查找纹理</td><td>glAreTexturesResident</td><td>查找纹理(纹理数,名称,@地址)</td><td>确定指定的纹理对象是否驻留在纹理内存中。</td></tr>
<tr><td>顶点元素</td><td>glArrayElement</td><td>顶点元素(序号)</td><td>指定用于呈现顶点的数组元素。</td></tr>
<tr><td>开始分形</td><td>glBegin</td><td>开始分形(模式)</td><td>分隔基元或一组类似基元的顶点。</td></tr>
<tr><td>结束分形</td><td>glEnd</td><td>结束分形</td><td>结束分隔基元或一组类似基元的顶点。</td></tr>
<tr><td>绑定纹理</td><td>glBindTexture</td><td>绑定纹理(目标,名称)</td><td>允许创建绑定到纹理目标的命名纹理。</td></tr>
<tr><td>绘制位图</td><td>glBitmap</td><td>绘制位图(宽,高,x,y,x偏移,y偏移,图片)</td><td>结束分隔基元或一组类似基元的顶点。</td></tr>
<tr><td>像素算法</td><td>glBlendFunc</td><td>像素算法(源算法,目标算法)</td><td>指定像素算术。</td></tr>
<tr><td>执行列表</td><td>glCallList</td><td>执行列表(列表)</td><td>执行显示列表。</td></tr>
<tr><td>执行多表</td><td>glCallLists</td><td>执行多表(数量,类型,列表组)</td><td>执行显示列表的列表。</td></tr>
<tr><td>清理预设</td><td>glClear</td><td>清理预设(掩码)</td><td>将缓冲区清除为预设值。</td></tr>
<tr><td>清理累积</td><td>glClearAccum</td><td>清理累积(红,绿,蓝,透明)</td><td>指定累积缓冲区的清除值。</td></tr>
<tr><td>清理颜色</td><td>glClearColor</td><td>清理颜色(红,绿,蓝,透明)</td><td>指定颜色缓冲区的清除值。</td></tr>
<tr><td>清理深度</td><td>glClearDepth</td><td>清理深度(深度)</td><td>指定深度缓冲区的清除值。</td></tr>
<tr><td>清理索引</td><td>glClearIndex</td><td>清理索引(索引)</td><td>指定颜色索引缓冲区的清除值。</td></tr>
<tr><td>清理模具</td><td>glClearStencil</td><td>清理模具(序号)</td><td>指定模具缓冲区的清除值。</td></tr>
<tr><td>剪切平面</td><td>glClipPlane</td><td>剪切平面(平面,公式)</td><td>指定对所有几何图形进行剪切的平面。</td></tr>
<tr><td>三色字节</td><td>glColor3b</td><td>三色字节(红,绿,蓝)</td><td>用字节数设置当前颜色。</td></tr>
<tr><td>三色字组</td><td>glColor3bv</td><td>三色字节(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>三色双精</td><td>glColor3d</td><td>三色双精(红,绿,蓝)</td><td>用双精度浮点数设置当前颜色。</td></tr>
<tr><td>三色双组</td><td>glColor3dv</td><td>三色双组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>三色小数</td><td>glColor3f</td><td>三色字节(红,绿,蓝)</td><td>用小数设置当前颜色。</td></tr>
<tr><td>三色小组</td><td>glColor3fv</td><td>三色小组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>三色整数</td><td>glColor3i</td><td>三色整数(红,绿,蓝)</td><td>用整数设置当前颜色。</td></tr>
<tr><td>三色整组</td><td>glColor3iv</td><td>三色整组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>三色短数</td><td>glColor3s</td><td>三色短数(红,绿,蓝)</td><td>用短整数设置当前颜色。</td></tr>
<tr><td>三色短组</td><td>glColor3sv</td><td>三色短组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>四色字节</td><td>glColor4b</td><td>四色字节(红,绿,蓝,透明)</td><td>用字节数设置当前颜色。</td></tr>
<tr><td>四色字组</td><td>glColor4bv</td><td>四色字节(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>四色双精</td><td>glColor4d</td><td>四色双精(红,绿,蓝,透明)</td><td>用双精度浮点数设置当前颜色。</td></tr>
<tr><td>四色双组</td><td>glColor4dv</td><td>四色双组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>四色小数</td><td>glColor4f</td><td>四色字节(红,绿,蓝,透明)</td><td>用小数设置当前颜色。</td></tr>
<tr><td>四色小组</td><td>glColor4fv</td><td>四色小组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>四色整数</td><td>glColor4i</td><td>四色整数(红,绿,蓝,透明)</td><td>用整数设置当前颜色。</td></tr>
<tr><td>四色整组</td><td>glColor4iv</td><td>四色整组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>四色短数</td><td>glColor4s</td><td>四色短数(红,绿,蓝,透明)</td><td>用短整数设置当前颜色。</td></tr>
<tr><td>四色短组</td><td>glColor4sv</td><td>四色短组(色组)</td><td>设置现有颜色值数组中的当前颜色。</td></tr>
<tr><td>颜色掩藏</td><td>glColorMask</td><td>颜色掩藏(红,绿,蓝,透明)</td><td>启用和禁用帧缓冲区各种颜色组件的写入。</td></tr>
<tr><td>颜色跟踪</td><td>glColorMaterial</td><td>颜色跟踪(面料,材料)</td><td>导致材料颜色跟踪当前颜色。</td></tr>
<tr><td>颜色位组</td><td>glColorPointer</td><td>颜色位组(色位,类型,步幅,指针)</td><td>定义颜色数组。色位只有3和4</td></tr>
<tr><td>复制像素</td><td>glCopyPixels</td><td>复制像素(x,y,宽,高,类型)</td><td>复制帧缓冲区中的像素。</td></tr>
<tr><td>复制一维</td><td>glCopyTexImage1D</td><td>复制一维(目标,级别,格式,x,y,宽,边框)</td><td>将帧缓冲区中的像素复制到一维纹理图像中。</td></tr>
<tr><td>复制二维</td><td>glCopyTexImage2D</td><td>复制二维(目标,级别,格式,x,y,宽,高,边框)</td><td>将帧缓冲区中的像素复制到二维纹理图像中。</td></tr>
<tr><td>一维子图</td><td>glCopyTexSubImage1D</td><td>一维子图(目标,级别,偏移,x,y,宽)</td><td>从框架缓存复制一维纹理图像的子图像。</td></tr>
<tr><td>二维子图</td><td>glCopyTexSubImage1D</td><td>二维子图(目标,级别,x偏移,y偏移,x,y,宽,高)</td><td>从框架缓存复制二维纹理图像的子图像。</td></tr>
<tr><td>剔除画面</td><td>glCullFace</td><td>剔除画面(模式)</td><td>指定是否可以剔除正面或后向面面。</td></tr>
<tr><td>删除列表</td><td>glDeleteLists</td><td>删除列表(列表,数量)</td><td>删除一组连续的显示列表。</td></tr>
<tr><td>删除纹理</td><td>glDeleteTextures</td><td>删除纹理(数量,数组)</td><td>删除命名纹理。</td></tr>
<tr><td>深度比值</td><td>glDepthFunc</td><td>深度比值(方式)</td><td>指定用于深度缓冲区比较的值。</td></tr>
<tr><td>深度掩码</td><td>glDepthMask</td><td>深度掩码(标志)</td><td>启用或禁用写入深度缓冲区。</td></tr>
<tr><td>深度范围</td><td>glDepthRange</td><td>深度范围(准裁,远裁)</td><td>指定从规范化设备坐标到窗口坐标的 z 值的映射。</td></tr>
<tr><td>禁用图库</td><td>glDisable</td><td>禁用图库(方式)</td><td>禁用 OpenGL 功能。</td></tr>
<tr><td>禁用组态</td><td>glDisableClientState</td><td>禁用组态(数组)</td><td>禁用数组。</td></tr>
<tr><td>绘制组元</td><td>glDrawArrays</td><td>绘制组元(模式,起始,数量)</td><td>指定要呈现的多个基元。</td></tr>
<tr><td>绘制缓存</td><td>glDrawBuffer</td><td>绘制缓存(方式)</td><td>指定要绘制到哪些颜色缓冲区中。</td></tr>
<tr><td>绘制元素</td><td>glDrawElements</td><td>绘制缓存(模式,数量,类型,索引)</td><td>从数组数据呈现基元。</td></tr>
<tr><td>绘制像素</td><td>glDrawPixels</td><td>绘制像素(宽,高,格式,类型,像素)</td><td>将像素块写入帧缓冲区。</td></tr>
<tr><td>边界标记</td><td>glEdgeFlag</td><td>边界标记(标志)</td><td>将边缘标记为边界或非边界(真或假)。</td></tr>
<tr><td>边界标组</td><td>glEdgeFlagv</td><td>边界标组(数组)</td><td>将边缘标记为边界或非边界(布尔数组)。</td></tr>
<tr><td>边界元素</td><td>glEdgeFlagPointer</td><td>边界元素(步幅,数组)</td><td>定义边缘标志数组。</td></tr>
<tr><td>启用图库</td><td>glEnable</td><td>启用图库(方式)</td><td>启用 OpenGL 功能。</td></tr>
<tr><td>启用组态</td><td>glDisableClientState</td><td>启用组态(数组)</td><td>启用数组。</td></tr>
<tr><td>消除列表</td><td>glEndList</td><td>消除列表</td><td>定义边缘标志数组。</td></tr>
<tr><td>一维双精</td><td>glEvalCoord1d</td><td>一维双精(基数)</td><td>计算已启用的一维映射。</td></tr>
<tr><td>一维双组</td><td>glEvalCoord1dv</td><td>一维双组(数组)</td><td>评估已启用的一维映射。</td></tr>
<tr><td>一维小数</td><td>glEvalCoord1f</td><td>一维小数(基数)</td><td>计算已启用的一维映射。</td></tr>
<tr><td>一维小组</td><td>glEvalCoord1fv</td><td>一维小组(数组)</td><td>评估已启用的一维映射。</td></tr>
<tr><td>二维双精</td><td>glEvalCoord2d</td><td>二维双精(基数)</td><td>计算已启用的二维映射。</td></tr>
<tr><td>二维双组</td><td>glEvalCoord2dv</td><td>二维双组(数组)</td><td>评估已启用的二维映射。</td></tr>
<tr><td>二维小数</td><td>glEvalCoord2f</td><td>二维小数(基数)</td><td>计算已启用的二维映射。</td></tr>
<tr><td>二维小组</td><td>glEvalCoord2fv</td><td>二维小组(数组)</td><td>评估已启用的二维映射。</td></tr>
<tr><td>一维网格</td><td>glEvalMesh1</td><td>一维网格(模式,开头,结尾)</td><td>计算点或线条的一维网格。</td></tr>
<tr><td>二维网格</td><td>glEvalMesh2</td><td>二维网格(模式,开头1,结尾1,开头2,结尾2)</td><td>计算点或线条的二维网格。</td></tr>
<tr><td>一维网点</td><td>glEvalPoint1</td><td>一维网点(域值)</td><td>生成和评估网格中的单个点。</td></tr>
<tr><td>二维网点</td><td>glEvalPoint2</td><td>二维网点(域值1,域值2)</td><td>生成和计算网格中的单个点。</td></tr>
<tr><td>反馈缓冲</td><td>glFeedbackBuffer</td><td>反馈缓冲(大小,类型,缓冲)</td><td>控制反馈模式。</td></tr>
<tr><td>终结图库</td><td>glFinish</td><td>终结图库</td><td>阻止所有 OpenGL 执行完成。</td></tr>
<tr><td>执行图库</td><td>glFlush</td><td>执行图库</td><td>在有限时间内强制执行 OpenGL 函数。</td></tr>
<tr><td>雾化小数</td><td>glFogf</td><td>雾化小数(效果,雾值)</td><td>指定雾参数。</td></tr>
<tr><td>雾化小组</td><td>glFogfv</td><td>雾化小组(效果,数组)</td><td>指定雾参数。</td></tr>
<tr><td>雾化整数</td><td>glFogi</td><td>雾化整数(效果,雾值)</td><td>指定雾参数。</td></tr>
<tr><td>雾化整组</td><td>glFogiv</td><td>雾化整组(效果,数组)</td><td>指定雾参数。</td></tr>
<tr><td>正多边形</td><td>glFrontFace</td><td>正多边形(方向)</td><td>定义正面多边形和后向多边形。</td></tr>
<tr><td>透视矩阵</td><td>glFrustum</td><td>透视矩阵(左,右,底,顶,近深,远深)</td><td>将当前矩阵乘以透视矩阵。</td></tr>
<tr><td>空列表组</td><td>glGenLists</td><td>列表=空列表组(数目)</td><td>生成一组连续的空显示列表。</td></tr>
<tr><td>取布尔值</td><td>glGetBooleanv</td><td>取布尔值(参数,取值)</td><td>获取所选参数的值</td></tr>
<tr><td>取双精值</td><td>glGetDoublev</td><td>取双精值(参数,取值)</td><td>获取所选参数的值</td></tr>
<tr><td>取小数值</td><td>glGetFloatv</td><td>取小数值(参数,取值)</td><td>获取所选参数的值</td></tr>
<tr><td>取整数值</td><td>glGetIntegerv</td><td>取整数值(参数,取值)</td><td>获取所选参数的值</td></tr>
<tr><td>剪辑系数</td><td>glGetClipPlane</td><td>剪辑系数(平面,系数)</td><td>获取指定剪辑平面的系数</td></tr>
<tr><td>图库错误</td><td>glGetError</td><td>错误=图库错误</td><td>返回错误信息。</td></tr>
<tr><td>取调色表</td><td>glGetColorTableEXT</td><td>取调色表(目标,格式,类型,数据)</td><td>获取当前目标纹理调色板的颜色表数据。</td></tr>
<tr><td>色表小数</td><td>glGetColorTableParameterfvEXT</td><td>色表小数(目标,参数,数据)</td><td>从颜色表获取调色板参数。</td></tr>
<tr><td>色表整数</td><td>glGetColorTableParameterivEXT</td><td>色表整数(目标,参数,数据)</td><td>从颜色表获取调色板参数。</td></tr>
<tr><td>光源小数</td><td>glGetLightfv</td><td>光源小数(光源,参数,数据)</td><td>获取光源参数值。</td></tr>
<tr><td>光源整数</td><td>glGetLightiv</td><td>光源整数(光源,参数,数据)</td><td>获取光源参数值。</td></tr>
<tr><td>地图双值</td><td>glGetMapdv</td><td>地图双值(目标,查询,数据)</td><td>返回计算器参数。</td></tr>
<tr><td>地图小数</td><td>glGetMapfv</td><td>地图小数(目标,查询,数据)</td><td>返回计算器参数。</td></tr>
<tr><td>地图整数</td><td>glGetMapiv</td><td>地图整数(目标,查询,数据)</td><td>返回计算器参数。</td></tr>
<tr><td>材料小数</td><td>glGetGetMaterialfv</td><td>材料小数(材料,参数,数据)</td><td>获取材料参数值。</td></tr>
<tr><td>材料整数</td><td>glGetGetMaterialiv</td><td>材料整数(材料,参数,数据)</td><td>获取材料参数值。</td></tr>
<tr><td>像素小数</td><td>glGetGetPixelMapfv</td><td>像素小数(像素名,数据)</td><td>获取像素参数值。</td></tr>
<tr><td>像素整数</td><td>glGetGetPixelMapuiv</td><td>像素整数(像素名,数据)</td><td>获取像素参数值。</td></tr>
<tr><td>像素短数</td><td>glGetGetPixelMapusv</td><td>像素短数(像素名,数据)</td><td>获取像素参数值。</td></tr>
<tr><td>顶点数据</td><td>glGetPointerv</td><td>顶点数据(类型,数据)</td><td>返回顶点数据数组的地址。</td></tr>
<tr><td>多边点图</td><td>glGetPolygonStipple</td><td>多边点图(掩码)</td><td>返回多边形存根模式。</td></tr>
<tr><td>图库字符</td><td>glGetString</td><td>内容=图库字符(类型)</td><td>返回描述当前 OpenGL 连接的字符串。</td></tr>
<tr><td>环境小数</td><td>glGetTexEnvfv</td><td>环境小数(环境,参数,数据)</td><td>获取纹理环境参数值。</td></tr>
<tr><td>环境整数</td><td>glGetTexEnviv</td><td>环境整数(环境,参数,数据)</td><td>获取纹理环境参数值。</td></tr>
<tr><td>坐标双值</td><td>glGetTexGendv</td><td>坐标双值(坐标,名称,数据)</td><td>获取纹理坐标生成参数。</td></tr>
<tr><td>坐标小数</td><td>glGetTexGenfv</td><td>坐标小数(坐标,名称,数据)</td><td>获取纹理坐标生成参数。</td></tr>
<tr><td>坐标整数</td><td>glGetTexGeniv</td><td>坐标整数(坐标,名称,数据)</td><td>获取纹理坐标生成参数。</td></tr>
<tr><td>纹理图像</td><td>glGetTexImage</td><td>纹理图像(纹理,级别,格式,类型,像素)</td><td>返回纹理图像。</td></tr>
<tr><td>级别小数</td><td>glGetTexLevelParameterfv</td><td>级别小数(目标,级别,参数,数据)</td><td>获取特定详细级别的纹理参数值。</td></tr>
<tr><td>级别整数</td><td>glGetTexLevelParameteriv</td><td>级别整数(目标,级别,参数,数据)</td><td>获取特定详细级别的纹理参数值。</td></tr>
<tr><td>纹理小数</td><td>glGetTexParameterfv</td><td>纹理小数(纹理,参数,数据)</td><td>获取纹理参数值。</td></tr>
<tr><td>纹理整数</td><td>glGetTexParameteriv</td><td>纹理整数(纹理,参数,数据)</td><td>获取纹理参数值。</td></tr>
<tr><td>采样质量</td><td>glHint</td><td>采样质量(行为,模式)</td><td>返回顶点数据数组的地址。</td></tr>
<tr><td>索引掩码</td><td>glIndexMask</td><td>索引掩码(掩码)</td><td>控制在颜色索引缓冲区中写入单个掩码位。</td></tr>
<tr><td>索引色组</td><td>glIndexPointer</td><td>索引色组(类型,步幅,数组)</td><td>定义颜色索引数组</td></tr>
<tr><td>索引掩码</td><td>glIndexMask</td><td>索引掩码(掩码)</td><td>控制在颜色索引缓冲区中写入单个掩码位。</td></tr>
<tr><td>索引双精</td><td>glIndexd</td><td>索引双精(数值)</td><td>用双精度浮点数设置当前颜色索引。</td></tr>
<tr><td>索引双组</td><td>glIndexdv</td><td>索引双组(数组)</td><td>设置现有颜色值数组中的当前颜色索引。</td></tr>
<tr><td>索引小数</td><td>glIndexf</td><td>索引字节(数值)</td><td>用小数设置当前颜色索引。</td></tr>
<tr><td>索引小组</td><td>glIndexfv</td><td>索引小组(数组)</td><td>设置现有颜色值数组中的当前颜色索引。</td></tr>
<tr><td>索引整数</td><td>glIndexi</td><td>索引整数(数值)</td><td>用整数设置当前颜色索引。</td></tr>
<tr><td>索引整组</td><td>glIndexiv</td><td>索引整组(数组)</td><td>设置现有颜色值数组中的当前颜色索引。</td></tr>
<tr><td>索引短数</td><td>glIndexs</td><td>索引短数(数值)</td><td>用短整数设置当前颜色索引。</td></tr>
<tr><td>索引短组</td><td>glIndexsv</td><td>索引短组(数组)</td><td>设置现有颜色值数组中的当前颜色索引。</td></tr>
<tr><td>索引字节</td><td>glIndexub</td><td>索引字节(数值)</td><td>用字节设置当前颜色索引。</td></tr>
<tr><td>索引字组</td><td>glIndexubv</td><td>索引字组(数组)</td><td>设置现有颜色值数组中的当前颜色索引。</td></tr>
<tr><td>初始名称</td><td>glInitNames</td><td>初始名称</td><td>初始化名称堆栈。</td></tr>
<tr><td>交错阵列</td><td>glInterleavedArrays</td><td>交错阵列(格式,步幅,数组)</td><td>同时指定并启用较大的聚合数组中的多个交错数组。</td></tr>
<tr><td>启用功能</td><td>glIsEnabled</td><td>启用功能(功能)</td><td>测试是否启用了功能。</td></tr>
<tr><td>是否列表</td><td>glIsList</td><td>是否列表(列表)</td><td>测试显示列表是否存在。</td></tr>
<tr><td>是否纹理</td><td>glIsTexture</td><td>是否纹理(纹理)</td><td>确定名称是否对应于纹理。</td></tr>
<tr><td>光线小数</td><td>glLightf</td><td>光线小数(光线,参数,数据)</td><td>获取光线参数值。</td></tr>
<tr><td>光线小组</td><td>glLightfv</td><td>光线小组(光线,参数,数据)</td><td>获取光线参数值。</td></tr>
<tr><td>光线整数</td><td>glLighti</td><td>光线整数(光线,参数,数据)</td><td>获取光线参数值。</td></tr>
<tr><td>光线整组</td><td>glLightiv</td><td>光线整组(光线,参数,数据)</td><td>获取光线参数值。</td></tr>
<tr><td>光模小数</td><td>glLightModelf</td><td>光模小数(参数,数据)</td><td>设置照明模型参数值。</td></tr>
<tr><td>光模小组</td><td>glLightModelfv</td><td>光模小组(参数,数据)</td><td>设置照明模型参数值。</td></tr>
<tr><td>光模整数</td><td>glLightModeli</td><td>光模整数(参数,数据)</td><td>设置照明模型参数值。</td></tr>
<tr><td>光模整组</td><td>glLightModeliv</td><td>光模整组(参数,数据)</td><td>设置照明模型参数值。</td></tr>
<tr><td>线点图案</td><td>glLineStipple</td><td>线点图案(乘数,图案)</td><td>设定线点绘图案</td></tr>
<tr><td>光栅线宽</td><td>glLineWidth</td><td>光栅线宽(线宽)</td><td>指定光栅化线的宽度。</td></tr>
<tr><td>列表基数</td><td>glListBase</td><td>列表基数(偏移量)</td><td>设置显示列表基础。</td></tr>
<tr><td>本征矩阵</td><td>glLoadIdentity</td><td>本征矩阵</td><td>将当前矩阵替换为标识矩阵。</td></tr>
<tr><td>双数矩阵</td><td>glLoadMatrixd</td><td>双数矩阵(阵列)</td><td>将当前矩阵替换为任意矩阵。</td></tr>
<tr><td>小数矩阵</td><td>glLoadMatrixf</td><td>小数矩阵(阵列)</td><td>将当前矩阵替换为任意矩阵。</td></tr>
<tr><td>加载名称</td><td>glLoadName</td><td>加载名称(名称)</td><td>将名称加载到名称堆栈中。</td></tr>
<tr><td>渲染像素</td><td>glLogicOp</td><td>渲染像素(逻辑符)</td><td>指定颜色索引呈现的逻辑像素操作。</td></tr>
<tr><td>视点转换</td><td>gluLookAt</td><td>视点转换(相机x,相机y,相机z,镜头x,镜头y,镜头z,面向x,面向y,面向z)</td><td>定义查看转换。</td></tr>
<tr><td>一维求双</td><td>glMap1d</td><td>一维求双(目标,线性1,线性2,步幅,点数,数组)</td><td>定义一维计算器。</td></tr>
<tr><td>一维求小</td><td>glMap1f</td><td>一维求小(目标,线性1,线性2,步幅,点数,数组)</td><td>定义一维计算器。</td></tr>
<tr><td>二维求双</td><td>glMap2d</td><td>二维求双(目标,u1,u2,步幅,维度,v1,v2,步长,维数,数组)</td><td>定义二维计算器。</td></tr>
<tr><td>二维求小</td><td>glMap2f</td><td>二维求小(目标,u1,u2,步幅,维度,v1,v2,步长,维数,数组)</td><td>定义二维计算器。</td></tr>
<tr><td>一网双数</td><td>glMapGrid1d</td><td>一网双数(分区,始值,终值)</td><td>定义一维网格。</td></tr>
<tr><td>一网小数</td><td>glMapGrid1f</td><td>一网小数(分区,始值,终值)</td><td>定义一维网格。</td></tr>
<tr><td>二网双数</td><td>glMapGrid2d</td><td>二网双数(分区,始值,终值,分区,始值,终值)</td><td>定义二维网格。</td></tr>
<tr><td>二网小数</td><td>glMapGrid2f</td><td>二网小数(分区,始值,终值,分区,始值,终值)</td><td>定义二维网格。</td></tr>
<tr><td>照材小数</td><td>glMaterialf</td><td>照材小数(脸,材料,参数)</td><td>指定照明模型的材料参数。</td></tr>
<tr><td>照材小组</td><td>glMaterialfv</td><td>照材小组(脸,材料,数组)</td><td>指定照明模型的材料参数。</td></tr>
<tr><td>照材整数</td><td>glMateriali</td><td>照材整数(脸,材料,参数)</td><td>指定照明模型的材料参数。</td></tr>
<tr><td>照材整组</td><td>glMaterialiv</td><td>照材整组(脸,材料,数组)</td><td>指定照明模型的材料参数。</td></tr>
<tr><td>矩阵模式</td><td>glMatrixMode</td><td>矩阵模式(模式)</td><td>指定哪个矩阵是当前矩阵。</td></tr>
<tr><td>乘矩阵双</td><td>glMultMatrixd</td><td>乘矩阵双(矩阵)</td><td>将当前矩阵乘以任意矩阵。</td></tr>
<tr><td>乘矩阵小</td><td>glMultMatrixf</td><td>乘矩阵小(矩阵)</td><td>将当前矩阵乘以任意矩阵。</td></tr>
<tr><td>缩放双数</td><td>glScaled</td><td>缩放双数(x,y,z)</td><td>将当前矩阵乘以缩放矩阵。</td></tr>
<tr><td>缩放小数</td><td>glScalef</td><td>缩放小数(x,y,z)</td><td>将当前矩阵乘以缩放矩阵。</td></tr>
<tr><td>转矩双数</td><td>glTranslated</td><td>转矩双数(x,y,z)</td><td>将当前矩阵乘以转矩矩阵。</td></tr>
<tr><td>转矩小数</td><td>glTranslatef</td><td>转矩小数(x,y,z)</td><td>将当前矩阵乘以转矩矩阵。</td></tr>
<tr><td>旋转双数</td><td>glRotated</td><td>旋转双数(角度,x,y,z)</td><td>将当前矩阵乘以旋转矩阵。</td></tr>
<tr><td>旋转小数</td><td>glRotatef</td><td>旋转小数(角度,x,y,z)</td><td>将当前矩阵乘以旋转矩阵。</td></tr>
<tr><td>二点双数</td><td>glVertex2d</td><td>二点双数(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点双组</td><td>glVertex2dv</td><td>二点双组(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点小数</td><td>glVertex2f</td><td>二点小数(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点小组</td><td>glVertex2fv</td><td>二点小组(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点整数</td><td>glVertex2i</td><td>二点整数(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点整组</td><td>glVertex2iv</td><td>二点整组(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点短数</td><td>glVertex2s</td><td>二点短数(x,y)</td><td>指定顶点。</td></tr>
<tr><td>二点短组</td><td>glVertex2sv</td><td>二点短组(x,y)</td><td>指定顶点。</td></tr>
<tr><td>三点双数</td><td>glVertex3d</td><td>三点双数(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点双组</td><td>glVertex3dv</td><td>三点双组(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点小数</td><td>glVertex3f</td><td>三点小数(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点小组</td><td>glVertex3fv</td><td>三点小组(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点整数</td><td>glVertex3i</td><td>三点整数(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点整组</td><td>glVertex3iv</td><td>三点整组(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点短数</td><td>glVertex3s</td><td>三点短数(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>三点短组</td><td>glVertex3sv</td><td>三点短组(x,y,z)</td><td>指定顶点。</td></tr>
<tr><td>四点双数</td><td>glVertex4d</td><td>四点双数(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点双组</td><td>glVertex4dv</td><td>四点双组(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点小数</td><td>glVertex4f</td><td>四点小数(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点小组</td><td>glVertex4fv</td><td>四点小组(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点整数</td><td>glVertex4i</td><td>四点整数(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点整组</td><td>glVertex4iv</td><td>四点整组(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点短数</td><td>glVertex4s</td><td>四点短数(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>四点短组</td><td>glVertex4sv</td><td>四点短组(x,y,z,w)</td><td>指定顶点。</td></tr>
<tr><td>顶点数组</td><td>glVertexPointer</td><td>顶点数组(大小,类型,步幅,指针)</td><td>定义顶点数据的数组</td></tr>
<tr><td>设置视区</td><td>glViewport</td><td>设置视区(左,上,宽,高)</td><td>设置视区</td></tr>
<tr><td>复制渲染</td><td>wglCopyContext</td><td>复制渲染(源,目标,方式)</td><td>将所选的呈现状态组复制到另一个OpenGL渲染设备。</td></tr>
<tr><td>创建渲染</td><td>wglCreateContext</td><td>渲染=创建渲染(设备)</td><td>在hdc设备上创建一个新的 OpenGL 渲染设备。呈现设备具有与hdc设备相同的像素格式。</td></tr>
<tr><td>渲染函数</td><td>wglGetProcAddress</td><td>渲染函数(函数名)</td><td>返回用于当前OpenGL渲染设备的扩展函数地址。</td></tr>
<tr><td>新渲染层</td><td>wglCreateLayerContext</td><td>新渲染层(设备,层面)</td><td>创建一个新的OpenGL渲染设备。用于绘制到指定层平面。</td></tr>
<tr><td>指定渲染</td><td>wglMakeCurrent</td><td>指定渲染(设备,渲染)</td><td>将指定的OpenGL渲染作为调用线程的当前渲染。</td></tr>
<tr><td>删除渲染</td><td>wglDeleteContext</td><td>删除渲染(渲染)</td><td>删除指定的OpenGL渲染。</td></tr>
<tr><td>层面信息</td><td>wglDescribeLayerPlane</td><td>层面信息(设备,层面,哪面,长度,结构)</td><td>获取有关给定像素格式的层平面的信息。</td></tr>
<tr><td>当前渲染</td><td>wglGetCurrentContext</td><td>渲染=当前渲染</td><td>返回当前OpenGL设备的渲染呈现。</td></tr>
<tr><td>当前设备</td><td>wglGetCurrentDC</td><td>设备=当前设备</td><td>返回当前OpenGL设备的上下文。</td></tr>
<tr><td>层面色板</td><td>wglGetLayerPaletteEntries</td><td>层面色板(设备,哪面,色板项,色板数,色组)</td><td>从指定设备的给定颜色索引层平面中检索调色板条目。</td></tr>
<tr><td>色板层面</td><td>wglSetLayerPaletteEntries</td><td>色板层面(设备,哪面,色板项,色板数,色组)</td><td>为指定的设备设置给定颜色索引层平面中的调色板条目。</td></tr>
<tr><td>映射色板</td><td>wglRealizeLayerPalette</td><td>映射色板(设备,哪面,物理)</td><td>将给定颜色索引层平面中的调色板条目映射到物理调色板或初始化 RGBA 层平面的调色板。</td></tr>
<tr><td>共享列表</td><td>wglShareLists</td><td>共享列表(渲染1,渲染2)</td><td>允许多个渲染共享单个显示列表空间。</td></tr>
<tr><td>交换层面</td><td>wglSwapLayerBuffers</td><td>交换层面(设备,层面)</td><td>交换由指定设备上下文引用的窗口覆盖层、下层和主平面中的前后缓冲区。</td></tr>
</table>


<font color="#0000FF" size="6"><a name="绘图对象">绘图对象库</a>-ddraw.dll</font><br>
<font color="#0000FF">驱动图形库-函数列表</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>图驱创建</td><td>DirectDrawCreate</td><td>图驱创建(标识,@接口,0)</td><td>创建DirectDraw对象的实例。标识用设备GUID为硬件加速,用0为仿真;1模拟硬件支持;2纯仿真无硬件;成功返回0;</td></tr>
<tr><td>图驱个例</td><td>DirectDrawCreateClipper</td><td>图驱个例(0,@接口,0)</td><td>创建不与DirectDraw对象关联的对象实例。成功返回0;返回0x80070057参数错误;0x8007000E内存溢出</td></tr>
<tr><td>图驱例七</td><td>DirectDrawCreateEx</td><td>图驱例七(标识,@接口,例七,0)</td><td>创建支持DirectX 7.0 中的 Direct3D 接口集的DirectDraw对象的实例。标识用设备GUID为硬件加速,用0为仿真;1模拟硬件支持;2纯仿真无硬件;成功返回0;例七必须是IID_IDirectDraw7</td></tr>
<tr><td>图驱枚举</td><td>DirectDrawEnumerateA</td><td>图驱枚举(@函数,传参)</td><td>枚举主显示设备和一个非显示设备(如 三维加速器)</td></tr>
<tr><td>图驱列举</td><td>DirectDrawEnumerateExA</td><td>图驱列举(@函数,传参,标志)</td><td>枚举计算机上安装的所有 DirectDraw 设备。标志:1所有桌面设备;2所有非桌面设备;4枚举主设备</td></tr>
<tr><td>枚举设备</td><td>DDEnumCallback</td><td>枚举设备(标识,名称,说明,传参)</td><td>图驱枚举的回调函数,返回非零值继续枚举,返回零停止枚举</td></tr>
<tr><td>列举设备</td><td>DDEnumCallback</td><td>列举设备(标识,名称,说明,传参,设备)</td><td>图驱列举的回调函数,返回非零值继续枚举,返回零停止枚举</td></tr>
<tr><td>回显模式</td><td>EnumModesCallback2</td><td>回显模式(结构,传参)</td><td>IDirectDraw7的EnumDisplayModes方法的回调函数;提供监视器频率和可创建的模式DDSURFACEDESC2 结构。</td></tr>
<tr><td>回附加面</td><td>EnumSurfacesCallback7</td><td>回附加面(接口,结构,传参)</td><td>IDirectDraw7的EnumAttachedSurfaces和EnumOverlayZOrders方法的回调函数;提供附加图面的IDirectDrawSurface7接口指针和描述附加图面的DDSURFACEDESC2 结构。</td></tr>
</table><br>
<font color="#0000FF">驱动图形库——常量数值</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>常量</td><td>作用</td></tr>
<tr><td>独占全屏</td><td>DDSCL_FULLSCREEN</td><td>1</td><td>独占模式所有者负责整个主图面。</td></tr>
<tr><td>按键呼出</td><td>DDSCL_ALLOWREBOOT</td><td>2</td><td>允许 CTRL+ALT+DEL 在独占 (全屏) 模式下正常运行。</td></tr>
<tr><td>窗口不变</td><td>DDSCL_NOWINDOWCHANGES</td><td>4</td><td>不允许 DirectDraw 在激活时最小化或还原应用程序窗口。</td></tr>
<tr><td>普通程序</td><td>DDSCL_NORMAL</td><td>8</td><td>应用程序充当典型的 Windows 应用程序。不能用独占全屏和模版模式</td></tr>
<tr><td>独占级别</td><td>DDSCL_EXCLUSIVE</td><td>$10</td><td>请求独占级别。必须与 独占全屏 标志一起使用。</td></tr>
<tr><td>模版模式</td><td>DDSCL_ALLOWMODEX</td><td>$40</td><td>允许使用模式 X 显示模式。仅当独占全屏级别时，才能使用此标志。</td></tr>
<tr><td>图面功能</td><td>DDSD_CAPS</td><td>1</td><td>图面说明类：功能成员有效。</td></tr>
<tr><td>图面高度</td><td>DDSD_HEIGHT</td><td>2</td><td>图面说明类：高度成员有效。</td></tr>
<tr><td>图面宽度</td><td>DDSD_WIDTH</td><td>4</td><td>图面说明类：宽度成员有效。</td></tr>
<tr><td>图面区数</td><td>DDSD_BACKBUFFERCOUNT</td><td>$20</td><td>图面说明类：区数成员有效。</td></tr>
<tr><td>图面全开</td><td>DDSD_ALL</td><td>$FF9EE</td><td>图面说明类：所有成员全部有效。</td></tr>
<tr><td>图面透明</td><td>DDSCAPS_ALPHA</td><td>2</td><td>图面功能标志：此图面仅包含 alpha 信息。</td></tr>
<tr><td>图面后台</td><td>DDSCAPS_BACKBUFFER</td><td>4</td><td>图面功能标志：此图面是表面翻转结构的后台缓冲区。</td></tr>
<tr><td>图面复合</td><td>DDSCAPS_COMPLEX</td><td>8</td><td>图面功能标志：此图面是一个复杂的多层表面,附加表面到根图面。</td></tr>
<tr><td>图面局部</td><td>DDSCAPS_FLIP</td><td>$10</td><td>图面功能标志：此图面是表面翻转结构的一部分。图面区数至少设置为1</td></tr>
<tr><td>图面前区</td><td>DDSCAPS_FRONTBUFFER</td><td>$20</td><td>图面功能标志：此图面是表面翻转结构的前缓冲区。</td></tr>
<tr><td>图面内面</td><td>DDSCAPS_OFFSCREENPLAIN</td><td>$40</td><td>图面功能标志：此图面是任何非屏幕外表面，不是覆盖、纹理、z缓冲区、前缓冲区、后缓冲区或alpha 表面。它用于识别普通表面。</td></tr>
<tr><td>图面覆盖</td><td>DDSCAPS_OVERLAY</td><td>$80</td><td>图面功能标志：此图面是一个覆盖层。是否可见取决于它当前是否叠加到主表面。</td></tr>
<tr><td>图面色板</td><td>DDSCAPS_PALETTE</td><td>$100</td><td>图面功能标志：此图面允许创建唯一色板对象并将其附加到此图面。</td></tr>
<tr><td>图面正面</td><td>DDSCAPS_PRIMARYSURFACE</td><td>$200</td><td>图面功能标志：此图面是主图面。它表示目前对用户可见的内容。</td></tr>
<tr><td>图面左面</td><td>DDSCAPS_PRIMARYSURFACELEFT</td><td>0</td><td>图面功能标志：此表面是左眼的主表面。它表示用户左眼此时可见的内容</td></tr>
<tr><td>图面系统</td><td>DDSCAPS_SYSTEMMEMORY</td><td>$800</td><td>图面功能标志：此图面内存是从系统内存中分配。Windows 2000 或更高版本会导致禁用 DirectDraw。</td></tr>
<tr><td>图面纹理</td><td>DDSCAPS_TEXTURE</td><td>$1000</td><td>图面功能标志：此表面可用作 3D 纹理。它并不指示表面是否用于该目的。</td></tr>
<tr><td>图面渲染</td><td>DDSCAPS_3DDEVICE</td><td>$2000</td><td>图面功能标志：此图面可用于 3D 渲染。如果为堆设置了此标志，则不会从该堆分配图面。</td></tr>
<tr><td>图面显存</td><td>DDSCAPS_VIDEOMEMORY</td><td>$4000</td><td>图面功能标志：此图面存在于显示内存中。</td></tr>
<tr><td>图面显现</td><td>DDSCAPS_VISIBLE</td><td>$8000</td><td>图面功能标志：对此图面所做的更改将立即可见。它始终为主表面以及覆盖层和纹理贴图设置</td></tr>
<tr><td>图面写入</td><td>DDSCAPS_WRITEONLY</td><td>$10000</td><td>图面功能标志：仅允许对图面进行写入访问。Win2000及以上禁用</td></tr>
<tr><td>图面纵深</td><td>DDSCAPS_ZBUFFER</td><td>$20000</td><td>图面功能标志：此图面是z缓冲区。包含哪些像素是否可见的位深度信息。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>图面说明类</td><td>DDSURFACEDESC</td><td>108</td><td>包含驱动程序要创建的图面的说明。</td></tr>
<tr><th colspan=4>图面说明类——成员表</th></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构的大小，以字节为单位</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>指定结构的哪些成员包含有效数据。全部有效：$FF9EE</td></tr>
<tr><td>高度</td><td>dwHeight</td><td>整数</td><td>指定图面的高度（以像素为单位）。标志:2</td></tr>
<tr><td>宽度</td><td>dwWidth</td><td>整数</td><td>指定图面的宽度（以像素为单位）。标志:4</td></tr>
<tr><td>字数</td><td>lPitch/dwMipMapCount</td><td>整数</td><td>扫描行字数:8/指定 mipmap 级别的数目。标志:$20000</td></tr>
<tr><td>分配</td><td>dwLinearSize/dwZBufferBitDepth</td><td>整数</td><td>指定无格式、后期分配的优化图面的大小:$80000/指定 z 缓冲区的深度（像素位）:$40</td></tr>
<tr><td>区数</td><td>dwBackBufferCount/dwRefreshRate</td><td>整数</td><td>指定与图面关联的后台缓冲区数:$20/指定在描述显示器的刷新率（赫兹）,标志:$40000</td></tr>
<tr><td>透明</td><td>dwAlphaBitDepth</td><td>整数</td><td>指定alpha缓冲区的深度（像素位）。标志:$80</td></tr>
<tr><td>预留</td><td>dwReserved</td><td>整数</td><td>保留，应设置为零。</td></tr>
<tr><td>内存</td><td>lpSurface</td><td>整数</td><td>指定关联 Surface 内存的地址。标志:$800</td></tr>
<tr><td>低覆盖色</td><td>ddckCKDestOverlay.dwColorSpaceLowValue</td><td>整数</td><td>指定目标覆盖使用的颜色键。标志:$2000</td></tr>
<tr><td>高覆盖色</td><td>ddckCKDestOverlay.dwColorSpaceHighValue</td><td>整数</td><td>指定目标覆盖使用的颜色键。</td></tr>
<tr><td>低转换色</td><td>ddckCKDestBlt.dwColorSpaceLowValue</td><td>整数</td><td>指定目标转换操作使用的颜色键。标志:$4000</td></tr>
<tr><td>高转换色</td><td>ddckCKDestBlt.dwColorSpaceHighValue</td><td>整数</td><td>指定目标转换操作使用的颜色键。</td></tr>
<tr><td>低覆盖源</td><td>ddckCKSrcOverlay.dwColorSpaceLowValue</td><td>整数</td><td>指定源覆盖使用的颜色键。标志:$8000</td></tr>
<tr><td>高覆盖源</td><td>ddckCKSrcOverlay.dwColorSpaceHighValue</td><td>整数</td><td>指定源覆盖使用的颜色键。</td></tr>
<tr><td>低转换源</td><td>ddckCKSrcBlt.dwColorSpaceLowValue</td><td>整数</td><td>指定源转换操作使用的颜色键。标志:$10000</td></tr>
<tr><td>高转换源</td><td>ddckCKSrcBlt.dwColorSpaceHighValue</td><td>整数</td><td>指定源转换操作使用的颜色键。</td></tr>
<tr><td>长度</td><td>ddpfPixelFormat.dwSize</td><td>整数</td><td>结构的大小，以字节为单位。标志:$1000</td></tr>
<tr><td>选项</td><td>ddpfPixelFormat.dwFlags</td><td>整数</td><td>指定结构的哪些成员包含有效数据。</td></tr>
<tr><td>代码</td><td>ddpfPixelFormat.dwFourCC</td><td>整数</td><td>一个 FourCC 代码。</td></tr>
<tr><td>色位</td><td>ddpfPixelFormat.dwRGBBitCount</td><td>整数</td><td>每个像素的 RGB 位 (4、8、16、24 或 32) 。</td></tr>
<tr><td>色码</td><td>ddpfPixelFormat.dwYUVBitCount</td><td>整数</td><td>每个像素的 YUV 位 (4、8、16、24 或 32) 。</td></tr>
<tr><td>纵深</td><td>ddpfPixelFormat.dwZBufferBitDepth</td><td>整数</td><td>Z 缓冲区位深度 (8、16、24 或 32) 。</td></tr>
<tr><td>位深</td><td>ddpfPixelFormat.dwAlphaBitDepth</td><td>整数</td><td>仅限 alpha 的图面 (DDPF_ALPHA) 的 Alpha 通道位深度 (1、2、4 或 8) 。</td></tr>
<tr><td>亮位</td><td>ddpfPixelFormat.dwLuminanceBitCount</td><td>整数</td><td>每个像素的总亮度位数。仅适用于仅亮度和亮度 alpha 图面。</td></tr>
<tr><td>功能</td><td>ddsCaps.dwCaps</td><td>整数</td><td>定义图面对象的功能。标志:1</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="DDCOLORCONTROL">颜色控件类</a></td><td>DDCOLORCONTROL</td><td>40</td><td>定义与 Microsoft DirectDraw 视频端口扩展关联的颜色控件， (VPE) 对象。</td></tr>
<tr><th colspan=4>颜色控件类——成员表</th></tr>
<tr><td>大小</td><td>dwSize</td><td>整数</td><td>结构的大小，以字节为单位</td></tr>
<tr><td>标志</td><td>dwFlags</td><td>整数</td><td>指定结构的哪些成员包含有效数据。</td></tr>
<tr><td>亮度</td><td>lBrightness</td><td>整数</td><td>指定黑级别(亮度强度) 范围为0 到 10000，默认值750 (7.5 IRE) 。标志:1</td></tr>
<tr><td>对比度</td><td>lContrast</td><td>整数</td><td>指定较高强度和较低强度亮度值之间的相对差值。范围0到20000，默认值为 10000 (100 IRE) 。标志:2</td></tr>
<tr><td>角度</td><td>lHue</td><td>整数</td><td>指定色度组件的相位关系。有效范围为-180到180度。默认值0度。标志:4</td></tr>
<tr><td>色度</td><td>lSaturation</td><td>整数</td><td>指定颜色强度。范围0到20000，默认值10000 (100 IRE)。标志:8</td></tr>
<tr><td>锐度</td><td>lSharpness</td><td>整数</td><td>指定以任意单位表示的锐度。有效范围0到10，默认值为5。标志:$10</td></tr>
<tr><td>校正</td><td>lGamma</td><td>整数</td><td>控制应用于亮度值的伽玛校正量。有效范围1到500个伽玛单位，默认值为1。标志:$20</td></tr>
<tr><td>颜色</td><td>lColorEnable</td><td>整数</td><td>指定指示是否使用颜色的标志。0不使用颜色;1使用颜色。默认值1。标志:$40</td></tr>
<tr><td>预留</td><td>dwReserved1</td><td>整数</td><td>保留，应忽略。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="DDGAMMARAMP">伽玛渐变类</a></td><td>DDGAMMARAMP</td><td>768</td><td>定义红色、绿色和蓝色渐变数据。</td></tr>
<tr><th colspan=4>伽玛渐变类——成员表</th></tr>
<tr><td>红</td><td>red[256]</td><td>整形</td><td>描述红色伽玛渐变的数组。</td></tr>
<tr><td>绿</td><td>green[256]</td><td>整形</td><td>描述红色伽玛渐变的数组。</td></tr>
<tr><td>蓝</td><td>blue[256]</td><td>整形</td><td>描述红色伽玛渐变的数组。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDraw</td><td>驱动绘图对象</td><td>使用驱动显示接口的方法创建绘图对象并使用系统级变量。</td></tr>
<tr><th colspan=3>驱动绘图对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Compact</td><td>协议</td><td>目前未实现此方法。</td></tr>
<tr><td>CreateClipper</td><td>裁剪(0,@接口,0)</td><td>创建裁剪对象。最后参数为COM聚合功能预留接口,现在不能用</td></tr>
<tr><td>CreatePalette</td><td>调色板(索引位,颜色组,@接口,0)</td><td>创建调色板对象。索引位:1四位(16色);2引用8位色;4=八位(256色);<br>$10连正面;$20左视图;$40定义256色;$80刷新率同步;$100一位(黑白);$200=二位(四色);$400=透明通道</td></tr>
<tr><td>CreateSurface</td><td>创建面(图面类,@接口,0)</td><td>创建图面对象。</td></tr>
<tr><td>DuplicateSurface</td><td>复制面(接口,@新接口)</td><td>复制图面对象。</td></tr>
<tr><td>EnumDisplayModes</td><td>枚举显示(模式,图面类,传参,@回显模式)</td><td>枚举硬件提供的图面说明兼容的所有显示模式。模式:1不同刷新率;2标准VGA</td></tr>
<tr><td>EnumSurfaces</td><td>枚举图面(模式,图面类,传参,@回附加面)</td><td>枚举满足指定图面说明的所有现有或可能的图面。模式:1所有图面;2匹配指定;4不匹配指定;8匹配第一个(同2一起用);$10=搜索指定现有图面;</td></tr>
<tr><td>FlipToGDISurface</td><td>写主图面</td><td>使 GDI 写入主图面的图面。</td></tr>
<tr><td>GetCaps</td><td>获取功能(@硬件,@仿真)</td><td>检索硬件的设备驱动程序的功能，以及HEL(硬件仿真层)的功能。参数为0不获取</td></tr>
<tr><td>GetDisplayMode</td><td>取显示(图面类)</td><td>检索当前显示模式。</td></tr>
<tr><td>GetFourCCCodes</td><td>取四字符(@条数,@代码数组)</td><td>检索对象支持的FOURCC(四字符)的代码或代码数。</td></tr>
<tr><td>GetGDISurface</td><td>图面接口(@接口)</td><td>检索图面对象，该对象当前表示GDI视为主图面的图面内存。</td></tr>
<tr><td>GetMonitorFrequency</td><td>频率(@数值)</td><td>检索对象控制的监视器的频率(Hz) 。</td></tr>
<tr><td>GetScanLine</td><td>扫描(@线)</td><td>检索当前正在监视器上绘制的扫描线。</td></tr>
<tr><td>GetVerticalBlankStatus</td><td>直白(@是否)</td><td>检索垂直空白的状态。如果出现垂直空白为真,否则为假</td></tr>
<tr><td>Initialize</td><td>初始化(类标识)</td><td>使用"创建对象"需要进行初始化。</td></tr>
<tr><td>RestoreDisplayMode</td><td>重置显示</td><td>将主图面的显示设备硬件的模式重置为调用 "改显示"方法之前的状态。需要独占级别访问权限。</td></tr>
<tr><td>SetCooperativeLevel</td><td>顶级行为(窗口,模式)</td><td>确定应用程序的顶级行为。模式:1独占全屏;2按键呼出;4窗口不变;8普通程序;$10独占级别;$40模版模式</td></tr>
<tr><td>SetDisplayMode</td><td>改显示(宽度,高度,位数)</td><td>设置显示设备硬件的显示模式。</td></tr>
<tr><td>WaitForVerticalBlank</td><td>垂直同步(间隔,0)</td><td>帮助应用程序将自身与垂直空白间隔同步。间隔:1垂直空间隔开始时返回;2垂直空白开始时触发事件(不支持);4垂直空白间隔结束且显示开始时返回;</td></tr>
<tr><td>GetAvailableVidMem</td><td>可用内存(功能,@总内存,@显示量)</td><td>检索给定类型图面的可用显示内存总量和当前可用的显示内存量。(版本>=2.0)</td></tr>
<tr><td>GetSurfaceFromDC</td><td>设备接口(设备,@接口)</td><td>根据其GDI设备句柄检索图面的接口。(版本>=4.0)</td></tr>
<tr><td>RestoreAllSurfaces</td><td>还原图面</td><td>按创建顺序还原为对象创建的所有图面。(版本>=4.0)</td></tr>
<tr><td>TestCooperativeLevel</td><td>协作状态</td><td>报告窗口或全屏应用程序的驱动显示设备的当前协作级别状态。(版本>=4.0)</td></tr>
<tr><td>GetDeviceIdentifier</td><td>驱动信息(信息,标志)</td><td>获取有关设备驱动程序的信息。标志:0=基准信息;1=三维加速显卡(版本>=4.0)</td></tr>
<tr><td>StartModeTest</td><td>显示适配(分辨率组,组数,标志)</td><td>启动测试以使用当前显示适配器和监视器组合的刷新率信息更新系统注册表。标志:1不测试适配并返回是否测试标识的分辨率(版本>=7.0)</td></tr>
<tr><td>EvaluateMode</td><td>测评显示(模式,@剩余秒数)</td><td>在调用"自动适配"后使用，以通过或失败测试呈现的每个模式，并单步执行模式，直到测试完成。模式:1测试通过;2测试失败;(版本>=7.0)</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDraw7</td><td>驱动绘图对象</td><td>使用驱动显示接口的方法创建绘图对象并使用系统级变量。</td></tr>
<tr><th colspan=3>驱动绘图对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Compact</td><td>协议</td><td>目前未实现此方法。</td></tr>
<tr><td>CreateClipper</td><td>裁剪(0,@接口,0)</td><td>创建裁剪对象。最后参数为COM聚合功能预留接口,现在不能用</td></tr>
<tr><td>CreatePalette</td><td>调色板(索引位,颜色组,@接口,0)</td><td>创建调色板对象。索引位:1四位(16色);2引用8位色;4=八位(256色);<br>$10连正面;$20左视图;$40定义256色;$80刷新率同步;$100一位(黑白);$200=二位(四色);$400=透明通道</td></tr>
<tr><td>CreateSurface</td><td>创建面(图面类,@接口,0)</td><td>创建图面对象。</td></tr>
<tr><td>DuplicateSurface</td><td>复制面(接口,@新接口)</td><td>复制图面对象。</td></tr>
<tr><td>EnumDisplayModes</td><td>枚举显示(模式,图面类,传参,@回显模式)</td><td>枚举硬件提供的图面说明兼容的所有显示模式。模式:1不同刷新率;2标准VGA</td></tr>
<tr><td>EnumSurfaces</td><td>枚举图面(模式,图面类,传参,@回附加面)</td><td>枚举满足指定图面说明的所有现有或可能的图面。模式:1所有图面;2匹配指定;4不匹配指定;8匹配第一个(同2一起用);$10=搜索指定现有图面;</td></tr>
<tr><td>FlipToGDISurface</td><td>写主图面</td><td>使 GDI 写入主图面的图面。</td></tr>
<tr><td>GetCaps</td><td>获取功能(@硬件,@仿真)</td><td>检索硬件的设备驱动程序的功能，以及HEL(硬件仿真层)的功能。参数为0不获取</td></tr>
<tr><td>GetDisplayMode</td><td>取显示(图面类)</td><td>检索当前显示模式。</td></tr>
<tr><td>GetFourCCCodes</td><td>取四字符(@条数,@代码数组)</td><td>检索对象支持的FOURCC(四字符)的代码或代码数。</td></tr>
<tr><td>GetGDISurface</td><td>图面接口(@接口)</td><td>检索图面对象，该对象当前表示GDI视为主图面的图面内存。</td></tr>
<tr><td>GetMonitorFrequency</td><td>频率(@数值)</td><td>检索对象控制的监视器的频率(Hz) 。</td></tr>
<tr><td>GetScanLine</td><td>扫描(@线)</td><td>检索当前正在监视器上绘制的扫描线。</td></tr>
<tr><td>GetVerticalBlankStatus</td><td>直白(@是否)</td><td>检索垂直空白的状态。如果出现垂直空白为真,否则为假</td></tr>
<tr><td>Initialize</td><td>初始化(类标识)</td><td>使用"创建对象"需要进行初始化。</td></tr>
<tr><td>RestoreDisplayMode</td><td>重置显示</td><td>将主图面的显示设备硬件的模式重置为调用 "改显示"方法之前的状态。需要独占级别访问权限。</td></tr>
<tr><td>SetCooperativeLevel</td><td>顶级行为(窗口,模式)</td><td>确定应用程序的顶级行为。模式:1独占全屏;2按键呼出;4窗口不变;8普通程序;$10独占级别;$40模版模式</td></tr>
<tr><td>SetDisplayMode</td><td>改显示(宽度,高度,位数,刷新率,模式)</td><td>设置显示设备硬件的模式。0为默认刷新率,模式建议用0,指定为2是非标准VGA</td></tr>
<tr><td>WaitForVerticalBlank</td><td>垂直同步(间隔,0)</td><td>帮助应用程序将自身与垂直空白间隔同步。间隔:1垂直空间隔开始时返回;2垂直空白开始时触发事件(不支持);4垂直空白间隔结束且显示开始时返回;</td></tr>
<tr><td>GetAvailableVidMem</td><td>可用内存(功能,@总内存,@显示量)</td><td>检索给定类型图面的可用显示内存总量和当前可用的显示内存量。</td></tr>
<tr><td>GetSurfaceFromDC</td><td>设备接口(设备,@接口)</td><td>根据其GDI设备句柄检索图面的接口。</td></tr>
<tr><td>RestoreAllSurfaces</td><td>还原图面</td><td>按创建顺序还原为对象创建的所有图面。</td></tr>
<tr><td>TestCooperativeLevel</td><td>协作状态</td><td>报告窗口或全屏应用程序的驱动显示设备的当前协作级别状态。</td></tr>
<tr><td>GetDeviceIdentifier</td><td>驱动信息(信息,标志)</td><td>获取有关设备驱动程序的信息。标志:0=基准信息;1=三维加速显卡</td></tr>
<tr><td>StartModeTest</td><td>显示适配(分辨率组,组数,标志)</td><td>启动测试以使用当前显示适配器和监视器组合的刷新率信息更新系统注册表。标志:1不测试适配并返回是否测试标识的分辨率</td></tr>
<tr><td>EvaluateMode</td><td>测评显示(模式,@剩余秒数)</td><td>在调用"自动适配"后使用，以通过或失败测试呈现的每个模式，并单步执行模式，直到测试完成。模式:1测试通过;2测试失败;</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDrawSurface7</td><td>驱动图面对象</td><td>使用驱动显示面接口的方法创建图面对象并使用系统级变量。</td></tr>
<tr><th colspan=3>驱动图面对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>AddAttachedSurface</td><td>添加图面(接口)</td><td>将指定的 z 缓冲区图面连接到此图面。</td></tr>
<tr><td>AddOverlayDirtyRect</td><td>添加覆盖(矩形)</td><td>此方法当前未实现。</td></tr>
<tr><td>Blt</td><td>位传(目标矩形,图面,源矩形,标志,光栅)</td><td>执行位块传输。标志:$200=顺序异步;$400=填充颜色;$800指定光栅类型;$1000丢弃光栅;$2000使用目标颜色键;$4000指定目标颜色键;$8000使用源颜色键;<br>$10000指定源颜色键;$20000指定光栅操作功能;$40000指定旋转角度;$8000000=返回传输状态</td></tr>
<tr><td>BltBatch</td><td>批传(位块组,操作数,0)</td><td>此方法当前未实现。</td></tr>
<tr><td>BltFast</td><td>快传(x,y,图面,矩形,标志)</td><td>使用源颜色键或目标颜色键执行源复制位块或透明位块。标志:0=普通复制;1按源透明色;2用目标透明;$10等待忙完</td></tr>
<tr><td>DeleteAttachedSurface</td><td>分离(0,图面)</td><td>分离一个或多个附加表面。</td></tr>
<tr><td>EnumAttachedSurfaces</td><td>枚举图面(传参,@回附加面)</td><td>枚举连接到此图面的所有图面。</td></tr>
<tr><td>EnumOverlayZOrders</td><td>枚举覆面(模式,传参,@回附加面)</td><td>枚举指定目标上的覆盖图面。模式:0=从后到前;1=从前到后;</td></tr>
<tr><td>Flip</td><td>翻转(图面,标志)</td><td>使与后台缓冲区图面关联的表面内存与前缓冲区表面相关联。标志:1=尝试等待;2=偶数场视频;4奇数视频;8不同步;$10=立体声;$20=不需等待;<br>$2000000=每秒垂直同步翻转;$3000000=隔三同步;$4000000=隔四同步</td></tr>
<tr><td>GetAttachedSurface</td><td>取附加图(功能,@图面)</td><td>获取具有指定功能的附加图面，并递增检索到的接口的引用计数</td></tr>
<tr><td>GetBltStatus</td><td>取块传(标志)</td><td>获取位块传输 (bitblt) 操作的状态。标志:1=传输开始;2=传输完成;返回:0成功;0x88760082=无效对象;0x8876023F=无问题;0x887601AE=线程锁定被拒;<br>0x887601C2=图面不存在;0x8876021C=正在传输或图面不完整;0x80070057=错误参数;0x80004001=不支持操作。</td></tr>
<tr><td>GetCaps</td><td>获取功能(@功能)</td><td>检索图面的功能。</td></tr>
<tr><td>GetClipper</td><td>取剪辑(剪辑器)</td><td>索与此图面关联的剪辑器对象，并递增返回的剪辑器的引用计数。</td></tr>
<tr><td>GetColorKey</td><td>取颜色键(标志,色键)</td><td>检索此图面的颜色键值。标志:2=块传目标色键;4=覆盖目标色键;8=块传源键;$10覆盖源键</td></tr>
<tr><td>GetDC</td><td>取设备(@设备)</td><td>为此图面创建设备上下文的 GDI 兼容句柄。</td></tr>
<tr><td>GetFlipStatus</td><td>取翻转(标志)</td><td>检索有关此图面是否已完成翻转过程的状态。标志:1=传输开始;2=传输完成;返回:0成功;0x88760082=无效对象;0x8876023F=无问题;<br>0x887601AE=线程锁定被拒;0x887601C2=图面不存在;0x8876021C=正在传输或图面不完整;0x80070057=错误参数;0x80004001=不支持操作。</td></tr>
<tr><td>GetOverlayPosition</td><td>取坐标(@x,@y)</td><td>检索可见的活动覆盖图面的显示坐标。</td></tr>
<tr><td>GetPalette</td><td>取调色板(@色板)</td><td>检索与此图面关联的调色板对象，并递增返回的调色板的引用计数。</td></tr>
<tr><td>GetPixelFormat</td><td>像素格式(格式)</td><td>检索此图面的颜色和像素格式。</td></tr>
<tr><td>GetSurfaceDesc</td><td>图面说明(图面说明类)</td><td>检索此图面在其当前条件下的说明。调用前只需初始化结构大小</td></tr>
<tr><td>Initialize</td><td>初始化(对象,图面说明类)</td><td>初始化图面对象。</td></tr>
<tr><td>IsLost</td><td>丢弃</td><td>确定是否释放了与图面对象关联的表面内存。返回：0=尚未释放;0x88760082=无效对象;0x80070057=错误参数;0x887601C2=图面不存在;</td></tr>
<tr><td>Lock</td><td>锁定(矩形,图面类,标志,0)</td><td>获取指向表面内存的指针。矩形为0是整个画面,标志:1=尝试等待;$10=只读画面;$20=启用写入;$800=不互斥锁;$1000=不写引用顶点;$2000=重写顶点;$4000=不需等待;</td></tr>
<tr><td>ReleaseDC</td><td>释放设备(设备)</td><td>释放以前使用"取设备"方法获取的设备上下文的句柄。</td></tr>
<tr><td>Restore</td><td>还原图面</td><td>还原已丢失的图面。当与图面对象关联的面内存已释放时，将发生这种情况。</td></tr>
<tr><td>SetClipper</td><td>改剪辑(剪辑器)</td><td>将剪辑器对象附加到此图面或从中删除一个对象(参数为0)。</td></tr>
<tr><td>SetColorKey</td><td>顶级行为(模式,颜色键)</td><td>设置图面对象的颜色键值。模式:1=含颜色空间;2=位传目标颜色;4=覆盖目标颜色;8=位传源颜色;$10=覆盖源颜色</td></tr>
<tr><td>SetOverlayPosition</td><td>改坐标(x,y)</td><td>设更改覆盖图面的显示坐标。</td></tr>
<tr><td>SetPalette</td><td>改调色板(色板)</td><td>将调色板对象附加到图面或从图面分离一个对象。</td></tr>
<tr><td>Unlock</td><td>解锁(矩形)</td><td>通知绘图对象直接图面操作已完成。矩形为0是整个图面</td></tr>
<tr><td>UpdateOverlay</td><td>更新覆盖(源矩形,图面,目标矩形,标志,DDFX)</td><td>重新定位或修改覆盖图面的视觉属性。 标志:2=覆盖目标透明通道数值;4=指定目标透明度;8=覆盖目标透明通道地址;$10=边框透明通道;$20=附加像素格式透明;<br>$40=源透明通道数值;$80=指定源透明度;$100=源透明通道地址;$200=关闭覆盖面;$400=目标关联颜色键;$800=目标覆盖颜色键;$1000=源关联颜色键;$2000=源覆盖颜色键;<br>$4000=显示覆盖面;$8000=添加矩形到覆盖面;$10000=重绘覆盖面矩形;$20000=重绘整个覆盖面;$80000=用FX定义特效;$100000=垂直同步自动翻转;$200000=隔行扫描无断帧;<br>$400000=隔行编码持久有效;$800000=交错内存数据;$1000000=硬件隔行扫描编码;$2000000=包含ARGB缩放因子;$4000000=ARGB缩放因子可降级</td></tr>
<tr><td>UpdateOverlayDisplay</td><td>更新显示(预留)</td><td>方法当前未实现。</td></tr>
<tr><td>UpdateOverlayZOrder</td><td>更新层序(标志,图面)</td><td>设置覆盖的z顺序。标志:0=移到前面;1移到后面;2=前移一层;3=后移一层;4插到前面;5插到后面;4和5插入时需要指定图面</td></tr>
<tr><td>GetDDInterface</td><td>取接口(@接口)</td><td>检索用于创建此图面的绘图对象的接口。(版本>=2.0)</td></tr>
<tr><td>PageLock</td><td>锁定分页(0)</td><td>防止系统内存图面在位块传输时分页，直接使用内存访问 (DMA) 传输。(版本>=2.0)</td></tr>
<tr><td>PageUnlock</td><td>解锁分页(0)</td><td>解锁系统内存图面，然后允许将其分页。(版本>=2.0)</td></tr>
<tr><td>SetSurfaceDesc</td><td>设置图面(图面说明类,0)</td><td>设置现有图面的特征。(版本>=3.0)</td></tr>
<tr><td>GetPrivateData</td><td>图面数据(类标识,@缓冲,@大小)</td><td>将与此图面关联的专用数据复制到提供的缓冲区。(版本>=4.0)</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(类标识)</td><td>释放与此图面关联的指定私有数据。(版本>=4.0)</td></tr>
<tr><td>GetUniquenessValue</td><td>图面键值(@键值)</td><td>检索此图面的当前唯一性值。(版本>=4.0)</td></tr>
<tr><td>ChangeUniquenessValue</td><td>更换键值</td><td>手动更新此图面的唯一性值。(版本>=4.0)</td></tr>
<tr><td>SetPriority</td><td>改优先(级)</td><td>为此托管纹理分配纹理管理优先级。(版本>=7.0)</td></tr>
<tr><td>GetPriority</td><td>取优先(@级)</td><td>获取此托管纹理的纹理管理优先级。(版本>=7.0)</td></tr>
<tr><td>SetLOD</td><td>改细节(级)</td><td>设置托管纹理mipmap图面的最大细节级别LOD。(版本>=7.0)</td></tr>
<tr><td>GetLOD</td><td>取细节(@级)</td><td>获取托管纹理mipmap图面的最大细节级别LOD。(版本>=7.0)</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDrawPalette</td><td>驱动调色对象</td><td>应用程序使用调色板接口的方法来创建调色板对象，并使用系统级变量。</td></tr>
<tr><th colspan=3>驱动调色对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetCaps</td><td>功能(@标志)</td><td>检索调色板对象的功能。标志:1四位(16色);2引用8位色;4=八位(256色);<br>$10连正面;$20左视图;$40定义256色;$80刷新率同步;$100一位(黑白);$200=二位(四色);$400=透明通道</td></tr>
<tr><td>GetEntries</td><td>取色板(0,开头,数目,色板组)</td><td>从调色板对象检索调色板值。</td></tr>
<tr><td>Initialize</td><td>初始化(对象,0,0)</td><td>初始化调色板对象。</td></tr>
<tr><td>SetEntries</td><td>改色板(0,开头,数目,色板组)</td><td>立即更改调色板对象中的条目。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDrawClipper</td><td>驱动剪辑对象</td><td>应用程序使用剪辑器接口的方法来管理剪辑列表。</td></tr>
<tr><th colspan=3>驱动剪辑对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClipList</td><td>取副本(矩形,@区块组,@大小)</td><td>检索剪辑器对象关联的剪辑列表的副本。矩形为0取整个画面,区块为0取数据大小</td></tr>
<tr><td>GetHWnd</td><td>取窗口(@窗口)</td><td>检索与剪辑器对象关联的窗口句柄。</td></tr>
<tr><td>Initialize</td><td>初始化(对象,0)</td><td>初始化调色板对象。</td></tr>
<tr><td>IsClipListChanged</td><td>列表状态(@真假)</td><td>如果窗口句柄与剪辑器对象关联，则检索剪辑列表的状态是否更改。</td></tr>
<tr><td>SetClipList</td><td>改副本(区块组,0)</td><td>设置或删除剪辑器父对象所附加到的图面上使用的剪辑列表。</td></tr>
<tr><td>SetHWnd</td><td>改窗口(@真假)</td><td>设置剪辑器对象用于获取剪辑信息的窗口句柄。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDrawColorControl</td><td>驱动颜色对象</td><td>应用程序使用颜色控件接口的方法获取和设置颜色控件。</td></tr>
<tr><th colspan=3>驱动颜色对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetColorControls</td><td>取色控(@颜色控制)</td><td>检索与覆盖或主图面关联的当前<a href="#DDCOLORCONTROL">颜色控制</a>设置。</td></tr>
<tr><td>SetColorControls</td><td>改色控(颜色控制)</td><td>设置覆盖或主图面的<a href="#DDCOLORCONTROL">颜色控制</a>选项。 </td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirectDrawGammaControl</td><td>驱动渐变对象</td><td>应用程序使用伽玛渐变控件接口的方法来调整主图面的红色、绿色和蓝色伽玛渐变级别。</td></tr>
<tr><th colspan=3>驱动渐变对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetGammaRamp</td><td>取渐变(0,@色素)</td><td>检索主图面的红色、绿色和蓝色<a href="#DDGAMMARAMP">伽玛渐变</a>。</td></tr>
<tr><td>SetGammaRamp</td><td>改渐变(标志,色素)</td><td>设置主图面的红色、绿色和蓝色<a href="#DDGAMMARAMP">伽玛渐变</a>。标志:1=物理校准;0不校准</td></tr>
</table><hr>
<font color="#0000FF" size="6"><a name="三维对象">三维对象库</a>-d3d9.dll</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3D9</td><td>三维图形对象</td><td>应用程序使用三维图形接口的方法创建三维图形对象并设置环境。包括枚举和检索设备功能的方法。</td></tr>
<tr><th colspan=3>三维图形对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>RegisterSoftwareDevice</td><td>软件光栅(@函数)</td><td>注册可插入软件设备。提供软件光栅化，使应用程序能够访问各种软件光栅器。</td></tr>
<tr><td>GetAdapterCount</td><td>显卡数</td><td>返回系统上的适配器数。显卡序号0到数量减一</td></tr>
<tr><td>GetAdapterIdentifier</td><td>显卡描述(序号,标志,显卡标识类)</td><td>描述指定物理显示适配器信息:<a href="#显卡标识类">显卡标识类</a>。标志:0=默认;2=下载驱动证书;</td></tr>
<tr><td>GetAdapterModeCount</td><td>模式数(序号,图面格式)</td><td>返回此适配器上可用的显示模式数。<a href="#D3DFORMAT">图面格式</a> </td></tr>
<tr><td>EnumAdapterModes</td><td>枚举模式(序号,<a href="#D3DDEVTYPE">设备类型</a>,索引,显示模式类)</td><td>枚举指定的适配器是否支持请求的格式和<a href="#显示模式类">显示模式</a>。索引是模式数的序号;</td></tr>
<tr><td>GetAdapterDisplayMode</td><td>显示模式(序号,显示模式类)</td><td>检索适配器的当前显示模式信息。</td></tr>
<tr><td>CheckDeviceType</td><td>设备类型(序号,<a href="#D3DDEVTYPE">设备类型</a>,<a href="#D3DFORMAT">显示模式,缓冲格式</a>,全屏)</td><td>验证硬件加速设备类型是否可以在此适配器上使用。<a href="#D3DDEVTYPE">设备类型</a></td></tr>
<tr><td>CheckDeviceFormat</td><td>设备格式(序号,设备类型,选项,<a href="#D3DRESOURCETYPE">资源类型</a>,图面格式)</td><td>确定表面格式是否可用作指定资源类型常数，纹理、深度模具缓冲区、呈现目标或三者的任何组合。<a href="#D3DUSAGE">选项:</a></td></tr>
<tr><td>CheckDeviceMultiSampleType</td><td>多重采样(序号,设备类型,<a href="#D3DFORMAT">图面格式</a>,小窗,采样率,@数量)</td><td>确定此设备上是否提供多重采样技术。小窗为假=全屏采样;<a href="#D3DMULTISAMPLE_TYPE">采样率:</a>（0-16）</td></tr>
<tr><td>CheckDepthStencilMatch</td><td>模具匹配(序号,<a href="#D3DDEVTYPE">设备类型</a>,<a href="#D3DFORMAT">显示模式,呈现格式,模具格式</a>)</td><td>确定深度模具格式是否与特定显示模式下的呈现目标格式兼容。</td></tr>
<tr><td>CheckDeviceFormatConversion</td><td>可转格式(序号,设备类型,<a href="#D3DFORMAT">源格式,目标格式</a>)</td><td>测试设备是否支持从一种显示格式转换为另一种显示格式。</td></tr>
<tr><td>GetDeviceCaps</td><td>设备功能(序号,<a href="#D3DDEVTYPE">设备类型</a>,功能)</td><td>检索有关设备的特定于设备的信息。功能:<a href="#D3DCAPS9">三维功能类</a></td></tr>
<tr><td>GetAdapterMonitor</td><td>监视器(序号)</td><td>返回对象关联的监视器的句柄。</td></tr>
<tr><td>CreateDevice</td><td>创建设备(序号,设备类型,焦点窗口,<a href="#D3DCREATE">选项</a>,参数,@接口)</td><td>创建表示显示适配器的设备接口 IDirect3DDevice9。参数:<a href="#显示参数类">显示参数类</a></td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><td><a name="D3DFORMAT">D3DFORMAT</a></td><td>数值</td><td>定义各种类型的图面格式。</td></tr>
<tr><td>D3DFMT_UNKNOWN</td><td>0</td><td>未知格式</td></tr>
<tr><th colspan=3>无符号格式——使用红(R)绿(G)蓝(B)透明(A)亮度(L)和调色板(P)数据的组合。</th></tr>
<tr><td>D3DFMT_R8G8B8</td><td>20</td><td>24 位 RGB 像素格式，每个通道 8 位。</td></tr>
<tr><td>D3DFMT_A8R8G8B8</td><td>21</td><td>具有 alpha 的 32 位 ARGB 像素格式，每个通道使用 8 位。</td></tr>
<tr><td>D3DFMT_X8R8G8B8</td><td>22</td><td>32 位 RGB 像素格式，其中为每个颜色保留 8 位。</td></tr>
<tr><td>D3DFMT_R5G6B5</td><td>23</td><td>16 位 RGB 像素格式，红色为 5 位，绿色为 6 位，蓝色为 5 位。</td></tr>
<tr><td>D3DFMT_X1R5G5B5</td><td>24</td><td>16 位像素格式，其中为每个颜色保留 5 位。</td></tr>
<tr><td>D3DFMT_A1R5G5B5</td><td>25</td><td>16 位像素格式，其中为每个颜色保留 5 位，为 alpha 保留 1 位。</td></tr>
<tr><td>D3DFMT_A4R4G4B4</td><td>26</td><td>16 位 ARGB 像素格式，每个通道 4 位。</td></tr>
<tr><td>D3DFMT_R3G3B2</td><td>27</td><td>8位 RGB 纹理格式，红色为 3 位，绿色为 3 位，蓝色为 2 位。</td></tr>
<tr><td>D3DFMT_A8</td><td>28</td><td>仅限 8 位 alpha。</td></tr>
<tr><td>D3DFMT_A8R3G3B2</td><td>29</td><td>16 位ARGB 纹理格式，alpha 使用 8 位，红色和绿色各 3 位，蓝色各 2 位。</td></tr>
<tr><td>D3DFMT_X4R4G4B4</td><td>30</td><td>16 位 RGB 像素格式，每种颜色使用 4 位。</td></tr>
<tr><td>D3DFMT_A2B10G10R10</td><td>31</td><td>32 位像素格式，每种颜色使用 10 位，alpha 使用 2 位。</td></tr>
<tr><td>D3DFMT_A8B8G8R8</td><td>32</td><td>具有 alpha 的 32 位 ARGB 像素格式，每个通道使用 8 位。</td></tr>
<tr><td>D3DFMT_X8B8G8R8</td><td>33</td><td>32 位 RGB 像素格式，其中为每个颜色保留 8 位。</td></tr>
<tr><td>D3DFMT_G16R16</td><td>34</td><td>32 位像素格式，绿色和红色各使用 16 位。</td></tr>
<tr><td>D3DFMT_A2R10G10B10</td><td>35</td><td>32 位像素格式，红色、绿色和蓝色各使用 10 位，alpha 为 2 位。</td></tr>
<tr><td>D3DFMT_A16B16G16R16</td><td>36</td><td>每个组件使用 16 位的 64 位像素格式。</td></tr>
<tr><td>D3DFMT_A8P8</td><td>40</td><td>使用 8 位 alpha 索引的 8 位颜色。</td></tr>
<tr><td>D3DFMT_P8</td><td>41</td><td>已编制索引的 8 位颜色。</td></tr>
<tr><td>D3DFMT_L8</td><td>50</td><td>仅 8 位亮度。</td></tr>
<tr><td>D3DFMT_L16</td><td>81</td><td>仅 16 位亮度。</td></tr>
<tr><td>D3DFMT_A8L8</td><td>51</td><td>16 位，分别使用 8 位的 alpha 和亮度。</td></tr>
<tr><td>D3DFMT_A4L4</td><td>52</td><td>8 位，使用 4 位分别用于 alpha 和亮度。</td></tr>
<tr><td>D3DFMT_A1</td><td>118</td><td>1 位单色。仅在 Direct3D9Ex 中可用。</td></tr>
<tr><td>D3DFMT_A2B10G10R10_XR_BIAS</td><td>119</td><td>2.8 偏置定点。仅在 Direct3D9Ex 中可用。</td></tr>
<tr><td>D3DFMT_BINARYBUFFER</td><td>199</td><td>指示数据没有固有类型的二进制格式。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><th colspan=3>缓冲区格式——深度、模具、顶点和索引缓冲区都有唯一的格式。</th></tr>
<tr><td>D3DFMT_D16_LOCKABLE</td><td>70</td><td>16 位 z 缓冲区位深度。</td></tr>
<tr><td>D3DFMT_D32</td><td>71</td><td>32 位 z 缓冲区位深度。</td></tr>
<tr><td>D3DFMT_D15S1</td><td>73</td><td>16 位 z 缓冲区位深度，其中为深度通道保留 15 位，为模具通道保留 1 位。</td></tr>
<tr><td>D3DFMT_D24S8</td><td>75</td><td>32 位 z 缓冲区位深度，深度通道使用 24 位，模具通道使用 8 位。</td></tr>
<tr><td>D3DFMT_D24X8</td><td>77</td><td>使用 24 位作为深度通道的 32 位 z 缓冲区位深度。</td></tr>
<tr><td>D3DFMT_D24X4S4</td><td>79</td><td>32 位 z 缓冲区位深度，深度通道使用 24 位，模具通道使用 4 位。</td></tr>
<tr><td>D3DFMT_D32F_LOCKABLE</td><td>82</td><td>一种可锁定的格式，其中深度值表示为标准 IEEE 浮点数。</td></tr>
<tr><td>D3DFMT_D24FS8</td><td>83</td><td>一种不可锁定的格式，包含24位浮点格式深度(-20e4)和8模具。</td></tr>
<tr><td>D3DFMT_D32_LOCKABLE</td><td>84</td><td>可锁定的 32 位深度缓冲区。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DFMT_S8_LOCKABLE</td><td>85</td><td>可锁定的 8 位模具缓冲区。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DFMT_D16</td><td>80</td><td>16 位 z 缓冲区位深度。</td></tr>
<tr><td>D3DFMT_VERTEXDATA</td><td>100</td><td>描述顶点缓冲区图面。</td></tr>
<tr><td>D3DFMT_INDEX16</td><td>101</td><td>16 位索引缓冲区位深度。</td></tr>
<tr><td>D3DFMT_INDEX32</td><td>102</td><td>32 位索引缓冲区位深度。</td></tr>
<tr><th colspan=3>DXTn压缩纹理格式——图面尺寸必须4的倍数，适用于屏幕外普通表面、呈现目标、2D 纹理、立方体纹理和体积纹理。</th></tr>
<tr><td>D3DFMT_DXT1</td><td>0$DXT1</td><td>DXT1 压缩纹理格式</td></tr>
<tr><td>D3DFMT_DXT2</td><td>0$DXT2</td><td>DXT2 压缩纹理格式</td></tr>
<tr><td>D3DFMT_DXT3</td><td>0$DXT3</td><td>DXT3 压缩纹理格式</td></tr>
<tr><td>D3DFMT_DXT4</td><td>0$DXT4</td><td>DXT4 压缩纹理格式</td></tr>
<tr><td>D3DFMT_DXT5</td><td>0$DXT5</td><td>DXT5 压缩纹理格式</td></tr>
<tr><th colspan=3>浮点格式——用于浮点图面格式。这些16位每通道格式也称为s10e5格式。</th></tr>
<tr><td>D3DFMT_R16F</td><td>111</td><td>对红色通道使用 16 位的 16 位浮点格式。</td></tr>
<tr><td>D3DFMT_G16R16F</td><td>112</td><td>32 位浮点格式，红色通道使用 16 位，绿色通道使用 16 位。</td></tr>
<tr><td>D3DFMT_A16B16G16R16F</td><td>113</td><td>对于每个通道使用 16 位的 64 位浮点格式， (alpha、蓝色、绿色、红色) 。</td></tr>
<tr><th colspan=3>四字符格式——FOURCC格式的数据是压缩数据。极语言里使用0$开头,后面加4个字符。</th></tr>
<tr><td>D3DFMT_MULTI2_ARGB8</td><td>0$MET1</td><td>多元素纹理 (未压缩)</td></tr>
<tr><td>D3DFMT_G8R8_G8B8</td><td>0$GRGB</td><td>16位打包RGB格式。绿红和绿蓝两个像素对来表示颜色值。共享红蓝分量 </td></tr>
<tr><td>D3DFMT_R8G8_B8G8</td><td>0$RGBG</td><td>16位打包RGB格式。红绿和蓝绿两个像素对来表示颜色值。共享红蓝分量</td></tr>
<tr><td>D3DFMT_UYVY</td><td>0$UYVY</td><td>UYVY 格式(PC98 合规性)</td></tr>
<tr><td>D3DFMT_YUY2</td><td>0$YUY2</td><td>YUY2 格式(PC98 合规性)</td></tr>
<tr><th colspan=3>IEEE格式——用于浮点图面格式。 这些 32 位每通道格式也称为 s23e8 格式。</th></tr>
<tr><td>D3DFMT_R32F</td><td>114</td><td>对红色通道使用32位浮点格式。</td></tr>
<tr><td>D3DFMT_G32R32F</td><td>115</td><td>64位浮点格式，红色和绿色通道使用 32 位。</td></tr>
<tr><td>D3DFMT_A32B32G32R32F</td><td>116</td><td>每个通道使用32位的128位浮点格式， (alpha、蓝色、绿色、红色) 。</td></tr>
<tr><th colspan=3>混合格式——数据可以包含无符号数据和有符号数据的组合。</th></tr>
<tr><td>D3DFMT_L6V5U5</td><td>61</td><td>亮度为6位的16位凹凸图格式，v和u各使用5位。</td></tr>
<tr><td>D3DFMT_X8L8V8U8</td><td>62</td><td>具有亮度的 32 位凹凸映射格式，每个通道使用 8 位。</td></tr>
<tr><td>D3DFMT_A2W10V10U10</td><td>67</td><td>32位凹凸映射格式，其中alpha使用2位，w、v和u各使用10位。</td></tr>
<tr><th colspan=3>签名格式——带符号格式的数据可以是正数和负数。使用(U)、(V)、(W)和(Q)数据的组合。</th></tr>
<tr><td>D3DFMT_V8U8</td><td>60</td><td>16位凹凸映射格式，其中u和v数据各使用8位。</td></tr>
<tr><td>D3DFMT_Q8W8V8U8</td><td>63</td><td>32位凹凸贴图格式，每个通道使用8位。</td></tr>
<tr><td>D3DFMT_V16U16</td><td>64</td><td>32位凹凸映射格式，每个通道使用16位。</td></tr>
<tr><td>D3DFMT_Q16W16V16U16</td><td>110</td><td>64位凹凸映射格式，每个通道使用16位。</td></tr>
<tr><td>D3DFMT_CxV8U8</td><td>117</td><td>16位标准压缩格式。纹理采样器根据C=平方根(1-U2-V2)计算C通道。</td></tr>
<tr><th colspan=3>————————————</th></tr>
<tr><td>D3DFMT_FORCE_DWORD</td><td>0x7fffffff</td><td>此数值强制常数为32位,表示四字符要小于这个值。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DRESOURCETYPE">D3DRESOURCETYPE</a>——定义资源类型常数。</th></tr>
<tr><td>D3DRTYPE_SURFACE</td><td>1</td><td>图面资源</td></tr>
<tr><td>D3DRTYPE_VOLUME</td><td>2</td><td>卷资源。</td></tr>
<tr><td>D3DRTYPE_TEXTURE</td><td>3</td><td>纹理资源。</td></tr>
<tr><td>D3DRTYPE_VOLUMETEXTURE</td><td>4</td><td>卷纹理资源。</td></tr>
<tr><td>D3DRTYPE_CUBETEXTURE</td><td>5</td><td>立方体纹理资源。</td></tr>
<tr><td>D3DRTYPE_VERTEXBUFFER</td><td>6</td><td>顶点缓冲区资源。</td></tr>
<tr><td>D3DRTYPE_INDEXBUFFER</td><td>7</td><td>索引缓冲区资源。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DMULTISAMPLE_TYPE">D3DMULTISAMPLE_TYPE</a>——定义设备可以应用的全场景多重采样级别。</th></tr>
<tr><td>D3DMULTISAMPLE_NONE</td><td>0</td><td>没有可用的全场景多重采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_NONMASKABLE</td><td>1</td><td>启用多重采样质量值。</td></tr>
<tr><td>D3DMULTISAMPLE_2_SAMPLES</td><td>2</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_3_SAMPLES</td><td>3</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_4_SAMPLES</td><td>4</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_5_SAMPLES</td><td>5</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_6_SAMPLES</td><td>6</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_7_SAMPLES</td><td>7</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_8_SAMPLES</td><td>8</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_9_SAMPLES</td><td>9</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_10_SAMPLES</td><td>10</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_11_SAMPLES</td><td>11</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_12_SAMPLES</td><td>12</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_13_SAMPLES</td><td>13</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_14_SAMPLES</td><td>14</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_15_SAMPLES</td><td>15</td><td>可用的全场景多采样级别。</td></tr>
<tr><td>D3DMULTISAMPLE_16_SAMPLES</td><td>16</td><td>可用的全场景多采样级别。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><td><a name="D3DDEVTYPE">显示类型</a></td><td>D3DDEVTYPE</td><td>数值</td><td>定义设备类型。多用于三维图形类方法的第二参数</td></tr>
<tr><th colspan=4>显示模式类——常量表</th></tr>
<tr><td>硬件光栅</td><td>D3DDEVTYPE_HAL</td><td>1</td><td>硬件光栅化。着色是通过软件、硬件或混合转换和照明完成的。</td></tr>
<tr><td>软件光栅</td><td>D3DDEVTYPE_REF</td><td>2</td><td>Direct3D功能在软件中实现;但是参考光栅器会随时使用特殊的 CPU 指令。</td></tr>
<tr><td>注册光栅</td><td>D3DDEVTYPE_SW</td><td>3</td><td>已注册到 三维图形类.软件光栅 的可插入软件设备。</td></tr>
<tr><td>无软硬件</td><td>D3DDEVTYPE_NULLREF</td><td>4</td><td>在硬件和引用光栅化均不可用的计算机上初始化Direct3D，并启用3D内容创建的资源。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DCREATE">D3DCREATE</a>——控制设备创建行为的一个或多个标志的组合。</th></tr>
<tr><td>D3DCREATE_FPU_PRESERVE</td><td>2</td><td>将3D浮点计算的精度设置为调用线程使用的精度。默认为单精度舍入到最近模式</td></tr>
<tr><td>D3DCREATE_MULTITHREADED</td><td>4</td><td>使用安全多线程的。频繁获取全局关键部分的所有权，可能会降低性能。在卸载d3d9.dll之前销毁此窗口。 </td></tr>
<tr><td>D3DCREATE_PUREDEVICE</td><td>$10</td><td>不支持对可存储状态块内容进行获取调用。不提供任何仿真服务。如果设备不支持顶点处理，则只能使用转换后的顶点。</td></tr>
<tr><td>D3DCREATE_SOFTWARE_VERTEXPROCESSING</td><td>$20</td><td>指定软件顶点处理。Win10(1607)及以上版本不建议使用</td></tr>
<tr><td>D3DCREATE_HARDWARE_VERTEXPROCESSING</td><td>$40</td><td>指定硬件顶点处理。</td></tr>
<tr><td>D3DCREATE_MIXED_VERTEXPROCESSING</td><td>$80</td><td>指定软件和硬件顶点混合处理。Win10(1607)及以上版本不建议使用</td></tr>
<tr><td>D3DCREATE_DISABLE_DRIVER_MANAGEMENT</td><td>$100</td><td>Direct3D将使用资源而不是驱动程序。不会因资源错误（如视频内存不足）而失败。</td></tr>
<tr><td>D3DCREATE_ADAPTERGROUP_DEVICE</td><td>$200</td><td>要求设备驱动此主适配器拥有的所有分配头。在非主机适配器上是非法的。</td></tr>
<tr><td>D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX</td><td>$400</td><td>Direct3D将管理资源而不是驱动程序。对于视频内存不足等情况将返回错误。</td></tr>
<tr><td>D3DCREATE_NOWINDOWCHANGES</td><td>$800</td><td>指示 Direct3D 不得以任何方式更改焦点窗口。</td></tr>
<tr><td>D3DCREATE_DISABLE_PSGP_THREADING</td><td>$2000</td><td>将计算限制为应用程序主线程。 否则会在工作线程中执行进行计算(XP及下不可用)</td></tr>
<tr><td>D3DCREATE_ENABLE_PRESENTSTATS</td><td>$4000</td><td>启用在设备上收集现有统计信息。 仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DCREATE_DISABLE_PRINTSCREEN</td><td>$800</td><td>导致运行时不为"Printscreen"注册热键，不能截屏。仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DCREATE_SCREENSAVER</td><td>$10000000</td><td>在全屏应用程序期间允许屏幕保护。仅在 Direct3D 9Ex 中可用</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DSWAPEFFECT">D3DSWAPEFFECT</a>——定义交换效果。</th></tr>
<tr><td>D3DSWAPEFFECT_DISCARD</td><td>1</td><td>丢弃缓存从而减少大量视频内存或处理开销,可能包含多个后台缓冲区</td></tr>
<tr><td>D3DSWAPEFFECT_FLIP</td><td>2</td><td>(n-1)翻转缓冲,交换链可能包含多个后台缓冲区，最好设想为包含前缓冲区的循环队列</td></tr>
<tr><td>D3DSWAPEFFECT_COPY</td><td>3</td><td>后台缓冲区直接复制到前缓冲区,只能为包含单个后台缓冲区的交换链指定此交换效果。将后台缓冲区数设置为1。</td></tr>
<tr><td>D3DSWAPEFFECT_OVERLAY</td><td>4</td><td>使用可在主图面上覆盖的专用视频内存区域。硬件执行无需复制,仅支持Win7及以上的Direct3D9Ex</td></tr>
<tr><td>D3DSWAPEFFECT_FLIPEX</td><td>$20</td><td>指定应用程序何时采用翻转模式，不影响窗口模式显示进行合成和全屏显示统计信息。仅支持Win7及以上的Direct3D9Ex</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPRESENTFLAG">D3DPRESENTFLAG</a>——显示模式类.演播间隔 使用的常量。</th></tr>
<tr><td>D3DPRESENTFLAG_LOCKABLE_BACKBUFFER</td><td>1</td><td>应用程序需要直接锁定后台缓冲区时设置，在某些图形硬件配置上会降低性能。</td></tr>
<tr><td>D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL</td><td>2</td><td>创建设备或交换链启用丢弃z缓冲区数据，可以提高性能，深度模具缓冲区的内容将无效。</td></tr>
<tr><td>D3DPRESENTFLAG_DEVICECLIP</td><td>4</td><td>在显视器屏幕区域中，将窗口化 Present 位块传送剪辑到窗口工作区。 </td></tr>
<tr><td>D3DPRESENTFLAG_VIDEO</td><td>$10</td><td>这是驱动程序的提示，即后台缓冲区将包含视频数据。</td></tr>
<tr><td>D3DPRESENTFLAG_NOAUTOROTATE</td><td>$20</td><td>监视器显示画面自动使用旋转副本进行处理，即程序自行显示旋转。仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENTFLAG_UNPRUNEDMODE</td><td>$40</td><td>指定显示适配器的所有可显示模式，仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENTFLAG_OVERLAY_LIMITEDRGB</td><td>$80</td><td>指定覆盖是有限范围压缩的RGB。16:16:16 为黑色，235:235:235 为白色。</td></tr>
<tr><td>D3DPRESENTFLAG_OVERLAY_YCbCr_BT709</td><td>$100</td><td>对于高清电视 (HDTV)，设置此标志表示 BT.709。不设置是BT.601；仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC</td><td>$200</td><td>指定覆盖是是扩展的YCbCr(xvYCC)。仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENTFLAG_RESTRICTED_CONTENT</td><td>$400</td><td>表示交换链包含受保护的内容，只有桌面窗口管理器(DWM)可以使用交换链。仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER</td><td>$800</td><td>表示驱动程序应限制对为 DWM 交互创建的任何共享资源的访问。仅在 Direct3D 9Ex 中可用</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DCAPS2">D3DCAPS2</a>——驱动程序功能标志。</th></tr>
<tr><td>D3DCAPS2_FULLSCREENGAMMA</td><td>0x00020000</td><td>驱动程序支持全屏模式下的动态伽玛渐变调整。</td></tr>
<tr><td>D3DCAPS2_CANCALIBRATEGAMMA</td><td>0x00100000</td><td>系统安装了一个校准器，该校准器可以自动调整伽玛斜率</td></tr>
<tr><td>D3DCAPS2_CANMANAGERESOURCE</td><td>0x10000000</td><td>驱动程序能够管理资源。</td></tr>
<tr><td>D3DCAPS2_DYNAMICTEXTURES</td><td>0x20000000</td><td>驱动程序支持动态纹理。</td></tr>
<tr><td>D3DCAPS2_CANAUTOGENMIPMAP</td><td>0x40000000</td><td>驱动程序能够自动生成 mipmap。纹理映射表</td></tr>
<tr><td>D3DCAPS2_CANSHARERESOURCE</td><td>0x80000000</td><td>设备可以创建可共享的资源。仅在 Direct3D 9Ex 中可用</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DCAPS3">D3DCAPS3</a>——驱动程序功能标志。</th></tr>
<tr><td>D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD</td><td>0x20</td><td>指示设备在使用 丢弃缓存 或 翻转缓冲 交换效果时，可以在全屏模式下遵循混合透明度呈现状态。 </td></tr>
<tr><td>D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION</td><td>0x80</td><td>指示设备可以从窗口式后台缓冲区执行伽玛校正， (包含) 到 sRGB 桌面的线性内容。</td></tr>
<tr><td>D3DCAPS3_COPY_TO_VIDMEM</td><td>0x100</td><td>设备可以加速从系统内存到本地视频内存的内存复制。本地硬件加速</td></tr>
<tr><td>D3DCAPS3_COPY_TO_SYSTEMMEM</td><td>0x200</td><td>设备可以加速从本地视频内存到系统内存的内存复制。系统硬件加速</td></tr>
<tr><td>D3DCAPS3_DXVAHD</td><td>0x400</td><td>显示驱动程序支持 DXVA-HD DDI。</td></tr>
<tr><td>D3DCAPS3_DXVAHD_LIMITED</td><td>0x800</td><td>显示驱动程序支持限制的 DXVA-HD DDI。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPRESENT">D3DPRESENT</a>——描述适配器刷新率与完成 “当前” 或“ 演示 ”操作的速率之间的关系。</th></tr>
<tr><td>D3DPRESENT_DONOTWAIT</td><td>1</td><td>不能由 hal 设备安排演示文稿。</td></tr>
<tr><td>D3DPRESENT_LINEAR_CONTENT</td><td>2</td><td>要显示的后台缓冲区的内容位于线性颜色空间中。</td></tr>
<tr><td>D3DPRESENT_DONOTFLIP</td><td>4</td><td>显示期间使用前缓冲区作为源图面和目标图面。已计划帧同步但显示的图面不会更改。仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENT_FLIPRESTART</td><td>8</td><td>保留。仅在 Direct3D 9Ex 中可用</td></tr>
<tr><td>D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR</td><td>0x10</td><td>将呈现的内容显示缩略图，并在其他监视器上显示任务栏缩略图。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DPRESENT_UPDATEOVERLAYONLY</td><td>0x20</td><td>汇报覆盖位置或色键数据而不翻转，也不更改图像的显示持续时间。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DPRESENT_HIDEOVERLAY</td><td>0x40</td><td>关闭覆盖硬件。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DPRESENT_UPDATECOLORKEY</td><td>0x20</td><td>重绘色键数据。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DPRESENT_FORCEIMMEDIATE</td><td>0x80</td><td> 窗口和全屏演示行为是相同的。仅在 Direct3D 9Ex 中可用。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DDEVCAPS">D3DDEVCAPS</a>——三维功能类.设备功能的标志。</th></tr>
<tr><td>D3DDEVCAPS_EXECUTESYSTEMMEMORY</td><td>0x000010</td><td>设备可以使用系统内存中的执行缓冲区</td></tr>
<tr><td>D3DDEVCAPS_EXECUTEVIDEOMEMORY</td><td>0x000020</td><td>设备可以使用视频内存中的执行缓冲区。</td></tr>
<tr><td>D3DDEVCAPS_TLVERTEXSYSTEMMEMORY</td><td>0x000040</td><td>设备可以将系统内存中的缓冲区用于转换的顶点和点亮顶点。</td></tr>
<tr><td>D3DDEVCAPS_TLVERTEXVIDEOMEMORY</td><td>0x000080</td><td>设备可以将视频内存中的缓冲区用于转换和点亮顶点。</td></tr>
<tr><td>D3DDEVCAPS_TEXTURESYSTEMMEMORY</td><td>0x000100</td><td>设备可以从系统内存中检索纹理。</td></tr>
<tr><td>D3DDEVCAPS_TEXTUREVIDEOMEMORY</td><td>0x000200</td><td>设备可以从设备内存中检索纹理。</td></tr>
<tr><td>D3DDEVCAPS_DRAWPRIMTLVERTEX</td><td>0x000400</td><td>设备可以绘制几何基元的顶点数组</td></tr>
<tr><td>D3DDEVCAPS_CANRENDERAFTERFLIP</td><td>0x000800</td><td>设备可以在翻页后将呈现命令排队。此功能意味着设备速度相对较快</td></tr>
<tr><td>D3DDEVCAPS_TEXTURENONLOCALVIDMEM</td><td>0x001000</td><td>设备可以从非本地视频内存中检索纹理。</td></tr>
<tr><td>D3DDEVCAPS_DRAWPRIMITIVES2</td><td>0x002000</td><td>设备至少可以支持符合 DirectX 5 的驱动程序。</td></tr>
<tr><td>D3DDEVCAPS_SEPARATETEXTUREMEMORIES</td><td>0x004000</td><td>设备正在从单独的内存池进行纹理处理。</td></tr>
<tr><td>D3DDEVCAPS_DRAWPRIMITIVES2EX</td><td>0x008000</td><td>设备至少可以支持符合 DirectX 7 的驱动程序。</td></tr>
<tr><td>D3DDEVCAPS_HWTRANSFORMANDLIGHT</td><td>0x010000</td><td>设备可以支持硬件中的转换和照明。</td></tr>
<tr><td>D3DDEVCAPS_CANBLTSYSTONONLOCAL</td><td>0x020000</td><td>设备支持从系统内存纹理到非局部视频内存纹理的 blit。</td></tr>
<tr><td>D3DDEVCAPS_HWRASTERIZATION</td><td>0x080000</td><td>设备具有用于场景光栅化的硬件加速。</td></tr>
<tr><td>D3DDEVCAPS_PUREDEVICE</td><td>0x100000</td><td>设备可以在硬件中支持光栅化、转换、照明和着色。</td></tr>
<tr><td>D3DDEVCAPS_QUINTICRTPATCHES</td><td>0x200000</td><td>设备支持五次贝塞尔曲线和B样条曲线。</td></tr>
<tr><td>D3DDEVCAPS_RTPATCHES</td><td>0x400000</td><td>设备支持矩形和三角补丁。</td></tr>
<tr><td>D3DDEVCAPS_RTPATCHHANDLEZERO</td><td>0x800000</td><td>指示硬件不需要缓存也能将像绘制缓存的修补程序一样高效。</td></tr>
<tr><td>D3DDEVCAPS_NPATCHES</td><td>0x01000000</td><td>设备支持N个修补程序。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPMISCCAPS">D3DPMISCCAPS</a>——其他驱动程序基元功能标志。</th></tr>
<tr><td>D3DPMISCCAPS_MASKZ</td><td>0x00000002L</td><td>设备可以启用和禁用对像素操作的深度缓冲区的修改。</td></tr>
<tr><td>D3DPMISCCAPS_CULLNONE</td><td>0x00000010L</td><td>驱动程序不执行三角形剔除。 这对应于 D3DCULL 枚举类型的 D3DCULL_NONE 成员。</td></tr>
<tr><td>D3DPMISCCAPS_CULLCW</td><td>0x00000020L</td><td>驱动程序支持顺时针三角形剔除D3DRS_CULLMODE状态。 (这仅适用于三角形基元。) 此标志对应于 D3DCULL 枚举类型的D3DCULL_CW成员。</td></tr>
<tr><td>D3DPMISCCAPS_CULLCCW</td><td>0x00000040L</td><td>驱动程序支持通过D3DRS_CULLMODE状态逆时针剔除。 (这仅适用于三角形基元。) 此标志对应于 D3DCULL 枚举类型的 D3DCULL_CCW 成员。</td></tr>
<tr><td>D3DPMISCCAPS_COLORWRITEENABLE</td><td>0x00000100L</td><td>设备支持通过D3DRS_COLORWRITEENABLE状态对呈现目标颜色缓冲区进行每通道写入。</td></tr>
<tr><td>D3DPMISCCAPS_CLIPPLANESCALEDPOINTS</td><td>0x00000200L</td><td>设备将大于 1.0 的缩放点正确剪辑到用户定义的剪裁平面。</td></tr>
<tr><td>D3DPMISCCAPS_CLIPTLVERTS</td><td>0x00000200L</td><td>设备剪辑转换后的顶点基元。要求顶点缓冲区位于系统内存中。</td></tr>
<tr><td>D3DPMISCCAPS_TSSARGTEMP</td><td>0x00000400L</td><td>设备支持用于临时寄存器 的 D3DTA 。</td></tr>
<tr><td>D3DPMISCCAPS_BLENDOP</td><td>0x00000800L</td><td>设备支持除D3DBLENDOP_ADD以外的 alpha 混合操作。</td></tr>
<tr><td>D3DPMISCCAPS_NULLREFERENCE</td><td>0x00000100L</td><td>不呈现的引用设备。</td></tr>
<tr><td>D3DPMISCCAPS_INDEPENDENTWRITEMASKS</td><td>0x00004000L</td><td>设备支持多个元素纹理或多个呈现目标的独立写入掩码。</td></tr>
<tr><td>D3DPMISCCAPS_PERSTAGECONSTANT</td><td>0x00008000L</td><td>设备支持每个阶段的常量。 请参阅 D3DTEXTURESTAGESTATETYPE 中的D3DTSS_CONSTANT。</td></tr>
<tr><td>D3DPMISCCAPS_POSTBLENDSRGBCONVERT</td><td>0x00200000L</td><td>设备支持在混合后转换为 sRGB。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DPMISCCAPS_FOGANDSPECULARALPHA</td><td>0x00010000L</td><td>设备支持单独的雾和反射 alpha。 许多设备使用反射 alpha 通道来存储雾因子。</td></tr>
<tr><td>D3DPMISCCAPS_SEPARATEALPHABLEND</td><td>0x00020000L</td><td>设备支持 alpha 通道的单独混合设置。</td></tr>
<tr><td>D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS</td><td>0x00040000L</td><td>设备支持多个呈现目标的不同位深度。</td></tr>
<tr><td>D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING</td><td>0x00080000L</td><td>设备支持多个呈现目标的后像素着色器操作。</td></tr>
<tr><td>D3DPMISCCAPS_FOGVERTEXCLAMPED</td><td>0x00100000L</td><td>设备固定每个顶点的雾混合因子。</td></tr>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPMISCCAPS">D3DPMISCCAPS</a>——三维功能类.光栅：有关光栅绘制功能的信息。</th></tr>
<tr><td>D3DPRASTERCAPS_DITHER</td><td>0x0000001<td>设备可以抖改以提高颜色分辨率。</td></tr>
<tr><td>D3DPRASTERCAPS_ZTEST</td><td>0x0000010<td>设备可以执行 z 测试操作。这会有效地呈现基元和z像素。</td></tr>
<tr><td>D3DPRASTERCAPS_FOGVERTEX</td><td>0x0000080<td>设备在照明操作期间计算雾值，并在光栅化期间内插雾值。</td></tr>
<tr><td>D3DPRASTERCAPS_FOGTABLE</td><td>0x0000100<td>设备通过引用查找表来计算雾值，该表包含已根据给定像素深度编制索引的迷雾值。</td></tr>
<tr><td>D3DPRASTERCAPS_MIPMAPLODBIAS</td><td>0x0002000<td>设备支持详细程度偏差调整。能够使 mipmap 看起来比平常更清晰。 </td></tr>
<tr><td>D3DPRASTERCAPS_ZBUFFERLESSHSR</td><td>0x0008000<td>设备可以执行Z无缓冲区(HSR) 隐藏表面，依赖于硬件无需程序对多边形进行排序和分配深度缓冲区。会为纹理留下更多的视频内存，并且程序是透明的。</td></tr>
<tr><td>D3DPRASTERCAPS_FOGRANGE</td><td>0x0010000<td>设备支持基于范围的雾。对象与查看器的距离计算雾效果，而不是对象的深度(场景z坐标)。</td></tr>
<tr><td>D3DPRASTERCAPS_ANISOTROPY</td><td>0x0020000<td>设备支持各向异性筛选。</td></tr>
<tr><td>D3DPRASTERCAPS_WBUFFER</td><td>0x0040000<td>设备支持使用 w 进行深度缓冲。</td></tr>
<tr><td>D3DPRASTERCAPS_WFOG</td><td>0x0100000<td>指定透视投影矩阵时，使用基于 W 的雾，但仿射投影仍使用基于 z 的雾。将[3][4]元素中包含非零值的投影矩阵视为透视投影矩阵。</td></tr>
<tr><td>D3DPRASTERCAPS_ZFOG</td><td>0x0200000<td>设备支持基于 z 的雾。</td></tr>
<tr><td>D3DPRASTERCAPS_COLORPERSPECTIVE</td><td>0x0400000<td>设备正确迭代颜色透视。</td></tr>
<tr><td>D3DPRASTERCAPS_SCISSORTEST</td><td>0x1000000<td>设备支持剪辑测试。 </td></tr>
<tr><td>D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS</td><td>0x2000000<td>说明。</td></tr>
<tr><td>D3DPRASTERCAPS_DEPTHBIAS</td><td>0x4000000<td>设备支持旧式深度偏差。 </td></tr>
<tr><td>D3DPRASTERCAPS_MULTISAMPLE_TOGGLE</td><td>0x8000000<td>设备支持使用切换打开和关闭多重采样。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPCMPCAPS">D3DPCMPCAPS</a>——三维功能类.Z 缓冲区比较功能。 </th></tr>
<tr><td>D3DPCMPCAPS_NEVER</td><td>0x0000001<td>始终未通过 z 测试。</td></tr>
<tr><td>D3DPCMPCAPS_LESS</td><td>0x0000002<td>如果新的 z 小于当前 z，则通过 z-test。</td></tr>
<tr><td>D3DPCMPCAPS_EQUAL</td><td>0x0000004<td>如果新 z 等于当前 z，则通过 z-test。</td></tr>
<tr><td>D3DPCMPCAPS_LESSEQUAL</td><td>0x0000008<td>如果新的 z 小于或等于当前 z，则通过 z-test。</td></tr>
<tr><td>D3DPCMPCAPS_GREATER</td><td>0x0000010<td>如果新的 z 大于当前 z，则通过 z-test。</td></tr>
<tr><td>D3DPCMPCAPS_NOTEQUAL</td><td>0x0000020<td>如果新的 z 不等于当前 z，则通过 z-test。</td></tr>
<tr><td>D3DPCMPCAPS_GREATEREQUAL</td><td>0x0000040<td>如果新的 z 大于或等于当前 z，则通过 z-test。</td></tr>
<tr><td>D3DPCMPCAPS_ALWAYS</td><td>0x0000080<td>始终通过 z 测试。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPBLENDCAPS">D3DPBLENDCAPS</a>——三维功能类.混合功能。</th></tr>
<tr><td>D3DPBLENDCAPS_ZERO</td><td>0x0000001<td>混合因子 (0、0、0、0) 。</td></tr>
<tr><td>D3DPBLENDCAPS_ONE</td><td>0x0000002<td>混合因子 (为 1、1、1、1) 。</td></tr>
<tr><td>D3DPBLENDCAPS_SRCCOLOR</td><td>0x0000004<td>混合因子为 (Rs、Gs、Bs、As) 。</td></tr>
<tr><td>D3DPBLENDCAPS_INVSRCCOLOR</td><td>0x0000008<td>混合因子 (为 1 - Rs、1 - Gs、1 - Bs、1 - as) 。</td></tr>
<tr><td>D3DPBLENDCAPS_SRCALPHA</td><td>0x0000010<td>混合因子 (As、As、As、As) 。</td></tr>
<tr><td>D3DPBLENDCAPS_INVSRCALPHA</td><td>0x0000020<td>混合因子 (1 - As、1 - As、1 - As、1 - As、1 - As) 。</td></tr>
<tr><td>D3DPBLENDCAPS_DESTALPHA</td><td>0x0000040<td>混合因子为 (Ad、Ad、Ad、Ad) 。</td></tr>
<tr><td>D3DPBLENDCAPS_INVDESTALPHA</td><td>0x0000080<td>混合因子为 (1 - Ad、1 - Ad、1 - Ad、1 - Ad) 。</td></tr>
<tr><td>D3DPBLENDCAPS_DESTCOLOR</td><td>0x0000100<td>混合因子 (Rd、Gd、Bd、Ad) 。</td></tr>
<tr><td>D3DPBLENDCAPS_INVDESTCOLOR</td><td>0x0000200<td>混合因子 (为 1 - Rs、1 - Gs、1 - Bs、1 - as) 。</td></tr>
<tr><td>D3DPBLENDCAPS_SRCALPHASAT</td><td>0x0000400<td>混合因子为 (f、f、f、1) ;f = min (As，1 - Ad) 。</td></tr>
<tr><td>D3DPBLENDCAPS_BOTHSRCALPHA</td><td>0x0000800<td>驱动程序支持源混合模式。已过时。</td></tr>
<tr><td>D3DPBLENDCAPS_BOTHINVSRCALPHA</td><td>0x0001000<td>源混合因子为 (1 - As、1 - As、1 - As、1 - As) 和目标混合因子 (As、As、As) ;将重写目标混合选择。</td></tr>
<tr><td>D3DPBLENDCAPS_BLENDFACTOR</td><td>0x0002000<td>驱动程序同时支持常量颜色混合因子和反常量颜色混合因子。</td></tr>
<tr><td>D3DPBLENDCAPS_SRCCOLOR2</td><td>0x0004000<td>混合因子 (PSOutColor[1]r、PSOutColor[1]g、PSOutColor[1]b) ，未使用。</td></tr>
<tr><td>D3DPBLENDCAPS_INVSRCCOLOR2</td><td>0x0008000<td>混合因子 (1 - PSOutColor[1]r，1 - PSOutColor[1]g，1 - PSOutColor[1]b，not used) ) 。仅在 Direct3D 9Ex 中可用。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPSHADECAPS">D3DPSHADECAPS</a>——三维功能类.着色操作功能标志。</th></tr>
<tr><td>D3DPSHADECAPS_COLORGOURAUDRGB</td><td>0x0000008<td>设备可以支持彩色 Gouraud 着色，每个顶点的颜色分量 (红色、绿色和蓝色) 内插在三角形面</td></tr>
<tr><td>D3DPSHADECAPS_SPECULARGOURAUDRGB</td><td>0x0000200<td>设备支持高光点的 Gouraud 着色。</td></tr>
<tr><td>D3DPSHADECAPS_ALPHAGOURAUDBLEND</td><td>0x0004000<td>设备可以支持 Gouraud 混合透明度的 alpha 分量。内插到人脸</td></tr>
<tr><td>D3DPSHADECAPS_FOGGOURAUD</td><td>0x0080000<td>设备可以在 Gouraud 着色模式下支持雾。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPTEXTURECAPS">D3DPTEXTURECAPS</a>——三维功能类.其他纹理映射功能。</th></tr>
<tr><td>D3DPTEXTURECAPS_PERSPECTIVE</td><td>0x0000001<td>支持透视更正纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_POW2</td><td>0x0000002<td>所有纹理的宽度和高度都必须指定为 2 的幂。不适用于立方体纹理或体积纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_ALPHA</td><td>0x0000004<td>支持以纹理像素表示的 Alpha。</td></tr>
<tr><td>D3DPTEXTURECAPS_SQUAREONLY</td><td>0x0000020<td>所有纹理都必须是正方形的。</td></tr>
<tr><td>D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE</td><td>0x0000040<td>纹理索引在内插之前不会按纹理大小进行缩放。</td></tr>
<tr><td>D3DPTEXTURECAPS_ALPHAPALETTE</td><td>0x0000080<td>设备可以从纹理调色板绘制 alpha。</td></tr>
<tr><td>D3DPTEXTURECAPS_NONPOW2CONDITIONAL</td><td>0x0000100<td>有条件地支持使用维度不是2的2D纹理。和POW2都未设置则无条件支持不是2的2D纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_PROJECTED</td><td>0x0000400<td>纹理转换标志。应用后设备会将转换后的纹理坐标除以最后一个纹理坐标，按像素进行投影除法。 </td></tr>
<tr><td>D3DPTEXTURECAPS_CUBEMAP</td><td>0x0000800<td>支持立方体纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_VOLUMEMAP</td><td>0x0002000<td>设备支持卷纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_MIPMAP</td><td>0x0004000<td>设备支持错误覆盖的纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_MIPVOLUMEMAP</td><td>0x0008000<td>设备支持未覆盖的卷纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_MIPCUBEMAP</td><td>0x0010000<td>设备支持多维数据集立方体纹理。</td></tr>
<tr><td>D3DPTEXTURECAPS_CUBEMAP_POW2</td><td>0x0020000<td>设备要求多维数据集纹理贴图的维度指定为 2 的幂。</td></tr>
<tr><td>D3DPTEXTURECAPS_VOLUMEMAP_POW2</td><td>0x0040000<td>设备要求体积纹理贴图的维度指定为 2 的幂。</td></tr>
<tr><td>D3DPTEXTURECAPS_NOPROJECTEDBUMPENV</td><td>0x0200000<td>设备不支持可编程和固定函数着色器中的投影凹凸环境查找操作。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPTFILTERCAPS">D3DPTFILTERCAPS</a>——三维功能类.纹理筛选常量。按阶段筛选功能反映了执行多纹理混合时纹理阶段支持的筛选模式。</th></tr>
<tr><td>D3DPTFILTERCAPS_MINFPOINT</td><td>0x0000100<td>设备支持按阶段点样本筛选，以缩小纹理。 </td></tr>
<tr><td>D3DPTFILTERCAPS_MINFLINEAR</td><td>0x0000200<td>设备支持用于缩小纹理的每阶段线性筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MINFANISOTROPIC</td><td>0x0000400<td>设备支持用于缩小纹理的每阶段各向异性筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MINFPYRAMIDALQUAD</td><td>0x0000800<td>设备支持按阶段的棱锥样本筛选，以缩小纹理。</td></tr>
<tr><td>D3DPTFILTERCAPS_MINFGAUSSIANQUAD</td><td>0x0001000<td>设备支持用于缩小纹理的每阶段高斯四边形筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MIPFPOINT</td><td>0x0010000<td>设备支持 mipmap 的每阶段点样本筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MIPFLINEAR</td><td>0x0020000<td>设备支持 mipmap 的每阶段双线性内插筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_CONVOLUTIONMONO</td><td>0x0040000<td>设备支持单色卷积筛选。仅在 Direct3D 9Ex 中可用。</td></tr>
<tr><td>D3DPTFILTERCAPS_MAGFPOINT</td><td>0x1000000<td>设备支持用于放大纹理的每阶段点样本筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MAGFLINEAR</td><td>0x2000000<td>设备支持用于放大 mipmap 的每阶段双线性内插筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MAGFANISOTROPIC</td><td>0x4000000<td>设备支持用于放大纹理的每阶段各向异性筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD</td><td>0x8000000<td>设备支持用于放大纹理的每阶段棱锥样本筛选。</td></tr>
<tr><td>D3DPTFILTERCAPS_MAGFGAUSSIANQUAD</td><td>0x10000000<td>设备支持用于放大纹理的每阶段高斯象限筛选。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPTADDRESSCAPS">D3DPTADDRESSCAPS</a>——三维功能类.纹理对象的纹理寻址功能。</th></tr>
<tr><td>D3DPTADDRESSCAPS_WRAP</td><td>0x0000001<td>设备可以将纹理包装到地址。</td></tr>
<tr><td>D3DPTADDRESSCAPS_MIRROR</td><td>0x0000002<td>设备可以将纹理镜像地址。</td></tr>
<tr><td>D3DPTADDRESSCAPS_CLAMP</td><td>0x0000004<td>设备可以将纹理固定到地址。</td></tr>
<tr><td>D3DPTADDRESSCAPS_BORDER</td><td>0x0000008<td>设备支持将[0.0,1.0]范围之外的坐标设置为指定的边框颜色。</td></tr>
<tr><td>D3DPTADDRESSCAPS_INDEPENDENTUV</td><td>0x0000010<td>设备可以分离纹理的u和 v 坐标的纹理寻址模式。</td></tr>
<tr><td>D3DPTADDRESSCAPS_MIRRORONCE</td><td>0x0000020<td>设备可以将纹理坐标的绝对值 (镜像约 0) ，然后固定到最大值。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DLINECAPS">D3DLINECAPS</a>——三维功能类.定义线条绘制基元的功能。</th></tr>
<tr><td>D3DLINECAPS_TEXTURE</td><td>0x0000001<td>支持纹理映射。</td></tr>
<tr><td>D3DLINECAPS_ZTEST</td><td>0x0000002<td>支持 z 缓冲区比较。</td></tr>
<tr><td>D3DLINECAPS_BLEND</td><td>0x0000004<td>支持源混合。</td></tr>
<tr><td>D3DLINECAPS_ALPHACMP</td><td>0x0000008<td>支持 alpha 测试比较。</td></tr>
<tr><td>D3DLINECAPS_FOG</td><td>0x0000010<td>支持迷雾。</td></tr>
<tr><td>D3DLINECAPS_ANTIALIAS</td><td>0x0000020<td>支持抗锯齿线。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DSTENCILCAPS">D3DSTENCILCAPS</a>——三维功能类.驱动程序模具功能标志。模具缓冲区条目是介于 0 到 2的n次方 - 1 的整数值，n 是模具缓冲区的位深度。</th></tr>
<tr><td>D3DSTENCILCAPS_KEEP</td><td>0x0000001<td>不要更新模具缓冲区中的条目。这是默认值。</td></tr>
<tr><td>D3DSTENCILCAPS_ZERO</td><td>0x0000002<td>将模具缓冲区条目设置为 0。</td></tr>
<tr><td>D3DSTENCILCAPS_REPLACE</td><td>0x0000004<td>将模具缓冲区条目替换为引用值。</td></tr>
<tr><td>D3DSTENCILCAPS_INCRSAT</td><td>0x0000008<td>递增模具缓冲区条目，固定到最大值。</td></tr>
<tr><td>D3DSTENCILCAPS_DECRSAT</td><td>0x0000010<td>递减模具缓冲区条目，固定为零。</td></tr>
<tr><td>D3DSTENCILCAPS_INVERT</td><td>0x0000020<td>反转模具缓冲区条目中的位。</td></tr>
<tr><td>D3DSTENCILCAPS_INCR</td><td>0x0000040<td>递增模具缓冲区条目，如果新值超过最大值，则换行为零。</td></tr>
<tr><td>D3DSTENCILCAPS_DECR</td><td>0x0000080<td>递减模具缓冲区条目，如果新值小于零，则包装到最大值。</td></tr>
<tr><td>D3DSTENCILCAPS_TWOSIDED</td><td>0x0000100<td>设备支持双面模具。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DTEXOPCAPS">D3DTEXOPCAPS</a>——三维功能类.描述此设备支持的纹理操作的标志的组合。</th></tr>
<tr><td>D3DTEXOPCAPS_DISABLE</td><td>0x0000001<td>禁用纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_SELECTARG1</td><td>0x0000002<td>支持 选择参数1 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_SELECTARG2</td><td>0x0000004<td>支持 选择参数2 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATE</td><td>0x0000008<td>支持 控制 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATE2X</td><td>0x0000010<td>支持 控制2X 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATE4X</td><td>0x0000020<td>支持 控制4X 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_ADD</td><td>0x0000040<td>支持 增加 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_ADDSIGNED</td><td>0x0000080<td>支持添加符号 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_ADDSIGNED2X</td><td>0x0000100<td>支持添加符号2 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_SUBTRACT</td><td>0x0000200<td>支持减法 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_ADDSMOOTH</td><td>0x0000400<td>支持添加平滑 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_BLENDDIFFUSEALPHA</td><td>0x0000800<td>支持混合扩散相位 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_BLENDTEXTUREALPHA</td><td>0x0001000<td>支持混合纹理相位 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_BLENDFACTORALPHA</td><td>0x0002000<td>支持混合因子相位 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_BLENDTEXTUREALPHAPM</td><td>0x0004000<td>支持混合纹理相位 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_BLENDCURRENTALPHA</td><td>0x0008000<td>支持混合当前相位 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_PREMODULATE</td><td>0x0010000<td>支持细节 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR</td><td>0x0020000<td>支持调制相位颜色 纹理混合操作。</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA</td><td>0x0040000<td>支持调制色度</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR</td><td>0x0080000<td>支持调制反相颜色</td></tr>
<tr><td>D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA</td><td>0x0100000<td>支持调制反相色度</td></tr>
<tr><td>D3DTEXOPCAPS_BUMPENVMAP</td><td>0x0200000<td>支持凹凸环境贴图</td></tr>
<tr><td>D3DTEXOPCAPS_BUMPENVMAPLUMINANCE</td><td>0x0400000<td>支持凹凸贴图亮度</td></tr>
<tr><td>D3DTEXOPCAPS_DOTPRODUCT3</td><td>0x0800000<td>支持网络产品</td></tr>
<tr><td>D3DTEXOPCAPS_MULTIPLYADD</td><td>0x1000000<td>支持多维数据集纹理</td></tr>
<tr><td>D3DTEXOPCAPS_LERP</td><td>0x2000000<td>说明。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DFVFCAPS">D3DFVFCAPS</a>——三维功能类.灵活的顶点格式功能。</th></tr>
<tr><td>D3DFVFCAPS_TEXCOORDCOUNTMASK</td><td>0x000ffff<td>屏蔽 FVFCaps 的低字。使设备可以同时用于多个纹理混合的纹理坐标集进行混合。</td></tr>
<tr><td>D3DFVFCAPS_DONOTSTRIPELEMENTS</td><td>0x0080000<td>不要去除顶点元素。如果不设置则从顶点格式中去除无关元素可提供更好的性能。</td></tr>
<tr><td>D3DFVFCAPS_PSIZE</td><td>0x0100000<td>点大小由呈现状态或顶点数据决定。如果应用程序提供点大小，则顶点数据将替代呈现状态数据。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DVTXPCAPS">D3DVTXPCAPS</a>——三维功能类.顶点处理功能标志组合。</th></tr>
<tr><td>D3DVTXPCAPS_TEXGEN</td><td>0x0000001<td>设备可以执行 texgen。</td></tr>
<tr><td>D3DVTXPCAPS_MATERIALSOURCE7</td><td>0x0000002<td>设置设备支持颜色材料状态的上限</td></tr>
<tr><td>D3DVTXPCAPS_DIRECTIONALLIGHTS</td><td>0x0000008<td>设备可以执行定向光。</td></tr>
<tr><td>D3DVTXPCAPS_POSITIONALLIGHTS</td><td>0x0000010<td>设备可以执行位置光 (包括点和顶点) 。</td></tr>
<tr><td>D3DVTXPCAPS_LOCALVIEWER</td><td>0x0000020<td>设备可以执行本地查看器。</td></tr>
<tr><td>D3DVTXPCAPS_TWEENING</td><td>0x0000040<td>设备可以执行顶点补间。</td></tr>
<tr><td>D3DVTXPCAPS_TEXGEN_SPHEREMAP</td><td>0x0000100<td>设备支持TCI球形映射。</td></tr>
<tr><td>D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER</td><td>0x0000200<td>设备不支持在非本地查看器模式下生成纹理。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DDEVCAPS2">D3DDEVCAPS2</a>——三维功能类.自适应分割的设备驱动程序功能标志。</th></tr>
<tr><td>D3DDEVCAPS2_STREAMOFFSET</td><td>0x0000001<td>设备支持流偏移量。</td></tr>
<tr><td>D3DDEVCAPS2_DMAPNPATCH</td><td>0x0000002<td>设备支持 N 补丁的位移映射。</td></tr>
<tr><td>D3DDEVCAPS2_ADAPTIVETESSRTPATCH</td><td>0x0000004<td>设备支持 RT 补丁的自适应分割</td></tr>
<tr><td>D3DDEVCAPS2_ADAPTIVETESSNPATCH</td><td>0x0000008<td>设备支持 N 补丁的自适应分割。</td></tr>
<tr><td>D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES</td><td>0x0000010<td>设备支持使用纹理作为源的矩形拉伸。</td></tr>
<tr><td>D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH</td><td>0x0000020<td>设备支持 N 补丁的预采样位移映射。 </td></tr>
<tr><td>D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET</td><td>0x0000040<td>多个顶点元素可以在流中共享相同的偏移量。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DDTCAPS">D3DDTCAPS</a>——三维功能类.描述设备支持的顶点数据类型的常量。</th></tr>
<tr><td>D3DDTCAPS_UBYTE4</td><td>0x0000001<td>4D 无符号字节。</td></tr>
<tr><td>D3DDTCAPS_UBYTE4N</td><td>0x0000002<td>规范化、4D 无符号字节。 四个字节中的每一个都通过除以 255.0 进行规范化。</td></tr>
<tr><td>D3DDTCAPS_SHORT2N</td><td>0x0000004<td>规范化，2D 签名短，扩展到 (第一个字节/32767.0，第二个字节/32767.0，0，1) 。</td></tr>
<tr><td>D3DDTCAPS_SHORT4N</td><td>0x0000008<td>规范化，4D 签名短，扩展到 (第一个字节/32767.0，第二个字节/32767.0，第三个字节/32767.0，第四个字节/32767.0) 。</td></tr>
<tr><td>D3DDTCAPS_USHORT2N</td><td>0x0000010<td>规范化，2D 无符号短，扩展到 (第一个字节/65535.0，第二个字节/65535.0，0，1) 。</td></tr>
<tr><td>D3DDTCAPS_USHORT4N</td><td>0x0000020<td>规范化的 4D 无符号短，扩展到 (第一个字节/65535.0、第二个字节/65535.0、第三个字节/65535.0、第四个字节/65535.0) 。</td></tr>
<tr><td>D3DDTCAPS_UDEC3</td><td>0x0000040<td>3D 无符号 10 10 10 格式扩展为 (值、值、值、1) 。</td></tr>
<tr><td>D3DDTCAPS_DEC3N</td><td>0x0000080<td>3D 签名 10 10 10 格式规范化并扩展为 (v[0]/511.0、v[1]/511.0、v[2]/511.0、1) 。</td></tr>
<tr><td>D3DDTCAPS_FLOAT16_2</td><td>0x0000100<td>2D 16 位浮点数。</td></tr>
<tr><td>D3DDTCAPS_FLOAT16_4</td><td>0x0000200<td>4D 16 位浮点数。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="显卡标识类">显卡标识类</a></td><td>D3DADAPTER_IDENTIFIER9</td><td>1100</td><td>包含标识适配器的信息。应用于三维图形类.显卡描述</td></tr>
<tr><th colspan=4>显卡标识类——成员表</th></tr>
<tr><td>驱动</td><td>Driver[512]</td><td>文本</td><td>驱动程序供应商相关展示内容。</td></tr>
<tr><td>说明</td><td>Description[512]</td><td>文本</td><td>驱动程序相关说明内容。</td></tr>
<tr><td>名称</td><td>DeviceName[32]</td><td>文本</td><td>GDI 的设备名称。</td></tr>
<tr><td>版本</td><td>DriverVersionLowPart</td><td>整数</td><td>标识 Direct3D 驱动程序的版本。</td></tr>
<tr><td>版号</td><td>DriverVersionHighPart</td><td>整数</td><td>标识 Direct3D 驱动程序的版本。</td></tr>
<tr><td>制造商</td><td>VendorId</td><td>整数</td><td>可用于帮助识别特定芯片集。查询此成员以标识制造商。</td></tr>
<tr><td>芯片</td><td>DeviceId</td><td>整数</td><td>可用于帮助识别特定芯片集。查询此成员以标识芯片集的类型。</td></tr>
<tr><td>子集</td><td>SubSysId</td><td>整数</td><td>可用于帮助识别特定芯片集。查询此成员以标识子系统，通常是特定板。</td></tr>
<tr><td>修订</td><td>Revision</td><td>整数</td><td>可用于帮助识别特定芯片集。查询此成员以识别芯片集的修订级别。</td></tr>
<tr><td>标识</td><td>DeviceIdentifier[16]</td><td>文本</td><td>此 GUID 是驱动程序和芯片集对的唯一标识符。</td></tr>
<tr><td>验证</td><td>WHQLLevel</td><td>整数</td><td>此驱动程序和设备对的验证级别。0未认证;1无认证日期;或者是日期类型(日月各8位,年份高16位)</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="显示模式类">显示模式类</a></td><td>D3DDISPLAYMODE</td><td>16</td><td>描述显示模式。应用于三维图形类.枚举模式</td></tr>
<tr><th colspan=4>显示模式类——成员表</th></tr>
<tr><td>宽度</td><td>Width</td><td>整数</td><td>屏幕宽度（以像素为单位）。</td></tr>
<tr><td>高度</td><td>Height</td><td>整数</td><td>屏幕高度（以像素为单位）。</td></tr>
<tr><td>刷新率</td><td>RefreshRate</td><td>整数</td><td>刷新速率。 值 0 表示适配器默认值。</td></tr>
<tr><td>格式</td><td>Format</td><td>整数</td><td>D3D格式枚举类型，描述显示模式的图面格式。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="显示参数类">显示参数类</a></td><td>D3DPRESENT_PARAMETERS</td><td>56</td><td>描述演示文稿参数。应用于三维图形类.创建设备</td></tr>
<tr><th colspan=4>显示参数类——成员表</th></tr>
<tr><td>宽度</td><td>BackBufferWidth</td><td>整数</td><td>新交换链的后部缓冲区的宽度（像素）。</td></tr>
<tr><td>高度</td><td>BackBufferHeight</td><td>整数</td><td>新交换链的后台缓冲区的高度（像素）。 </td></tr>
<tr><td>格式</td><td>BackBufferFormat</td><td>整数</td><td>后台缓冲区格式。详见D3DFORMAT。</td></tr>
<tr><td>数量</td><td>BackBufferCount</td><td>整数</td><td>后台缓冲区数量,若失败可用相同参数调用两次</td></tr>
<tr><td>多重采样</td><td>MultiSampleType</td><td>整数</td><td>未设置D3DSWAPEFFECT_DISCARD请使用0;</td></tr>
<tr><td>采样质量</td><td>MultiSampleQuality</td><td>整数</td><td>质量级别。 有效范围介于 0 到 1 之间</td></tr>
<tr><td>交换效果</td><td>SwapEffect</td><td>整数</td><td>有关缓冲区交换行为详见D3DSWAPEFFECT</td></tr>
<tr><td>设备窗口</td><td>hDeviceWindow</td><td>整数</td><td>设备窗口确定屏幕上后台缓冲区的位置和大小。演播窗口 </td></tr>
<tr><td>窗口模式</td><td>Windowed</td><td>整数</td><td>如果应用程序以窗口方式运行，则为真;如果应用程序全屏运行，则为假。 </td></tr>
<tr><td>深度模具</td><td>EnableAutoDepthStencil</td><td>整数</td><td>此值为真程序则具备深度缓冲区。需要指定有效的深度模具格式</td></tr>
<tr><td>深度格式</td><td>AutoDepthStencilFormat</td><td>整数</td><td>设备将创建的自动深度模具图面的格式。参见D3DFORMAT </td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>D3DPRESENTFLAG 常量之一。 </td></tr>
<tr><td>刷新率</td><td>FullScreen_RefreshRateInHz</td><td>整数</td><td>显示适配器刷新屏幕的速率。对于窗口模式，刷新率必须为0。</td></tr>
<tr><td>演播间隔</td><td>PresentationInterval</td><td>整数</td><td>交换链的后台缓冲区可以呈现给前缓冲区的最大速率。详见:D3DPRESENT </td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>长度</td><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>300</td><td><a name="D3DCAPS9">D3DCAPS9</a></td><td>三维功能类</td><td>表示通过 Direct3D 对象公开的硬件的功能。应用于三维图形类</td></tr>
<tr><th colspan=4>三维功能类——成员表</th></tr>
<tr><td>整数</td><td>DeviceType<td>种类</td><td>标识用于处理顶点的资源类型。详见：D3DDEVTYPE</td></tr>
<tr><td>整数</td><td>AdapterOrdinal<td>序号</td><td>创建此 Direct3D 设备的适配器。 此序号仅对传递给创建此设备的接口的方法有效。</td></tr>
<tr><td>整数</td><td>Caps<td>功能</td><td>特定于驱动程序的功能。$20000=返回当前扫描行;$800=支持覆盖 DDI(9Ex)</td></tr>
<tr><td>整数</td><td>Caps2<td>功能2</td><td>特定于驱动程序的功能。详见:D3DCAPS2</td></tr>
<tr><td>整数</td><td>Caps3<td>功能3</td><td>特定于驱动程序的功能。</td></tr>
<tr><td>整数</td><td>PresentationIntervals<td>间隔</td><td>表示可用的演示交换间隔的值的位掩码。1=每秒刷新;2=每秒刷新;4=三次刷新;8=四次刷新;$80000000=即时刷新</td></tr>
<tr><td>整数</td><td>CursorCaps<td>光标</td><td>指示可用于游标的硬件支持的位掩码。1=高分辨率模式下支持硬件全色光标；2=高和低分辨率模式下都支持硬件全色光标</td></tr>
<tr><td>整数</td><td>DevCaps<td>设备</td><td>标识设备功能的标志。</td></tr>
<tr><td>整数</td><td>PrimitiveMiscCaps<td>基元</td><td>其他驱动程序基元功能。请参阅 D3DPMISCCAPS。</td></tr>
<tr><td>整数</td><td>RasterCaps<td>光栅</td><td>有关光栅绘制功能的信息。</td></tr>
<tr><td>整数</td><td>ZCmpCaps<td>纵深比较</td><td>Z 缓冲区比较功能。详见：D3DPCMPCAPS</td></tr>
<tr><td>整数</td><td>SrcBlendCaps<td>源混合</td><td>源混合功能。详见：D3DPBLENDCAPS</td></tr>
<tr><td>整数</td><td>DestBlendCaps<td>目标混合</td><td>目标混合功能。详见：D3DPBLENDCAPS</td></tr>
<tr><td>整数</td><td>AlphaCmpCaps<td>透明比较</td><td>Alpha 测试比较功能。详见：D3DPCMPCAPS</td></tr>
<tr><td>整数</td><td>ShadeCaps<td>着色</td><td>着色操作功能。详见：D3DPSHADECAPS</td></tr>
<tr><td>整数</td><td>TextureCaps<td>纹理映射</td><td>其他纹理映射功能。 详见：D3DPTEXTURECAPS</td></tr>
<tr><td>整数</td><td>TextureFilterCaps<td>纹理筛选</td><td>纹理的纹理筛选功能标志的任意组合。详见：D3DPTFILTERCAPS</td></tr>
<tr><td>整数</td><td>CubeTextureFilterCaps<td>多维纹理</td><td>多维数据集纹理的纹理筛选功能。详见：D3DPTFILTERCAPS</td></tr>
<tr><td>整数</td><td>VolumeTextureFilterCaps<td>体积纹理</td><td>体积纹理的纹理筛选功能。详见：D3DPTFILTERCAPS</td></tr>
<tr><td>整数</td><td>TextureAddressCaps<td>纹理寻址</td><td>纹理对象的纹理寻址功能。详见：D3DPTADDRESSCAPS</td></tr>
<tr><td>整数</td><td>VolumeTextureAddressCaps<td>卷纹寻址</td><td>卷纹理的纹理寻址功能。详见：D3DPTADDRESSCAPS</td></tr>
<tr><td>整数</td><td>LineCaps<td>线条</td><td>定义线条绘制基元的功能。详见：D3DLINECAPS</td></tr>
<tr><td>整数</td><td>MaxTextureWidth<td>最大宽度</td><td>此设备的最大纹理宽度。</td></tr>
<tr><td>整数</td><td>MaxTextureHeight<td>最大高度</td><td>此设备的最大纹理高度。</td></tr>
<tr><td>整数</td><td>MaxVolumeExtent<td>最大限度</td><td>三个维度中的任何一个的最大值 (体积纹理的宽度、高度和深度) 。</td></tr>
<tr><td>整数</td><td>MaxTextureRepeat<td>最大范围</td><td>此数字表示规范化纹理坐标后整数位的最大范围。</td></tr>
<tr><td>整数</td><td>MaxTextureAspectRatio<td>最大比例</td><td>硬件支持的最大纹理纵横比，通常为 2 次幂。</td></tr>
<tr><td>整数</td><td>MaxAnisotropy<td>最大异向</td><td>最大各向异性纹理阶段状态的最大有效值。</td></tr>
<tr><td>小数</td><td>MaxVertexW<td>最大深度</td><td>设备支持的基于 W 的最大深度值。</td></tr>
<tr><td>小数</td><td>GuardBandLeft<td>防护带左</td><td>防护带剪辑区域的屏幕空间坐标。 此矩形内、视区矩形外部的坐标会自动剪切。</td></tr>
<tr><td>小数</td><td>GuardBandTop<td>防护带顶</td><td>防护带剪辑区域的屏幕空间坐标。 此矩形内、视区矩形外部的坐标会自动剪切。</td></tr>
<tr><td>小数</td><td>GuardBandRight<td>防护带右</td><td>防护带剪辑区域的屏幕空间坐标。 此矩形内、视区矩形外部的坐标会自动剪切。</td></tr>
<tr><td>小数</td><td>GuardBandBottom<td>防护带底</td><td>防护带剪辑区域的屏幕空间坐标。 此矩形内、视区矩形外部的坐标会自动剪切。</td></tr>
<tr><td>小数</td><td>ExtentsAdjust<td>范围调整</td><td>将盘区矩形向外调整以适应抗锯齿内核的像素数。</td></tr>
<tr><td>整数</td><td>StencilCaps<td>模具操作</td><td>指定支持的模具缓冲区操作的标志。参见：D3DSTENCILCAPS</td></tr>
<tr><td>整数</td><td>FVFCaps<td>顶点格式</td><td>灵活的顶点格式功能。</td></tr>
<tr><td>整数</td><td>TextureOpCaps<td>纹理操作</td><td>描述此设备支持的纹理操作的标志的组合。</td></tr>
<tr><td>整数</td><td>MaxTextureBlendStages<td>混合器数</td><td>固定函数管道中支持的最大纹理混合阶段数。</td></tr>
<tr><td>整数</td><td>MaxSimultaneousTextures<td>纹理数量</td><td>可同时绑定到固定函数管道采样器阶段的最大纹理数。</td></tr>
<tr><td>整数</td><td>VertexProcessingCaps<td>中文</td><td>顶点处理功能。参见：D3DVTXPCAPS</td></tr>
<tr><td>整数</td><td>MaxActiveLights<td>最大光数</td><td>可以同时处于活动状态的最大光数。</td></tr>
<tr><td>整数</td><td>MaxUserClipPlanes<td>最大面数</td><td>支持的最大用户定义剪裁平面数。 此成员可以为 0。</td></tr>
<tr><td>整数</td><td>MaxVertexBlendMatrices<td>最大矩阵</td><td>此设备在执行多矩阵顶点混合时可以应用的最大矩阵数。</td></tr>
<tr><td>整数</td><td>MaxVertexBlendMatrixIndex<td>最大索引</td><td>该值指定可以使用每个顶点索引编制索引到的最大矩阵索引。</td></tr>
<tr><td>小数</td><td>MaxPointSize<td>最大尺寸</td><td>点基元的最大大小。 如果设置为 1.0f，则设备不支持点大小控制。 范围大于或等于 1.0f。</td></tr>
<tr><td>整数</td><td>MaxPrimitiveCount<td>最大其元</td><td>每个 DrawPrimitive 调用的最大基元数。</td></tr>
<tr><td>整数</td><td>MaxVertexIndex<td>最大顶点</td><td>硬件顶点处理支持的索引的最大大小。此值大于 0x0000FFFF</td></tr>
<tr><td>整数</td><td>MaxStreams<td>最大并发</td><td>SetStreamSource 的最大并发数据流数。 有效范围是 1 到 16。</td></tr>
<tr><td>整数</td><td>MaxStreamStride<td>最大步长</td><td>SetStreamSource 的最大步长。</td></tr>
<tr><td>整数</td><td>VertexShaderVersion<td>顶点版本</td><td>表示顶点着色器main和子版本的两个数字。</td></tr>
<tr><td>整数</td><td>MaxVertexShaderConst<td>着色器数</td><td>为常量保留的 顶点着色器顶点着色器寄存器 的数目。</td></tr>
<tr><td>整数</td><td>PixelShaderVersion<td>像素版本</td><td>表示像素着色器main和子版本的两个数字。 </td></tr>
<tr><td>小数</td><td>PixelShader1xMaxValue<td>最大分量</td><td>像素着色器算术分量最大值。</td></tr>
<tr><td>整数</td><td>DevCaps2<td>适应设备</td><td>自适应分割的设备驱动程序功能。 有关详细信息，请参阅 D3DDEVCAPS2</td></tr>
<tr><td>小数</td><td>MaxNpatchTessellationLevel<td>最大细分</td><td>最大Npatch细分级别</td></tr>
<tr><td>整数</td><td>Reserved5<td>预留</td><td>预留5</td></tr>
<tr><td>整数</td><td>MasterAdapterOrdinal<td>主显卡号</td><td>此数字指示哪个设备是此从属设备的主机。 </td></tr>
<tr><td>整数</td><td>AdapterOrdinalInGroup<td>显卡组号</td><td>此数字指示 API 引用头的顺序。主适配器的值始终为0。这些值不对应于适配器序号。它们仅适用于组中的头部。</td></tr>
<tr><td>整数</td><td>NumberOfAdaptersInGroup<td>显卡组数</td><td>默认1，多个主显卡则大于1。对于多显卡的从属适配器，该值将为 0。</td></tr>
<tr><td>整数</td><td>DeclTypes<td>顶点声明</td><td>顶点声明中包含的一个或多个数据类型的组合。 请参阅 D3DDTCAPS。</td></tr>
<tr><td>整数</td><td>NumSimultaneousRTs<td>显示数目</td><td>同时呈现目标的数目。 此数字至少为1。</td></tr>
<tr><td>整数</td><td>StretchRectFilterCaps<td>拉伸矩形</td><td>描述 拉伸矩形 支持的操作的常量的组合。0x100点缩小；0x200线性缩小；0x1000000点放大；0x2000000线性放大</td></tr>
<tr><td>整数</td><td>D3DVSHADERCAPS2_0.Caps<td>指令谓词</td><td>如果此值为非零值，则支持指令谓词。 setp_comp dst、src0、src1</td></tr>
<tr><td>整数</td><td>D3DVSHADERCAPS2_0.DynamicFlowControlDepth<td>指令深度</td><td>0 或 24，表示动态流控制指令嵌套的深度。 请参阅 D3DVS20CAPS。</td></tr>
<tr><td>整数</td><td>D3DVSHADERCAPS2_0.NumTemps<td>寄存器数</td><td>支持的临时寄存器数。 请参阅 D3DVS20CAPS。</td></tr>
<tr><td>整数</td><td>D3DVSHADERCAPS2_0.StaticFlowControlDepth<td>循环深度</td><td>循环的嵌套深度 - vs/rep - vs 和 call - vs/callnz bool - vs instructions。 请参阅 D3DVS20CAPS。</td></tr>
<tr><td>整数</td><td>D3DPSHADERCAPS2_0.Caps<td>支持指令</td><td>如果此值为非零值，则支持指令谓词。 setp_comp dst、src0、src1</td></tr>
<tr><td>整数</td><td>D3DPSHADERCAPS2_0.DynamicFlowControlDepth<td>指令嵌套</td><td>0 或 24，表示动态流控制指令嵌套的深度。 请参阅 D3DPSHADERCAPS2_0。</td></tr>
<tr><td>整数</td><td>D3DPSHADERCAPS2_0.NumTemps<td>临时寄存</td><td>支持的临时寄存器数。 请参阅 D3DPSHADERCAPS2_0。</td></tr>
<tr><td>整数</td><td>D3DPSHADERCAPS2_0.StaticFlowControlDepth<td>循环嵌套</td><td>循环的嵌套深度 - vs/rep - vs 和 call - vs/callnz bool - vs instructions。 请参阅 D3DPSHADERCAPS2_0。</td></tr>
<tr><td>整数</td><td>D3DPSHADERCAPS2_0.NumInstructionSlots<td>指令槽数</td><td>支持的指令槽数。 请参阅 D3DPSHADERCAPS2_0。</td></tr>
<tr><td>整数</td><td>VertexTextureFilterCaps<td>顶点筛选</td><td>设备支持顶点着色器纹理筛选器功能。 请参阅 D3DPTFILTERCAPS。</td></tr>
<tr><td>整数</td><td>MaxVShaderInstructionsExecuted<td>顶点指令</td><td>使用流控制时可以运行的最大顶点着色器指令数。</td></tr>
<tr><td>整数</td><td>MaxPShaderInstructionsExecuted<td>像素指令</td><td>使用流控制时可以运行的最大像素着色器指令数。</td></tr>
<tr><td>整数</td><td>MaxVertexShader30InstructionSlots<td>顶点槽数</td><td>支持的最大顶点着色器指令槽数。可对此上限设置的最大值为 32768。</td></tr>
<tr><td>整数</td><td>MaxPixelShader30InstructionSlots<td>像素槽数</td><td>支持的最大像素着色器指令槽数。可对此上限设置的最大值为 32768。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3D9Ex</td><td>三维图形类</td><td>应用程序使用三维图形接口的方法创建三维图形对象并设置环境。包括枚举和检索设备功能的方法。</td></tr>
<tr><th colspan=3>三维图形类——方法表,在原对象上增加了五个方法,共用同一个调用表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>RegisterSoftwareDevice</td><td>软件光栅(@函数)</td><td>注册可插入软件设备。提供软件光栅化，使应用程序能够访问各种软件光栅器。</td></tr>
<tr><td>GetAdapterCount</td><td>显卡数</td><td>返回系统上的适配器数。显卡序号0到数量减一</td></tr>
<tr><td>GetAdapterIdentifier</td><td>显卡描述(序号,标志,显卡标识类)</td><td>描述指定物理显示适配器信息:<a href="#显卡标识类">显卡标识类</a>。标志:0=默认;2=下载驱动证书;</td></tr>
<tr><td>GetAdapterModeCount</td><td>模式数(序号,图面格式)</td><td>返回此适配器上可用的显示模式数。<a href="#D3DFORMAT">图面格式</a> </td></tr>
<tr><td>EnumAdapterModes</td><td>枚举模式(序号,<a href="#D3DDEVTYPE">设备类型</a>,索引,显示模式类)</td><td>枚举指定的适配器是否支持请求的格式和<a href="#显示模式类">显示模式</a>。索引是模式数的序号;</td></tr>
<tr><td>GetAdapterDisplayMode</td><td>显示模式(序号,显示模式类)</td><td>检索适配器的当前显示模式信息。</td></tr>
<tr><td>CheckDeviceType</td><td>设备类型(序号,<a href="#D3DDEVTYPE">设备类型</a>,<a href="#D3DFORMAT">显示模式,缓冲格式</a>,全屏)</td><td>验证硬件加速设备类型是否可以在此适配器上使用。<a href="#D3DDEVTYPE">设备类型</a></td></tr>
<tr><td>CheckDeviceFormat</td><td>设备格式(序号,设备类型,选项,<a href="#D3DRESOURCETYPE">资源类型</a>,图面格式)</td><td>确定表面格式是否可用作指定资源类型常数，纹理、深度模具缓冲区、呈现目标或三者的任何组合。<a href="#D3DUSAGE">选项:</a></td></tr>
<tr><td>CheckDeviceMultiSampleType</td><td>多重采样(序号,设备类型,<a href="#D3DFORMAT">图面格式</a>,小窗,采样率,@数量)</td><td>确定此设备上是否提供多重采样技术。小窗为假=全屏采样;<a href="#D3DMULTISAMPLE_TYPE">采样率:</a>（0-16）</td></tr>
<tr><td>CheckDepthStencilMatch</td><td>模具匹配(序号,<a href="#D3DDEVTYPE">设备类型</a>,<a href="#D3DFORMAT">显示模式,呈现格式,模具格式</a>)</td><td>确定深度模具格式是否与特定显示模式下的呈现目标格式兼容。</td></tr>
<tr><td>CheckDeviceFormatConversion</td><td>可转格式(序号,设备类型,<a href="#D3DFORMAT">源格式,目标格式</a>)</td><td>测试设备是否支持从一种显示格式转换为另一种显示格式。</td></tr>
<tr><td>GetDeviceCaps</td><td>设备功能(序号,<a href="#D3DDEVTYPE">设备类型</a>,功能)</td><td>检索有关设备的特定于设备的信息。功能:<a href="#D3DCAPS9">三维功能类</a></td></tr>
<tr><td>GetAdapterMonitor</td><td>监视器(序号)</td><td>返回对象关联的监视器的句柄。</td></tr>
<tr><td>CreateDevice</td><td>创建设备(序号,设备类型,焦点窗口,<a href="#D3DCREATE">选项</a>,参数,@接口)</td><td>创建表示显示适配器的设备接口。参数:<a href="#显示参数类">显示参数类</a></td></tr>
<tr><td>GetAdapterModeCountEx</td><td>模式数量(序号,特征)</td><td>返回可用显示模式的数目。特征=<a href="#显示格式类">显示格式类</a></td></tr>
<tr><td>EnumAdapterModesEx</td><td>列举模式(序号,特征,索引,模式)</td><td>指定模式索引获取实际显示模式信息。特征=<a href="#显示格式类">显示格式类</a>,模式=<a href="#显示模版类">显示模版类</a></td></tr>
<tr><td>GetAdapterDisplayModeEx</td><td>显示设置(序号,特征,模式)</td><td>检索适配器的当前显示模式和旋转设置。特征=<a href="#显示格式类">显示格式类</a>,模式=<a href="#显示模版类">显示模版类</a></td></tr>
<tr><td>CreateDeviceEx</td><td>新建设备(序号,设备类型,焦点窗口,<a href="#D3DCREATE">选项</a>,参数,模式,@接口)</td><td>创建表示显示适配器的设备接口。参数:<a href="#显示参数类">显示参数类</a>;,模式=<a href="#显示模版类">显示模版类</a></td></tr>
<tr><td>GetAdapterLUID</td><td>取标识(序号,标识)</td><td>此方法返回特定于适配器硬件的适配器的唯一标识符。显卡标识类</td></tr>
</table>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="标识类">显卡标识类</a></td><td>LUID</td><td>8</td><td>它指定保证在本地计算机上唯一的标识符。</td></tr>
<tr><th colspan=4>显卡标识类——成员表</th></tr>
<tr><td>低位</td><td>LowPart</td><td>整数</td><td>标识符的低位数据。</td></tr>
<tr><td>高位</td><td>HighPart</td><td>整数</td><td>标识符的高位数据。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="显示格式类">显示格式类</a></td><td>D3DDISPLAYMODEFILTER</td><td>24</td><td>指定要筛选出的显示模式的类型。应用于三维图形类</td></tr>
<tr><th colspan=4>显示格式类——成员表</th></tr>
<tr><td>大小</td><td>Size</td><td>整数</td><td>此结构的大小。固定为24</td></tr>
<tr><td>格式</td><td>Format</td><td>整数</td><td>D3DFORMAT格式枚举类型，描述显示模式的图面格式。</td></tr>
<tr><td>扫描</td><td>ScanLineOrdering</td><td>整数</td><td>指示扫描线顺序是渐进式还是隔行扫描。1=逐行扫描;2=隔行扫描</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="显示模版类">显示模版类</a></td><td>D3DDISPLAYMODEEX</td><td>24</td><td>描述显示模式。应用于三维图形类</td></tr>
<tr><th colspan=4>显示模版类——成员表</th></tr>
<tr><td>大小</td><td>Size</td><td>整数</td><td>此结构的大小。固定为24</td></tr>
<tr><td>宽度</td><td>Width</td><td>整数</td><td>屏幕宽度（以像素为单位）。</td></tr>
<tr><td>高度</td><td>Height</td><td>整数</td><td>屏幕高度（以像素为单位）。</td></tr>
<tr><td>刷新率</td><td>RefreshRate</td><td>整数</td><td>刷新速率。 值 0 表示适配器默认值。</td></tr>
<tr><td>格式</td><td>Format</td><td>整数</td><td>D3D格式枚举类型，描述显示模式的图面格式。请参阅 D3DFORMAT</td></tr>
<tr><td>扫描</td><td>ScanLineOrdering</td><td>整数</td><td>指示扫描线顺序是渐进式还是隔行扫描。1=逐行扫描;2=隔行扫描</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DDISPLAYROTATION">D3DDISPLAYROTATION</a>——三维功能类.显示设置,指定如何旋转用于显示全屏应用程序的监视器。</th></tr>
<tr><td>D3DDISPLAYROTATION_IDENTITY</td><td>1</td><td>显示未旋转。</td></tr>
<tr><td>D3DDISPLAYROTATION_90</td><td>2</td><td>显示器旋转 90 度。</td></tr>
<tr><td>D3DDISPLAYROTATION_180</td><td>3</td><td>显示器旋转 180 度。</td></tr>
<tr><td>D3DDISPLAYROTATION_270</td><td>4</td><td>显示器旋转 270 度。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DUSAGE">D3DUSAGE</a>——三维图形类,标识资源的使用方式的用法选项。</th></tr>
<tr><td>D3DUSAGE_RENDERTARGET</td><td>0x00000001</td><td>资源将是呈现目标。只能与 D3DPOOL_DEFAULT 一起使用。</td></tr>
<tr><td>D3DUSAGE_DEPTHSTENCI</td><td>0x00000002</td><td>资源将是深度模具缓冲区。只能与 D3DPOOL_DEFAULT 一起使用。</td></tr>
<tr><td>D3DUSAGE_DYNAMIC</td><td>0x00000200</td><td>设置为指示顶点缓冲区需要使用动态内存。</td></tr>
<tr><td>D3DUSAGE_AUTOGENMIPMAP</td><td>0x00000400</td><td>资源将自动生成 mipmap。体积纹理和深度模具表面/纹理不支持，对系统内存中的资源无效。</td></tr>
<tr><td>D3DUSAGE_DMAP</td><td>0x00004000</td><td>资源将是位移映射。</td></tr>
<tr><td>D3DUSAGE_QUERY_LEGACYBUMPMAP</td><td>0x00008000</td><td>查询有关旧版凹凸图的资源。</td></tr>
<tr><td>D3DUSAGE_QUERY_SRGBREAD</td><td>0x00010000</td><td>说明。</td></tr>
<tr><td>D3DUSAGE_QUERY_FILTER</td><td>0x00020000</td><td>查询资源格式以查看它是否支持的纹理筛选器类型。</td></tr>
<tr><td>D3DUSAGE_QUERY_SRGBWRITE</td><td>0x00040000</td><td>查询资源以验证纹理在读取操作期间是否支持伽玛校正。</td></tr>
<tr><td>D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING</td><td>0x00080000</td><td>查询资源以验证是否支持后像素着色器混合支持。</td></tr>
<tr><td>D3DUSAGE_QUERY_VERTEXTEXTURE</td><td>0x00100000</td><td>查询资源以验证是否支持顶点着色器纹理采样。</td></tr>
<tr><td>D3DUSAGE_WRITEONLY</td><td>0x00000008</td><td>通知系统应用程序仅写入顶点缓冲区。 </td></tr>
<tr><td>D3DUSAGE_SOFTWAREPROCESSING</td><td>0x00000010</td><td>如果使用此标志顶点处理在软件中完成。</td></tr>
<tr><td>D3DUSAGE_DONOTCLIP</td><td>0x00000020</td><td>设置为指示顶点缓冲区内容将永远不需要剪辑。 </td></tr>
<tr><td>D3DUSAGE_POINTS</td><td>0x00000040</td><td>设置为指示顶点或索引缓冲区将用于绘制点子画面。</td></tr>
<tr><td>D3DUSAGE_RTPATCHES</td><td>0x00000080</td><td>设置为指示顶点缓冲区用于绘制高阶基元。</td></tr>
<tr><td>D3DUSAGE_NPATCHES</td><td>0x00000100</td><td>设置为指示顶点缓冲区用于绘制 N 个补丁。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DTEXTUREFILTERTYPE">D3DTEXTUREFILTERTYPE</a>——三维纹理类.筛选类型,定义纹理阶段的纹理筛选模式。</th></tr>
<tr><td>D3DTEXF_NONE</td><td>0</td><td>与 D3DSAMP_MIPFILTER 一起使用时，禁用误应用。</td></tr>
<tr><td>D3DTEXF_POINT</td><td>1</td><td>与 D3DSAMP_ MAGFILTER 或 D3DSAMP_MINFILTER 一起使用时，指定点筛选将分别用作纹理放大或缩小筛选器。<br> 
与 D3DSAMP_MIPFILTER 一起使用时，启用 mipmapping 并指定光栅器从最接近 mip 级别的纹素中选择颜色。</td></tr>
<tr><td>D3DTEXF_LINEAR</td><td>2</td><td>与 D3DSAMP_ MAGFILTER 或 D3DSAMP_MINFILTER 一起使用时，指定线性筛选将分别用作纹理放大或缩小筛选器。<br> 与 D3DSAMP_MIPFILTER一起使用时，启用 mipming 和三线性筛选;它指定光栅器在两个最接近的 mip 级别之间内插。</td></tr>
<tr><td>D3DTEXF_ANISOTROPIC</td><td>3</td><td>与 D3DSAMP_ MAGFILTER 或 D3DSAMP_MINFILTER 一起使用时，分别指定用作纹理放大或缩小筛选器的各向异性纹理筛选<br> 补偿由纹理多边形与屏幕平面之间的角度差异导致的失真。 与 D3DSAMP_MIPFILTER 一起使用未定义。</td></tr>
<tr><td>D3DTEXF_PYRAMIDALQUAD</td><td>6</td><td>用作纹理放大或缩小筛选器的 4 样本帐篷筛选器。 与 D3DSAMP_MIPFILTER 一起使用未定义。</td></tr>
<tr><td>D3DTEXF_GAUSSIANQUAD</td><td>7</td><td>用作纹理放大或缩小筛选器的 4 样本高斯筛选器。 与 D3DSAMP_MIPFILTER 一起使用未定义。</td></tr>
<tr><td>D3DTEXF_CONVOLUTIONMONO</td><td>8</td><td>单色纹理的卷积筛选器。仅在 Direct3D 9Ex 中可用。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3DResource9</td><td>三维纹理类</td><td>应用程序使用对象接口的方法来查询和准备资源。</td></tr>
<tr><th colspan=3>三维图形类——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetDevice</td><td>取设备(@接口)</td><td>检索与资源关联的设备。</td></tr>
<tr><td>SetPrivateData</td><td>改数据(标识,数据,大小,标志)</td><td>将数据与程序使用的资源相关联。标志:0=自动分配内存;1=数据为空接口指针(大小为4)</td></tr>
<tr><td>GetPrivateData</td><td>取数据(标识,数据,大小)</td><td>将与资源关联的专用数据复制到提供的缓冲区。</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(标识)</td><td>释放与此资源关联的指定私有数据。</td></tr>
<tr><td>SetPriority</td><td>改优先级(值)</td><td>分配用于计划的资源的优先级。</td></tr>
<tr><td>GetPriority</td><td>取优先级</td><td>获取此资源的优先级。</td></tr>
<tr><td>PreLoad</td><td>预加载</td><td>预加载托管资源。</td></tr>
<tr><td>GetType</td><td>取类型</td><td>返回资源的<a href="#D3DRESOURCETYPE">类型</a>。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3DBaseTexture9</td><td>三维纹理类</td><td>应用程序使用对象接口的方法操作纹理资源，包括立方体纹理和体积纹理。</td></tr>
<tr><th colspan=3>三维图形类——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetDevice</td><td>取设备(@接口)</td><td>检索与资源关联的设备。</td></tr>
<tr><td>SetPrivateData</td><td>改数据(标识,数据,大小,标志)</td><td>将数据与程序使用的资源相关联。标志:0=自动分配内存;1=数据为空接口指针(大小为4)</td></tr>
<tr><td>GetPrivateData</td><td>取数据(标识,数据,大小)</td><td>将与资源关联的专用数据复制到提供的缓冲区。</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(标识)</td><td>释放与此资源关联的指定私有数据。</td></tr>
<tr><td>SetPriority</td><td>改优先级(值)</td><td>分配用于计划的资源的优先级。</td></tr>
<tr><td>GetPriority</td><td>取优先级</td><td>获取此资源的优先级。</td></tr>
<tr><td>PreLoad</td><td>预加载</td><td>预加载托管资源。</td></tr>
<tr><td>GetType</td><td>取类型</td><td>返回资源的<a href="#D3DRESOURCETYPE">类型</a>。</td></tr>
<tr><td>SetLOD</td><td>改详细(值)</td><td>为托管纹理设置最详细的详细级别。</td></tr>
<tr><td>GetLOD</td><td>取详细</td><td>返回固定到托管纹理的最大详细程度集，非托管纹理不支持此方法。</td></tr>
<tr><td>GetLevelCount</td><td>取级数</td><td>返回多级纹理中的纹理级别数。</td></tr>
<tr><td>SetAutoGenFilterType</td><td>改筛选(筛选)</td><td>设置用于自动生成的 mipmap 子层的<a href="#D3DTEXTUREFILTERTYPE">筛选器类型</a>。</td></tr>
<tr><td>GetAutoGenFilterType</td><td>取筛选</td><td>获取用于自动生成的 mipmap 子层的<a href="#D3DTEXTUREFILTERTYPE">筛选器类型</a>。</td></tr>
<tr><td>GenerateMipSubLevels</td><td>生成子级</td><td>生成 mipmap 子级别。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3DCubeTexture9/IDirect3DTexture9</td><td>三维纹理类</td><td>应用程序使用对象接口的方法操作多维数据集纹理资源。</td></tr>
<tr><th colspan=3>三维图形类——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetDevice</td><td>取设备(@接口)</td><td>检索与资源关联的设备。</td></tr>
<tr><td>SetPrivateData</td><td>改数据(标识,数据,大小,标志)</td><td>将数据与程序使用的资源相关联。标志:0=自动分配内存;1=数据为空接口指针(大小为4)</td></tr>
<tr><td>GetPrivateData</td><td>取数据(标识,数据,大小)</td><td>将与资源关联的专用数据复制到提供的缓冲区。</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(标识)</td><td>释放与此资源关联的指定私有数据。</td></tr>
<tr><td>SetPriority</td><td>改优先级(值)</td><td>分配用于计划的资源的优先级。</td></tr>
<tr><td>GetPriority</td><td>取优先级</td><td>获取此资源的优先级。</td></tr>
<tr><td>PreLoad</td><td>预加载</td><td>预加载托管资源。</td></tr>
<tr><td>GetType</td><td>取类型</td><td>返回资源的<a href="#D3DRESOURCETYPE">类型</a>。</td></tr>
<tr><td>SetLOD</td><td>改详细(值)</td><td>为托管纹理设置最详细的详细级别。</td></tr>
<tr><td>GetLOD</td><td>取详细</td><td>返回固定到托管纹理的最大详细程度集，非托管纹理不支持此方法。</td></tr>
<tr><td>GetLevelCount</td><td>取级数</td><td>返回多级纹理中的纹理级别数。</td></tr>
<tr><td>SetAutoGenFilterType</td><td>改筛选(筛选)</td><td>设置用于自动生成的 mipmap 子层的<a href="#D3DTEXTUREFILTERTYPE">筛选器类型</a>。</td></tr>
<tr><td>GetAutoGenFilterType</td><td>取筛选</td><td>获取用于自动生成的 mipmap 子层的<a href="#D3DTEXTUREFILTERTYPE">筛选器类型</a>。</td></tr>
<tr><td>GenerateMipSubLevels</td><td>生成子级</td><td>生成 mipmap 子级别。</td></tr>
<tr><td>GetLevelDesc</td><td>级别信息(级别,信息)</td><td>检索指定多维数据集纹理级别的一张人脸的说明。<a href="#D3DSURFACE_DESC">信息:图面描述类</a></td></tr>
<tr><td>GetCubeMapSurface</td><td>取图面(方面,级别,@接口)</td><td>检索立方体纹理映射图面。<a href="#D3DCUBEMAP_FACES">方面</a></td></tr>
<tr><td>LockRect</td><td>锁定矩形(方面,级别,区域,矩形,标志)</td><td>锁定立方体纹理资源上的矩形。<a href="#D3DLOCKED_RECT">区域</a>;<a href="#D3DLOCK">标志:</a></td></tr>
<tr><td>UnlockRect</td><td>锁定矩形(方面,级别)</td><td>解锁立方体纹理资源上的矩形。<a href="#D3DCUBEMAP_FACES">方面</a></td></tr>
<tr><td>AddDirtyRect</td><td>添加区域(方面,矩形)</td><td>将脏区域添加到多维数据集纹理资源。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DPOOL">D3DPOOL</a>——用于三维图面类.内存池,定义用于保存资源缓冲区的内存类。</th></tr>
<tr><td>D3DPOOL_DEFAULT</td><td>0</td><td>资源放置在内存池中，最适合为给定资源请求的一组用法。 这通常是视频内存，包括本地视频内存和 AGP 内存。</td></tr>
<tr><td>D3DPOOL_MANAGED</td><td>1</td><td>资源会根据需要自动复制到设备可访问的内存中。 托管资源由系统内存提供支持，设备丢失时无需重新创建。 </td></tr>
<tr><td>D3DPOOL_SYSTEMMEM</td><td>2</td><td>资源放置在通常不能由 Direct3D 设备访问的内存中。 此内存分配消耗系统 RAM，但不会减少可分页 RAM。</td></tr>
<tr><td>D3DPOOL_SCRATCH</td><td>3</td><td>资源放置在系统 RAM 中，设备丢失时无需重新创建。不受设备大小或格式限制的约束。Direct3D设备无法访问这些资源，但是可以创建、锁定和复制这些资源。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DCUBEMAP_FACES">D3DCUBEMAP_FACES</a>——用于三维纹理类.取图面,定义立方体地图的面。</th></tr>
<tr><td>D3DCUBEMAP_FACE_POSITIVE_X</td><td>0</td><td>立方体图的正 x 面。</td></tr>
<tr><td>D3DCUBEMAP_FACE_NEGATIVE_X</td><td>1</td><td>立方体图的负 x 面。</td></tr>
<tr><td>D3DCUBEMAP_FACE_POSITIVE_Y</td><td>2</td><td>立方体图的正 y 面。</td></tr>
<tr><td>D3DCUBEMAP_FACE_NEGATIVE_Y</td><td>3</td><td>立方体图的负 y 面。</td></tr>
<tr><td>D3DCUBEMAP_FACE_POSITIVE_Z</td><td>4</td><td>立方体图的正 z 面。</td></tr>
<tr><td>D3DCUBEMAP_FACE_NEGATIVE_Z</td><td>5</td><td>立方体图的负 z 面。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3><a name="D3DLOCK">D3DLOCK</a>——用于三维纹理类.锁定矩形,描述要执行的锁类型的零个或多个锁定选项的组合。</th></tr>
<tr><td>D3DLOCK_READONLY</td><td>$10</td><td>应用程序不会写入缓冲区。 这样，以非本机格式存储的资源就可以在解锁时保存重新压缩步骤。</td></tr>
<tr><td>D3DLOCK_NOSYSLOCK</td><td>$800</td><td>视频内存锁的默认行为是保留系统范围的关键部分，保证在锁定期间不会发生显示模式更改。</td></tr>
<tr><td>D3DLOCK_DISCARD</td><td>$2000</td><td>应用程序放弃锁定区域中的所有内存。对于顶点缓冲区和索引缓冲区，将放弃整个缓冲区。 </td></tr>
<tr><td>D3DLOCK_NO_DIRTY_UPDATE</td><td>$8000</td><td>默认情况下资源上的锁会将脏区域添加到该资源。此选项可防止对资源的脏状态进行任何更改。</td></tr>
<tr><td>D3DLOCK_NOOVERWRITE</td><td>$1000</td><td>指示自上一个不带此标志的锁以来在绘图调用中引用的内存在锁定期间不会被修改。 </td></tr>
<tr><td>D3DLOCK_DONOTWAIT</td><td>$4000</td><td>如果驱动程序无法立即锁定表面，则允许应用程序返回 CPU 周期。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><th colspan=3><a name="D3DFVF">D3DFVF</a>——灵活顶点格式常量或 FVF 代码用于描述交错在将由固定函数管道处理的单个数据流中的顶点内容。</th></tr>
<tr><td>英文名称</td><td>常量</td><td>作用解释</td></tr>
<tr><th colspan=3>顶点数据标志</th></tr>
<tr><td>D3DFVF_XYZ              </td><td>0x002</td><td>顶点格式包括未转换顶点的位置。不能与 D3DFVF_XYZRHW 一起使用。float、float、float。</td></tr>
<tr><td>D3DFVF_XYZRHW           </td><td>0x004</td><td>顶点格式包括已转换顶点的位置。不能与D3DFVF_XYZ或D3DFVF_NORMAL标志一起使用。float、float、float、float、float。</td></tr>
<tr><td>D3DFVF_XYZB1            </td><td>0x006</td><td>顶点格式包含位置数据，以及用于多matrix顶点混合操作的相应权重值。最多可与三个加权值和四个混合矩阵混合。1到3个小数和一个整数</td></tr>
<tr><td>D3DFVF_XYZB2            </td><td>0x008</td><td>顶点格式包含位置数据，以及用于多matrix顶点混合操作的相应权重值。最多可与三个加权值和四个混合矩阵混合。1到3个小数和一个整数</td></tr>
<tr><td>D3DFVF_XYZB3            </td><td>0x00a</td><td>顶点格式包含位置数据，以及用于多matrix顶点混合操作的相应权重值。最多可与三个加权值和四个混合矩阵混合。1到3个小数和一个整数</td></tr>
<tr><td>D3DFVF_XYZB4            </td><td>0x00c</td><td>顶点格式包含位置数据，以及用于多matrix顶点混合操作的相应权重值。最多可与三个加权值和四个混合矩阵混合。1到3个小数和一个整数</td></tr>
<tr><td>D3DFVF_XYZB5            </td><td>0x00e</td><td>顶点格式包含位置数据，以及用于多matrix顶点混合操作的相应权重值。最多可与三个加权值和四个混合矩阵混合。1到3个小数和一个整数</td></tr>
<tr><td>D3DFVF_XYZW             </td><td>0x4002</td><td>顶点格式包含转换和剪切(x、y、z、w)数据。专为可编程顶点管道而设计，只能与它一起使用。float、float、float、float</td></tr>
<tr><td>D3DFVF_NORMAL           </td><td>0x010</td><td>顶点格式包括顶点法线向量。不能与 D3DFVF_XYZRHW 一起使用。float、float、float</td></tr>
<tr><td>D3DFVF_PSIZE            </td><td>0x020</td><td>以点大小指定的顶点格式。FLOAT未转换和点亮的顶点，大小以相机空间单位，否则以设备空间单位表示。</td></tr>
<tr><td>D3DFVF_DIFFUSE          </td><td>0x040</td><td>顶点格式包括漫射颜色分量。按 ARGB 顺序排列</td></tr>
<tr><td>D3DFVF_SPECULAR         </td><td>0x080</td><td>顶点格式包括反射颜色分量。按 ARGB 顺序排列</td></tr>
<tr><th colspan=3>纹理标志</th></tr>
<tr><td>D3DFVF_TEX0             </td><td>0x000</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX1             </td><td>0x100</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX2             </td><td>0x200</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX3             </td><td>0x300</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX4             </td><td>0x400</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX5             </td><td>0x500</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX6             </td><td>0x600</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX7             </td><td>0x700</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><td>D3DFVF_TEX8             </td><td>0x800</td><td>此顶点的纹理坐标集的数目。</td></tr>
<tr><th colspan=3>杂项标志</th></tr>
<tr><td>D3DFVF_TEXCOUNT_SHIFT   </td><td>8</td><td>移动整数值所依据的位数，该整数值标识顶点的纹理坐标数。如: dwFVF = 1 << 8</td></tr>
<tr><td>D3DFVF_LASTBETA_UBYTE4   </td><td>0x1000</td><td>顶点位置数据中的最后一个 beta 字段的类型为 UBYTE4。</td></tr>
<tr><td>D3DFVF_LASTBETA_D3DCOLOR </td><td>0x8000</td><td>顶点位置数据中的最后一个 beta 字段的类型为 D3DCOLOR。</td></tr>
<tr><th colspan=3>掩码标志</th></tr>
<tr><td>D3DFVF_TEXCOUNT_MASK    </td><td>0xf00</td><td>纹理标志位的掩码值。</td></tr>
<tr><td>D3DFVF_POSITION_MASK    </td><td>0x400E</td><td>位置位的掩码。</td></tr>
<tr><td>D3DFVF_RESERVED0        </td><td>0x001</td><td>保留位的掩码值。 请勿使用。</td></tr>
<tr><td>D3DFVF_RESERVED2         </td><td>0x6000</td><td>保留位的掩码值。 请勿使用。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="D3DSURFACE_DESC">图面描述类</a></td><td>D3DSURFACE_DESC</td><td>32</td><td>描述显示模式。应用于三维图形类</td></tr>
<tr><th colspan=4>图面描述类——成员表</th></tr>
<tr><td>格式</td><td>Format</td><td>整数</td><td>描述<a href="#D3DFORMAT">图面格式</a>的枚举类型的成员。</td></tr>
<tr><td>资源</td><td>Type</td><td>整数</td><td><a href="#D3DRESOURCETYPE">D3DRESOURCETYPE</a>枚举类型的成员，将此资源标识为图面。</td></tr>
<tr><td>使用</td><td>Usage</td><td>整数</td><td>1=呈现目标;2=深度缓冲; 有关详细信息，请参阅 <a href="#D3DUSAGE">D3DUSAGE</a>。</td></tr>
<tr><td>内存池</td><td>Pool</td><td>整数</td><td><a href="D3DPOOL">D3DPOOL</a>枚举类型的成员，指定为此图面分配的内存类。</td></tr>
<tr><td>采样</td><td>MultiSampleType</td><td>整数</td><td><a href="#D3DMULTISAMPLE_TYPE">D3DMULTISAMPLE_TYPE</a>枚举类型，指定图面支持的全场景多重采样级别。</td></tr>
<tr><td>质量</td><td>MultiSampleQuality</td><td>整数</td><td>质量级别。有效范围介于 0 和 1 之间</td></tr>
<tr><td>宽度</td><td>Width</td><td>图面的宽度（以像素为单位）。</td></tr>
<tr><td>高度</td><td>Height</td><td>图面的高度（以像素为单位）。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="D3DLOCKED_RECT">定位矩形类</a></td><td>D3DLOCKED_RECT</td><td>8</td><td>描述锁定的矩形区域。</td></tr>
<tr><th colspan=4>定位矩形类——成员表</th></tr>
<tr><td>行字</td><td>Pitch</td><td>整数</td><td>图面一行中的字节数。</td></tr>
<tr><td>指针</td><td>pBits</td><td>整数</td><td>指向锁定位的指针。如果提供了矩形，则从图面的开头适当偏移。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="D3DINDEXBUFFER_DESC">索引缓冲类</a></td><td>D3DINDEXBUFFER_DESC</td><td>20</td><td>描述索引缓冲区。</td></tr>
<tr><th colspan=4>图面描述类——成员表</th></tr>
<tr><td>格式</td><td>Format</td><td>整数</td><td>描述<a href="#D3DFORMAT">图面格式</a>的枚举类型的成员。</td></tr>
<tr><td>资源</td><td>Type</td><td>整数</td><td><a href="#D3DRESOURCETYPE">D3DRESOURCETYPE</a>枚举类型的成员，将此资源标识为图面。</td></tr>
<tr><td>使用</td><td>Usage</td><td>整数</td><td>指定此资源的使用情况。有关详细信息，请参阅 <a href="#D3DUSAGE">D3DUSAGE</a>。</td></tr>
<tr><td>内存池</td><td>Pool</td><td>整数</td><td><a href="D3DPOOL">D3DPOOL</a>枚举类型的成员，指定为此图面分配的内存类。</td></tr>
<tr><td>大小</td><td>Size</td><td>整数</td><td>索引缓冲区的大小（以字节为单位）。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td><a name="D3DVERTEXBUFFER_DESC">顶点缓冲类</a></td><td>D3DVERTEXBUFFER_DESC</td><td>24</td><td>描述顶点缓冲区。</td></tr>
<tr><th colspan=4>顶点缓冲类——成员表</th></tr>
<tr><td>格式</td><td>Format</td><td>整数</td><td>描述<a href="#D3DFORMAT">图面格式</a>的枚举类型的成员。</td></tr>
<tr><td>资源</td><td>Type</td><td>整数</td><td><a href="#D3DRESOURCETYPE">D3DRESOURCETYPE</a>枚举类型的成员，将此资源标识为图面。</td></tr>
<tr><td>使用</td><td>Usage</td><td>整数</td><td>指定此资源的使用情况。有关详细信息，请参阅 <a href="#D3DUSAGE">D3DUSAGE</a>。</td></tr>
<tr><td>内存池</td><td>Pool</td><td>整数</td><td><a href="D3DPOOL">D3DPOOL</a>枚举类型的成员，指定为此图面分配的内存类。</td></tr>
<tr><td>大小</td><td>Size</td><td>整数</td><td>顶点缓冲区的大小（以字节为单位）。</td></tr>
<tr><td>顶格</td><td>FVF</td><td>整数</td><td>描述此缓冲区中顶点的顶点格式的 <a href="#D3DFVF">D3DFVF</a> 的组合。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3DSurface9</td><td>三维图面对象</td><td>应用程序使用对象接口的方法查询和准备图面</td></tr>
<tr><th colspan=3>三维图面对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetDevice</td><td>取设备(@接口)</td><td>检索与资源关联的设备。</td></tr>
<tr><td>SetPrivateData</td><td>改数据(标识,数据,大小,标志)</td><td>将数据与程序使用的资源相关联。标志:0=自动分配内存;1=数据为空接口指针(大小为4)</td></tr>
<tr><td>GetPrivateData</td><td>取数据(标识,数据,大小)</td><td>将与资源关联的专用数据复制到提供的缓冲区。</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(标识)</td><td>释放与此资源关联的指定私有数据。</td></tr>
<tr><td>SetPriority</td><td>改优先级(值)</td><td>分配用于计划的资源的优先级。</td></tr>
<tr><td>GetPriority</td><td>取优先级</td><td>获取此资源的优先级。</td></tr>
<tr><td>PreLoad</td><td>预加载</td><td>预加载托管资源。</td></tr>
<tr><td>GetType</td><td>取类型</td><td>返回资源的<a href="#D3DRESOURCETYPE">类型</a>。</td></tr>
<tr><td>GetContainer</td><td>取容器(标识,@接口)</td><td>提供纹理对象的父多维数据集纹理或后台缓冲区父交换链的访问权限。</td></tr>
<tr><td>GetDesc</td><td>取说明(说明)</td><td>检索图面的<a href="#D3DSURFACE_DESC">说明</a>。</td></tr>
<tr><td>LockRect</td><td>锁定矩形(区域,矩形,标志)</td><td>锁定图面上的矩形。<a href="#D3DLOCKED_RECT">区域</a>;<a href="#D3DLOCK">标志:</a></td></tr>
<tr><td>UnlockRect</td><td>解锁矩形</td><td>解解锁图面上的矩形。</td></tr>
<tr><td>GetDC</td><td>取设备(@设备)</td><td>检索设备上下文。</td></tr>
<tr><td>ReleaseDC</td><td>释放设备(设备)</td><td>释放设备上下文句柄。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3DIndexBuffer9</td><td>三维缓冲对象</td><td>应用程序使用对象接口的方法操作索引缓冲区资源。</td></tr>
<tr><th colspan=3>三维图面对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetDevice</td><td>取设备(@接口)</td><td>检索与资源关联的设备。</td></tr>
<tr><td>SetPrivateData</td><td>改数据(标识,数据,大小,标志)</td><td>将数据与程序使用的资源相关联。标志:0=自动分配内存;1=数据为空接口指针(大小为4)</td></tr>
<tr><td>GetPrivateData</td><td>取数据(标识,数据,大小)</td><td>将与资源关联的专用数据复制到提供的缓冲区。</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(标识)</td><td>释放与此资源关联的指定私有数据。</td></tr>
<tr><td>SetPriority</td><td>改优先级(值)</td><td>分配用于计划的资源的优先级。</td></tr>
<tr><td>GetPriority</td><td>取优先级</td><td>获取此资源的优先级。</td></tr>
<tr><td>PreLoad</td><td>预加载</td><td>预加载托管资源。</td></tr>
<tr><td>GetType</td><td>取类型</td><td>返回资源的<a href="#D3DRESOURCETYPE">类型</a>。</td></tr>
<tr><td>Lock</td><td>锁定(偏移,大小,@内存,标志)</td><td>锁定索引数据范围并获取指向索引缓冲区内存的指针。<a href="#D3DLOCK">标志:</a></td></tr>
<tr><td>Unlock</td><td>解锁</td><td>解锁索引数据。</td></tr>
<tr><td>GetDesc</td><td>取说明(说明)</td><td>检索索引缓冲区资源的<a href="#D3DINDEXBUFFER_DESC">说明</a>。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDirect3DVertexBuffer9</td><td>三维缓冲对象</td><td>应用程序使用对象接口的方法查询和准备图面</td></tr>
<tr><th colspan=3>三维图面对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetDevice</td><td>取设备(@接口)</td><td>检索与资源关联的设备。</td></tr>
<tr><td>SetPrivateData</td><td>改数据(标识,数据,大小,标志)</td><td>将数据与程序使用的资源相关联。标志:0=自动分配内存;1=数据为空接口指针(大小为4)</td></tr>
<tr><td>GetPrivateData</td><td>取数据(标识,数据,大小)</td><td>将与资源关联的专用数据复制到提供的缓冲区。</td></tr>
<tr><td>FreePrivateData</td><td>释放数据(标识)</td><td>释放与此资源关联的指定私有数据。</td></tr>
<tr><td>SetPriority</td><td>改优先级(值)</td><td>分配用于计划的资源的优先级。</td></tr>
<tr><td>GetPriority</td><td>取优先级</td><td>获取此资源的优先级。</td></tr>
<tr><td>PreLoad</td><td>预加载</td><td>预加载托管资源。</td></tr>
<tr><td>GetType</td><td>取类型</td><td>返回资源的<a href="#D3DRESOURCETYPE">类型</a>。</td></tr>
<tr><td>Lock</td><td>锁定(偏移,大小,@内存,标志)</td><td>锁定顶点数据范围并获取指向顶点缓冲区内存的指针。<a href="#D3DLOCK">标志:</a></td></tr>
<tr><td>Unlock</td><td>解锁</td><td>解锁顶点数据。</td></tr>
<tr><td>GetDesc</td><td>取说明(说明)</td><td>检索顶点缓冲区资源的<a href="#D3DVERTEXBUFFER_DESC">说明</a>。</td></tr>
</table><br>
<font color="#0000FF" size="6"><a name="运行时库">C运行时库</a>-msvcrt.dll</font><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr align="center"><td>符号</td><td>数据类型</td><td>写格式/格式化/组合式</td><td>读格式/拆分式</td></tr>
<tr align="center"><td>%d %ld %i %li</td><td>十进制有符号整数</td><td>变量数值转文字</td><td>文字转数值到变量</td></tr>
<tr align="center"><td>%u %lu</td><td>十进制无符号整数</td><td>变量数值转文字</td><td>文字转数值到变量</td></tr>
<tr align="center"><td>%f</td><td>浮点数</td><td>变量数值转文字</td><td>文字转数值到变量</td></tr>
<tr align="center"><td>%s</td><td>字符串</td><td>变量文字到文字</td><td>文字输出到变量</td></tr>
<tr align="center"><td>%c</td><td>单个字符</td><td>字符数值转文字</td><td>文字转数值到变量</td></tr>
<tr align="center"><td>%x</td><td>小写十六进制</td><td>变量数值转十六进制文字</td><td>十六进制文字转数值到变量</td></tr>
<tr align="center"><td>%X</td><td>大写十六进制</td><td>变量数值转十六进制文字</td><td>十六进制文字转数值到变量</td></tr>
<tr align="center"><td>%p</td><td>十六进制指针</td><td>变量数值转十六进制文字</td><td>十六进制文字转数值到变量</td></tr>
<tr align="center"><td>%o</td><td>八进制</td><td>变量数值转八进制文字</td><td>八进制文字转数值到变量</td></tr>
<tr align="center"><td>%e</td><td>指数形式浮点数</td><td>变量数值转指数文字</td><td>指数文字转数值到变量</td></tr>
</table>
百分号后面加"-"是左对齐,加数字是占位长度<br>
加0是占位填充为0,如:格式化(内容,"%08d",36),显示内容为:00000036<br>
加.是小数点位数,如:格式化(内容,"%.2f",36.389247#),显示内容为: 36.38<br>
加.也是字符的位数,如:格式化(内容,"%.4s","36.389247#"),显示内容为: 36.3<br>
点后面加*号是变量指定长度,如:格式化(内容,"%.*s",4,"36.389247"),显示内容为: 36.3<br>
加#是增加0x前缀,如:格式化(内容,"%#x",36),显示内容为: 0x24<br>
读格式和拆分式,加*号是跳过不读,例如:拆分式("asdf 123","%*s %d",@数) 结果数=123<br>
加[]是集合操作,如: %[0-9] 是只取数字.^是不包含,如: %[^abc]是除abc外所有字符<br>
也可以配合长度使用,如: %12[a-zA-Z0-9_] 是读取不超过12位,英文字母加数字及下划线的字符<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>日期类</td><td>tm</td><td>36</td><td>用来存储日期时间的一种结构数据，对应函数：gmtime、localtime</td></tr>
<tr><th colspan=4>日期类——成员表</th></tr>
<tr><td>秒</td><td>tm_sec</td><td>整数</td><td>每分钟的第几秒，取值[0-59]</td></tr>
<tr><td>分</td><td>tm_min</td><td>整数</td><td>每小时的第几分，取值[0-59]</td></tr>
<tr><td>时</td><td>tm_hour</td><td>整数</td><td>每天的第几小时，取值[0-23]</td></tr>
<tr><td>日</td><td>tm_mday</td><td>整数</td><td>每月的第几天，取值[1-31]</td></tr>
<tr><td>月</td><td>tm_mon</td><td>整数</td><td>每年的月份，取值[0-11]</td></tr>
<tr><td>年</td><td>tm_year</td><td>整数</td><td>1900年起距今的年数</td></tr>
<tr><td>星期</td><td>tm_wday</td><td>整数</td><td>每周的第几天，取值[0-6]</td></tr>
<tr><td>天</td><td>tm_yday</td><td>整数</td><td>每年的第几天，取值[0-365]</td></tr>
<tr><td>夏</td><td>tm_isdst</td><td>整数</td><td>夏令时标志</td></tr>
</table><br>
<font color="#0000FF" size="6">C运行时库——函数列表</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>绝对值</td><td>abs</td><td>a=绝对值(-36)</td><td>返回32位整数的绝对值。</td></tr>
<tr><td>取正数</td><td>labs</td><td>大数=取绝对值(大数)</td><td>返回64位整数的绝对值。</td></tr>
<tr><td>反余弦</td><td>acos</td><td>y=反余弦(x)</td><td>返回以弧度表示的 x 的反余弦。均为浮点数</td></tr>
<tr><td>反正弦</td><td>asin</td><td>y=反正弦(x)</td><td>返回以弧度表示的 x 的反正弦。均为浮点数</td></tr>
<tr><td>反正切</td><td>atan</td><td>y=反正切(x)</td><td>返回以弧度表示的 x 的反正切。均为浮点数</td></tr>
<tr><td>反正切2</td><td>atan2</td><td>z=反正切2(x,y)</td><td>返回以弧度表示的 y/x 的反正切。均为浮点数</td></tr>
<tr><td>上取整</td><td>ceil</td><td>y=上取整(x)</td><td>返回大于或者等于 x 的数值(进位取整)。均为浮点数</td></tr>
<tr><td>余弦</td><td>cos</td><td>y=余弦(x)</td><td>返回以弧度表示的 x 的余弦。均为浮点数</td></tr>
<tr><td>双曲余弦</td><td>cosh</td><td>y=余弦(x)</td><td>返回以弧度表示的 x 的双曲余弦。均为浮点数</td></tr>
<tr><td>除法</td><td>div</td><td>d=除法(a,b)</td><td>a除以b,返回d的前4字节为商,后4字节为余数</td></tr>
<tr><td>取绝对值</td><td>fabs</td><td>y=取绝对值(x)</td><td>返回 x 的绝对值。均为浮点数</td></tr>
<tr><td>下取整</td><td>floor</td><td>y=下取整(x)</td><td>返回大于或者等于 x 的数值(舍去取整)。均为浮点数</td></tr>
<tr><td>求余</td><td>fmod</td><td>z=求余(x,y)</td><td>返回 x/y 的余数。均为浮点数</td></tr>
<tr><td>自然对数</td><td>log</td><td>y=log(x)</td><td>返回 x 的自然对数。均为浮点数</td></tr>
<tr><td>常用对数</td><td>log10</td><td>y=常用对数(x)</td><td>返回 x 的自然对数。（基数为 e 的对数）</td></tr>
<tr><td>指数</td><td>exp</td><td>y=指数(x)</td><td>返回以自然常数e为底的 x 次幂 </td></tr>
<tr><td>乘进位</td><td>ldexp</td><td>y=乘进位(x,n)</td><td>返回 x 乘以2的n次幂 ,相当于浮点左移运算</td></tr>
<tr><td>正弦</td><td>sin</td><td>y=反正弦(x)</td><td>返回以弧度表示的 x 的反正弦。（基数为 10 的对数）</td></tr>
<tr><td>双曲正弦</td><td>sinh</td><td>y=双曲正弦(x)</td><td>返回以弧度表示的 x 的双曲正弦。均为浮点数</td></tr>
<tr><td>双曲正切</td><td>tanh</td><td>y=双曲正切(x)</td><td>返回以弧度表示的 x 的双曲正切。均为浮点数</td></tr>
<tr><td>平方根</td><td>sqrt</td><td>y=平方根(x)</td><td>返回 x 的平方根。均为浮点数</td></tr>
<tr><td>幂</td><td>pow</td><td>z=幂(x,y)</td><td>返回 x 的 y 次幂。均为浮点数</td></tr>
<tr><td>分解小数</td><td>modf</td><td>z=分解小数(x,y)</td><td>分解x，以得到x的整数和小数部分,y是x的整数部分,z是x的小数部分,xyz均为double</td></tr>
<tr><td>显示错误</td><td>perror</td><td>显示错误("错误原因:")</td><td>将上一个函数发生错误的原因输出到标准设备(控制台窗口)<br>先显示参数提交的文字,再显示错误原因的描述</td></tr>
<tr><td>打开管道</td><td>popen</td><td>pp=打开管道(命令,"r")</td><td>用命令运行一个进程,可以使用文件读写函数操控该控制台界面的输入输出</td></tr>
<tr><td>关闭管道</td><td>pclose</td><td>关闭管道(pp)</td><td>打开管道必须使用此函数关闭,不能用关闭文件</td></tr>
<tr><td>产生信号</td><td>raise</td><td>产生信号(2)</td><td>产生一个信号,2程序终止 4非法指令 8运算错误<br>11非法访问内存 15请求终止程序 22程序异常终止 </td></tr>
<tr><td>检测信号</td><td>signal</td><td>检测信号(信号,@处理函数)</td><td>检测到相应信号,把信号发给处理函数</td></tr>
<tr><td>转宽字符</td><td>mbstowcs</td><td>字数=转宽字符(新字,原文,长度)</td><td>把多字符转换成宽字符</td></tr>
<tr><td>转多字符</td><td>wcstombs</td><td>字数=转多字符(新字,原文,长度)</td><td>将宽字符转换成多字符</td></tr>
<tr><td>本地配置</td><td>setlocale</td><td>本地配置(选项,格式)</td><td>用来配置地域的信息，设置当前程序使用的本地化信息</td></tr>
<tr><td>读取变量</td><td>getenv</td><td>路径=读取变量("PATH")</td><td>从环境中取字符串,获取环境变量的值</td></tr>
<tr><td>终止</td><td>abort</td><td>终止</td><td>异常终止当前程序。</td></tr>
<tr><td>退出时</td><td>atexit</td><td>退出时(@退出事件)</td><td>当程序正常终止时，调用指定的函数。</td></tr>
<tr><td>退出</td><td>exit</td><td>退出(状态)</td><td>使程序正常终止。</td></tr>
<tr><td>转换时间</td><td>asctime</td><td>文字=转换时间(日期时间)</td><td>把日期时间结构体转成文本格式时间</td></tr>
<tr><td>转时间</td><td>ctime</td><td>文字=转时间(@时间)</td><td>把整数时间数据转成文本格式时间</td></tr>
<tr><td>取时间差</td><td>difftime</td><td>x=取时间差(时间1,时间2)</td><td>计算两个时刻之间的时间差</td></tr>
<tr><td>国际时间</td><td>gmtime</td><td>t=国际时间(@时间)</td><td>把日期时间数值转换为格林威治(GMT)时间,返回日期时间结构体</td></tr>
<tr><td>本地时间</td><td>localtime</td><td>t=本地时间(@sj)</td><td>把日期时间数值转换为本地时间,返回日期时间结构体</td></tr>
<tr><td>取时间</td><td>time</td><td>取时间(@时间)</td><td>获得系统当前时间到一个整数变量</td></tr>
<tr><td>格式时间</td><td>strftime</td><td>格式时间(文字,文字长,"%H点%M分",时间)</td><td>把日期时间类型转换为指定格式文字,%H为24小时制,12小时制用%I</td></tr>
<tr><td>转小数</td><td>atof</td><td>转小数("12.34")</td><td>把字符串转换为小数或浮点。</td></tr>
<tr><td>转整数</td><td>atoi</td><td>转整数("1235")</td><td>把字符串转换为整数。</td></tr>
<tr><td>转小字</td><td>tolower</td><td>a=转小字(文字(i))</td><td>大写字母转为小写字母,输入和返回都是ASCII码(0-127)</td></tr>
<tr><td>转大字</td><td>toupper</td><td>s=转大字(文字(i))</td><td>小写字母转为大写字母,输入和返回都是ASCII码(0-127)</td></tr>
<tr><td>查数组</td><td>bsearch</td><td>查数组(内容,数组指针,数量,大小,@比较函数)</td><td>可以在固定长度数组中查找数值或字符串</td></tr>
<tr><td>开启线程</td><td>_beginthread</td><td>开启线程(@函数,堆栈大小,参数)</td><td>开启一个在调用进程的地址空间内执行的线程</td></tr>
<tr><td>线束线程</td><td>_endthread</td><td>结束线程</td><td>结束已开启的线程(无需参数)</td></tr>
<tr><td>申请内存</td><td>malloc</td><td>缓冲=申请内存(长度)</td><td>申请指定长度的内存空间,数据并未清零</td></tr>
<tr><td>申零内存</td><td>calloc</td><td>申零内存(长度,数量)</td><td>申请长度乘数量的内存空间,并清零数据</td></tr>
<tr><td>保留内存</td><td>realloc</td><td>保留内存(原址,大小)</td><td>重新分配内存,新空间大于原空间大小时,保留原数据</td></tr>
<tr><td>释放内存</td><td>free</td><td>free(缓冲)</td><td>释放之前分配的内存空间</td></tr>
<tr><td>查找字节</td><td>memchr</td><td>查找字节(内容,66,n)</td><td>在字符串/内存的前 n 个字节中搜索字节码出现的位置</td></tr>
<tr><td>内存比较</td><td>memcmp</td><td>内存比较(内容1,内容2,n)</td><td>把内容1和内容2的前 n 个字节进行比较</td></tr>
<tr><td>内存复制</td><td>memcpy</td><td>内存复制(目的,原址,n)</td><td>在原址复制 n 个字节到目的地址中,两者不能有重叠</td></tr>
<tr><td>内存传送</td><td>memmove</td><td>内存传送(目的,原址,n)</td><td>在原址复制 n 个字节到目的地址中,两者可以有重叠</td></tr>
<tr><td>填充内存</td><td>memset</td><td>填充内存(内容,0,n)</td><td>把指定内存的前 n 个字节填充为指定的数值</td></tr>
<tr><td>文件打开</td><td>fopen</td><td>文件=文件打开(文件名,"rb+")</td><td>模式可以是r/w/b/t/a/+</td></tr>
<tr><td>文件输出</td><td>freopen</td><td>文件输出(文件名,"w",@文件)</td><td>指定模式打开文件并把屏幕上(控制台)内容输出到文件中</td></tr>
<tr><td>文件刷新</td><td>fflush</td><td>文件刷新(文件)</td><td>写入文件后,文件不会立即更新,需要关闭或者使用刷新文件函数才会更改</td></tr>
<tr><td>到尾</td><td>feof</td><td>是否=到尾(文件)</td><td>判断是否已到文件结尾</td></tr>
<tr><td>读字</td><td>fgetc</td><td>字=读字(文件)</td><td>从文件中读取一个字符(英文)</td></tr>
<tr><td>读行</td><td>fgets</td><td>读行(内容,长度,文件)</td><td>从文件中读取一行文本</td></tr>
<tr><td>写字</td><td>fputc</td><td>写字(字,文件)</td><td>写入一个英文字符到文件中</td></tr>
<tr><td>写句</td><td>fputs</td><td>写句(内容,文件)</td><td>写入一个字符串到文件中</td></tr>
<tr><td>文件读取</td><td>fread</td><td>文件读取(数据,长度,数量,文件)</td><td>从文件中读取指定数量个指定长度的数据,实际读取是长度和数量相乘</td></tr>
<tr><td>文件写入</td><td>fwrite</td><td>文件写入(数据,长度,数量,文件)</td><td>向文件中写入指定数量个指定长度的数据,实际写入是长度和数量相乘</td></tr>
<tr><td>读取格式</td><td>fscanf</td><td>读取格式(文件,"%d",@id)</td><td>读取文件中内容并转换为指定格式到变量中</td></tr>
<tr><td>写入格式</td><td>fprintf</td><td>写入格式(文件,"%d",id)</td><td>把变量转换为指定格式内容写入到文件中</td></tr>
<tr><td>定位文件</td><td>fseek</td><td>定位文件(文件,位置,方向)</td><td>方向0从开头,1从当前位置,2文件结尾</td></tr>
<tr><td>文件位置</td><td>ftell</td><td>长度=文件位置(文件)</td><td>得到文件位置指针(当前位置相对于文件首的偏移字节数)</td></tr>
<tr><td>文件开头</td><td>rewind</td><td>文件开头(文件)</td><td>将文件内部的指针重新指向开头位置</td></tr>
<tr><td>文件关闭</td><td>fclose</td><td>文件关闭(文件)</td><td>文件操作完成后,需要关闭文件</td></tr>
<tr><td>文件删除</td><td>remove</td><td>文件删除(文件名)</td><td>用于删除指定的文件</td></tr>
<tr><td>文件改名</td><td>rename</td><td>文件改名(旧名,新名)</td><td>旧名文件不存在,新名文件存在,则移动文件,反之则改名.不能都存在或都不存在,也不能是目录</td></tr>
<tr><td>临时文件</td><td>tmpfile</td><td>fp=临时文件</td><td>以wb+形式创建一个临时二进制文件</td></tr>
<tr><td>临时名</td><td>tmpnam</td><td>临时名(名称)</td><td>产生一个唯一的文件名</td></tr>
<tr><td>读字符</td><td>getchar</td><td>a=读字符</td><td>控制台读取一个输入的英文字符</td></tr>
<tr><td>读文字</td><td>gets</td><td>读文字(内容)</td><td>控制台读取一行输入的字符串</td></tr>
<tr><td>写字符</td><td>putchar</td><td>写字符(\a)</td><td>把ASCII码在控制台上显示出英文字符在控制台窗口上</td></tr>
<tr><td>写文字</td><td>puts</td><td>写文字("hello")</td><td>把一串文字显示在控制台窗口上</td></tr>
<tr><td>写格式</td><td>printf</td><td>写格式("你好%s",名字)</td><td>把多个变量转换格式化后显示在屏幕上(控制台)</td></tr>
<tr><td>命令行</td><td>system</td><td>命令行("pause")</td><td>控制台中执行系统命令</td></tr>
<tr><td>排序</td><td>qsort</td><td>排序(数组指针,数量,大小,@比较函数)</td><td>可以实现数组,字符串，结构体内容排序等。</td></tr>
<tr><td>随机数</td><td>rand</td><td>a=随机数</td><td>产生一个随机数</td></tr>
<tr><td>随机种子</td><td>srand</td><td>随机种子(8848)</td><td>随机数发生器的初始化函数</td></tr>
<tr><td>读格式</td><td>scanf</td><td>读格式("%d",@id)</td><td>读取控制台输入文字并转换为指定格式的变量中</td></tr>
<tr><td>拆分式</td><td>sscanf</td><td>拆分式(文字1,"%s %d",str,@id)</td><td>把文字1的内容按照指定表达式,拆分成多个变量</td></tr>
<tr><td>加文字</td><td>strcat</td><td>加文字(文字1,"很好")</td><td>给文字1的字符串末尾增加相应的文字</td></tr>
<tr><td>加多字</td><td>strncat</td><td>加多字(文字1,"很好",长度)</td><td>给文字1的字符串末尾增加指定长度的文字</td></tr>
<tr><td>查字符</td><td>strchr</td><td>查字符(文字1,33)</td><td>查找英文字符的ASCII码在文字1中出现的内存位置</td></tr>
<tr><td>英文比较</td><td>strcmp</td><td>英文比较(文字1,文字2)</td><td>文字1和文字2进行比较,区分大小写</td></tr>
<tr><td>前字比较</td><td>strncmp</td><td>前字比较(文字1,文字2,n)</td><td>文字1和文字2的前面n个字符进行比较,相等返回0</td></tr>
<tr><td>字母比较</td><td>strcmpi</td><td>字母比较(文字1,文字2)</td><td>文字1和文字2进行比较,不区分大小写</td></tr>
<tr><td>文字比较</td><td>strcoll</td><td>文字比较(文字1,文字2)</td><td>默认按英文比较,本地配置LC_COLLATE语言环境后,如汉字可以按拼音比较</td></tr>
<tr><td>检索下标</td><td>strcspn</td><td>检索下标(文字1,文字2)</td><td>检查文字2出现在文字1中的下标位置</td></tr>
<tr><td>错误描述</td><td>strerror</td><td>描述=错误描述(错误号)</td><td>获得错误号对应的描述文字</td></tr>
<tr><td>文字长度</td><td>strlen</td><td>文字长度(文字1)</td><td>计算字符串的长度,到0结束</td></tr>
<tr><td>文字复制</td><td>strcpy</td><td>文字复制(文字1,文字2)</td><td>把文字2复制到文字1的内存位置</td></tr>
<tr><td>前字复制</td><td>strncpy</td><td>前字复制(文字1,文字2,n)</td><td>把文字2的前n个字节复制到文字1的内存位置</td></tr>
<tr><td>检查包含</td><td>strpbrk</td><td>检查包含(文字1,文字2)</td><td>检查文字1是否包含文字2的任意字,未包含返回空</td></tr>
<tr><td>倒查字符</td><td>strrchr</td><td>倒查字符(文字1,\c)</td><td>从右边查找ASCII码在文字1中出现的内存位置</td></tr>
<tr><td>检查不含</td><td>strspn</td><td>检查不含(文字1,文字2)</td><td>返回字符串中第一个不在指定字符串中出现的字符下标,0表示不包含</td></tr>
<tr><td>查找文字</td><td>strstr</td><td>查找文字(文字1,文字2)</td><td>查找文字2在文字1中出现的内存位置</td></tr>
<tr><td>转浮点</td><td>strtod</td><td>fd=转浮点(文字1,文字2)</td><td>把文字1转换成浮点数,若文字中包含非数字,会将其写到文字2中.参数2写0则无视</td></tr>
<tr><td>分割文本</td><td>strtok</td><td>分割文本(文字1,文字2)</td><td>以文字2为分割符,把文字1分割成两个字符串</td></tr>
<tr><td>转数值</td><td>strtol</td><td>d=转数值(文字1,文字2,进制)</td><td>把文字1按进制转换成整数值,若文字中包含非数字会写到文字2中.进制为2-36的数字</td></tr>
<tr><td>转数字</td><td>strtoul</td><td>d=转数字(文字1,文字2,进制)</td><td>把文字1按进制转换成无符号长整形,文字中包含非数字会写到文字2中.进制为2-36的数字</td></tr>
<tr><td>转码复制</td><td>strxfrm</td><td>d=转码复制(文字1,文字2,n)</td><td>根据程序本地语言转换文字2,复制前 n 个字符到文字1中</td></tr>
<tr><td>格式组</td><td>vsprintf</td><td>格式组(文字,"%d",id)</td><td>把变量格式化输出到字符串,多个变量需用格式化函数</td></tr>
<tr><td>格式化</td><td>sprintf</td><td>格式化(文字,"%d",id)</td><td>把变量格式化输出到字符串</td></tr>
</table><font size="6"><a name="活动模板">活动模板库</a>——atl.dll</font><br>
ATL 引用记录了活动模板库，这是一组基于模板的类，用于简化组件对象模型对象的编程。COM 是用于在 Windows 上创建和使用软件组件的二进制规范。 若要充分利用 ATL，强烈建议熟悉 COM。<br>
活动模板库可用于创建小型、便捷的组件对象模型 (COM) 对象。 它对关键 COM 功能提供特殊支持，包括常用实现、双重接口、标准 COM 枚举器接口、连接点、分离式接口和 ActiveX 控件。<br>
ATL 代码可用于创建单线程对象、单元模型对象、自由线程模型对象或自由线程和单元模型对象。它支持基于传递为参数的类型创建新的类。实现类型安全的方式来执行模板代码中表示的操作。<br>
<h2>ATL COM 对象的基础知识</h2>
下图描述了用于定义 ATL COM 对象的类和接口之间的关系。<br>
<img src="https://learn.microsoft.com/zh-cn/cpp/atl/media/vc307y1.gif?view=msvc-170"><br>
此关系图显示 CComObject 派生自 CYourClass，而 CComAggObject 和 CComPolyObject 包含 CYourClass 作为成员变量。<br>

有三种方法来定义 ATL COM 对象。 标准选项是使用派生自 CYourClass 的 CComObject 类。 第二个选项是使用 CComAggObject 类创建聚合对象。<br>
第三个选项是使用 CComPolyObject 类。 CComPolyObject 充当混合选项：它可以作为 CComObject 类或 CComAggObject 类运行，具体取决于首次创建它的方式。<br> 

使用标准 ATL COM 时，请使用两个对象：一个外部对象和一个内部对象。 外部客户端通过外部对象中定义的包装函数访问内部对象的功能。 外部对象的类型为 CComObject。<br>

使用聚合对象时，外部对象不提供内部对象功能的包装器。 相反，外部对象提供由外部客户端直接访问的指针。在此场景中，外部对象的类型为 CComAggObject。 内部对象的类型为 CYourClass。<br>

由于客户端不必通过外部对象与内部对象交互，因此聚合对象通常更高效。 此外，鉴于聚合对象的接口直接可用于客户端，外部对象不必知道聚合对象的功能。 但是，并非所有对象都可以聚合。 对于要聚合的对象，在设计时需要考虑到聚合。
<pre>
ATL 分两个阶段实现 IUnknown：
CComObject、CComAggObject 或 CComPolyObject 实现 IUnknown 方法。
CComObjectRoot 或 CComObjectRootEx 管理 IUnknown 的引用计数和外部指针。

ATL COM 对象的其他方面由其他类处理：
CComCoClass 定义对象的默认类工厂和聚合模型。
IDispatchImpl 提供对象上任何双接口的 IDispatch Interface 部分的默认实现。
SupportErrorInfoImpl 实现 ISupportErrorInfo 接口，确保错误信息能够正确地沿调用链向上传播。
</pre>
<h2>实现 CComObjectRootEx</h2>
所有 ATL 对象必须在其继承中有一个 CComObjectRootEx 或 CComObjectRoot 的实例。 CComObjectRootEx 提供基于 COM 映射项的默认 QueryInterface 机制。<br>

通过其 COM 映射，对象的接口将在客户端查询接口时向该客户端公开。 该查询通过 CComObjectRootEx::InternalQueryInterface 执行。 InternalQueryInterface 仅处理 COM 映射表中的接口。<br>
实现 CComObject、CComAggObject 和 CComPolyObject
CComObject、CComAggObject 和 CComPolyObject 的模板类始终是继承链中派生最多的类。 他们负责处理 IUnknown 中的所有方法：QueryInterface、AddRef 和 Release。 此外，CComAggObject 和 CComPolyObject（用于聚合对象）提供内部未知所需的特殊引用计数和 QueryInterface 语义。
使用 CComAggObject 和 CComObject 的优点是实现 IUnknown 针对所创建对象的类型进行了优化。 例如，非聚合对象只需要引用计数，而聚合对象需要内部未知的引用计数和指向外部未知的指针。

使用 CComPolyObject 的优点是，避免在模块中同时使用 CComAggObject 和 CComObject 处理聚合和非聚合情况。 单个 CComPolyObject 对象处理这两种情况。 这意味着模块中只有一个 vtable 副本和一个函数副本。 如果 vtable 很大，这可以大大减小模块大小。 但是，如果 vtable 较小，则使用 CComPolyObject 可能会导致模块大小略大，因为它未针对聚合或非聚合对象进行优化，如 CComAggObject 和 CComObject 所示。
<h2></h2>支持 IDispatch 和 IErrorInfo</h2>
可以使用模板类 IDispatchImpl 提供对象上任何双重接口 IDispatch Interface 部分的默认实现。<br>

如果对象使用 IErrorInfo 接口向客户端报告错误，则对象必须支持 ISupportErrorInfo 接口。 如果对象上只有单个接口可生成错误，则模板类 ISupportErrorInfoImpl 提供了一种简单方法可实现此目的。<br>
<h2></h2>支持 IDispEventImpl</h2>
模板类 IDispEventImpl 可用于为 ATL 类中的连接点接收器提供支持。 连接点接收器允许你的类处理从外部 COM 对象触发的事件。 这些连接点接收器使用你的类提供的事件接收器映射进行映射。
<pre>
若要正确实现类的连接点接收器，必须完成以下步骤：

导入每个外部对象的类型库

声明 IDispEventImpl 接口

声明事件接收器映射

建议和取消建议连接点
</pre>
实现连接点接收器所涉及的步骤都是通过仅修改类的头文件来完成的。
<h2>更改默认类工厂和聚合模型</h2>
ATL 使用 CComCoClass 为对象定义默认类工厂和聚合模型。 CComCoClass 指定以下两个宏：
<pre>
DECLARE_CLASSFACTORY 将类工厂声明为 CComClassFactory。
DECLARE_AGGREGATABLE 声明对象可以聚合。

可以通过在类定义中指定另一个宏来替代这些默认值中的任何一个。
定义类工厂的其他两个宏是 DECLARE_CLASSFACTORY_AUTO_THREAD 和 DECLARE_CLASSFACTORY_SINGLETON。

ATL 还使用 typedef 机制来实现默认行为。 例如，DECLARE_AGGREGATABLE 宏使用 typedef 定义调用 _CreatorClass 的类型，然后在整个 ATL 中引用该类型。
请注意，在派生类中，使用与基类的 typedef 同名的 typedef 会导致 ATL 使用定义并且重写默认行为。
</pre>
<h2>创建聚合对象</h2>
<pre>
聚合委托 IUnknown 调用，提供指向外部对象的指向内部对象的 IUnknown 指针。

创建聚合对象
将 IUnknown 指针添加到类对象，并将其初始化为构造函数中的 NULL。

重写 FinalConstruct 以创建聚合。

使用步骤 1 中定义的 IUnknown 指针作为 COM_INTERFACE_ENTRY_AGGREGATE 宏的第二个参数。

重写 FinalRelease 以释放 IUnknown 指针。
如果在 FinalConstruct 期间使用和释放聚合对象的接口，则应将 DECLARE_PROTECT_FINAL_CONSTRUCT 宏添加到类对象的定义中。
</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>创建控件</td><td>AtlAxCreateControl</td><td>4</td><td>创建ActiveX控件，初始化它并在指定窗口中承载它。</td></tr>
<tr><th colspan=4>创建控件——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>名称</td><td>lpszName</td><td>整数</td><td>对象名ProgID；对象标识CLSID；网址URL；Active文档；HTML片段</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>控件将附加到的窗口的句柄。</td></tr>
<tr><td>属性</td><td>pStream</td><td>整数</td><td>指向用于初始化控件属性的流的指针。可为0</td></tr>
<tr><td>容器</td><td>ppUnkContainer</td><td>整数</td><td>接收容器的指针地址。可为0</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>附加控件</td><td>AtlAxAttachControl</td><td>3</td><td>将以前创建的控件附加到指定窗口。</td></tr>
<tr><th colspan=4>附加控件——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>实例</td><td>pControl</td><td>整数</td><td>指向控件的指针。</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>将托管控件的窗口的句柄。</td></tr>
<tr><td>容器</td><td>ppUnkContainer</td><td>整数</td><td>接收容器对象的指针。</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>容器接口</td><td>AtlAxGetHost</td><td>3</td><td>将以前创建的控件附加到指定窗口。</td></tr>
<tr><th colspan=4>容器接口——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>托管控件的窗口的句柄。</td></tr>
<tr><td>容器</td><td>ppUnkContainer</td><td>整数</td><td>接收容器对象的指针。</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>托管控件</td><td>AtlAxGetControl</td><td>2</td><td>获取指向包含在指定窗口内控件的接口指针</td></tr>
<tr><th colspan=4>托管控件——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>窗口</td><td>hWnd</td><td>整数</td><td>托管控件的窗口的句柄。</td></tr>
<tr><td>接口</td><td>pp</td><td>整数</td><td>接收托管控件的指针。</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>对象子站</td><td>AtlSetChildSite</td><td>2</td><td>将子对象的站点设置为父对象的指针。</td></tr>
<tr><th colspan=4>对象子站——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>子级</td><td>punkChild</td><td>整数</td><td>指向子级的接口。</td></tr>
<tr><td>父级</td><td>punkParent</td><td>整数</td><td>指向父级的接口。</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>初始页框</td><td>AtlAxWinInit</td><td>0</td><td>注册窗口类及消息来初始化控件承载代码。</td></tr>
<tr><td>注销页框</td><td>AtlAxWinTerm</td><td>0</td><td>注销窗口类来取消初始化控件承载代码。</td></tr>
<tr><td>取源接口</td><td>AtlGetObjectSourceInterface</td><td>5</td><td>检索有关对象的默认源接口的信息。</td></tr>
<tr><th colspan=4>取源接口——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>对象</td><td>punkObj</td><td>整数</td><td>指向要为其返回信息的对象。</td></tr>
<tr><td>库号</td><td>plibid</td><td>整数</td><td>接收包含源接口定义的类型库的 LIBID。</td></tr>
<tr><td>接口</td><td>piid</td><td>整数</td><td>接收对象默认源接口的接口 ID。</td></tr>
<tr><td>主版</td><td>pdwMajor</td><td>整数</td><td>接收包含源接口定义的类型库的主要版本号。</td></tr>
<tr><td>次版</td><td>pdwMinor</td><td>整数</td><td>接收包含源接口定义的类型库的次要版本号。</td></tr>
</table><br><table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>参数</td><td>作用解释</td></tr>
<tr><td>内部接口</td><td>AtlInternalQueryInterface</td><td>4</td><td>检索指向所请求的接口的指针。</td></tr>
<tr><th colspan=4>对象子站——参数表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>对象</td><td>pThis</td><td>整数</td><td>指向对象的指针。</td></tr>
<tr><td>数组</td><td>pEntries</td><td>整数</td><td>访问可用接口映射的结构数组。</td></tr>
<tr><td>标识</td><td>iid</td><td>整数</td><td>要请求的接口的GUID。</td></tr>
<tr><td>接口</td><td>ppvObject</td><td>整数</td><td>接收指定的接口指针的指针；</td></tr>
</table>
<font color="#0000FF"><a name="组件对象">组件对象模型</a>-(COM)</font>
COM 是一个独立于平台的分布式面向对象的系统，用于创建可以交互的二进制软件组件。 COM 是 微软 的 OLE (复合文档的基础技术) 和 ActiveX (支持 互联网 的组件) 技术。
<h2>组件对象模型</h2>
<pre>
若要了解 COM (以及所有基于 COM 的技术) ，必须了解它不是面向对象的语言，而是一种标准。 COM 也不指定应如何构建应用程序;语言、结构和实现详细信息留给应用程序开发人员。
相反，COM 指定对象模型和编程要求，使 COM 对象 (也称为 COM 组件， 有时只是对象) 与其他对象交互。 这些对象可以在单个进程中、在其他进程中，甚至可以位于远程计算机上。
它们可以用不同的语言编写，而且在结构上可能非常不同，这就是为什么 COM 被称为 二进制标准：在程序转换为二进制计算机代码后应用的标准。
COM 的唯一语言要求是，代码以一种语言生成，该语言可以创建指针的结构，并通过指针显式或隐式调用函数。 
COM 定义 COM 对象的基本性质。 通常，软件对象由一组数据和操作数据的函数组成。 COM 对象是一个对象，在该对象中，只能通过一组或多组相关函数访问对象的数据。
这些函数集称为 接口，接口的函数称为 方法。 此外，COM 要求访问接口方法的唯一方法是通过指向 接口的指针。
除了指定基本二进制对象标准外，COM 还定义了某些基本接口，这些接口提供所有基于 COM 的技术通用的函数，并且它提供所有组件所需的少量函数。
COM 还定义了对象如何在分布式环境中协同工作，并添加了安全功能来帮助提供系统和组件的完整性。</pre>
<h2>COM 简介</h2>
Microsoft 组件对象模型 (COM) 定义了一个二进制互操作性标准，用于创建在运行时交互的可重用软件库。 可以使用 COM 库，而无需将它们编译到应用程序中。 COM 是许多 Microsoft 产品和技术的基础，例如 Windows 媒体播放器 和 Windows Server。

COM 定义了适用于许多操作系统和硬件平台的二进制标准。 对于网络计算，COM 定义了标准线路格式和协议，用于在不同硬件平台上运行的对象之间进行交互。 COM 独立于实现语言，这意味着可以通过使用不同的编程语言（如 C++ 和 .NET Framework中的编程语言）创建 COM 库。

COM 规范提供了支持跨平台软件重用的所有基本概念：

组件之间函数调用的二进制标准。
将函数强类型分组到接口中的预配。
提供多态性、特征发现和对象生存期跟踪的基接口。
唯一标识组件及其接口的机制。
从部署创建组件实例的组件加载程序。
COM 具有许多协同工作的部件，用于创建基于可重用组件构建的应用程序：

提供符合 COM 规范的运行时环境的 主机系统 。
定义功能协定的接口，以及实现接口的组件。
向系统提供组件的服务器以及使用组件提供的功能的客户端。
跟踪组件在本地和远程主机上的部署位置的 注册表 。
一个 服务控制管理器 ，用于定位本地和远程主机上的组件并将服务器连接到客户端。
一种 结构化存储 协议，用于定义如何在主机文件系统上导航文件的内容。
启用代码跨主机和平台重复使用是 COM 的核心。 可重用接口实现称为 组件、 组件对象或 COM 对象。 组件实现一个或多个 COM 接口。

通过设计库实现的接口来定义自定义 COM 库。 库的使用者可以在不了解库的部署和实现详细信息的情况下发现和使用其功能。

<h2>对象和接口</h2>
COM 对象通过 接口公开其功能，接口是成员函数的集合。 COM 接口定义组件的预期行为和职责，并指定提供一小部分相关操作的强类型协定。 COM 组件之间的所有通信都通过接口进行，组件提供的所有服务都通过其接口公开。 调用方只能访问接口成员函数。 内部状态对调用方不可用，除非它在接口中公开。

接口是强类型。 每个接口都有其自己唯一的接口标识符（名为 IID），这可以消除与人类可读名称可能发生的冲突。 IID 是 GUID) (全局唯一标识符，它与 Open Software Foundation (OSF) 分布式计算环境 (DCE) 定义的通用唯一 ID (UUID) 相同。 创建新接口时，必须为该接口创建新的标识符。 当调用方使用接口时，它必须使用唯一标识符。 此显式标识通过消除会导致运行时失败的命名冲突来提高可靠性。

定义新接口时，可以使用接口定义语言 (IDL) 来创建接口定义。 从此接口定义中，Microsoft IDL 编译器生成头文件供使用 接口的应用程序使用，并生成源代码来处理远程过程调用。 Microsoft 提供的 IDL 基于 DCE IDL 的简单扩展，DCE IDL 是远程过程调用 (RPC) 分布式计算的行业标准。 IDL 是一种方便接口设计器的工具，不是 COM 互操作性的核心。 使用 IDL 时，无需为每个编程环境手动创建头文件。 有关详细信息，请参阅 定义 COM 接口。

继承在 COM 接口中谨慎使用。 COM 仅支持重用与基接口关联的协定的接口继承。 COM 不支持选择性继承;因此，如果一个接口继承自另一个接口，则它包括基接口定义的所有函数。 此外，接口仅使用单个继承（而不是多个继承）从基接口获取函数。

<h2>接口实现</h2>
不能自行创建 COM 接口的实例。 而是创建实现 接口的类的实例。 在 C++ 中，COM 接口建模为 抽象基类，这意味着该接口是仅包含纯虚拟成员函数的 C++ 类。 C++ 库通过从一个或多个接口继承成员函数签名、重写每个成员函数并为每个函数提供实现来实现 COM 对象。

可以使用支持函数指针概念的任何编程语言来实现 COM 接口。 例如，在 C 中，接口是一个结构，其中包含指向函数指针表的指针，接口中的每个方法对应一个指针。

实现接口时，类必须为接口中的每个函数提供实现。 如果类在接口函数中没有工作要做，则实现可能是单个返回语句。

COM 类通过使用唯一的 128 位类 ID (CLSID) 来标识，该类将类与文件系统中的特定部署相关联，对于 Windows 而言，该部署是 DLL 或 EXE。 CLSID 是 GUID，这意味着没有其他类具有相同的 CLSID。 使用唯一类标识符可防止类之间的名称冲突。 例如，两个不同的供应商可以编写名为 CStack 的类，但两个类都具有唯一的 CLSID，因此避免了发生冲突的可能性。

通过使用 CoCreateGuid 函数或 COM 创作工具（例如在内部调用此函数的 Visual Studio）获取新的 CLSID。

<h2>IUnknown 接口</h2>
所有 COM 接口都继承自 IUnknown 接口。 IUnknown 接口包含用于多态性和实例生存期管理的基本 COM 操作。 IUnknown 接口有三个成员函数，名为 QueryInterface、AddRef 和 Release。 实现 IUnknown 接口需要所有 COM 对象。

QueryInterface 成员函数为 COM 提供多态性。 调用 QueryInterface 以在运行时确定 COM 对象是否支持特定接口。 如果 COM 对象实现请求的接口， ppvObject 则它将返回 参数中的接口指针，否则返回 NULL。 QueryInterface 成员函数允许在 COM 对象支持的所有接口之间导航。

COM 对象实例的生存期由其 引用计数控制。 IUnknown 成员函数 AddRef 和 Release 控制计数。 AddRef 递增计数， 发布 递减计数。 当引用计数达到零时， Release 成员函数可能会释放实例，因为没有调用方使用它。

<h2>客户端/服务器模型</h2>
COM 类实现许多 COM 接口。 实现由调用方与 COM 类实例交互时运行的二进制文件组成。 COM 允许在不同的应用程序中使用类，包括在不了解特定类的情况下编写的应用程序。 在 Windows 平台上，类存在于动态链接库 (DLL) 或另一个应用程序 (EXE) 中。

在其主机系统上，COM 维护系统上安装的 COM 对象的所有 CLSID 的注册数据库。 注册数据库是每个 CLSID 与包含相应类的 DLL 或 EXE 位置之间的映射。 每当调用方想要创建 COM 类的实例时，COM 将查询此数据库。 调用方只需知道 CLSID 即可请求类的新实例。

COM 对象与其调用方之间的交互建模为客户端/服务器关系。 客户端是从系统请求 COM 对象的调用方，服务器是包含向客户端提供服务的 COM 对象的模块。

COM 客户端是将 CLSID 传递给系统以请求 COM 对象的实例的任何调用方。 创建实例的最简单方法是调用 COM 函数 CoCreateInstance。

CoCreateInstance 函数创建指定的 CLSID 的一个实例，并返回客户端请求的类型的接口指针。 客户端负责在客户端完成使用后通过调用其 Release 函数来管理实例的生存期。 若要基于单个 CLSID 创建多个对象，请调用 CoGetClassObject 函数。 若要连接到已创建并正在运行的对象，请调用 GetActiveObject 函数。

COM 服务器为系统提供 COM 实现。 服务器将 CLSID 与 COM 类相关联，包含 类的实现，实现类工厂以创建 类的实例，并提供卸载服务器。
若要启用 COM 对象的创建，COM 服务器必须提供 IClassFactory 接口的实现。 客户端可以调用 CreateInstance 方法来请求 COM 对象的新实例，但通常此类请求封装在 CoCreateInstance 函数中。

可以将 COM 服务器部署为在运行时加载到客户端进程中的共享库 (Windows 平台上的 DLL) ，也可以部署为 Windows 平台上 (EXE) 的可执行模块。 有关详细信息，请参阅 注册 COM 应用程序。

<h2>服务控制管理器</h2>
服务控制管理器 (SCM) 处理 COM 对象实例的客户端请求。 以下列表显示了事件序列：

客户端通过使用 COM 对象的 CLSID 调用一个函数（例如 CoCreateInstance ），从 COM 库请求指向 COM 对象的接口指针。
COM 库查询 SCM 以查找与请求的 CLSID 相对应的服务器。
SCM 查找服务器，并从服务器提供的类工厂请求创建 COM 对象。
如果成功，COM 库将返回指向客户端的接口指针。
COM 系统将服务器对象连接到客户端后，客户端和对象直接通信。 通过中间运行时调用不会增加开销。

向主机系统注册 COM 服务器时，可以指定要激活该服务器的不同方式。 以下列表显示了 SCM 激活 COM 服务器的三种方法：

进程内：SCM 返回包含对象服务器实现的 DLL 的文件路径。 COM 库加载 DLL 并查询其类工厂接口指针。
本地：SCM 启动本地可执行文件，该可执行文件在启动时注册类工厂，其接口指针可用于系统和客户端。
远程：本地 SCM 从远程计算机上运行的 SCM 获取类工厂接口指针。
当客户端请求 COM 对象时，COM 库会联系本地主机上的 SCM。 SCM 查找相应的 COM 服务器（可以是本地服务器或远程服务器），服务器返回指向服务器的类工厂的接口指针。 当类工厂可用时，COM 库或客户端可以使用类工厂创建请求的对象。 有关详细信息，请参阅 实现 IClassFactory。

<h2>可重用性</h2>
COM 支持 黑盒可重用性，这意味着不会向客户端公开可重用组件的实现详细信息。 为了实现黑盒可重用性，COM 支持两种机制，一个对象可以通过这两种机制重用另一个对象。 两种重用形式称为 “包含 ”和 “聚合”。 按照约定，重用的对象名为 内部对象，使用内部对象的对象名为 外部对象。

在包含中，外部对象的行为就像内部对象的客户端一样。 外部对象是内部对象的逻辑容器，当外部对象使用内部对象的服务时，外部对象会将实现委托给内部对象的接口。 这意味着外部对象是按照内部对象的服务实现的。 外部对象可能不支持与内部对象相同的接口，外部对象可以使用内部对象的接口来帮助在外部对象上实现不同接口的一部分。

在聚合中，外部对象公开来自内部对象的接口，就像它们在外部对象上实现一样。 当外部对象始终将对其某个接口上的每次调用委托给内部对象的同一接口时，这非常有用。 聚合是一种方便，使外部对象能够避免额外的实现开销。

有关详细信息，请参阅 重用对象。

<h2>存储和流对象</h2>
COM 对象使用 结构化存储将状态保存到文件，这是一种持久存储形式，它允许使用文件系统语义来导航文件的内容。 以这种方式处理文件的内容可实现增量访问、事务和进程间共享等功能。

COM 永久性存储规范提供两种类型的存储元素：存储对象和流对象。 这些对象由 COM 库实现，用户应用程序很少实现这些存储元素。 存储对象实现 IStorage 接口，流对象实现 IStream 接口。

流对象包含数据，在概念上类似于文件系统中的单个文件。 每个流都具有访问权限和单个查找指针。 通过 IStream 接口，可以对流的基础数据进行读取、写入、查找和执行其他操作。 流是使用文本字符串命名的。 它可以包含任何内部结构，因为它是一个平面字节流。 此外， IStream 接口中的函数类似于基于文件句柄的标准函数，例如 ANSI C 运行时库中的函数。

存储对象在概念上类似于文件系统中的目录。 每个存储可以包含任意数量的子存储对象和任意数量的流。 每个存储都有自己的访问权限。 通过 IStorage 接口，可以执行枚举、移动、复制、重命名、创建和删除元素等操作。 存储对象不存储应用程序定义的数据，但它隐式存储其包含 (存储和流) 元素的名称。

根据主机平台上的 COM 规范实现存储和流对象时，可在进程之间共享它们。 这样，进程内或进程外运行的对象就可以对其文件存储具有同等的增量访问权限。 由于 COM 是单独加载到每个进程中的，因此它使用操作系统支持的共享内存机制来传达打开的元素的状态及其在进程之间的访问模式。

结构化文件中的每个存储和流对象都有一个用于标识它的名称。 名称是遵循特定约定的字符串。 有关详细信息，请参阅 存储对象命名约定。 该名称将传递给 IStorage 函数，以指定要在存储中操作的元素。 根存储对象的名称与基础文件系统中的文件名相同，并且这些名称必须遵循文件系统的约定和限制。 传递给存储相关函数的字符串，这些函数的名称文件无需解释或更改即可传递到文件系统。

存储对象中包含的元素的名称通过特定存储对象的实现进行管理。 存储对象的所有实现都必须支持长度为 32 个字符的元素名称，并且某些实现可能支持更长的名称。 名称存储时会保留大小写，但它们被比较为不区分大小写。 定义存储元素名称的应用程序必须选择在任一情况下均可使用的名称。

可以使用 COM 实现的函数和接口访问结构化存储文件中的每个元素。 这意味着其他应用程序可以通过使用提供类似目录的服务的 IStorage 接口函数进行导航来浏览文件。 此外，其他应用程序可以使用文件的数据，而无需运行编写文件的应用程序。 当 COM 应用程序访问另一个应用程序的结构化存储文件时，将应用标准 Windows 访问权限，并且应用程序必须具有足够的权限。

COM 对象可以读取和写入永久性存储。 客户端根据操作的上下文查询 COM 对象上与持久性相关的接口之一。 COM 对象可以实现以下接口的任意组合：

IPersistStorage：COM 对象读取其持久状态并将其写入存储对象。 客户端通过此接口为 对象提供 IStorage 指针。 这是唯一包含增量访问语义的持久性接口。
IPersistStream：COM 对象读取其持久状态并将其写入流对象。 客户端通过此接口为 对象提供 IStream 指针。
IPersistFile：COM 对象将其持久状态直接读取并写入基础系统上的某个文件。 除非通过这些接口访问基础文件，否则此接口不涉及 IStorage 或 IStream ，但 IPersistFile 接口没有存储和流的语义。 客户端为 对象提供文件名，并调用 Save 或 Load 函数。
<h2>数据传输</h2>
结构化存储为 COM 对象和进程之间的数据交换提供了基础，称为 统一数据传输。 在 OLE 2 中实现 COM 之前，Windows 上的数据传输是由 传输协议（如剪贴板和拖放协议）指定的。 每个传输协议都有其自己的一组函数，用于将协议绑定到查询，并且需要特定代码来处理每个不同的协议和交换过程。 统一数据传输使用 IDataObject 接口表示所有数据传输，该接口将常见的数据交换操作与传输协议分开。

IDataObject 接口封装了对数据、查询和枚举以及检测对象中的数据更改时间的通知的标准获取和设置操作。 统一数据传输支持对数据格式的丰富描述，以及使用不同的存储媒体进行数据传输。

在统一数据传输期间，所有协议都会交换指向 IDataObject 接口的指针。 服务器是数据源，并实现一个数据对象，该对象在任何数据交换协议中都可用。 当客户端从任何协议接收 IDataObject 指针时，会使用数据并从数据对象请求数据。 指针交换发生后，双方通过 IDataObject 接口以统一方式处理数据交换。

COM 定义了两个支持统一数据传输的数据结构。 FORMATETC 结构表示通用化剪贴板格式，STGMEDIUM 结构将传输介质表示为内存句柄。

客户端创建 FORMATETC 结构以指示它从数据源请求的数据类型，数据源使用该结构来描述它提供的格式。 客户端通过请求其 IEnumFORMATETC 接口来查询数据源的可用格式。 有关详细信息，请参阅 FORMATETC 结构。

客户端创建 STGMEDIUM 结构并将其传递给 GetData 方法，数据对象返回所提供的 STGMEDIUM 结构中的数据。

STGMEDIUM 结构使客户端和数据源能够选择最高效的交换介质。 例如，如果要交换的数据非常大，则数据源可以指示基于磁盘的媒体作为其首选格式，而不是main内存。 这种灵活性可实现高效的数据交换，速度与将指针传递到 IStorage 或 IStream 一样快。 有关详细信息，请参阅 STGMEDIUM 结构。

当数据发生更改时，数据源的客户端可能需要通知。 COM 使用实现 IAdviseSink 接口的建议接收器对象来处理数据更改通知。 建议接收器对象和 IAdviseSink 接口由客户端实现，客户端将 IAdviseSink 指针传递到数据源。 当数据源检测到基础数据中的更改时，它会调用 IAdviseSink 方法来通知客户端。 有关详细信息，请参阅 数据通知。

<h2>远程处理</h2>
COM 支持远程和分布式计算。 接口远程处理 使成员函数能够返回指向位于不同进程或不同主计算机上的 COM 对象的接口指针。 执行接口远程处理的基础结构对客户端和对象服务器都是透明的。 客户端和服务器都不需要彼此的部署详细信息来通过远程接口进行通信。 客户端在同一接口上调用成员函数，以与本地主机上的进程内、进程外或远程计算机上的 COM 对象通信。 同一接口上的本地和远程调用与客户端无法区分。

若要与 COM 对象通信，客户端始终调用进程内实现。 如果 COM 对象在进程内，则调用是直接的。 如果 COM 对象是进程外或远程的，则 COM 提供一个代理实现，该 实现 使用远程过程调用 (RPC) 协议将调用转发到对象。

COM 对象始终通过进程内实现接收来自客户端的调用。 如果调用方在进程内，则调用是直接调用。 如果调用方是进程外或远程调用方，则 COM 提供一个 存根 实现，用于从客户端进程中的代理接收远程过程调用。

封送 处理是打包调用堆栈以便从代理传输到存根的过程。 取消封送 是在接收端发生的解压缩。 从存根到代理的返回值已封送和取消封送。 这种通信也称为 通过网络发送呼叫。

每种不同的数据类型都有封送规则。 接口指针还具有封送处理协议，该协议封装在 CoMarshalInterface 函数中。 在大多数情况下，系统提供 的标准接口封送处理已足够，但 COM 对象可以选择实现 自定义接口封送处理 ，以控制远程对象代理本身的创建。 有关详细信息，请参阅 对象间通信。

<h2>安全性</h2>
COM 提供两种形式的应用程序安全性。 一个是 激活安全性，它指定如何创建新对象、客户端如何连接到新对象和现有对象，以及保护某些公共服务（如类表和运行对象表）的方式。 另一个是 调用安全性，它指定安全性如何在客户端与 COM 对象之间建立的连接中运行。

激活安全性由服务控制管理器 (SCM) 自动应用。 当 SCM 收到检索 COM 对象的请求时，它会根据存储在注册表中的安全信息检查请求。

SCM 实现通常提供注册表驱动的配置，用于管理已部署的类和主机上的特定用户帐户。 有关详细信息，请参阅 激活安全性。

调用安全性会自动应用或由应用程序强制执行。 如果应用程序提供设置信息，COM 将执行必要的检查来保护应用程序。

自动机制检查进程的安全性，但不检查单个对象或方法的安全性。 如果应用程序需要更精细的安全性，则 COM 提供应用程序可以使用这些功能进行自己的安全检查。

自动机制和自定义机制可以一起使用，因此应用程序可能会要求 COM 执行自动安全检查，然后执行自己的安全检查。

COM 呼叫安全服务分为以下类别：

客户端和服务器调用的常规函数，可初始化自动安全机制并注册自动身份验证服务。 常规调用安全 API 是 CoInitializeSecurity 和 CoQueryAuthenticationServices 函数。
客户端代理上的接口，使客户端能够控制对单个接口的调用的安全性。 IClientSecurity 接口和 CoQueryProxyBlanket、CoSetProxyBlanket 和 CoCopyProxy 函数为远程对象提供呼叫安全性。
服务器端函数和调用上下文接口，使服务器能够检索有关调用的安全信息并模拟调用方。 IServerSecurity 接口和 CoGetCallContext、CoImpersonateClient 和 CoRevertToSelf 函数提供服务器端调用安全性。
通常，客户端查询由远程处理层在本地实现的 IClientSecurity 接口的 COM 对象。 客户端使用此接口控制 COM 对象上各个接口代理的安全性，然后再对其中一个接口进行调用。

当调用到达服务器时，服务器可能会调用 CoGetCallContext 函数来检索 IServerSecurity 接口，该接口允许服务器检查客户端的身份验证，并在必要时模拟客户端。 IServerSecurity 对象在调用期间有效。

调用 CoInitializeSecurity 函数以初始化安全层，并将指定的值设置为安全默认值。 如果进程不调用 CoInitializeSecurity，则 COM 会在首次封送或取消封送接口时自动调用它，注册系统默认安全性。 CoInitializeSecurity 函数允许客户端为进程建立默认调用安全性，从而避免在单个代理上使用 IClientSecurity。 CoInitializeSecurity 函数允许服务器为进程注册自动身份验证服务。 有关详细信息，请参阅 使用 CoInitializeSecurity 设置Process-Wide安全性。
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>英文名称</td><td>示例</td><td>作用</td></tr>
<tr><td>创建接口</td><td>CoCreateGuid</td><td>创建接口(数据)</td><td>创建 GUID，这是用于 CLSID 和接口标识符的唯一 128 位整数。</td></tr>
<tr><td>创建实例</td><td>CoCreateInstance</td><td>创建实例(接口,0,1,标识,指针)</td><td>创建并默认初始化与指定 CLSID 关联的类的单个对象。</td></tr>
<tr><td>容器实例</td><td>CoCreateInstanceFromApp</td><td>容器实例(接口,0,1,0,组数,结构组)</td><td>从应用容器内在特定计算机上创建特定类的实例。</td></tr>
<tr><td>标准时间</td><td>CoFileTimeNow</td><td>标准时间(@时间)</td><td>以64位值结构返回当前时间，1601年1月1日以来的100 纳秒间隔数。</td></tr>
<tr><td>释放全库</td><td>CoFreeAllLibraries</td><td>释放全库</td><td>释放使用 CoLoadLibrary 函数加载的所有 DLL (CoGetClassObject) 内部调用。</td></tr>
<tr><td>释放类库</td><td>CoFreeLibrary</td><td>释放类库(模块)</td><td>释放一个库，该库在加载时被指定为显式释放。</td></tr>
<tr><td>文件对象</td><td>CoGetInstanceFromFile</td><td>文件对象(0,类,0,1,0,路径,组数,结构组)</td><td>创建一个新的 对象，并从文件初始化它。</td></tr>
<tr><td>托管对象</td><td>CoGetInstanceFromIStorage</td><td>托管对象(0,类,0,1,对象,组数,结构组)</td><td>创建新对象，并通过内部调用从存储对象初始化它。</td></tr>
<tr><td>获取对象</td><td>CoGetObject</td><td>获取对象(名称,0,标识,指针)</td><td>提供指向与指定 CLSID 关联的类对象上的接口的指针。</td></tr>
<tr><td>获取类库</td><td>CoGetClassObject</td><td>获取类库(接口,1,0,标识,指针)</td><td>提供指向与指定 CLSID 关联的类对象上的接口的指针。</td></tr>
<tr><td>获取内存</td><td>CoGetMalloc</td><td>获取内存(1,@内存对象)</td><td>检索指向默认OLE任务内存分配对象的指针，以便应用程序可以调用其方法来管理内存。</td></tr>
<tr><td>初始化库</td><td>CoInitialize</td><td>初始化库(0)</td><td>初始化当前线程上的 COM 库，并将并发模型标识为单线程单元 。</td></tr>
<tr><td>是否类库</td><td>CoIsOle1Class</td><td>是否类库(接口)</td><td>确定指定的 CLSID 关联是否表示 OLE 1 对象。</td></tr>
<tr><td>加载类库</td><td>CoLoadLibrary</td><td>加载类库(库名,0)</td><td>将特定 DLL 加载到调用方进程中。</td></tr>
<tr><td>锁定对象</td><td>CoLockObjectExternal</td><td>锁定对象(指针,锁定,全解)</td><td>调用 以锁定对象以确保它保留在内存中，或释放此类锁。</td></tr>
<tr><td>注册存管</td><td>CoRegisterMallocSpy</td><td>注册存管(接口)</td><td>注册 内存管理 接口的实现，然后要求OLE围绕对相应内存对象方法的每次调用调用其包装器方法。</td></tr>
<tr><td>注销存管</td><td>CoRevokeMallocSpy</td><td>注销存管</td><td>撤销已注册的内存管理对象。</td></tr>
<tr><td>任务分配</td><td>CoTaskMemAlloc</td><td>任务分配(大小)</td><td>分配任务内存块</td></tr>
<tr><td>任务释放</td><td>CoTaskMemFree</td><td>任务释放(内存)</td><td>释放已经分配的任务内存块。</td></tr>
<tr><td>任务重置</td><td>CoTaskMemRealloc</td><td>任务重置(内存,大小)</td><td>更改以前分配的任务内存块的大小。</td></tr>
<tr><td>卸载类库</td><td>CoUninitialize</td><td>卸载类库</td><td>关闭当前线程上的 COM 库，卸载线程加载的所有 DLL，释放线程维护的任何其他资源</td></tr>
<tr><td>等多事件</td><td>CoWaitForMultipleHandles</td><td>等多事件(选项,超时,句柄数,句柄组,@事件)</td><td>等待指定句柄发出信号，或等待指定的超时期限过。</td></tr>
<tr><td>等对象组</td><td>CoWaitForMultipleObjects</td><td>等对象组(选项,超时,对象数,对象组,@事件)</td><td>等待指定对象发出信号，或等待指定的超时期限过。</td></tr>
<tr><td>类名对象</td><td>CreateClassMoniker</td><td>类名对象(接口,指针)</td><td>创建引用指定类的类名字对象。</td></tr>
<tr><td>文件类值</td><td>GetClassFile</td><td>文件类值(文件名,@类标识)</td><td>返回与指定文件名关联的 CLSID。</td></tr>
<tr><td>对象列表</td><td>GetRunningObjectTable</td><td>对象列表(0,@对象表)</td><td>返回指向本地运行对象表上的接口的指针。</td></tr>
<tr><td>类名接口</td><td>CLSIDFromProgID</td><td>类名接口(类名,接口)</td><td>通过指定对象类名查找接口定义标识CLSID。</td></tr>
<tr><td>类字接口</td><td>CLSIDFromString</td><td>类字接口(类字,接口)</td><td>把对象类标识文字转换成原始的标识数据CLSID。</td></tr>
<tr><td>字转标识</td><td>IIDFromString</td><td>字转标识(标识字,标识)</td><td>将类接口标识字符串转换回原始接口标识符 (IID) 。</td></tr>
<tr><td>接口名字</td><td>ProgIDFromCLSID</td><td>接口名称(接口,类名)</td><td>检索给定类接口 CLSID 的 ProgID名称字符串,含大括号。</td></tr>
<tr><td>接口转字</td><td>StringFromCLSID</td><td>接口转字(接口,类字)</td><td>将类接口 CLSID 转换为可打印字符的字符串。</td></tr>
<tr><td>标识转字</td><td>StringFromIID</td><td>标识转字(标识,字串)</td><td>将接口标识符转换为可打印字符的字符串。</td></tr>
<tr><td>名称激活</td><td>BindMoniker</td><td>名称激活(名字对象,0,接口标识,@接口指针)</td><td>通过对象的名字对象查找对象，如果对象处于非活动状态，则激活该对象，并检索指向该对象上指定接口的指针。</td></tr>
<tr><td>创建反名</td><td>CreateAntiMoniker</td><td>创建反名(@名称对象)</td><td>创建并返回新的反名字对象。</td></tr>
<tr><td>创建绑定</td><td>CreateBindCtx</td><td>创建绑定(0,@绑定对象)</td><td>创建并返回指向 绑定对象 实现的指针。此对象存储有关特定名字对象绑定操作的信息。</td></tr>
<tr><td>创建类名</td><td>CreateClassMoniker</td><td>创建类名(类标识,@名称对象)</td><td>创建引用指定类的类名字对象。</td></tr>
<tr><td>数据通知</td><td>CreateDataAdviseHolder</td><td>数据通知(@数据通知对象)</td><td>检索指向数据建议持有者对象上 数据通知对象 的 OLE 实现的指针。</td></tr>
<tr><td>数据缓存</td><td>CreateDataCache</td><td>数据缓存(空对象,空类,接口标识,@接口对象)</td><td>检索指向 OLE 提供的数据缓存实现的新实例的指针。</td></tr>
<tr><td>建文件名</td><td>CreateFileMoniker</td><td>建文件名(路径,@名称对象)</td><td>基于指定路径创建文件名字对象。</td></tr>
<tr><td>名称组合</td><td>CreateGenericComposite</td><td>名称组合(左名,右名,@名称对象)</td><td>执行两个名字对象的泛型组合，并提供指向生成的复合名字对象的指针。</td></tr>
<tr><td>创建项名</td><td>CreateItemMoniker</td><td>创建项名(宽字符,项名称,@名称对象)</td><td>创建一个项名字对象，用于标识包含对象中的对象 (通常为复合文档) 。宽字符用!分割</td></tr>
<tr><td>创建序名</td><td>CreateObjrefMoniker</td><td>创建序名(空对象,@名称对象)</td><td>基于指向 对象的指针创建 扩展 (MBR)对象的可序列化形式 名字对象。</td></tr>
<tr><td>创建指名</td><td>CreatePointerMoniker</td><td>创建指名(指针对象,@名称对象)</td><td>基于指向对象的指针创建指针名字对象。</td></tr>
<tr><td>模拟异类</td><td>CoTreatAsClass</td><td>模拟异类(类标识,模拟类)</td><td>建立或删除模拟，第一个类的对象被视为不同类的对象。模拟类为空类时删除现有仿真</td></tr>
<tr><td>内存建流</td><td>CreateStreamOnHGlobal</td><td>内存建流(内存,自动释放,@流)</td><td>从全局分配的内存创建一个流对象。自动释放为真或假</td></tr>
<tr><td>内存字节</td><td>CreateILockBytesOnHGlobal</td><td>内存字节(内存,自动释放,@接口)</td><td>从全局分配的内存创建一个字节数组对象。</td></tr>
<tr><td>取流内存</td><td>GetHGlobalFromStream</td><td>取流内存(流,@内存)</td><td>获取内存建流创建的流的全局内存句柄。</td></tr>
<tr><td>字节内存</td><td>GetHGlobalFromILockBytes</td><td>字节内存(流,@内存)</td><td>获取内存字节创建的字节数组对象的全局内存句柄。</td></tr>
<tr><td>反显示名</td><td>MkParseDisplayName</td><td>反显示名(绑定对象,显示名,@大小,@名称对象)</td><td>将字符串转换为标识由字符串命名的对象的名字对象。是 名称对象.显示 的反函数</td></tr>
<tr><td>前缀新名</td><td>MonikerCommonPrefixWith</td><td>前缀新名(名称对象,名字对象,@新名对象)</td><td>基于此名字对象 (包含此名字对象对象数据) 与其他名字对象共享的前缀的公共前缀创建新的名字对象。</td></tr>
<tr><td>相对新名</td><td>MonikerRelativePathTo</td><td>相对新名(名称对象,名字对象,@新名对象,0)</td><td>提供一个名字对象，当组合到第一个指定名字对象 (或具有类似结构) 的名字对象末尾时，生成第二个指定名字对象。</td></tr>
<tr><td>复合存储</td><td>StgCreateDocfile</td><td>复合存储(宽文件名,访问,0,@存储)</td><td>使用复合文件实现创建新的复合文件存储对象。<a href="#访问模式">访问模式</a></td></tr>
<tr><td>打开存储</td><td>StgOpenStorage</td><td>打开存储(宽文件名,空接口,访问,排除,0,@存储)</td><td>打开文件系统中的现有根存储对象。<a href="#访问模式">访问模式</a></td></tr>
<tr><td>指定存储</td><td>StgIsStorageFile</td><td>指定存储(宽文件名)</td><td>指示特定磁盘文件是否包含存储对象。</td></tr>
<tr><td>存储改时</td><td>StgSetTimes</td><td>存储改时(宽文件名,创建,访问,修改)</td><td>设置所指示文件的创建、访问和修改时间（如果基础文件系统支持）。</td></tr>
<tr><td>存储字节</td><td>StgOpenStorageOnILockBytes</td><td>存储字节(字节对象,空接口,访问,排除,0,@存储)</td><td>打开一个现有的存储对象，该对象不驻留在磁盘文件中，而是具有调用方提供的基础字节数组。</td></tr>
<tr><td>释放存储</td><td>ReleaseStgMedium</td><td>释放存储(流传输类)</td><td>释放指定的存储介质。</td></tr>
</table><b><a name="内存对象">内存对象</a>——功能方法</b><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IMalloc</td><td>内存对象</td><td>分配、释放和管理内存。</td></tr>
<tr><th colspan=3>内存对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Alloc</td><td>分配(大小)</td><td>分配内存块。</td></tr>
<tr><td>Realloc</td><td>更改(内存,大小)</td><td>更改以前分配的内存块的大小。</td></tr>
<tr><td>Free</td><td>销毁(内存)</td><td>释放以前分配的内存块。</td></tr>
<tr><td>GetSize</td><td>大小(内存)</td><td>检索以前分配的内存块的大小。</td></tr>
<tr><td>DidAlloc</td><td>确定(内存)</td><td>确定此分配器是否用于分配指定的内存块。返回:0未分配,1已分配,-1无法确定</td></tr>
<tr><td>HeapMinimize</td><td>合并</td><td>通过将未使用的内存释放到操作系统、合并相邻的可用块并提交可用页面，尽可能最大程度地减少堆。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IMallocSpy</td><td>内存管理对象</td><td>使应用程序开发人员能够监视内存分配、检测内存泄漏，并在调用 内存对象 方法时模拟内存故障。</td></tr>
<tr><th colspan=3>内存管理对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>PreAlloc</td><td>预分配(大小)</td><td>在调用 内存对象.分配 之前执行所需的操作。实现可以扩展和/或修改分配，以使用分配存储特定于调试的信息。</td></tr>
<tr><td>PostAlloc</td><td>已分配(内存,大小)</td><td>执行调用 内存对象.分配 后所需的操作。此方法返回 内存对象.分配 的内存块的指针。 </td></tr>
<tr><td>PreFree</td><td>预销毁(内存,是否分配)</td><td>在调用 内存对象.销毁 之前执行所需的操作。 此方法确保传递给 销毁 的指针指向实际分配的开头。</td></tr>
<tr><td>PostFree</td><td>已销毁(是否分配)</td><td>在调用 内存对象.销毁 之后执行所需的操作。</td></tr>
<tr><td>PreRealloc</td><td>预更改(内存,大小,@新内存,是否分配)</td><td>在调用 内存对象.更改 之前执行所需的操作。</td></tr>
<tr><td>PostRealloc</td><td>已更改(内存,是否分配)</td><td>在调用 内存对象.更改 之前执行所需的操作。此方法返回 内存对象.更改 的内存块的指针。</td></tr>
<tr><td>PreGetSize</td><td>预取大小(内存,是否分配)</td><td>在调用 内存对象.大小 之前执行所需的操作。</td></tr>
<tr><td>PostGetSize</td><td>已取大小(大小,是否分配)</td><td>在调用 内存对象.大小 之后执行所需的操作。此方法返回 内存对象.大小 返回的大小。同时也是第一参数提交的大小</td></tr>
<tr><td>PreDidAlloc</td><td>预确定(内存,是否分配)</td><td>在调用 内存对象.确定 之前执行所需的操作。</td></tr>
<tr><td>PostDidAlloc</td><td>已确定(内存,是否分配,确定结果)</td><td>在调用 内存对象.确定 之后执行所需的操作。</td></tr>
<tr><td>PreHeapMinimize</td><td>预合并</td><td>在调用 内存对象.合并 之前执行所需的操作。</td></tr>
<tr><td>PostHeapMinimize</td><td>已合并</td><td>在调用 内存对象.合并 之后执行所需的操作。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IMarshal</td><td>封送对象</td><td>使 COM 对象能够定义和管理其接口指针的封送处理。</td></tr>
<tr><th colspan=3>封送对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetUnmarshalClass</td><td>未配置类(接口标识,封送接口,<a href="#未配置类目标">目标</a>,0,<a href="#未配置类标志">标志</a>,@代理标识)</td><td>检索未配置代码的 CLSID。</td></tr>
<tr><td>GetMarshalSizeMax</td><td>最大缓冲(接口标识,封送接口,<a href="#未配置类目标">目标</a>,0,<a href="#未配置类标志">标志</a>,@大小)</td><td>检索封送处理期间所需的缓冲区的最大大小。</td></tr>
<tr><td>MarshalInterface</td><td>封送接口(流,接口标识,封送接口,<a href="#未配置类目标">目标</a>,0,<a href="#未配置类标志">标志</a>)</td><td>封送接口指针。</td></tr>
<tr><td>UnmarshalInterface</td><td>取消封送(流,接口标识,封送接口,@接口)</td><td>取消对接口指针的封送。成功后接口包含要取消封送的接口的请求接口指针。</td></tr>
<tr><td>ReleaseMarshalData</td><td>销毁封送(流)</td><td>销毁封送数据包。</td></tr>
<tr><td>DisconnectObject</td><td>断开连接(0)</td><td>释放与对象的所有连接。对象的服务器在关闭之前调用对象的此方法实现。</td></tr>
</table><a name="未配置类目标">未配置类-目标</a>——常量数值<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量数值</td><td>作用解释</td></tr>
<tr><td>MSHCTX_LOCAL</td><td>0</td><td>取消封送进程是本地的，并且具有与封送处理进程的共享内存访问。</td></tr>
<tr><td>MSHCTX_NOSHAREDMEM</td><td>1</td><td>取消封送进程不具有与封送处理进程的共享内存访问权限。</td></tr>
<tr><td>MSHCTX_DIFFERENTMACHINE</td><td>2</td><td>取消封送过程位于不同的计算机上。 封送处理代码不能假定在该计算机上安装了特定的应用程序代码段。</td></tr>
<tr><td>MSHCTX_INPROC</td><td>3</td><td>取消封杀将在同一过程中在另一个公寓进行。</td></tr>
<tr><td>MSHCTX_CROSSCTX</td><td>4</td><td>在当前单元中创建新上下文。</td></tr>
</table><a name="未配置类标志">未配置类-标志</a>——常量数值<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>常量数值</td><td>作用解释</td></tr>
<tr><td>MSHLFLAGS_NORMAL</td><td>0</td><td>发生封送处理是因为接口指针从一个进程传递到另一个进程。 这是正常情况。 封送处理过程生成的数据包将在目标进程中取消封送。 封送数据包只能取消封送一次，也可以完全取消封送。 如果接收方成功取消数据包的封存，则作为取消封送过程的一部分，会自动对数据包调用 CoReleaseMarshalData 函数。 如果接收方未或无法取消数据包的封存，则发送方必须对数据包调用 CoReleaseMarshalData 。</td></tr>
<tr><td>MSHLFLAGS_TABLESTRONG</td><td>1</td><td>之所以发生封送处理，是因为数据包将存储在全局可访问的表中，该表可以从该表中取消封送一次或多次，或者根本不可以取消封送。 表中是否存在数据包算作对要封送的接口的强引用，这意味着足以使对象保持活动状态。 从表中删除数据包时，表实现者必须对数据包调用 CoReleaseMarshalData 函数。MSHLFLAGS_TABLESTRONG由 RegisterDragDrop 函数在将窗口注册为放置目标时使用。 无论最终用户在窗口中拖动多少次，这都会使窗口注册为放置目标。 RevokeDragDrop 函数调用 CoReleaseMarshalData。</td></tr>
<tr><td>MSHLFLAGS_TABLEWEAK</td><td>2</td><td>之所以发生封送处理，是因为数据包将存储在全局可访问的表中，该表可以从该表中取消封送一次或多次，或者根本不可以取消封送。 但是，表中存在的数据包充当对要封送的接口的弱引用，这意味着不足以使对象保持活动状态。 从表中删除数据包时，表实现者必须对数据包调用 CoReleaseMarshalData 函数。MSHLFLAGS_TABLEWEAK通常在运行的对象表中注册对象 (ROT) 时使用。 这可以防止 ROT 中的对象条目在没有任何其他连接的情况下使对象保持活动状态。 有关详细信息 ，请参阅 IRunningObjectTable：：Register 。</td></tr>
<tr><td>MSHLFLAGS_NOPING</td><td>4</td><td>将此标志添加到原始对象封送处理 (而不是封送代理) 将禁用该对象的 ping 协议。</td></tr>
<tr><td>MSHLFLAGS_RESERVED1</td><td>8</td><td>预留标志。</td></tr>
<tr><td>MSHLFLAGS_RESERVED2</td><td>16</td><td>预留标志。</td></tr>
<tr><td>MSHLFLAGS_RESERVED3</td><td>32</td><td>预留标志。</td></tr>
<tr><td>MSHLFLAGS_RESERVED4</td><td>64</td><td>预留标志。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDropSource</td><td>拖放源对象</td><td>用于在应用程序中提供拖放操作。包含在拖放操作期间用作数据源与程序响应的方法。</td></tr>
<tr><th colspan=3>拖放源对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>QueryContinueDrag</td><td>继续(是否Esc,组合键)</td><td>确定是应继续、取消还是完成拖放操作。请勿直接调用</td></tr>
<tr><td>GiveFeedback</td><td>反馈(效果)</td><td>提供指定视觉效果源程序能够在拖放操作期间向最终用户提供视觉反馈。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDropSourceNotify</td><td>拖放源通知对象</td><td>在用户将鼠标拖入或拖出潜在放置目标窗口时接收来自 OLE 的通知。</td></tr>
<tr><th colspan=3>拖放源通知对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>DragEnterTarget</td><td>拖到(窗口)</td><td>当用户将鼠标光标拖动到潜在的放置目标窗口中时，OLE 将调用此方法。</td></tr>
<tr><td>DragLeaveTarget</td><td>拖离</td><td>当用户将鼠标光标拖出潜在的放置目标窗口时，OLE 调用此方法。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDropTarget</td><td><a name="拖放目标对象">拖放目标对象</a></td><td>用于在应用程序中提供拖放操作。包含在拖放操作期间用作数据目标与程序响应的方法。</td></tr>
<tr><th colspan=3>拖放目标对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>DragEnter</td><td>接受(接口,组合键,坐标,效果)</td><td>指示是否可以接受放置，如果可以接受，则表示放置的效果。</td></tr>
<tr><td>DragOver</td><td>完成(组合键,坐标,效果)</td><td>向用户提供目标反馈，并将放置效果传达给回调函数。</td></tr>
<tr><td>DragLeave</td><td>删除</td><td>删除目标反馈并释放数据对象。</td></tr>
<tr><td>Drop</td><td>放置(接口,组合键,坐标,效果)</td><td>将源数据合并到目标窗口中，删除目标反馈，并释放数据对象。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>常量数值</td><td>英文名称</td><td>作用解释</td></tr>
<tr><th colspan=4>拖曳目标对象——放置效果</th></tr>
<tr><td>0</td><td>DROPEFFECT_NONE</td><td>放置目标不能接受数据。</td></tr>
<tr><td>1</td><td>DROPEFFECT_COPY</td><td>复制副本，原始数据不受拖动源影响。</td></tr>
<tr><td>2</td><td>DROPEFFECT_MOVE</td><td>拖动源应删除数据。</td></tr>
<tr><td>4</td><td>DROPEFFECT_LINK</td><td>拖动源应创建指向原始数据的链接。</td></tr>
<tr><td>0x80000000</td><td>DROPEFFECT_SCROLL</td><td>滚动即将开始或当前正在目标中发生。与其他值组合。</td></tr>
</table><a name="咨询对象">咨询对象</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IEnumSTATDAT</td><td>咨询对象</td><td>枚举数据对象的咨询连接信息。</td></tr>
<tr><th colspan=3>咨询对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Next</td><td>下个(数量,数组,@项数)</td><td>检索枚举序列中指定数量的项。</td></tr>
<tr><td>Skip</td><td>跳过(项数)</td><td>跳过枚举序列中指定数量的项。</td></tr>
<tr><td>Reset</td><td>重置</td><td>将枚举序列重置到开头。</td></tr>
<tr><td>Clone</td><td>克隆(@接口)</td><td>创建与当前枚举数包含相同枚举状态的一个新枚举接口。</td></tr>
</table><a name="枚举器">枚举器</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IEnumOLEVERB</td><td>枚举器</td><td>按谓词编号升序枚举对象可用的不同谓词。</td></tr>
<tr><th colspan=3>枚举器——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Next</td><td>下个(数量,数组,@项数)</td><td>检索枚举序列中指定数量的项。</td></tr>
<tr><td>Skip</td><td>跳过(项数)</td><td>跳过枚举序列中指定数量的项。</td></tr>
<tr><td>Reset</td><td>重置</td><td>将枚举序列重置到开头。</td></tr>
<tr><td>Clone</td><td>克隆(@接口)</td><td>创建与当前枚举数包含相同枚举状态的一个新枚举接口。</td></tr>
</table><a name="数据对象">数据对象</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDataObject</td><td>数据对象</td><td>启用数据传输和数据更改通知。 数据传输方法指定已传输数据的格式以及要通过其传输数据的介质。</td></tr>
<tr><th colspan=3>数据对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetData</td><td>取数据(<a href="#剪贴板类">剪贴板类</a>,流传输类)</td><td>从源数据对象获取数据。调用方负责释放 <a name="流传输类">流传输类</a> 结构。</td></tr>
<tr><td>GetDataHere</td><td>获取数据(<a href="#剪贴板类">剪贴板类</a>,<a name="流传输类">流传输类</a>)</td><td>从源数据对象获取数据。调用方必须分配和释放指定的存储介质。</td></tr>
<tr><td>QueryGetData</td><td>查数据(<a href="#剪贴板类">剪贴板类</a>)</td><td>确定数据对象是否能够按指定呈现数据。取数据之前使用,成功返回0</td></tr>
<tr><td>GetCanonicalFormatEtc</td><td>类比(剪贴板类,剪贴板类)</td><td>比较两个 <a href="#剪贴板类">剪贴板类</a> 结构是否相同或逻辑上等效的，从而消除了重复呈现的需要。返回0结构不同</td></tr>
<tr><td>SetData</td><td>传数据(<a href="#剪贴板类">剪贴板类</a>,<a name="流传输类">流传输类</a>,是否有存储介质)</td><td>将数据传输到实现此方法的对象。</td></tr>
<tr><td>EnumFormatEtc</td><td>枚举(方向,@接口)</td><td>创建对象以枚举数据对象支持的格式。</td></tr>
<tr><td>DAdvise</td><td>连接(<a href="#剪贴板类">剪贴板类</a>,咨询,接收器,@令牌)</td><td>在数据对象与建议接收器之间创建连接。</td></tr>
<tr><td>DUnadvise</td><td>断开(令牌)</td><td>销毁以前设置的通知连接。</td></tr>
<tr><td>EnumDAdvise</td><td>连接器(@接口)</td><td>创建可用于对当前的通知连接进行枚举的对象。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>ITaskbarList</td><td>任务栏对象</td><td>公开控制任务栏的方法。它允许动态添加、删除和激活任务栏上的项。</td></tr>
<tr><th colspan=3>任务栏对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>HrInit</td><td>初始化</td><td>初始化任务栏列表对象。先调用此方法</td></tr>
<tr><td>AddTab</td><td>添加(窗口)</td><td>将窗口添加到任务栏。</td></tr>
<tr><td>DeleteTab</td><td>删除(窗口)</td><td>从任务栏中删除窗口项。</td></tr>
<tr><td>ActivateTab</td><td>激活(窗口)</td><td>激活任务栏上的项。</td></tr>
<tr><td>SetActiveAlt</td><td>活动(窗口)</td><td>将任务栏项标记为活动，但不会直观地激活它。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IShellLinkA</td><td>链接对象</td><td>公开用于创建、修改和解析 Shell 链接的方法。</td></tr>
<tr><th colspan=3>链接对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetPath</td><td>取路径(路径,长度,查文件结构,标志)</td><td>获取 Shell 链接对象的目标的路径和文件名。标志:1短路径;4原始路径;</td></tr>
<tr><td>GetIDList</td><td>取列表(@标识表)</td><td>递获取 Shell 链接对象目标的项标识符列表。</td></tr>
<tr><td>SetIDList</td><td>改列表(标识表)</td><td>设置指向 Shell 链接对象的项标识符列表 (PIDL) 的指针。</td></tr>
<tr><td>GetDescription</td><td>取备注(内容,长度)</td><td>获取 Shell 链接对象的说明字符串。</td></tr>
<tr><td>SetDescription</td><td>改备注(内容)</td><td>设置 Shell 链接对象的说明。 说明可以是任何应用程序定义的字符串。</td></tr>
<tr><td>GetWorkingDirectory</td><td>取目录(目录,长度)</td><td>获取 Shell 链接对象的工作目录的名称。</td></tr>
<tr><td>SetWorkingDirectory</td><td>改目录(目录)</td><td>设置 Shell 链接对象的工作目录的名称。</td></tr>
<tr><td>GetArguments</td><td>取命令(内容,长度)</td><td>获取与 Shell 链接对象关联的命令行参数。</td></tr>
<tr><td>SetArguments</td><td>改命令(内容)</td><td>设置与 Shell 链接对象关联的命令行参数。</td></tr>
<tr><td>GetHotkey</td><td>取热键(@键)</td><td>获取 shell 链接对象的 (热键) 键盘快捷方式。</td></tr>
<tr><td>SetHotkey</td><td>改热键(键)</td><td>设置 shell 链接对象的 (热键) 键盘快捷方式。</td></tr>
<tr><td>GetShowCmd</td><td>取显示(@方式)</td><td>获取 Shell 链接对象的显示方式。</td></tr>
<tr><td>SetShowCmd</td><td>改显示(@方式)</td><td>设置 Shell 链接对象的显示方式。1复原;2最小化;3最大化</td></tr>
<tr><td>GetIconLocation</td><td>取图标(路径,长度,@索引)</td><td>获取 Shell 链接对象的图标的位置 (路径和索引) 。</td></tr>
<tr><td>SetIconLocation</td><td>改图标(路径,索引)</td><td>设置 Shell 链接对象的图标的位置 (路径和索引) 。</td></tr>
<tr><td>SetRelativePath</td><td>改文件(名称,0)</td><td>设置 Shell 链接对象的相对路径。</td></tr>
<tr><td>Resolve</td><td>找目标(窗口,标志)</td><td>尝试查找 Shell 链接的目标，即使它已被移动或重命名。标志:1不显示异常;4更新路径;8不更新链接;$10不搜索启发;$20不跟踪;$40禁用跟踪;$80调用安装</td></tr>
<tr><td>SetPath</td><td>改路径(路径)</td><td>设置 Shell 链接对象的目标的路径和文件名。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>ILockBytes</td><td>字节对象</td><td>在由某些物理存储（例如磁盘文件、全局内存或数据库）支持的字节数组对象上实现。</td></tr>
<tr><th colspan=3>字节对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>ReadAt</td><td>读(起点,缓冲区,大小,@已读)</td><td>从字节数组对象开头的指定偏移量开始读取指定数量的字节。</td></tr>
<tr><td>WriteAt</td><td>写(起点,缓冲区,大小,@已写)</td><td>从字节数组开头的指定偏移量开始写入指定的字节数。</td></tr>
<tr><td>Flush</td><td>刷新</td><td>可确保对象实现维护的任何内部缓冲区都写出到基础物理存储。</td></tr>
<tr><td>SetSize</td><td>大小(长度)</td><td>更改字节数组的大小。</td></tr>
<tr><td>LockRegion</td><td>锁定(位置,长度,方式)</td><td>限制对字节数组中指定字节范围的访问。方式:1禁止写,2独占禁写,4只读写此处</td></tr>
<tr><td>UnlockRegion</td><td>解锁(位置,长度,方式)</td><td>删除以前使用锁定限制的字节范围的访问限制。方式:1禁止写,2独占禁写,4只读写此处</td></tr>
<tr><td>Stat</td><td>统计(统计类,方式)</td><td>检索此字节数组的<a href="#统计类">统计类</a>结构数据。方式=1统计类不含名称</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IStorage</td><td>存储对象</td><td>支持创建和管理结构化存储对象。结构化存储允许在单个文件中分层存储信息，通常称为“文件中的文件系统”。</td></tr>
<tr><th colspan=3>存储对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>CreateStream</td><td>创建流(名称,访问,0,0,@流)</td><td>创建指定名称的流对象。名称不超过31个宽字符;<a href="#访问模式">访问模式</a></td></tr>
<tr><td>OpenStream</td><td>打开流(名称,0,访问,0,@流)</td><td>以指定的访问模式打开此存储对象中的现有流对象。</td></tr>
<tr><td>CreateStorage</td><td>创建库(名称,访问,0,0,@存储)</td><td>在指定的访问模式下使用指定名称创建并打开嵌套在此存储对象中的新存储对象。</td></tr>
<tr><td>OpenStorage</td><td>打开库(名称,0,访问,0,0,@存储)</td><td>在指定的访问模式下打开具有指定名称的现有存储对象。</td></tr>
<tr><td>CopyTo</td><td>复制(接口数,接口组,名称块,存储)</td><td>将打开的存储对象的整个内容复制到另一个存储对象。名称块指定不复制到目标的存储或流对象块。接口组为0复制对象上的所有接口</td></tr>
<tr><td>MoveElementTo</td><td>传送(名称,存储,新名,方式)</td><td>将子存储或流从此存储对象复制或移动到另一个存储对象。方式:0移动,1复制</td></tr>
<tr><td>Commit</td><td>反映(方式)</td><td>可确保打开的流对象所做的任何更改都反映在父存储中。方式:1可以覆盖,2防止覆盖,4写后磁盘缓存,8合并存储</td></tr>
<tr><td>Revert</td><td>恢复</td><td>放弃自上次提交操作以来对存储对象所做的所有更改。</td></tr>
<tr><td>EnumElements</td><td>枚举(0,0,0,@枚举器)</td><td>检索指向枚举器对象的指针，该对象可用于枚举此存储对象中包含的存储和流对象。</td></tr>
<tr><td>DestroyElement</td><td>删除(名称)</td><td>从此存储对象中删除指定的存储或流。</td></tr>
<tr><td>RenameElement</td><td>改名(原名,新名)</td><td>重命名此存储对象中的指定子存储或流。</td></tr>
<tr><td>SetElementTimes</td><td>改时间(名称,创建,访问,修改)</td><td>设置指定存储元素的修改、访问和创建时间。时间参数为0不修改</td></tr>
<tr><td>SetClass</td><td>改类(类标识)</td><td>将指定的类标识符 (CLSID) 分配给此存储对象。</td></tr>
<tr><td>SetStateBits</td><td>状态(状态位,掩码)</td><td>在此存储对象中存储最多 32 位的状态信息。 此方法保留供将来使用。</td></tr>
<tr><td>Stat</td><td>统计(统计类,方式)</td><td>检索此流的<a href="#统计类">统计类</a>结构数据。方式=1统计类不含名称</td></tr>
</table><a name="访问模式">存储对象访问模式</a> <br>指示创建和删除对象的条件以及对象的访问模式的标志。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>作用解释</td></tr>
<tr><td>STGM_DIRECT</td><td>0x00000000</td><td>指示在直接模式下，每次对存储或流元素的更改都会在发生时写入。这是默认值。</td></tr>
<tr><td>STGM_TRANSACTED</td><td>0x00010000</td><td>指示在事务处理模式下，仅当调用显式提交操作时，才会缓冲和写入更改。</td></tr>
<tr><td>STGM_SIMPLE</td><td>0x08000000</td><td>在有限但经常使用的情况下，提供复合文件的更快实现。</td></tr>
<tr><td>STGM_READ</td><td>0x00000000</td><td>指示对象为只读，这意味着无法进行修改。 </td></tr>
<tr><td>STGM_WRITE</td><td>0x00000001</td><td>允许您保存对对象的更改，但不允许访问其数据。</td></tr>
<tr><td>STGM_READWRITE</td><td>0x00000002</td><td>启用对对象数据的访问和修改。</td></tr>
<tr><td>STGM_SHARE_DENY_NONE</td><td>0x00000040</td><td>指定不拒绝对象的后续打开读取或写入访问。</td></tr>
<tr><td>STGM_SHARE_DENY_READ</td><td>0x00000030</td><td>阻止其他人随后在 STGM_READ 模式下打开对象。 它通常用于根存储对象。</td></tr>
<tr><td>STGM_SHARE_DENY_WRITE</td><td>0x00000020</td><td>防止其他人随后打开对象进行写或读写访问。在事务处理模式下，共享可以显著提高性能。</td></tr>
<tr><td>STGM_SHARE_EXCLUSIVE</td><td>0x00000010</td><td>防止其他人随后以任何模式打开对象。</td></tr>
<tr><td>STGM_PRIORITY</td><td>0x00040000</td><td>打开具有对最近提交的版本的独占访问权限的存储对象。</td></tr>
<tr><td>STGM_DELETEONRELEASE</td><td>0x04000000</td><td>指示释放根存储对象时，基础文件将被自动销毁。 此功能最适用于创建临时文件。</td></tr>
<tr><td>STGM_NOSCRATCH</td><td>0x00100000</td><td>指示在事务处理模式下，通常使用临时暂存文件来保存修改，直到调用 Commit 方法。</td></tr>
<tr><td>STGM_CREATE</td><td>0x00001000</td><td>指示应在新对象替换现有存储对象或流之前删除它。</td></tr>
<tr><td>STGM_CONVERT</td><td>0x00020000</td><td>创建新对象，同时保留名为“Contents”的流中的现有数据。</td></tr>
<tr><td>STGM_FAILIFTHERE</td><td>0x00000000</td><td>如果存在具有指定名称的现有对象，则会导致创建操作失败。</td></tr>
<tr><td>STGM_NOSNAPSHOT</td><td>0x00200000</td><td>可防止系统提供的实现创建文件快照副本。否则对文件的更改将写入文件的末尾。</td></tr>
<tr><td>STGM_DIRECT_SWMR</td><td>0x00400000</td><td>支持单编写器、多读取程序文件操作的直接模式。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IStream</td><td>流对象</td><td>允许读取和写入数据流对象。 流对象包含结构化存储对象中的数据，其中存储提供 结构。 </td></tr>
<tr><th colspan=3>流对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Read</td><td>读(缓冲区,大小,@已读))</td><td>从当前查找指针开始，将流对象中的指定字节数读取到内存中。</td></tr>
<tr><td>Write</td><td>写(缓冲区,大小,@已写)</td><td>从当前搜寻指针处开始，将指定数量的字节写入流对象。</td></tr>
<tr><td>Seek</td><td>定位(位置,方向,@指针)</td><td>将查找指针更改为新位置。方向:0开头,1当前,2末尾;指针可以写0,不用新的搜寻指针</td></tr>
<tr><td>SetSize</td><td>大小(长度)</td><td>更改流对象的大小。</td></tr>
<tr><td>CopyTo</td><td>复制(流,长度,@已读,@已写)</td><td>将指定数量的字节从流中的当前搜寻指针复制到另一个流中的当前查找指针。</td></tr>
<tr><td>Commit</td><td>反映(方式)</td><td>可确保打开的流对象所做的任何更改都反映在父存储中。方式:1可以覆盖,2防止覆盖,4写后磁盘缓存,8合并存储</td></tr>
<tr><td>Revert</td><td>恢复</td><td>放弃自上次 反映(方式) 调用以来对事务处理流所做的所有更改。</td></tr>
<tr><td>LockRegion</td><td>锁定(位置,长度,方式)</td><td>限制对流中指定字节范围的访问。方式:1禁止写,2独占禁写,4只读写此处</td></tr>
<tr><td>UnlockRegion</td><td>解锁(位置,长度,方式)</td><td>删除以前使用锁定限制的字节范围的访问限制。方式:1禁止写,2独占禁写,4只读写此处</td></tr>
<tr><td>Stat</td><td>统计(统计类,方式)</td><td>检索此流的<a href="#统计类">统计类</a>结构数据。方式=1统计类不含名称</td></tr>
<tr><td>Clone</td><td>克隆(@流)</td><td>使用自己的定位指针创建新的流对象，该对象引用与原始流相同的字节。</td></tr>
</table><a name="统计类">统计类</a><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>统计类</td><td>STATSTG</td><td>52</td><td>包含有关开放存储、流或字节数组对象的统计数据。</td></tr>
<tr><th colspan=4>统计类——成员表</th></tr>
<tr><td>名称</td><td>pwcsName</td><td>整数</td><td>包含名称的宽字符串的指针。</td></tr>
<tr><td>分类</td><td>type</td><td>整数</td><td>指示存储对象的类型。1存储对象,2流对象,3字节数组,4属性存储</td></tr>
<tr><td>大小</td><td>cbSize</td><td>整数</td><td>指定流或字节数组的大小（以字节为单位）。</td></tr>
<tr><td>上次修改</td><td>mtime.dwLowDateTime</td><td>整数</td><td>指示此存储、流或字节数组的上次修改时间。</td></tr>
<tr><td>修改时间</td><td>mtime.dwHighDateTime</td><td>整数</td><td>指示此存储、流或字节数组的上次修改时间。</td></tr>
<tr><td>最初创建</td><td>ctime.dwLowDateTime</td><td>整数</td><td>指示此存储、流或字节数组的创建时间。</td></tr>
<tr><td>创建时间</td><td>ctime.dwHighDateTime</td><td>整数</td><td>指示此存储、流或字节数组的创建时间。</td></tr>
<tr><td>最后访问</td><td>atime.dwLowDateTime</td><td>整数</td><td>指示此存储、流或字节数组的最后访问时间。</td></tr>
<tr><td>访问时间</td><td>atime.dwHighDateTime</td><td>整数</td><td>指示此存储、流或字节数组的最后访问时间。</td></tr>
<tr><td>模式</td><td>grfMode</td><td>整数</td><td>指示打开对象时指定的访问模式。 此成员仅在调用 Stat 方法时有效。</td></tr>
<tr><td>锁型</td><td>grfLocksSupported</td><td>整数</td><td>指示受该流或字节数组支持的区域锁定的类型。</td></tr>
<tr><td>类</td><td>clsid</td><td>整数</td><td>指示存储对象的类标识符;设置为新存储对象的空指针。不用于流或字节数组。</td></tr>
<tr><td>预留</td><td>reserved</td><td>整数</td><td>保留供将来使用。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IPersist</td><td>存储类对象</td><td>提供可以永久存储在系统中的 对象的 CLSID。 </td></tr>
<tr><th colspan=3>存储类对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClassID</td><td>类(标识)</td><td>检索对象的 CLSID的类标识符。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IPersistStream</td><td>存储流对象</td><td>允许保存和加载使用简单串行流的对象以满足其存储需求。 </td></tr>
<tr><th colspan=3>存储流对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClassID</td><td>类(标识)</td><td>检索对象的 CLSID的类标识符。</td></tr>
<tr><td>IsDirty</td><td>已改</td><td>确定对象自上次保存到流以来是否已更改。更改返回0,否则返回1</td></tr>
<tr><td>Load</td><td>加载(流)</td><td>从先前保存的流中初始化对象。</td></tr>
<tr><td>Save</td><td>保存(流,模式)</td><td>将对象保存到指定流。模式为真保存后清除更新标志</td></tr>
<tr><td>GetSizeMax</td><td>大小(@长度)</td><td>检索保存对象所需的流的大小。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IPersistStorage</td><td>存储库对象</td><td>使容器应用程序能够将存储对象传递给其包含的对象之一，并加载和保存存储对象。 </td></tr>
<tr><th colspan=3>存储库对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClassID</td><td>类(标识)</td><td>检索对象的 CLSID的类标识符。</td></tr>
<tr><td>IsDirty</td><td>已改</td><td>确定对象自上次保存到其当前存储以来是否发生了更改。更改返回0,否则返回1</td></tr>
<tr><td>InitNew</td><td>初始化(存储)</td><td>初始化新的存储对象。</td></tr>
<tr><td>Load</td><td>加载(存储)</td><td>从其现有存储加载对象。</td></tr>
<tr><td>Save</td><td>保存(存储,模式)</td><td>将对象及其包含的任何嵌套对象保存到指定的存储对象中。模式为真当前存储,为假另存为</td></tr>
<tr><td>SaveCompleted</td><td>存储(存储)</td><td>通知对象可以写入其存储对象。</td></tr>
<tr><td>HandsOffStorage</td><td>关存储</td><td>指示对象释放其容器传递给它的所有存储对象，并进入 HandsOff 模式。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IPersistFile</td><td>存储文件对象</td><td>允许从磁盘文件（而不是存储对象或流）加载对象或将其保存到磁盘文件。</td></tr>
<tr><th colspan=3>存储文件对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClassID</td><td>类(标识)</td><td>检索对象的 CLSID的类标识符。</td></tr>
<tr><td>IsDirty</td><td>已改</td><td>确定对象自上次保存到其当前文件以来是否发生了更改。更改返回0,否则返回1</td></tr>
<tr><td>Load</td><td>加载(路径,模式)</td><td>打开指定文件并从文件内容初始化对象。模式:0读;1写;2读写;$10独享;$20拒绝写;$30拒绝读</td></tr>
<tr><td>Save</td><td>保存(路径,模式)</td><td>将对象的副本保存到指定的文件中。模块为真,保存当前文件,为假是副本另存为</td></tr>
<tr><td>SaveCompleted</td><td>存储(路径)</td><td>通知该对象它可以写入它的文件。</td></tr>
<tr><td>GetCurFile</td><td>文件(路径)</td><td>检索与对象关联的文件的当前名称。如果没有当前工作文件，此方法将检索对象的默认保存提示。</td></tr>
</table><br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>IDispatch</td><td>自动化对象</td><td>向支持自动化的编程工具和其他应用程序公开对象、方法和属性。</td></tr>
<tr><th colspan=3>自动化对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetTypeInfoCount</td><td>接口数(@是否)</td><td>检索对象是否提供的类型信息接口数（0不提供 1提供）。</td></tr>
<tr><td>GetTypeInfo</td><td>类信息(类型,区域,对象)</td><td>检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</td></tr>
<tr><td>GetIDsOfNames</td><td>映射(IID_NULL,名称,名数,区域,@标号)</td><td>将单个成员和一组可选的参数名称映射到一组相应的数组指针.区域:1033美国;2052中国;2048系统默认;</td></tr>
<tr><td>Invoke</td><td>调用(标号,IID_NULL,区域,标志,参数,结果,0,0)</td><td>提供对对象公开的属性和方法的访问。标志:1方法;2属性读;3属性写;4参照赋值</td></tr>
</table>

<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>中文名称</td><td>作用解释</td></tr>
<tr><td>INewShortcutHookA</td><td>新快捷对象</td><td>公开用于创建新的 Internet 快捷方式的方法。</td></tr>
<tr><th colspan=3>新快捷对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>SetReferent</td><td>改引用(文字,窗口)</td><td>设置快捷方式对象的引用。(ANSI)</td></tr>
<tr><td>GetReferent</td><td>取引用(字符,大小)</td><td>获取快捷方式对象的引用。(ANSI)</td></tr>
<tr><td>SetFolder</td><td>改目录(路径)</td><td>设置快捷方式对象的文件夹名称。(ANSI)</td></tr>
<tr><td>GetFolder</td><td>取目录(路径,大小)</td><td>获取快捷方式对象的文件夹名称。(ANSI)</td></tr>
<tr><td>GetName</td><td>名称(内容,大小)</td><td>获取快捷方式对象的文件名，而不带扩展名。(ANSI)</td></tr>
<tr><td>GetExtension</td><td>扩展名(内容,大小)</td><td>获取快捷方式对象的文件扩展名。(ANSI)</td></tr>
</table><br>
<font color="#0000FF">对象库-常数</font>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名称</td><td>常量</td><td>英文名称</td><td>作用</td></tr>
<tr><td>无呼叫调度</td><td>0</td><td>CWMO_DEFAULT</td><td>无呼叫调度</td></tr>
<tr><td>调度调用</td><td>1</td><td>CWMO_DISPATCH_CALLS</td><td>从"等对象组"调度调用(默认值为无呼叫调度) </td></tr>
<tr><td>调度消息</td><td>2</td><td>CWMO_DISPATCH_WINDOW_MESSAGES</td><td>在 ASTA 或 STA 中启用从"等对象组"调度窗口消息</td></tr>
<tr><td>同步调度</td><td>1</td><td>COWAIT_WAITALL</td><td>仅当与同步对象关联的所有句柄都已发出信号且已收到输入事件时调用才会从"等多事件"返回</td></tr>
<tr><td>异步调度</td><td>2</td><td>COWAIT_ALERTABLE</td><td>如果异步过程调用(APC)已使用对QueueUserAPC函数的调用将排队到调用线程则从"等多事件"返回</td></tr>
<tr><td>输入调度</td><td>4</td><td>COWAIT_INPUTAVAILABLE</td><td>如果队列存在输入，即使输入已删除,调用从"等多事件"返回。</td></tr>
<tr><td>调度呼叫</td><td>8</td><td>COWAIT_DISPATCH_CALLS</td><td>在 ASTA 中从"等多事件"调度调用。</td></tr>
<tr><td>调度窗口</td><td>16</td><td>COWAIT_DISPATCH_WINDOW_MESSAGES</td><td>允许从 ASTA 或 STA 中的"等多事件"调度窗口消息。</td></tr>
<tr><td>单个连接</td><td>0</td><td>REGCLS_SINGLEUSE</td><td>使用"获取类库"将应用程序连接到类对象后，将从公共视图中删除该类对象</td></tr>
<tr><td>多个连接</td><td>1</td><td>REGCLS_MULTIPLEUSE</td><td>多个应用程序可以通过调用"获取类库"连接到类对象。</td></tr>
<tr><td>多个独立</td><td>2</td><td>REGCLS_MULTI_SEPARATE</td><td>用于通过调用"获取类库"注册单独的类工厂。</td></tr>
<tr><td>暂停连接</td><td>4</td><td>REGCLS_SUSPENDED</td><td>暂停指定 CLSID 的注册和激活请求，直到调用"获取类库"为止。</td></tr>
<tr><td>服务代理</td><td>8</td><td>REGCLS_SURROGATE</td><td>类对象是用来运行 DLL 服务器的代理项进程。</td></tr>
<tr><td>聚合封送</td><td>16</td><td>REGCLS_AGILE</td><td>类对象聚合自由线程封送处理器和将对所有项目内公寓可见。</td></tr>
</table><p><font size="6"><a name="文字组类">文字组类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>文字组类</td><td>CALPOLESTR</td><td>8</td><td>指定用于指定属性可以接受的预定义字符串的字符串的计数数组。</td></tr>
<tr><th colspan=4>文字组类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cElems</td><td>整数</td><td>数组的大小。</td></tr>
<tr><td>数组</td><td>pElems</td><td>整数</td><td>指向 宽字符串 值数组的指针，每个值对应于特定属性可以接受的允许值。使用任务分配和任务释放</td></tr>
</table><p><font size="6"><a name="加速器信息类">加速器信息类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>加速器信息类</td><td>OLEINPLACEFRAMEINFO</td><td>20</td><td>包含有关容器在就地会话期间支持的加速器的信息。</td></tr>
<tr><th colspan=4>加速器信息类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cb</td><td>整数</td><td>此结构的大小（以字节为单位）。</td></tr>
<tr><td>多窗</td><td>fMDIApp</td><td>整数</td><td>指示容器是否为 MDI 应用程序。</td></tr>
<tr><td>框架</td><td>hwndFrame</td><td>整数</td><td>容器的顶级框架窗口的句柄。</td></tr>
<tr><td>键表</td><td>haccel</td><td>整数</td><td>容器希望在就地编辑会话期间使用的快捷键表的句柄。</td></tr>
<tr><td>键数</td><td>cAccelEntries</td><td>整数</td><td>快捷键表的中的加速键数。</td></tr>
</table><p><font size="6"><a name="谓词类">谓词类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>谓词类</td><td>OLEVERB</td><td>16</td><td>定义对象支持的谓词。 嵌入对象.枚举 方法创建一个枚举器，该枚举器可以枚举对象的这些结构，并提供指向枚举器的 <a href="#枚举器">枚举器</a> 的指针。</td></tr>
<tr><th colspan=4>谓词类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>标识</td><td>lVerb</td><td>整数</td><td>与此谓词关联的整数标识符。</td></tr>
<tr><td>名称</td><td>lpszVerbName</td><td>整数</td><td>指向包含谓词名称的字符串的指针。</td></tr>
<tr><td>标志</td><td>fuFlags</td><td>整数</td><td>在 Windows 中，从标志常量中提取的一组标志。除MF_BITMAP、MF_OWNERDRAW和MF_POPUP外，支持 AppendMenu 中定义的所有标志。</td></tr>
<tr><td>属性</td><td>grfAttribs</td><td>整数</td><td><a href="#枚举谓词属性">枚举谓词属性</a>的组合。</td></tr>
</table><p><font size="6"><a name="流传输类">流传输类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>流传输类</td><td>STGMEDIUM</td><td>12</td><td>表示 IAdviseSink、 IDataObject 和 IOleCache 接口用于数据传输操作的通用全局内存句柄。</td></tr>
<tr><th colspan=4>流传输类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>介质</td><td>tymed</td><td>整数</td><td><a href="#存储介质">存储介质</a>的类型。封送和取消封送例程使用此值来确定所使用的联合成员。</td></tr>
<tr><td>数据</td><td>DUMMYUNIONNAME</td><td>整数</td><td>接收进程可用于访问正在传输的数据的句柄、字符串或接口指针。 如果 tymed 为TYMED_NULL，则未定义联合成员;否则，它是以下值之一。
DUMMYUNIONNAME.hBitmap 位图句柄。 tymed 成员是TYMED_GDI。DUMMYUNIONNAME.hMetaFilePict 图元文件句柄。 tymed 成员是TYMED_MFPICT。<br>
DUMMYUNIONNAME.hEnhMetaFile 增强的图元文件句柄。 tymed 成员是TYMED_ENHMF。<br>DUMMYUNIONNAME.hGlobal全局内存句柄。 tymed 成员TYMED_HGLOBAL。<br>
DUMMYUNIONNAME.lpszFileName指向包含数据的磁盘文件路径的指针。 tymed 成员是TYMED_FILE。<br>
DUMMYUNIONNAME.pstm指向 IStream 接口的指针。 tymed 成员是TYMED_ISTREAM。DUMMYUNIONNAME.pstg指向 IStorage 接口的 指针。 tymed 成员是TYMED_ISTORAGE。</td></tr>
<tr><td>接口</td><td>pUnkForRelease</td><td>整数</td><td> 指向接口实例的指针，该接口实例允许发送进程在接收进程调用 ReleaseStgMedium 函数时控制存储的释放方式。</td></tr>
</table><p><font size="6"><a name="剪贴板类">剪贴板类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>剪贴板类</td><td>FORMATETC</td><td>20</td><td>表示通用剪贴板格式。 它已增强为包含目标设备、数据的各个方面或视图以及存储介质指示器。</td></tr>
<tr><th colspan=4>剪贴板类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>格式</td><td>cfFormat</td><td>整数</td><td>感兴趣的<a href="#剪切板格式">剪贴板格式</a>。</td></tr>
<tr><td>目标</td><td>ptd</td><td>整数</td><td>指向 目标设备类 结构的指针，该结构包含有关要为其构成数据的目标设备的信息。</td></tr>
<tr><td>方位</td><td>dwAspect</td><td>整数</td><td>指示呈现中应包含的详细信息量。 此参数应为 <a href="#视图方位">视图方位</a> 枚举值之一。 </td></tr>
<tr><td>拆分</td><td>lindex</td><td>整数</td><td>必须跨页面边界拆分数据的一部分。最常见的值为-1，用于标识所有数据。对于缩略图和图标方面，将忽略。</td></tr>
<tr><td>介质</td><td>tymed</td><td>整数</td><td>用于传输对象数据的<a href="#存储介质">存储介质</a>的类型。</td></tr>
</table><p><font size="6"><a name="目标设备类">目标设备类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>目标设备类</td><td>DVTARGETDEVICE</td><td>16+</td><td>指定有关要为其编写数据的目标设备的信息。</td></tr>
<tr><th colspan=4>目标设备类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>tdSize</td><td>整数</td><td> 结构的大小（以字节为单位）。</td></tr>
<tr><td>驱动</td><td>tdDriverNameOffset</td><td>整数</td><td>从结构开头到设备驱动程序名称的偏移量（以字节为单位）</td></tr>
<tr><td>设备</td><td>tdDeviceNameOffset</td><td>整数</td><td>从结构开头到设备名称的偏移量（以字节为单位） </td></tr>
<tr><td>端口</td><td>tdPortNameOffset</td><td>整数</td><td>从结构开头到端口名称的偏移量（以字节为单位）</td></tr>
<tr><td>模型</td><td>tdExtDevmodeOffset</td><td>整数</td><td>从结构开头到通过调用 DocumentProperties 检索的 DEVMODE 结构的偏移量（以字节为单位）。</td></tr>
<tr><td>数据</td><td>tdData</td><td>字节</td><td>包含目标设备数据的字节数组。(自定义长度)对于偏移值为零 的名称，无需在 tdData 中包含空字符串。</td></tr>
</table><p><font size="6"><a name="存储介质">存储介质</a>——指示在数据传输中使用的存储介质的类型。TYMED</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>TYMED_NULL</td><td>0</td><td>当前没有传递任何数据。</td></tr>
<tr><td>TYMED_HGLOBAL</td><td>1</td><td>存储介质是 HGLOBAL(全局内存句柄) 。 使用 GMEM_MOVEABLE 标志分配全局句柄。 如果 STGMEDIUM 的punkForRelease 成员为 NULL，则目标进程应使用 GlobalFree 释放内存。</td></tr>
<tr><td>TYMED_FILE</td><td>2</td><td>该存储介质是由路径标识的磁盘文件。 如果 STGMEDIUMpunkForRelease 成员为 NULL，则目标进程应使用 OpenFile 删除该文件。</td></tr>
<tr><td>TYMED_ISTREAM</td><td>4</td><td>存储介质是由 IStream 指针标识的流对象。 使用 ISequentialStream：：Read 读取数据。 如果 STGMEDIUMpunkForRelease 成员不是 NULL，则目标进程应使用 Release 释放流组件。</td></tr>
<tr><td>TYMED_ISTORAGE</td><td>8</td><td>存储介质是由 IStorage 指针标识的存储组件。 数据位于此 IStorage 实例包含的流和存储中。 如果 STGMEDIUMpunkForRelease 成员不是 NULL，则目标进程应使用 Release 释放存储组件。</td></tr>
<tr><td>TYMED_GDI</td><td>16</td><td>存储介质是 HBITMAP) (GDI 组件。 如果 STGMEDIUMpunkForRelease 成员为 NULL，则目标进程应使用DeleteObject 删除位图。</td></tr>
<tr><td>TYMED_MFPICT</td><td>32</td><td>存储介质是 METAFILEPICT) (图元文件。 使用 GDI 函数访问图元文件的数据。 如果 STGMEDIUMpunkForRelease 成员为 NULL，则目标进程应使用 DeleteMetaFile 删除位图。</td></tr>
<tr><td>TYMED_ENHMF</td><td>64</td><td>存储介质是 HENHMETAFILE) (增强的图元文件。 如果 STGMEDIUMpunkForRelease 成员为 NULL，则目标进程应使用 DeleteEnhMetaFile 删除位图。</td></tr>
</table><p><font size="6"><a name="嵌入对象">嵌入对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>嵌入对象</td><td>IOleObject</td><td>作为嵌入对象向其容器提供基本功能并与容器通信的主要方式。</td></tr>
<tr><th colspan=4>嵌入对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>SetClientSite</td><td>改站点(接口)</td><td>通知嵌入对象在其容器中的显示位置（称为“客户端站点”）。</td></tr>
<tr><td>GetClientSite</td><td>取站点(@接口)</td><td>检索指向嵌入对象的客户端站点的指针。</td></tr>
<tr><td>SetHostNames</td><td>改文档(程序名,文档名)</td><td>提供对象及其容器应用程序的名称以及嵌入它的复合文档。</td></tr>
<tr><td>Close</td><td>断开(状态)</td><td>将嵌入对象从 运行 状态更改为<a href="#保存对象状态">已加载状态</a>。 断开链接对象与其链接源的连接。</td></tr>
<tr><td>SetMoniker</td><td>改名称(形式,名称对象)</td><td>通知对象其容器的名称对象、相对于容器的对象自己的名字对象或对象的完整名字对象。<a href="#名称对象形式">名称对象形式</a></td></tr>
<tr><td>GetMoniker</td><td>取名称(<a href="#名称对象方法">方法</a>,<a href="#名称对象形式">形式</a>,@名称对象)</td><td>通知对象其容器的名称对象、相对于容器的对象自己的名字对象或对象的完整名字对象。</td></tr>
<tr><td>InitFromData</td><td>初始化(数据对象,真,0)</td><td>使用指定<a href="#数据对象">数据对象</a>中的数据初始化新创建的对象，该对象可以驻留在同一容器中，也可以驻留在剪贴板上。<br>真表示容器在自身内部插入新对象，并使用当前所选内容中的数据初始化该对象; 假 表示更常规的编程数据传输，最有可能来自当前所选内容以外的源。</td></tr>
<tr><td>GetClipboardData</td><td>剪切板(0,<a href="#数据对象">数据对象</a>)</td><td>检索包含调用此方法的嵌入对象的当前内容的数据对象。 使用指向此数据对象的指针，可以使用与原始对象相同的数据创建新的嵌入对象。</td></tr>
<tr><td>DoVerb</td><td>执行(谓词标识,消息类,站点,0,窗口,矩形类)</td><td>为了响应最终用户的操作而请求对象执行某个操作。为 谓词 中的对象枚举可能的操作。</td></tr>
<tr><td>EnumVerbs</td><td>谓词(@枚举器)</td><td>公开一个下拉菜单，按谓词编号按升序列出<a href="#枚举器">枚举器</a>可用的谓词。</td></tr>
<tr><td>Update</td><td>更新</td><td>汇报对象处理程序或链接对象的数据或视图缓存。</td></tr>
<tr><td>IsUpToDate</td><td>最新</td><td>检查对象是否为最新版本。返回0是最新,1不确定</td></tr>
<tr><td>GetUserClassID</td><td>取类(标识类)</td><td>检索对象的类标识符，即对应于向最终用户标识对象的字符串的 CLSID。</td></tr>
<tr><td>GetUserType</td><td>类名(形式,@名称)</td><td>检索对象的用户类型<a href="#文字组类">名称</a>，以便在用户界面元素中显示。<a href="#类名形式">形式</a>:1完整名,2短类名,3程序名</td></tr>
<tr><td>SetExtent</td><td>改面(方位,尺寸类)</td><td>修改对象其容器为其分配了多少显示空间。<a href="#视图方位">视图方位常量</a></td></tr>
<tr><td>GetExtent</td><td>取面(方位,尺寸类)</td><td>检索正在运行的对象的当前显示大小。<a href="#视图方位">视图方位常量</a>支持新方面</td></tr>
<tr><td>Advise</td><td>通知(<a href="#通知对象">对象</a>,@令牌)</td><td>在复合文档对象与调用对象的建议接收器之间建立咨询连接，调用对象通过该接收器在复合文档对象重命名、保存或关闭时接收通知。</td></tr>
<tr><td>Unadvise</td><td>删除通知(令牌)</td><td>删除以前建立的咨询连接。</td></tr>
<tr><td>EnumAdvise</td><td>咨询(@枚举器)</td><td>检索指向<a href="#咨询对象">枚举器</a>的指针，该枚举器可用于枚举为 对象注册的咨询连接，以便容器可以在关闭之前知道要释放的内容。</td></tr>
<tr><td>GetMiscStatus</td><td>状态(方位,@状态)</td><td>检索对象在创建和加载时的状态。<a href="#视图方位">视图方位常量</a></td></tr>
<tr><td>SetColorScheme</td><td>色板(调色类)</td><td>指定对象应用程序在编辑指定对象时应使用的调色板。</td></tr>
</table><p><font size="6"><a name="名称对象">名称对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>名称对象</td><td>IMoniker</td><td>允许您使用名字对象，该对象包含唯一标识 COM 对象的信息。接口指针的对象可以定位、激活和访问标识的对象，而无需提供有关该对象在分布式系统中实际位置的任何其他特定信息。<br>
名字对象用作 COM 中链接的基础。 链接对象包含标识其源的名字对象。 当用户激活链接对象以对其进行编辑时，将绑定名字对象;这会将链接源加载到内存中。</td></tr>
<tr><th colspan=4>名称对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>GetClassID</td><td>类(标识)</td><td>检索对象的 CLSID的类标识符。</td></tr>
<tr><td>IsDirty</td><td>已改</td><td>确定对象自上次保存到流以来是否已更改。更改返回0,否则返回1</td></tr>
<tr><td>Load</td><td>加载(流)</td><td>从先前保存的流中初始化对象。</td></tr>
<tr><td>Save</td><td>保存(流,模式)</td><td>将对象保存到指定流。模式为真保存后清除更新标志</td></tr>
<tr><td>GetSizeMax</td><td>大小(@长度)</td><td>检索保存对象所需的流的大小。</td></tr>
<tr><td>BindToObject</td><td>绑对象(绑定,名称,接口标识,@接口)</td><td><a href="#绑定对象">绑定</a>到指定的 对象。涉及查找对象，在必要时将其置于运行状态，并为调用方提供指向所标识对象上指定接口的指针。</td></tr>
<tr><td>BindToStorage</td><td>绑存储(绑定,名称,存储标识,@存储)</td><td><a href="#绑定对象">绑定</a>到指定对象的存储。不会激活由<a href="#名称对象">名字对象</a>标识的对象。</td></tr>
<tr><td>Reduce</td><td>缩减(绑定,简化,名称,@新名)</td><td>将<a href="#名称对象">名字对象</a>缩减为最简单的形式。<a href="#名称对象缩减">名称对象简化程度</a></td></tr>
<tr><td>ComposeWith</td><td>组合(名称,真,@新名)</td><td>通过将当前名字对象与指定的<a href="#名称对象">名字对象</a>组合在一起，创建新的复合名字对象。真代表需要非泛型复合,假为创建泛型泛型复合</td></tr>
<tr><td>Enum</td><td>枚举(真,@枚举器)</td><td>检索指向复合名字对象的组件的枚举器的指针。真=从左到右枚举名字对象,假=从右到左。</td></tr>
<tr><td>IsEqual</td><td>相等(名称对象)</td><td>确定此名字对象是否与指定的<a href="#名称对象">名字对象</a>相同。</td></tr>
<tr><td>Hash</td><td>哈希(@值)</td><td>使用名字对象的内部状态创建哈希值。</td></tr>
<tr><td>IsRunning</td><td>运行(绑定,名称,@新名)</td><td>确定此名字对象标识的对象当前是否已加载并正在运行。</td></tr>
<tr><td>GetTimeOfLastChange</td><td>更改(绑定,名称,文件时间类)</td><td>检索此名字对象标识的对象上次更改的时间。</td></tr>
<tr><td>Inverse</td><td>反向(@名称)</td><td>创建一个名字对象，该名字对象是此名字对象的反数。 在此名字对象或类似结构之一的右侧组合时，名字对象将一无所获。</td></tr>
<tr><td>CommonPrefixWith</td><td>前缀(名称,@新名)</td><td>基于此名字对象与指定名字对象共有的前缀创建新的名字对象。</td></tr>
<tr><td>RelativePathTo</td><td>相对(名称,@新名)</td><td>在此名字对象和指定的名字对象之间创建相对名字对象。</td></tr>
<tr><td>GetDisplayName</td><td>显示(绑定,名称,缓冲区)</td><td>检索名字对象的显示名称。</td></tr>
<tr><td>ParseDisplayName</td><td>转换(绑定,名称,剩余名,@字数,@新名)</td><td>将显示名称转换为名字对象。</td></tr>
<tr><td>IsSystemMoniker</td><td>系统(@种类)</td><td>确定此名字对象是否是系统提供的<a href="#名称对象分类">名字对象类</a>之一。</td></tr>
</table><p><font size="6"><a name="通知对象">通知对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>通知对象</td><td>IAdviseSink</td><td>使容器和其他对象能够接收相关对象中发生的数据更改、查看更改和复合文档更改的通知。<br> 例如，容器应用程序需要此类通知，以使其链接和嵌入对象的缓存演示文稿保持最新。<br>对 IAdviseSink 方法的调用是异步的，因此发送调用，然后执行下一个指令，而无需等待调用的返回。<br>具有指向名字对象 <a href="#名称对象">名称对象</a> 接口的指针的对象可以定位、激活和访问标识的对象，<br>而无需提供有关该对象在分布式系统中实际位置的任何其他特定信息。</td></tr>
<tr><th colspan=4>通知对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>OnDataChange</td><td>数据更改(<a href="#剪贴板类">剪贴板类</a>,<a href="#流传输类">流传输类</a>)</td><td>由服务器调用以通知数据对象的当前注册通知接收器对象中的数据已更改。</td></tr>
<tr><td>OnViewChange</td><td>视图更改(<a href="#视图方位">方位</a>,-1)</td><td>通知对象的已注册建议接收器其视图已更改。</td></tr>
<tr><td>OnRename</td><td>改名(名称对象)</td><td>由服务器调用，以通知所有已注册的通知接收器对象已重命名。</td></tr>
<tr><td>OnSave</td><td>保存</td><td>由服务器调用，以通知所有已注册的咨询接收器对象已保存。</td></tr>
<tr><td>OnClose</td><td>关闭</td><td>由服务器调用，以通知所有已注册的咨询接收器对象已从运行状态更改为加载状态。</td></tr>
</table><p><font size="6"><a name="运行对象">运行对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>运行对象</td><td>IRunningObjectTable</td><td>管理对正在运行的对象表的访问 (ROT) ，这是每个工作站上可全局访问的查找表。 工作站的 ROT 跟踪可由名字对象标识且当前在工作站上运行的对象。<br>当客户端尝试将名字对象绑定到对象时，名字对象会检查 ROT 以查看对象是否已在运行;这允许名字对象绑定到当前实例，而不是加载新的实例。</td></tr>
<tr><th colspan=4>运行对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>Register</td><td>注册(强弱,注册对象,名称对象,@ROT条目)</td><td>在运行的对象表中注册对象及其标识名字对象， (ROT) 。强弱:1=弱,2=强</td></tr>
<tr><td>Revoke</td><td>删除(条目)</td><td>从运行的对象表中删除一个条目。</td></tr>
<tr><td>IsRunning</td><td>运行(名称对象)</td><td>确定由指定名字对象标识的对象当前是否正在运行。</td></tr>
<tr><td>GetObject</td><td>获取(名称对象,@对象)</td><td>确定由指定名字对象标识的对象是否正在运行，如果正在运行，则检索指向该对象的指针。</td></tr>
<tr><td>NoteChangeTime</td><td>记录(条目,文件时间类)</td><td>记录上次修改正在运行的对象的时间。</td></tr>
<tr><td>GetTimeOfLastChange</td><td>上次(名称对象,文件时间类)</td><td>检索上次修改对象的时间。</td></tr>
<tr><td>EnumRunning</td><td>枚举(@枚举器)</td><td>创建并返回指向枚举器的指针，该枚举器可以列出当前在运行的对象表中注册的所有对象的名字对象 (ROT) 。</td></tr>
</table><p><font size="6"><a name="绑定对象">绑定对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>绑定对象</td><td>IBindCtx</td><td>提供对绑定上下文的访问，绑定上下文是一个存储有关特定名字对象绑定操作的信息的对象。</td></tr>
<tr><th colspan=4>绑定对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>RegisterObjectBound</td><td>注册对象(接口)</td><td>向绑定上下文注册对象，以确保该对象在释放绑定上下文之前保持活动状态。</td></tr>
<tr><td>RevokeObjectBound</td><td>注销对象(接口)</td><td>从绑定上下文中删除 对象，撤消对 注册对象 的先前调用。</td></tr>
<tr><td>ReleaseBoundObjects</td><td>释放对象</td><td>释放指向以前通过调用 注册对象 注册的所有对象的指针。</td></tr>
<tr><td>SetBindOptions</td><td>改选项(<a href="#绑定选项三">绑定选项三</a>)</td><td>为绑定上下文中存储的绑定参数设置新值。</td></tr>
<tr><td>GetBindOptions</td><td>取选项(<a href="#绑定选项三">绑定选项三</a>)</td><td>检索存储在此绑定上下文中的绑定选项。</td></tr>
<tr><td>GetRunningObjectTable</td><td>对象表(@运行对象)</td><td>检索指向运行此绑定上下文的计算机 (ROT) 正在<a href="#运行对象">运行的对象表</a>的接口指针。</td></tr>
<tr><td>RegisterObjectParam</td><td>注册字键(键,对象)</td><td>将 对象与绑定上下文的字符串键型指针表中的<a href="#字符串键">字符串键</a>相关联。</td></tr>
<tr><td>GetObjectParam</td><td>获取字键(键,@对象)</td><td>检索指向与绑定上下文的<a href="#字符串键">字符串键</a>型指针表中的指定键关联的对象的接口指针。</td></tr>
<tr><td>EnumObjectParam</td><td>枚举字键(@枚举器)</td><td>检索指向接口的指针，该接口可用于枚举绑定上下文的字符串键型指针表的键。</td></tr>
<tr><td>RevokeObjectParam</td><td>注销字键(键)</td><td>从绑定上下文的<a href="#字符串键">字符串键</a>化对象表中删除指定的键及其关联的指针。</td></tr>
</table><p><font size="6"><a name="服务器类">服务器类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>服务器类</td><td>COSERVERINFO</td><td>16</td><td>向激活函数标识远程计算机资源。</td></tr>
<tr><th colspan=4>服务器类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>预留</td><td>dwReserved1</td><td>整数</td><td> 此成员为保留成员，必须为 0。</td></tr>
<tr><td>名称</td><td>pwszName</td><td>整数</td><td>计算机的名称。</td></tr>
<tr><td>身份</td><td>pAuthInfo</td><td>整数</td><td>指向 <a href="#身份验证类">身份验证类</a> 结构的指针，用于替代计算机远程激活的默认激活安全性。 </td></tr>
<tr><td>备用</td><td>dwReserved2</td><td>整数</td><td>此成员为保留成员，必须为 0。</td></tr>
</table><p><font size="6"><a name="身份验证类">身份验证类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>身份验证类</td><td>COAUTHINFO</td><td>28</td><td>包含从客户端计算机向服务器计算机发出远程激活请求时使用的身份验证设置。</td></tr>
<tr><th colspan=4>身份验证类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>服务</td><td>dwAuthnSvc</td><td>整数</td><td> 要使用的身份验证服务。 有关值的列表，请参阅 <a href="#身份验证服务">身份验证服务常量</a>。 </td></tr>
<tr><td>授权</td><td>dwAuthzSvc</td><td>整数</td><td>要使用的授权服务。 有关值列表，请参阅 <a href="#授权常量">授权常量</a>。 若要使用 NT 身份验证服务，请指定RPC_C_AUTHZ_NONE。</td></tr>
<tr><td>主名</td><td>pwszServerPrincName</td><td>整数</td><td>要与身份验证服务一起使用的服务器主体名称。 如果使用RPC_C_AUTHN_WINNT，则主体名称必须为 NULL。</td></tr>
<tr><td>级别</td><td>dwAuthnLevel</td><td>整数</td><td>要使用的身份验证级别。 有关值的列表，请参阅 <a href="#身份验证级别">身份验证级别常量</a>。</td></tr>
<tr><td>模拟</td><td>dwImpersonationLevel</td><td>整数</td><td>要使用的模拟级别。 有关值列表，请参阅 <a href="#模拟级别">模拟级别常量</a>。 此值必须RPC_C_IMP_LEVEL_IMPERSONATE或更高版本。</td></tr>
<tr><td>数据</td><td>pAuthIdentityData</td><td>整数</td><td>指向建立非默认客户端标识的 <a href="#用户密码类">用户密码类</a> 结构的指针。 如果此参数为 NULL，则使用客户端的实际标识。</td></tr>
<tr><td>能力</td><td>dwCapabilities</td><td>整数</td><td>指示此代理的其他功能。 目前，此成员必须是EOAC_NONE (0x0) 或RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH (0x1) 。</td></tr>
</table><p><font size="6"><a name="用户密码类">用户密码类</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>用户密码类</td><td>COAUTHIDENTITY</td><td>28</td><td>包含用户名和密码。</td></tr>
<tr><th colspan=4>用户密码类——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>用户</td><td>User</td><td>整数</td><td> 用户名。</td></tr>
<tr><td>名长</td><td>UserLength</td><td>整数</td><td>不终止 0 的 用户 字符串的长度。</td></tr>
<tr><td>域名</td><td>Domain</td><td>整数</td><td>域或工作组名称。</td></tr>
<tr><td>域长</td><td>DomainLength</td><td>整数</td><td>域字符串的长度，不包括终止 0。</td></tr>
<tr><td>密码</td><td>Password</td><td>整数</td><td>域或工作组中的用户密码。</td></tr>
<tr><td>类文</td><td>PasswordLength</td><td>整数</td><td>密码字符串的长度，不终止 0。</td></tr>
<tr><td>标志</td><td>Flags</td><td>整数</td><td>指示字符串是否为宽字符串。1=ANSI,2=UNICODE</td></tr>
</table><p><font size="6"><a name="绑定参数三">绑定参数三</a>——数据结构：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名称</td><td>长度</td><td>作用解释</td></tr>
<tr><td>绑定参数三</td><td>BIND_OPTS3</td><td>36</td><td>包含名字对象绑定操作期间使用的参数。</td></tr>
<tr><th colspan=4>绑定参数三——成员表</th></tr>
<tr><td>中文</td><td>英文</td><td>类型</td><td>作用解释</td></tr>
<tr><td>大小</td><td>cbStruct</td><td>整数</td><td> 结构的大小（以字节为单位）。</td></tr>
<tr><td>操作</td><td>grfFlags</td><td>整数</td><td>控制名字对象绑定操作方面的标志。1交互,2无兴趣 <a href="#绑定操作">绑定操作标志</a>的任意组合。</td></tr>
<tr><td>模式</td><td>grfMode</td><td>整数</td><td>当打开包含由该名字对象标识的对象的文件时应使用的标志。 可能的值为 <a href="#视图方位">视图方位</a> 常量。 </td></tr>
<tr><td>时间</td><td>dwTickCountDeadline</td><td>整数</td><td>调用方希望完成绑定操作的时钟时间（以毫秒为单位）。</td></tr>
<tr><td>跟踪</td><td>dwTrackFlags</td><td>整数</td><td>名字对象可以在链接跟踪期间使用此值。可以通过一些适当的机制搜索原始数据来尝试重新建立链接。参考 链接对象.找目标 </td></tr>
<tr><td>类文</td><td>dwClassContext</td><td>整数</td><td>类上下文，取自<a href="#类上下文">类上下文枚举</a>，用于实例化对象。 </td></tr>
<tr><td>区域</td><td>locale</td><td>整数</td><td>LCID 值，该值指示客户端对要由它们绑定到的对象使用的区域设置的首选项。</td></tr>
<tr><td>时间</td><td>pServerInfo</td><td>整数</td><td>指向 <a href="#服务器类">服务器类</a> 结构的指针。 此成员允许调用 名称对象.绑对象 的客户端指定服务器信息。</td></tr>
<tr><td>窗口</td><td>hwnd</td><td>整数</td><td>成为提升 UI 所有者的窗口的句柄（如果适用）。</td></tr>
</table><p><font size="6"><a name="字符串键">字符串键标志</a>——与 <a href="#绑定对象">绑定对象.注册字键</a> 方法一起使用的一组字符串键，用于指定绑定上下文。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>字符串键</td><td>作用解释</td></tr>
<tr><td>STR_AVOID_DRIVE_RESTRICTION_POLICY</td><td>"Avoid Drive Restriction Policy"</td><td>在 Windows XP SP2 中引入。 指定此绑定上下文以允许数据源的客户端替代隐藏的驱动器号策略，并启用对被阻止驱动器上的数据源的视图对象的访问。与 IShellFolder：：BindToObject 或 IShellItem：：BindToHandler 一起使用。系统支持管理员控制的策略，这些策略可隐藏指定的驱动器号，以阻止用户通过 Windows 资源管理器访问这些驱动器。 当此策略处于活动状态时，结果是在被策略阻止的驱动器上调用时，使用 IShellFolder：：CreateViewObject 方法创建的视图对象和其他处理程序将失败。</td></tr>
<tr><td>STR_BIND_DELEGATE_CREATE_OBJECT</td><td>"Delegate Object Creation"</td><td>在 Windows Vista 中引入。 指定此绑定上下文，使 IShellFolder：：BindToObject 方法使用由pbc 参数指定的对象来创建目标对象;在这种情况下，由 IBindCtx：：RegisterObjectParam 调用中的 punk 参数指定的对象必须实现 ICreateObject 接口。与 IShellFolder：：BindToObject 或 IShellItem：：BindToHandler 一起使用。</td></tr>
<tr><td>STR_BIND_FOLDER_ENUM_MODE</td><td>"Folder Enum Mode"</td><td>在 Windows 7 中引入。 传递给 IShellFolder：:P arseDisplayName ，具有 FOLDER_ENUM_MODE 值来控制已分析项的枚举模式。 FOLDER_ENUM_MODE值通过实现 IObjectWithFolderEnumMode 的对象在绑定上下文中传递。具有不同枚举模式的项在 canonic 上比较 (SHCIDS_CANONICALONLY) 不同，因为它们枚举不同的项集。如果某个项不支持枚举模式 (，因为它不是文件夹，或者它不提供枚举模式) 则它是在默认枚举模式下创建的。</td></tr>
<tr><td>STR_BIND_FOLDERS_READ_ONLY</td><td>"Folders As Read Only"</td><td>在 Windows 7 中引入。 传递给 IShellFolder：:P arseDisplayName 以及 STR_FILE_SYS_BIND_DATA。 这会强制进行简单的分析，同时沿从中获取本地化名称字符串的路径探测 Desktop.ini 文件。 这可以避免探测路径上的文件夹，在表示服务器或共享的文件夹的情况下，这些文件夹可能需要大量时间和资源。 Desktop.ini 文件缓存在某些位置，因此它至少与探测文件夹属性和探测 Desktop.ini（如果该文件夹应变为只读）一样高效。</td></tr>
<tr><td>STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE</td><td>"Force Folder Shortcut Resolve"</td><td>在 Windows XP SP2 中引入。 指定此绑定上下文以强制文件夹快捷方式解析指向其目标的链接。文件夹快捷方式是指向同一命名空间中另一个文件夹项的文件夹项，使用链接 (快捷方式) 保存目标的 IDList。 链接解析为跟踪目标，以防其被移动或重命名。 例如，Windows XP “我的网络位置” 文件夹和 Windows Vista 计算机 文件夹可以包含使用 “添加网络位置” 向导创建的文件夹快捷方式。 为了提高性能， IShellFolder：：BindToObject 方法默认不解析指向网络文件夹的链接。与 IShellFolder：：BindToObject 或 IShellItem：：BindToHandler 一起使用。</td></tr>
<tr><td>STR_DONT_PARSE_RELATIVE</td><td>"Don't Parse Relative"</td><td>在 Windows XP 中引入。 指定此绑定上下文以防止对桌面文件夹上的 IShellFolder：:P arseDisplayName 方法的调用将相对路径视为相对于桌面;在这种情况下，如果指定了此绑定上下文，则分析会失败。</td></tr>
<tr><td>STR_DONT_RESOLVE_LINK</td><td>"Don't Resolve Link"</td><td>在 Windows Vista 中引入。 指定此绑定上下文以指示 IShellItem 不解析在 IShellItem：：BindToHandler 中使用 BHID_LinkTargetItem GUID 时获取的链接目标。</td></tr>
<tr><td>STR_FILE_SYS_BIND_DATA</td><td>"File System Bind Data"</td><td>在 Windows XP 中引入。 指定此绑定上下文以向 IShellFolder：:P arseDisplayName 方法提供文件元数据，该方法使用此方法，而不是尝试检索实际文件元数据。 关联的对象必须实现 IFileSystemBindData ，并且可以选择性地实现 IFileSystemBindData2。 默认情况下， IShellFolder：:P arseDisplayName 方法验证文件是否存在，并使用文件的实际元数据填充 ID 列表。</td></tr>
<tr><td>STR_FILE_SYS_BIND_DATA_WIN7_FORMAT</td><td>"Win7FileSystemIdList"</td><td>在 Windows 8.1 中引入。 指定此绑定上下文以指示应在 STR_FILE_SYS_BIND_DATA 绑定上下文中提供的数据来创建 Windows 7 格式的 ItemID 列表。”</td></tr>
<tr><td>STR_GET_ASYNC_HANDLER</td><td>"GetAsyncHandler"</td><td>在 Windows 7 中引入。 在与 UI 相同的线程上检索处理程序时，请指定此绑定上下文。 应避免任何内存密集型活动，例如涉及磁盘或网络访问的活动。</td></tr>
<tr><td>STR_GPS_BESTEFFORT</td><td>"GPS_BESTEFFORT"</td><td>在 Windows Vista 中引入。 在请求 IPropertySetStorage 或 IPropertyStore 处理程序时指定此绑定上下文。 此值与 IShellFolder：：BindToObject 一起使用。 有关详细信息，请参阅 GPS_BESTEFFORT 标志。</td></tr>
<tr><td>STR_GPS_DELAYCREATION</td><td>"GPS_DELAYCREATION"</td><td>在 Windows Vista 中引入。 在请求 IPropertySetStorage 或 IPropertyStore 处理程序时指定此绑定上下文。 此值与 IShellFolder：：BindToObject 一起使用。 有关详细信息，请参阅 GPS_DELAYCREATION 标志。</td></tr>
<tr><td>STR_GPS_FASTPROPERTIESONLY</td><td>"GPS_FASTPROPERTIESONLY"</td><td>在 Windows Vista 中引入。 在请求 IPropertySetStorage 或 IPropertyStore 处理程序时指定此绑定上下文。 此值与 IShellFolder：：BindToObject 一起使用。 有关详细信息，请参阅 GPS_FASTPROPERTIESONLY 标志。</td></tr>
<tr><td>STR_GPS_HANDLERPROPERTIESONLY</td><td>"GPS_HANDLERPROPERTIESONLY"</td><td>在 Windows Vista 中引入。 在请求 IPropertySetStorage 或 IPropertyStore 处理程序时指定此绑定上下文。 此值与 IShellFolder：：BindToObject 一起使用。 有关详细信息，请参阅 GPS_HANDLERPROPERTIESONLY 标志。</td></tr>
<tr><td>STR_GPS_NO_OPLOCK</td><td>"GPS_NO_OPLOCK"</td><td>在 Windows 7 中引入。 在请求 IPropertySetStorage 或 IPropertyStore 处理程序时指定此绑定上下文。 此值与 IShellFolder：：BindToObject 一起使用。 有关详细信息，请参阅 GPS_NO_OPLOCK 标志。</td></tr>
<tr><td>STR_GPS_OPENSLOWITEM</td><td>"GPS_OPENSLOWITEM"</td><td>在 Windows Vista 中引入。 在请求 IPropertySetStorage 或 IPropertyStore 处理程序时指定此绑定上下文。 此值与 IShellFolder：：BindToObject 一起使用。 有关详细信息，请参阅 GPS_OPENSLOWITEM 标志。</td></tr>
<tr><td>STR_IFILTER_FORCE_TEXT_FILTER_FALLBACK</td><td></td><td>仅限 Windows Vista。 指定此绑定上下文会导致调用 IShellFolder：：BindToObject 方法，该方法请求文件系统对象的 IFilter 接口返回文本筛选器（如果没有其他筛选器可用）。 此值未定义为 Windows 7。</td></tr>
<tr><td>STR_IFILTER_LOAD_DEFINED_FILTER</td><td></td><td>仅限 Windows Vista。 指定此绑定上下文会导致调用 IShellFolder：：BindToObject 方法，该方法请求文件系统对象的 IFilter 接口在找不到已注册的筛选器时不返回回退筛选器。</td></tr>
<tr><td>STR_INTERNAL_NAVIGATE</td><td>"Internal Navigation"</td><td>在 Windows Vista 中引入。 指定此绑定上下文，以便在调用 IPersistHistory：：LoadHistory 方法时从内部导航流加载历史记录。 内部导航是同一视图中的导航。</td></tr>
<tr><td>STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE</td><td>"Validate URL"</td><td>在 Windows 7 中引入。 如果客户端希望 Internet Shell 文件夹处理程序为任何有效 URL 生成 IDList（如果无法为该 URL 创建 DAV 类型文件夹），请使用 STR_PARSE_PREFER_FOLDER_BROWSING 指定此绑定上下文。 未验证 URL 是否存在;仅检查其语法，并且具有已注册的协议处理程序。</td></tr>
<tr><td>STR_ITEM_CACHE_CONTEXT</td><td>"ItemCacheContext"</td><td>在 Windows 7 中引入。 指定此绑定上下文以指示 IShellFolder：:P arseDisplayName 和 IPersistFolder3：：InitializeEx 的实现，以缓存可在 Shell 项实例化中存在的内存密集型帮助程序对象，而不是在每次创建 Shell 项时重新创建这些对象。 关联的对象是另一个绑定上下文对象，最初为空。 这应生成单独的绑定上下文对象，该对象可通过 IBindCtx：：GetObjectParam 或 IBindCtx：：Register.ObjectParam 进行访问。调用方必须在调用 SHCreateItemFromParsingName 时通过提供此绑定上下文参数来选择加入此行为。 通过这样做，可以优化连续绑定到多个分析名称的行为。 绑定上下文对象的生存期应跨 Shell 项的多个实例及其各个绑定上下文。</td></tr>
<tr><td>STR_NO_VALIDATE_FILENAME_CHARS</td><td>"NoValidateFilenameChars"</td><td>在 Windows Vista 中引入。 指定此绑定上下文以允许文件名中显示无效的文件名字符。 默认情况下，对 IShellFolder：:P arseDisplayName 方法的调用会拒绝文件名中非法的字符。 此绑定上下文仅与STR_FILE_SYS_BIND_DATA绑定上下文结合使用才有意义。</td></tr>
<tr><td>STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS</td><td>"Allow binding to Internet shell folder handlers and negate STR_PARSE_PREFER_WEB_BROWSING"</td><td>在 Windows Vista 中引入。 指定此绑定上下文以允许调用 Desktop 文件夹中的 IShellFolder：:P arseDisplayName 方法以分析 URL。 如果指定了此绑定上下文，它将替代 STR_PARSE_PREFER_WEB_BROWSING。</td></tr>
<tr><td>STR_PARSE_AND_CREATE_ITEM</td><td></td><td>在 Windows 7 中引入。 指定此绑定上下文以指示数据源实现 IShellFolder：:P arseDisplayName 以优化 SHCreateItemFromParsingName 的行为。通常， SHCreateItemFromParsingName 对要分析的名称执行两个绑定操作：一个通过，一个到 IShellFolder：:P arseDisplayName ，另一个用于创建 Shell 项。 如果支持 STR_PARSE_AND_CREATE_ITEM 绑定上下文，则通过在 IShellFolder：:P arseDisplayName 绑定期间创建 Shell 项并通过 IParseAndCreateItem：：SetItem 存储 Shell 项，可以避免第二个绑定。 SHCreateItemFromParsingName 然后使用存储的 Shell 项，而不是创建一个。此参数适用于所分析的名称的最后一个元素。 例如，在名称“C:\Folder1\File.txt”中，数据应用于 File.txt。</td></tr>
<tr><td>STR_PARSE_DONT_REQUIRE_VALIDATED_URLS</td><td>"Do not require validated URLs"</td><td>仅限 Windows Vista。 指定在分析 URL 时，此绑定上下文在生成 IDList 之前不应要求 URL 存在。 如果无法为给定 URL 创建 DAV 文件夹，则当客户端需要 Internet Shell 文件夹处理程序为 URL 生成 IDList 时，请指定此绑定上下文和STR_PARSE_PREFER_FOLDER_BROWSING。</td></tr>
<tr><td>STR_PARSE_PARTIAL_IDLIST</td><td>数值</td><td>在 Windows Vista 中引入。 指定此绑定上下文以传递正在重新分析的原始项，当该项存储为 IShellItem 对象时，该对象也实现 IParentAndItem 接口。 在 Windows 7 之前，此值未在头文件中定义。 它可以由调用方定义，也可以作为其字符串值 L“ParseOriginalItem”传递。 从 Windows 7 起，该值在 Shlobj.h 中定义。 请注意，此标头与其他 STR 常量不同。</td></tr>
<tr><td>STR_PARSE_PREFER_FOLDER_BROWSING</td><td>"Parse Prefer Folder Browsing"</td><td>在 Windows XP 中引入。 指定此绑定上下文以启用对 Desktop 文件夹上的 IShellFolder：:P arseDisplayName 方法的调用，以像分析文件夹一样分析 URL。 使用此绑定上下文绑定到 WebDAV 服务器。</td></tr>
<tr><td>STR_PARSE_PREFER_WEB_BROWSING</td><td>"Do not bind to Internet shell folder handlers"</td><td>在 Windows Vista 中引入。 指定此绑定上下文可阻止调用 Desktop 文件夹窗体分析 URL 上的 IShellFolder：:P arseDisplayName 方法。 此绑定上下文可以通过 STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS重写。</td></tr>
<tr><td>STR_PARSE_PROPERTYSTORE</td><td>"DelegateNamedProperties"</td><td>在 Windows Vista 中引入。 指定此绑定上下文以替代 IShellFolder：:P arseDisplayName 方法使用的默认属性存储区，并改用指定为 bind 参数的属性存储。 适用于委托文件夹。</td></tr>
<tr><td>STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS</td><td>"Parse Shell Protocol To File Objects"</td><td>在 Windows XP SP2 中引入。 指定此绑定上下文以允许调用 Desktop 文件夹中的 IShellFolder：:P arseDisplayName 方法，以使用“shell：”前缀表示法访问文件。</td></tr>
<tr><td>STR_PARSE_SHOW_NET_DIAGNOSTICS_UI</td><td>"Show network diagnostics UI"</td><td>在 Windows Vista 中引入。 指定此绑定上下文会导致调用 IShellFolder：:P arseDisplayName 方法，以在网络路径分析失败时显示网络诊断对话框。</td></tr>
<tr><td>STR_PARSE_SKIP_NET_CACHE</td><td>"Skip Net Resource Cache"</td><td>在 Windows Vista 中引入。 指定此绑定上下文会导致调用 IShellFolder：:P arseDisplayName 方法，以跳过检查网络共享缓存并直接与网络服务器联系。 缓存有关网络共享的信息以提高性能， 默认情况下，IShellFolder：:P arseDisplayName 会检查此缓存。</td></tr>
<tr><td>STR_PARSE_TRANSLATE_ALIASES</td><td>"Parse Translate Aliases"</td><td>在 Windows XP 中引入。 指定此绑定上下文以将分析的属性传递给委托命名空间的 IShellFolder：:P arseDisplayName 方法。 命名空间可以使用传递的属性，而不是尝试分析名称本身。</td></tr>
<tr><td>STR_PARSE_WITH_PROPERTIES</td><td></td><td>仅限 Windows Vista。 一个分析绑定上下文，用于在调用 IShellFolder：:P arseDisplayName 时传递一组属性和项的名称。 绑定上下文中的 对象实现 IPropertyStore ，并通过调用 IBindCtx：：GetObjectParam 进行检索。DBFolder 是一个 Shell 数据源，表示搜索结果和基于查询的视图中的项。 DBFolder 通过查询 Windows 搜索系统来检索这些项目。 搜索结果中的项通过协议方案（例如“file：”或“mapi：”）进行标识。 DBFolder 通过委托给为这些协议创建的 Shell 数据源来提供这些项的行为。 有关详细信息 ，请参阅开发协议处理程序加载项 。当 DBFolder 将其分析操作委托给支持 Windows 搜索协议的 Shell 数据源时，此绑定上下文提供对该项查询结果中返回的值的访问权限。 这包括：System.ItemType (PKEY_ItemType)System.ParsingPath (PKEY_ParsingPath)System.ItemPathDisplay (PKEY_ItemPathDisplay)System.ItemNameDisplay (PKEY_ItemNameDisplay)如果客户端具有定义该项的一组属性，则此绑定上下文还可用于分析 DBFolder 项。 在这种情况下，应将空名称传递给 IShellFolder：:P arseDisplayName。在 Windows 7 之前，此值未在头文件中定义。 它可以由调用方定义，也可以作为其字符串值传递： L"ParseWithProperties"。 从 Windows 7 起，该值在 Shlobj.h 中定义。 请注意，这是一个不同于定义其他 STR 常量的标头。</td></tr>
<tr><td>STR_PROPERTYBAG_PARAM</td><td>"SHBindCtxPropertyBag"</td><td>在 Windows 8 中引入。 指定此绑定上下文以指示绑定上下文参数是用于在绑定上下文中传递 VARIANT 值的属性包 (IPropertyBag) 。 有关更多详细信息，请参阅“备注”部分。</td></tr>
<tr><td>STR_SKIP_BINDING_CLSID</td><td>"Skip Binding CLSID"</td><td>在 Windows XP 中引入。 指定此绑定上下文可导致调用 IShellFolder：:P arseDisplayName 或 IShellFolder：：BindToObject 方法，以在分析或绑定时忽略特定的 Shell 命名空间扩展。 要忽略的命名空间的 CLSID 由 bind 参数的 IPersist：：GetClassID 方法提供。注意： 此值在 Windows 2000 SP3 中引入，在 Shlobj.h 中定义，直到 Windows XP 移动到 Shobjidl.h。</td></tr>
<tr><td>STR_TRACK_CLSID</td><td>"Track the CLSID"</td><td>未使用。</td></tr>
</table><p><font size="6"><a name="绑定操作">绑定操作标志</a>——控制名字对象绑定操作的各个方面。BIND_FLAGS</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>BIND_MAYBOTHERUSER</td><td>1</td><td>如果指定了此标志，则名字对象实现可以与最终用户交互。 否则，名字对象实现不应以任何方式与用户交互，例如通过请求需要装载的网络卷的密码。 如果禁止在否则的情况下与用户交互，则名字对象实现可以使用不需要用户交互的其他算法，或者可能会失败并MK_E_MUSTBOTHERUSER错误。</td></tr>
<tr><td>BIND_JUSTTESTEXISTENCE</td><td>2</td><td>如果指定了此标志，则调用方对执行操作不感兴趣，而只是要了解在未指定此标志的情况下是否可以执行该操作。 例如，此标志允许调用方仅通过在 名称对象.绑对象 调用中使用此标志来指示是否确实存在对象的兴趣。 但是，名字对象实现可以忽略此可能的优化，并完全执行操作。 调用方必须能够处理这两种情况。</td></tr>
</table><p><font size="6"><a name="类上下文">类上下文枚举</a>——激活调用中使用的值，用于指示要在其中运行对象的执行上下文。CLSCTX</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>CLSCTX_INPROC_SERVER</td><td>0x1</td><td>创建和管理此类的对象的代码是一个 DLL，它与指定类上下文的函数的调用方在同一个进程中运行。</td></tr>
<tr><td>CLSCTX_INPROC_HANDLER</td><td>0x2</td><td>管理此类的对象的代码是一个进程内处理程序。 这是一个 DLL，在客户端进程中运行，并在远程访问类的实例时实现此类的客户端结构。</td></tr>
<tr><td>CLSCTX_LOCAL_SERVER</td><td>0x4</td><td>创建和管理此类的对象的 EXE 代码在同一台计算机上运行，但在一个单独的进程空间中加载。</td></tr>
<tr><td>CLSCTX_INPROC_SERVER16</td><td>0x8</td><td>已过时。</td></tr>
<tr><td>CLSCTX_REMOTE_SERVER</td><td>0x10</td><td>远程上下文。 用于创建和管理此类对象的 LocalServer32 或 LocalService 代码在不同的计算机上运行。</td></tr>
<tr><td>CLSCTX_INPROC_HANDLER16</td><td>0x20</td><td>已过时。</td></tr>
<tr><td>CLSCTX_RESERVED1</td><td>0x40</td><td>保留。</td></tr>
<tr><td>CLSCTX_RESERVED2</td><td>0x80</td><td>保留。</td></tr>
<tr><td>CLSCTX_RESERVED3</td><td>0x100</td><td>保留。</td></tr>
<tr><td>CLSCTX_RESERVED4</td><td>0x200</td><td>保留。</td></tr>
<tr><td>CLSCTX_NO_CODE_DOWNLOAD</td><td>0x400</td><td>禁止从目录服务或 Internet 下载代码。 此标志不能与CLSCTX_ENABLE_CODE_DOWNLOAD同时设置。</td></tr>
<tr><td>CLSCTX_RESERVED5</td><td>0x800</td><td>保留。</td></tr>
<tr><td>CLSCTX_NO_CUSTOM_MARSHAL</td><td>0x1000</td><td>如果激活使用自定义封送，则指定是否希望激活失败。</td></tr>
<tr><td>CLSCTX_ENABLE_CODE_DOWNLOAD</td><td>0x2000</td><td>允许从目录服务或 Internet 下载代码。 此标志不能与CLSCTX_NO_CODE_DOWNLOAD同时设置。</td></tr>
<tr><td>CLSCTX_NO_FAILURE_LOG</td><td>0x4000</td><td>CLSCTX_NO_FAILURE_LOG可用于替代 CoCreateInstanceEx 中失败的日志记录。0 = 自由日志记录。1 = 无论客户端指定什么，始终记录所有故障。2 = 无论指定了哪个客户端，都从不记录任何故障。如果缺少注册表项，则默认值为 0。</td></tr>
<tr><td>CLSCTX_DISABLE_AAA</td><td>0x8000</td><td>仅对此激活禁用“作为激活者激活”(AAA)。 此标志替代 EOLE_AUTHENTICATION_CAPABILITIES 枚举中EOAC_DISABLE_AAA标志的设置。 此标志不能与CLSCTX_ENABLE_AAA同时设置。 将在调用方标识下启动服务器进程的任何激活称为激活即激活器 (AAA) 激活。 禁用 AAA 激活允许在特权帐户 (（例如 LocalSystem) ）下运行的应用程序，以帮助防止其标识用于启动不受信任的组件。 在这些调用期间，使用激活调用的库应用程序应始终设置此标志。 这有助于防止在特权提升安全攻击中使用库应用程序。 这是在库应用程序中禁用 AAA 激活的唯一方法，因为EOLE_AUTHENTICATION_CAPABILITIES枚举中的EOAC_DISABLE_AAA标志仅应用于服务器进程，而不适用于库应用程序。Windows 2000： 不支持此标志。</td></tr>
<tr><td>CLSCTX_ENABLE_AAA</td><td>0x10000</td><td>仅对此激活启用“作为激活者激活”(AAA)。 此标志替代 EOLE_AUTHENTICATION_CAPABILITIES 枚举中EOAC_DISABLE_AAA标志的设置。 此标志不能与 CLSCTX_DISABLE_AAA 同时设置。 将在调用方标识下启动服务器进程的任何激活称为激活即激活器 (AAA) 激活。 启用此标志允许应用程序将其标识传输到已激活的组件。Windows 2000： 不支持此标志。</td></tr>
<tr><td>CLSCTX_FROM_DEFAULT_CONTEXT</td><td>0x20000</td><td>从当前单元的默认上下文开始此激活。</td></tr>
<tr><td>CLSCTX_ACTIVATE_X86_SERVER</td><td>0x40000</td><td>活动X86服务器</td></tr>
<tr><td>CLSCTX_ACTIVATE_32_BIT_SERVER</td><td>0x40000</td><td>激活或连接到 32 位版本的服务器;如果未注册，则失败。</td></tr>
<tr><td>CLSCTX_ACTIVATE_64_BIT_SERVER</td><td>0x80000</td><td>激活或连接到 64 位版本的服务器;如果未注册，则失败。</td></tr>
<tr><td>CLSCTX_ENABLE_CLOAKING</td><td>0x100000</td><td>指定此标志后，COM 将线程的模拟令牌（如果存在）用于线程发出的激活请求。 如果未指定此标志，或者如果线程没有模拟令牌，COM 会将线程进程的进程令牌用于线程发出的激活请求。Windows Vista 或更高版本： 支持此标志。</td></tr>
<tr><td>CLSCTX_APPCONTAINER</td><td>0x400000</td><td>指示激活适用于应用容器。注意 此标志保留供内部使用，不应在代码中直接使用。</td></tr>
<tr><td>CLSCTX_ACTIVATE_AAA_AS_IU</td><td>0x800000</td><td>为 As-Activator 服务器的交互式用户激活行为指定此标志。 具有强名称的中等 IL Windows 应用商店应用可以使用此标志启动没有强名称的“As Activator”COM 服务器。 此外，还可以使用此标志绑定到由桌面应用程序启动的 COM 服务器正在运行的实例。</td></tr>
<tr><td>CLSCTX_RESERVED6</td><td>0x1000000</td><td>预留</td></tr>
<tr><td>CLSCTX_ACTIVATE_ARM32_SERVER</td><td>0x2000000</td><td>活动ARM32位服务器</td></tr>
<tr><td>CLSCTX_PS_DLL</td><td>0x80000000</td><td>用于加载代理/存根 DLL。</td></tr>
</table><p><font size="6"><a name="身份验证服务">身份验证服务常量</a>——通过标识提供服务的安全包（例如 NTLMSSP、Kerberos 或 Schannel）来定义身份验证服务。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>RPC_C_AUTHN_NONE</td><td>0</td><td>无身份验证。</td></tr>
<tr><td>RPC_C_AUTHN_DCE_PRIVATE</td><td>1</td><td>DCE 私钥身份验证。</td></tr>
<tr><td>RPC_C_AUTHN_DCE_PUBLIC</td><td>2</td><td>DCE 公钥身份验证。</td></tr>
<tr><td>RPC_C_AUTHN_DEC_PUBLIC</td><td>4</td><td>DEC 公钥身份验证。 保留供将来使用。</td></tr>
<tr><td>RPC_C_AUTHN_GSS_NEGOTIATE</td><td>9</td><td>Snego 安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_WINNT</td><td>10</td><td>NTLMSSP</td></tr>
<tr><td>RPC_C_AUTHN_GSS_SCHANNEL</td><td>14</td><td>Schannel 安全支持提供程序。 此身份验证服务支持 SSL 2.0、SSL 3.0、TLS 和 PCT。</td></tr>
<tr><td>RPC_C_AUTHN_GSS_KERBEROS</td><td>16</td><td>Kerberos 安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_DPA</td><td>17</td><td>DPA 安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_MSN</td><td>18</td><td>MSN 安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_KERNEL</td><td>20</td><td>内核安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_DIGEST</td><td>21</td><td>摘要安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_NEGO_EXTENDER</td><td>30</td><td>NEGO 扩展程序安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_PKU2U</td><td>31</td><td>PKU2U 安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_MQ</td><td>100</td><td>MQ 安全支持提供程序。</td></tr>
<tr><td>RPC_C_AUTHN_DEFAULT</td><td>0xFFFFFFFFL</td><td>系统默认身份验证服务。 指定此值后，COM 会使用其常规安全一揽子协商算法来选取身份验证服务。 有关详细信息，请参阅 安全一揽子协商。</td></tr>
</table><p><font size="6"><a name="授权常量">授权常量</a>——定义服务器授权的内容。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>RPC_C_AUTHZ_NONE</td><td>0</td><td>服务器不执行任何授权。 目前，RPC_C_AUTHN_WINNT、RPC_C_AUTHN_GSS_SCHANNEL和RPC_C_AUTHN_GSS_KERBEROS都仅使用RPC_C_AUTHZ_NONE。</td></tr>
<tr><td>RPC_C_AUTHZ_NAME</td><td>1</td><td>服务器根据客户端的主体名称执行授权。</td></tr>
<tr><td>RPC_C_AUTHZ_DCE</td><td>2</td><td>服务器使用客户端的 DCE 特权属性证书 (PAC) 信息执行授权检查，这些信息会随使用绑定句柄进行的每个远程过程调用一起发送到服务器。 通常，根据 DCE 访问控制列表 (ACL) 检查访问。</td></tr>
<tr><td>RPC_C_AUTHZ_DEFAULT</td><td>0xffffffff</td><td>DCOM 可以使用其正常的安全一揽子协商算法选择授权级别。 有关详细信息，请参阅 安全一揽子协商。</td></tr>
</table><p><font size="6"><a name="身份验证级别">身份验证级别常量</a>——指定身份验证级别，指示为帮助保护数据完整性而提供的身份验证量。 每个级别都包含以前级别提供的保护。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_DEFAULT</td><td>0</td><td>告知 DCOM 使用其常规安全一揽子协商算法选择身份验证级别。 有关详细信息，请参阅 安全一揽子协商。</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_NONE</td><td>1</td><td>不执行身份验证。</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_CONNECT</td><td>2</td><td>仅当客户端与服务器建立关系时，才对客户端的凭据进行身份验证。 数据报传输始终改用RPC_AUTHN_LEVEL_PKT。</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_CALL</td><td>3</td><td>仅在服务器收到请求时在每个远程过程调用开始时进行身份验证。 数据报传输改用RPC_C_AUTHN_LEVEL_PKT。</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_PKT</td><td>4</td><td>验证接收的所有数据是否来自预期的客户端。</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_PKT_INTEGRITY</td><td>5</td><td>验证并验证客户端和服务器之间传输的任何数据均未修改。</td></tr>
<tr><td>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</td><td>6</td><td>对之前的所有级别进行身份验证，并加密每个远程过程调用的参数值。</td></tr>
</table><p><font size="6"><a name="模拟级别">模拟级别常量</a>——指定模拟级别，指示在模拟客户端时服务器授予的权限量。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>数值</td><td>作用解释</td></tr>
<tr><td>RPC_C_IMP_LEVEL_DEFAULT</td><td>0</td><td>DCOM 可以使用其常规安全一揽子协商算法选择模拟级别。 有关详细信息，请参阅 安全一揽子协商。</td></tr>
<tr><td>RPC_C_IMP_LEVEL_ANONYMOUS</td><td>1</td><td>客户端对服务器而言是匿名的。 服务器进程可以模拟客户端，但模拟令牌将不包含任何信息，并且无法使用。</td></tr>
<tr><td>RPC_C_IMP_LEVEL_IDENTIFY</td><td>2</td><td>服务器可以获取客户端的标识。 服务器可以模拟客户端进行 ACL 检查，但它不能作为客户端访问系统对象。</td></tr>
<tr><td>RPC_C_IMP_LEVEL_IMPERSONATE</td><td>3</td><td>服务器进程可以在代表客户端执行操作时模拟客户端的安全上下文。 此模拟级别可用于访问本地资源（如文件）。 在此级别模拟时，模拟令牌只能跨一个计算机边界传递。 Schannel 身份验证服务仅支持此级别的模拟。</td></tr>
<tr><td>RPC_C_IMP_LEVEL_DELEGATE</td><td>4</td><td>服务器进程可以在代表客户端执行操作时模拟客户端的安全上下文。 服务器进程还可以在代表客户端使用隐藏操作时向其他服务器发出传出调用。 服务器可以在其他计算机上使用客户端的安全上下文来访问本地和远程资源作为客户端。 在此级别模拟时，模拟令牌可以跨任意数量的计算机边界传递。</td></tr>
</table>
<p><font size="6"><a name="嵌入框架对象">嵌入框架对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>嵌入框架对象</td><td>IOleInPlaceFrame</td><td>控制容器的顶级框架窗口。此控件涉及允许容器将其菜单组插入复合菜单、将复合菜单安装到相应的窗口框架中，
<br>以及从复合菜单中删除容器的菜单元素。它设置并显示与就地对象相关的状态文本。 它还启用或禁用框架的无模式对话框，并转换适用于容器帧的加速器击键。</td></tr>
<tr><th colspan=4>嵌入框架对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>SetClientSite</td><td>改站点(接口)</td><td>通知嵌入对象在其容器中的显示位置（称为“客户端站点”）。</td></tr>
<tr><td>GetClientSite</td><td>取站点(@接口)</td><td>检索指向嵌入对象的客户端站点的指针。</td></tr>
<tr><td>SetHostNames</td><td>改文档(程序名,文档名)</td><td>提供对象及其容器应用程序的名称以及嵌入它的复合文档。</td></tr>
<tr><td>Close</td><td>断开(状态)</td><td>将嵌入对象从 运行 状态更改为<a href="#保存对象状态">已加载状态</a>。 断开链接对象与其链接源的连接。</td></tr>
<tr><td>SetMoniker</td><td>改名称(形式,名称对象)</td><td>通知对象其容器的名称对象、相对于容器的对象自己的名字对象或对象的完整名字对象。<a href="#名称对象形式">名称对象形式</a></td></tr>
</table>
</table><p><font size="6"><a name="嵌入窗口对象">嵌入窗口对象</a>——功能模型：</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名称</td><td>中文名字</td><td>作用解释</td></tr>
<tr><td>嵌入窗口对象</td><td>IOleInPlaceUIWindow</td><td>由容器应用程序实现，并由对象应用程序用来协商文档或框架窗口中的边框空间。容器提供了一个 RECT 结构，<br>
对象可以在其中放置工具栏和其他类似控件，确定工具实际上是否可以安装在对象的窗口框架周围，<br>为边框分配空间，并在对象与每个框架和文档窗口之间建立通信通道。</td></tr>
<tr><th colspan=4>嵌入窗口对象——方法表</th></tr>
<tr><td>QueryInterface</td><td>接口(标识,@指针)</td><td>检索指向对象上支持的接口的指针。</td></tr>
<tr><td>AddRef</td><td>计数</td><td>递增对象上接口的引用计数。 对于指向对象上接口的指针的每个新副本，应调用此方法。</td></tr>
<tr><td>Release</td><td>释放</td><td>递减对象上接口的引用计数。前三项COM对象通用</td></tr>
<tr><td>SetClientSite</td><td>改站点(接口)</td><td>通知嵌入对象在其容器中的显示位置（称为“客户端站点”）。</td></tr>
<tr><td>GetClientSite</td><td>取站点(@接口)</td><td>检索指向嵌入对象的客户端站点的指针。</td></tr>
<tr><td>SetHostNames</td><td>改文档(程序名,文档名)</td><td>提供对象及其容器应用程序的名称以及嵌入它的复合文档。</td></tr>
<tr><td>Close</td><td>断开(状态)</td><td>将嵌入对象从 运行 状态更改为<a href="#保存对象状态">已加载状态</a>。 断开链接对象与其链接源的连接。</td></tr>
<tr><td>SetMoniker</td><td>改名称(形式,名称对象)</td><td>通知对象其容器的名称对象、相对于容器的对象自己的名字对象或对象的完整名字对象。<a href="#名称对象形式">名称对象形式</a></td></tr>
</table>
<p><font size="6"><a name="名称对象分类">名称对象分类</a>——指示名字对象的类。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>MKSYS_NONE</td><td>0</td><td>指示自定义名字对象实现。</td></tr>
<tr><td>MKSYS_GENERICCOMPOSITE</td><td>1</td><td>指示系统的泛型复合名字对象类。</td></tr>
<tr><td>MKSYS_FILEMONIKER</td><td>2</td><td>指示系统的文件名字对象类。</td></tr>
<tr><td>MKSYS_ANTIMONIKER</td><td>3</td><td>指示系统的反名字对象类。</td></tr>
<tr><td>MKSYS_ITEMMONIKER</td><td>4</td><td>指示系统的项名字对象类。</td></tr>
<tr><td>MKSYS_POINTERMONIKER</td><td>5</td><td>指示系统的指针名字对象类。</td></tr>
<tr><td>MKSYS_CLASSMONIKER</td><td>7</td><td>指示系统的类名字对象类。</td></tr>
<tr><td>MKSYS_OBJREFMONIKER</td><td>8</td><td>指示系统的 OBJREF 名字对象类。</td></tr>
<tr><td>MKSYS_SESSIONMONIKER</td><td>9</td><td>指示系统的终端服务器会话名字对象类。</td></tr>
<tr><td>MKSYS_LUAMONIKER</td><td>10</td><td>指示系统的提升名字对象类。</td></tr>
</table>
<p><font size="6"><a name="名称对象缩减">名称对象缩减</a>——指定名字对象应减少的距离。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>一次缩减</td><td>MKRREDUCE_ONE</td><td>0xC00000</td><td>仅执行一个步骤来减少名字对象。 通常，调用方必须对特定类型的名字对象有特定了解才能利用此选项。</td></tr>
<tr><td>减为永久</td><td>MKRREDUCE_TOUSER</td><td>0x800000</td><td>将名字对象减少为用户标识为永久性对象的窗体。如果不存在此类点，则应将此选项视为MKRREDUCE_ALL。</td></tr>
<tr><td>即将永久</td><td>MKRREDUCE_THROUGHUSER</td><td>0x400000</td><td>将名字对象缩减为进一步缩减会将其缩减为用户不标识为永久性对象的窗体。 通常，这是与MKRREDUCE_TOUSER相同的阶段。</td></tr>
<tr><td>最简缩减</td><td>MKRREDUCE_ALL</td><td>0</td><td>减少名字对象，直到它采用最简单的形式，即将其缩减为自身。</td></tr>
</table>
<p><font size="6"><a name="名称对象方法">名称对象方法</a>——指示正在设置或检索对象的名字对象的哪个部分。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>已有名称</td><td>OLEGETMONIKER_ONLYIFTHERE</td><td>1</td><td>如果对象或容器的名字对象不存在，取名称 应返回失败0x80004005且不分配名字对象。</td></tr>
<tr><td>强制分配</td><td>OLEGETMONIKER_FORCEASSIGN</td><td>2</td><td>如果对象或容器的名字对象不存在， 取名称 应创建一个。</td></tr>
<tr><td>释放名字</td><td>OLEGETMONIKER_UNASSIGN</td><td>3</td><td>可以释放对象的名字对象 (但不需要) 执行此操作。</td></tr>
<tr><td>临时名字</td><td>OLEGETMONIKER_TEMPFORUSER</td><td>4</td><td>如果对象的名字对象不存在， 取名称 可以创建一个临时名字对象，该名字对象可用于显示 (IMoniker：：GetDisplayName) ，但不能用于绑定。 这使对象服务器能够返回对象的描述性名称，而不会产生创建和维护名字对象的开销，直到实际创建链接。</td></tr>
</table>
<p><font size="6"><a name="名称对象形式">名称对象形式</a>——指示正在设置或检索对象的名字对象的哪个部分。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>中文名字</td><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>文件名</td><td>OLEWHICHMK_CONTAINER</td><td>1</td><td>对象的容器的名字对象。 通常，这是一个文件名字对象。 此名字对象不会永久存储在 对象内，因为即使未加载对象，也可以重命名容器。</td></tr>
<tr><td>项名称</td><td>OLEWHICHMK_OBJREL</td><td>2</td><td>对象相对于其容器的名字对象。 通常，这是一个项名字对象，它是对象的持久状态的一部分。 如果此名字对象构成到容器名字对象的末尾，则生成的名字对象是对象的完整名字对象。</td></tr>
<tr><td>完整名</td><td>OLEWHICHMK_OBJFULL</td><td>3</td><td>对象的完整名字对象。 绑定到此名字对象会导致与 对象建立连接。 此名字对象不会永久存储在 对象内，因为即使未加载对象，也可以重命名容器。</td></tr>
</table>
<p><font size="6"><a name="保存对象状态">保存对象状态</a>——指示是否应在关闭前保存对象。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>OLECLOSE_SAVEIFDIRTY</td><td>0</td><td>如果对象脏，则应保存该对象。</td></tr>
<tr><td>OLECLOSE_NOSAVE</td><td>1</td><td>即使对象脏，也不应保存该对象。 此标志通常在删除对象时使用。</td></tr>
<tr><td>OLECLOSE_PROMPTSAVE</td><td>2</td><td>如果对象脏，则 连接嵌入对象.断开 实现应显示一个对话框，让最终用户确定是否保存对象。<br> 但是，如果对象处于运行状态，但其用户界面不可见，则不应提示最终用户，并且应像指定OLECLOSE_SAVEIFDIRTY一样处理关闭。</td></tr>
</table>
<p><font size="6"><a name="枚举谓词属性">枚举谓词属性</a>——描述对象的指定谓词的属性。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>OLEVERBATTRIB_NEVERDIRTIES</td><td>1</td><td>执行此谓词不会导致对象成为脏，因此需要保存到永久性存储。</td></tr>
<tr><td>OLEVERBATTRIB_ONCONTAINERMENU</td><td>2</td><td>指示应出现在此对象的容器谓词菜单中的谓词。 OLEIVERB_HIDE、OLEIVERB_SHOW和OLEIVERB_OPEN从未设置过此值。
</td></tr>
</table>
<p><font size="6"><a name="类名形式">类名形式</a>——指示与对象类关联的显示名称的不同变体。</font></p>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>英文名字</td><td>数值</td><td>注释</td></tr>
<tr><td>USERCLASSTYPE_FULL</td><td>1</td><td>类的完整类型名称。</td></tr>
<tr><td>USERCLASSTYPE_SHORT</td><td>2</td><td>短名称 (用于弹出菜单和 “链接 ”对话框) 最多 15 个字符。</td></tr>
<tr><td>USERCLASSTYPE_APPNAME</td><td>3</td><td>为 类提供服务的应用程序的名称，用于对话框中的结果文本。</td></tr>
</table><hr>
<p><font size="6"><a name="音频视频">多媒体库</a>——音频和视频</font></p>
微软提供的组件旨在使应用程序开发人员、Web 开发人员和系统管理员能够开发音频和视频程序，以及创建与 Windows Media 兼容的应用程序和网站。
<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>主题</th><th>说明</th></tr></thead>
<tbody>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/coreaudio/core-audio-apis-in-windows-vista" target="_blank">核心音频 API</a><br/></td>
<td>用于音频捕获和音频呈现的低级别 API，可用于实现最低延迟或实现可能并非完全受更高级别媒体 API 支持的功能。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/directshow/directshow" target="_blank">DirectShow</a><br/></td>
<td>端到端媒体管道，支持播放、音频/视频捕获、编码、DVD 导航和播放、模拟电视和 MPEG-2。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/medfound/microsoft-media-foundation-sdk" target="_blank">微软媒体基础</a><br/></td>
<td>端到端媒体管道，支持播放、音频/视频捕获和编码 (DirectShow) 的后续版本。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions/windows/desktop/mstv/microsoft-tv-technologies-portal" target="_blank">微软 TV Technologies</a><br/></td>
<td>支持数字电视、录制的电视 (.wtv) 文件和 OpenCable 单向电缆接收器 (OCUR) 设备。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions/aa286546(v=msdn.10)" target="_blank">多媒体 Center 软件开发工具包</a><br/></td>
<td>使用 Windows Media Center 软件开发工具包 (SDK) ，开发人员可以创建富媒体应用程序和服务，以便在 Media Center 电脑上与鼠标、键盘和遥控器配合使用。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/wmformat/windows-media-format-11-sdk" target="_blank">多媒体 Format 11 SDK</a><br/></td>
<td>支持读取和写入 ASF 文件、解码和编码 Windows Media 音频和视频，以及通过网络流式传输 ASF。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions/windows/desktop/wmlss/windowsmedialibrarysharingservicesportal" target="_blank">媒体库共享服务</a><br/></td>
<td>使应用程序能够发现家庭网络上的媒体设备，并在家庭网络和 Internet 上共享媒体库。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/wmp/windows-media-player-sdk" target="_blank">媒体播放器 SDK</a><br/></td>
<td>扩展 Windows 媒体播放器 和 Windows 媒体播放器 Mobile 的功能。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions//bb649422(v=vs.85)" target="_blank">多媒体 Rights Manager 10.1.2 SDK</a><br/></td>
<td>支持用于保护 Windows Media 文件的数字版权管理 (DRM) 。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions/windows/desktop/dd873819(v=vs.85)" target="_blank">多媒体 Services 9 系列</a><br/></td>
<td>提供基于自动化的 API，用于管理 Windows Server 中的Windows Media 服务。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/mediastreaming/media-streaming-api-portal" target="_blank">媒体流式处理 API</a><br/></td>
<td>根据 DLNA 准则的定义， (DMR) 和数字媒体服务器 (DMS) 设备建模，以便以编程方式使用。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions/windows/desktop/mediatransport/media-transport-controls-portal" target="_blank">媒体传输控件</a><br/></td>
<td>提供一个内置界面，用于显示有关当前正在播放的媒体的用户信息，例如歌曲或视频的标题。 此外，还为用户提供了一种常见且熟悉的方式来控制媒体播放。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/previous-versions/windows/desktop/wmmdvdm/windows-movie-maker-6-0-and-windows-dvd-maker-1-0-sdk" target="_blank">Windows 影音制作 6.0 和 Windows DVD Maker 1.0 SDK</a><br/></td>
<td>启用 Windows 影音制作 6.0 和 微软 DVD Maker 1.0 的自定义。<br/></td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/audio/legacy-audio-interfaces" target="_blank">旧版音频和视频</a><br/></td>
<td>已过时且不应在新应用程序中使用的技术。<br/></td>
</tr>
</tbody>
</table>
<p><font size="6"><a name="核心音频">核心音频 API</a>——机器学习</font></p>
本文档提供有关核心音频应用程序编程接口的信息。它为软件开发人员提供了在开发使用核心音频 API 的应用程序时要遵循的指南。<br>

核心音频 API 为音频应用程序提供了访问音频终结点设备（如耳机和麦克风）的方式。 核心音频 API 是更高级别的音频 API 的基础。<br>
大多数应用程序与更高级别的 API 通信，但某些具有特殊要求的应用程序可能需要直接与核心音频 API 通信。<br>

从 Windows 7 开始，现有 API 已得到改进，并添加了新的流和会话管理 API 以支持新方案。现在可以枚举和获取对音频会话的扩展控制。<br>
通过使用新 API，应用程序可以实现自定义流衰减体验。 新的与设备相关的 API 提供对终结点设备的驱动程序属性的访问。<br>
<h2>关于核心音频 API</h2>
<pre>
核心音频 API 是在 Vista 中引入的。这组新的用户模式音频组件为客户端应用程序提供了改进的音频功能。这些功能包括：

低延迟、可复原故障的音频流式处理。
提高了可靠性， (许多音频函数已从内核模式迁移到用户模式) 。
受保护的音频内容的安全性 (处理在安全、特权较低的进程中) 进行。
将特定系统范围角色 (控制台、多媒体和通信) 分配给单个音频设备。
音频终结点设备的软件抽象 (例如，扬声器、耳机和麦克风) 用户直接操作。
核心音频 API 在 Windows 7 中得到了改进。这些 API 充当以下更高级别的 API 的基础：

DirectSound
DirectMusic
Windows 多媒体 waveXxx 和 mixerXxx 函数
媒体基础

这些更高级别的 API 使用核心音频 API 共享对音频设备的访问权限。

大多数音频应用程序与更高级别的 API 通信，而不是直接与核心音频 API 通信。 使用更高级别的 API 的应用程序的一些示例如下：

媒体播放器
DVD 播放器
游戏
播放声音文件的业务应用程序，如 Microsoft Office PowerPoint

通常，这些应用程序与 DirectSound 或 Media Foundation API 通信。与核心音频 API 的直接通信可能不适用于许多常规用途音频应用程序。
例如，核心音频 API 要求音频流使用音频设备的本机数据格式。 但是，开发以下类型的产品的第三方软件开发人员可能需要核心音频 API 的特殊功能：

专业音频 (“pro audio”) 应用程序
RTC) 应用程序的实时通信 (
第三方音频 API

“专业音频”或 RTC 应用程序可能需要直接访问核心音频 API 的低级别功能，以便通过获取对音频硬件的独占访问权限来最大程度地降低延迟。
第三方音频 API 可能需要直接访问核心音频 API 才能实现一组功能，这些功能可能并非完全受 Windows 随附的任何高级音频 API 支持。
使用旧音频 API 播放或录制音频的应用程序可能需要旧音频 API 不支持但受核心音频 API 支持的其他功能。
在许多情况下，应用程序可以直接通过核心音频 API 访问这些功能，这些 API 可与旧音频 API 结合使用。

核心音频 API 包括：

多媒体设备 (MMDevice) API。 客户端使用此 API 枚举系统中的音频终结点设备。
Windows 音频会话 API (WASAPI) 。 客户端使用此 API 创建和管理音频终结点设备的音频流。
DeviceTopology API。 客户端使用此 API 直接访问拓扑功能， (例如，音量控制和多路复用器) 位于音频适配器的硬件设备内的数据路径上。
EndpointVolume API。 客户端使用此 API 直接访问音频终结点设备上的音量控件。 此 API 主要由管理独占模式音频流的应用程序使用。
这些 API 支持终结点设备的用户友好概念，如 音频终结点设备中所述。

Microsoft 不打算将此处所述的核心音频 API 用于早期版本的 Windows，包括 Windows 2003、XP、ME、2000 和 98。
</pre>
<h2>核心音频编程指南</h2>
本指南部分介绍 Windows Vista 的核心音频 API 的概念和功能，并介绍如何在应用程序编程中使用它们。

<table border="1" cellspacing="0" cellpadding="0">
<thead><tr><th>主题</th><th>说明</th></tr></thead>
<tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/windows/win32/user-mode-audio-components" target="_blank">用户模式音频组件</a></td>
<td>通过核心音频 API 中的低级别接口，客户端可以访问管理和混合音频流的系统组件。</td></tr>
<tr><td><a href="https://learn.microsoft.com/zh-cn/windows/win32/protected-user-mode-audio--puma-" target="_blank">受保护的用户模式音频 (PUMA) </a></td>
<td>介绍受保护用户模式音频 (PUMA) 的更新，PUMA) 受保护环境中的用户模式音频引擎 (PE) ，它为音频处理和呈现提供了更安全的环境。</td></tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/audio-endpoint-devices" target="_blank">音频终结点设备</a></td>
<td>音频终结点设备是一种软件抽象，可实现与音频设备（如麦克风和扬声器）的用户友好交互。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/audio-sessions" target="_blank">音频会话</a></td>
<td>音频会话是一种软件抽象，使客户端能够将相关音频流的集合作为单个单元进行管理。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/volume-controls" target="_blank">音量控件</a></td>
<td>该系统以逻辑且一致的方式将其基于策略的卷设置与用户的卷设置集成。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/stream-management" target="_blank">流管理</a></td>
<td>Windows 音频会话 API (WASAPI) 为客户端提供了一组用于创建和管理音频流的完整方法。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/device-topologies" target="_blank">设备拓扑</a></td>
<td>DeviceTopology API 使客户端能够发现音频硬件中各种数据路径上的音频控件。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/using-the-ikscontrol-interface-to-access-audio-properties" target="_blank">使用 IKsControl 接口访问音频属性</a></td>
<td>专用音频应用程序可能需要使用 IKsControl 接口来访问音频适配器的属性。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/interoperability-with-legacy-audio-apis" target="_blank">与旧版音频 API 的互操作性</a></td>
<td>Windows Vista 中核心音频 API 的主要功能可以合并到使用 DirectSound、DirectShow 以及 Windows 多媒体 <strong>waveOutXxx</strong> 和 <strong>waveInXxx</strong> 函数的现有应用程序中。</td>
</tr>
<tr>
<td><a href="https://learn.microsoft.com/zh-cn/windows/win32/spatial-sound" target="_blank">空间音效</a></td>
<td>提供有关使用 Windows Sonic 的指导，Windows Sonic 是 Microsoft 在 Xbox 和 Windows 上用于空间音效支持的平台级解决方案，使环绕声和高程 (高于或低于侦听器) 音频提示。</td>
</tr>
</tbody></table>
<p><font size="6"><a name="直接显示">直接显示</a>——DirectShow</font></p>
<pre>
Microsoft DirectShow 应用程序编程接口是媒体流式处理体系结构。使用 DirectShow，应用程序可以执行高质量的视频和音频播放或捕获。
Microsoft? DirectShow? 是 Microsoft Windows? 平台上流媒体的体系结构。 DirectShow 提供多媒体流的高质量捕获和播放。
它支持多种格式，包括高级系统格式 (ASF) 、电影专家组 (MPEG) 、Audio-Video交错 (AVI) 、MPEG 音频层 3 (MP3) 和 WAV 声音文件。
它支持基于 Windows 驱动程序模型 (WDM) 或视频从数字和模拟设备捕获。 它会自动检测并使用视频和音频加速硬件（如果可用），但也支持没有加速硬件的系统。

DirectShow 基于组件对象模型 (COM) 。 若要编写 DirectShow 应用程序或组件，必须了解 COM 客户端编程。 对于大多数应用程序，无需实现自己的 COM 对象。
DirectShow 提供所需的组件。 但是，如果要通过编写自己的组件来扩展 DirectShow，则必须将它们作为 COM 对象实现。

Microsoft 不提供 DirectShow 的托管 API。DirectShow 简化了媒体播放、格式转换和捕获任务。

同时，它为需要自定义解决方案的应用程序提供对基础流控制体系结构的访问。 还可以创建自己的 DirectShow 组件以支持新格式或自定义效果。
</pre>
可以使用 DirectShow 编写的应用程序类型的示例包括文件播放器、电视和 DVD 播放器、视频编辑应用程序、文件格式转换器、音频-视频捕获应用程序、编码器和解码器、数字信号处理器等。
<h2>DirectShow 系统概述</h2>
<pre>
<b>多媒体的挑战</b>
使用多媒体带来了几个重大挑战：
多媒体流包含大量数据，必须非常快速地处理这些数据。
音频和视频必须同步，以便同时启动和停止，并按相同的速率播放。
数据可能来自许多来源，包括本地文件、计算机网络、电视广播和摄像机。
数据有多种格式，例如Audio-Video交错 (AVI) 、高级流式处理格式 (ASF) 、电影专家组 (MPEG) 和数字视频 (DV) 。
程序员事先不知道最终用户的系统上将存在哪些硬件设备。
<b>DirectShow 解决方案</b>
设计目标是通过将应用程序与数据传输、硬件差异和同步的复杂性隔离开来简化在系统平台上创建数字媒体应用程序的任务。
为了达到流式传输视频和音频所需的吞吐量，尽可能使用 Direct3D 和 DirectSound。 这些技术有效地将数据呈现给用户的声音和图形卡。
通过将媒体数据封装在带时间戳的示例中来同步播放。 为了处理各种可能的源、格式和硬件设备，使用模块化体系结构的筛选器（混合和匹配）。
提供支持基于系统驱动程序模型 (WDM) 捕获和优化设备的筛选器，以及支持 (VfW) 捕获卡的较旧视频的筛选器，
以及为音频压缩管理器 (ACM) 和视频压缩管理器 (VCM) 接口编写的编解码器。
</pre>
下图显示了应用程序、DirectShow 组件以及 DirectShow 支持的一些硬件和软件组件之间的关系。<br>

<img src="https://learn.microsoft.com/zh-cn/windows/win32/directshow/images/arch-oview2.png" alt="高级体系结构"><br>

如此处所示，DirectShow 筛选器与各种设备通信和控制，包括本地文件系统、电视调谐器和视频捕获卡、VfW 编解码器、<br>
通过 DirectDraw 或 GDI的视频显示，以及通过 DirectSound (声音卡)。使程序免受这些设备的许多复杂性。还为某些文件格式提供本机压缩和解压缩筛选器。<br>
<p><font size="6"><a name="媒体基础">媒体基础</a>——Foundation</font></p>
<pre>
Microsoft Media Foundation 支持开发应用程序和组件，以便在 Windows Vista 及更高版本上使用数字媒体。<br>
适用于下一代多媒体平台，它使开发人员、消费者和内容提供商能够接受新一波高级内容，同时增强可靠性、无与伦比的质量和无缝互操作性。
Media Foundation 需要 Windows Vista 或更高版本。 它使用组件对象模型 (COM) 。不提供适用于 Media Foundation 的托管 API。

<b>音频和视频质量</b>
Media Foundation 旨在应对高清内容带来的挑战。 在整个平台中改进的音频和视频质量，现在可以为下一代高清内容提供出色的体验。
与 DXVA 1.0 相比，DirectX 视频加速 (DXVA) 2.0 提供更高效的视频加速，视频解码更可靠、更精简，在视频处理中扩展了硬件的使用。
使用 DXVA 2.0，Windows 可以处理一些要求最苛刻的高清内容，并提供高质量和改进的故障复原能力。

在整个视频管道中保留颜色空间信息。 用户可以以完全保真度欣赏视频内容。 颜色信息和交错图像现在传递到硬件进行单通道合成。
保留颜色空间信息还可以减少不必要的颜色空间转换，从而释放更多周期来处理要求苛刻的 HD 内容。
增强的视频呈现器(EVR)提供更好的计时支持、增强的视频处理和改进的故障复原能力。改进了全屏播放支持，并且窗口模式下的视频撕裂已最小化。
Media Foundation 使用多媒体类计划程序服务 (MMCSS) ，这是 Windows Vista 中的一项新系统服务。
MMCSS 使多媒体应用程序能够确保其时间敏感型处理能够优先访问 CPU 资源。

<b>内容访问</b>
随着数字娱乐进入高清时代，内容变得更加便携和无处不在，内容保护将成为数字媒体产品不可或缺的一部分。 
Media Foundation 的扩展性可确保它可以支持这些趋势。此外，扩展性使不同的内容保护系统能够一起运行。
</pre>
<p><font size="6"><a name="多媒体">Windows 多媒体</a>——(MCI)</font></p>
<pre>
多媒体支持使应用程序能够使用声音和视频。媒体控制接口 (MCI) 提供用于播放多媒体设备和录制多媒体资源文件的标准命令。
这些命令是几乎每一种多媒体设备的通用接口。MCI 为应用程序提供与设备无关的功能，用于控制音频和视频外围设备。
应用程序可以使用 MCI 来控制任何受支持的多媒体设备，包括波形音频设备、MIDI 排序器、CD 音频设备和数字视频 (视频播放) 设备。
MCI 支持 命令字符串 和 命令消息。 可以在 MCI 应用程序中使用字符串或消息，或同时使用两者。

命令消息接口由常量和结构组成。 使用 mciSendCommand 函数将消息发送到 MCI 设备。
命令字符串接口提供命令消息的文本版本。 使用 mciSendString 函数将字符串发送到 MCI 设备。
 命令字符串复制命令消息的功能。操作系统先将命令字符串转换为命令消息，然后再将其发送到 MCI 驱动程序进行处理。
检索信息的命令消息以结构的形式执行此操作，这些结构在 C 应用程序中易于解释。 这些结构可以包含有关设备许多不同方面的信息。
检索信息的命令字符串以字符串的形式执行此操作，并且一次只能检索一个字符串。 应用程序必须分析或测试每个字符串才能解释它。
你可能会发现，在某些情况下，命令消息比命令字符串更易于使用，但命令字符串易于记住和实现。
当返回值不会被使用时，某些 MCI 应用程序使用命令字符串 (，而不是在从设备检索信息时验证成功) 和命令消息。
讨论命令时，此概述使用命令的字符串形式，后跟括号中的消息窗体。
</pre>
<hr>
<p><font size="6"><a name="机器学习">极人工智能</a>——机器学习</font></p>
<p>使用 人工智能（高性能的可靠 API，用于在 Windows 设备上部署硬件加速的 ML 推理）在 Windows 应用中实现机器学习。</p>
<h2>概述</h2>
<p>人工智能 内置于 Windows 10 和 Windows Server 2019 的最新版本中，也可作为 NuGet 包提供到更低的操作系统版本 Windows 8.1。 极人工智能 为开发人员提供以下优势：</p>
<pre><ul>
<li><strong>使开发变得更轻松：</strong> 使用最新版 Windows 内置的人工智能，只需把极语言应用程序一起分发的已训练 ONNX 模型即可进行开发。<br>
此外，如果你需要将基于 AI 的功能提供到较低版本的 Windows（低至 8.1），极人工智能 也可作为随应用程序一起分发的 NuGet 包提供。
</li>
<li><strong>广泛的硬件支持：</strong>可以一次性编写 ML 工作负荷，并自动为不同的硬件供应商和芯片类型提供高度优化的性能。保证各种受支持硬件的行为保持一致。
</li>
<li><strong>低延迟、实时结果：</strong> 可以使用 Windows 设备的处理能力来评估 ML 模型，以实现对图像和视频等大量数据的本地实时分析。<br>
可以快速高效地提供结果用于游戏引擎等性能密集型工作负荷，或搜索索引等后台任务。
</li>
<li><strong>提高灵活性：</strong> 在 Windows 设备本地评估 ML 模型的选项可让你解决更广泛的方案。 例如，可以在设备处于脱机状态或者连接间歇性中断时运行 ML 模型的评估。<br>
此外，还可以让你解决因隐私或数据主权问题而无法将所有数据发送到云的情景。
</li>
<li><strong>降低运营成本：</strong> 在云中训练机器 ML，然后在 Windows 设备本地评估这些模型可以极大地节省带宽成本（只需将持续改善 ML 模型时可能会需要的极少量数据发送到云）。<br>
此外，在服务器方案中部署 ML 模型时，开发人员可以利用 极人工智能 硬件加速来加快为模型提供服务的速度，减少处理工作负荷所需的计算机数量。
</li>
</ul></pre>
<h2>机器学习模型</h2>
<p>机器学习模型是一个文件，在经过训练后可以识别特定类型的模式。 你可以用一组数据训练模型，为它提供一种算法，模型利用该算法学习这些数据并进行推理。</p>
<p>对模型进行训练后，可以使用它根据之前未见过的数据进行推理，并对这些数据进行预测。 例如，假设你要构建一个应用程序，该应用程序可以根据用户的面部表情识别用户的情感。<br>
可以为模型提供具有特定情感标记的面部图像，对模型进行训练，然后即可在能够识别任何用户情感的应用程序中使用该模型。 </p>
<h2>何时使用机器学习</h2>
良好的机器学习方案通常具有以下常见特性：<br>
<pre>
涉及要自动执行且需要一致结果的重复决策或评估。
很难或不可能显式描述决策背后的解决方案或条件。
具有标记的数据，或有现有示例，在示例中可描述情况并映射到正确的结果。
</pre>
<p>机器学习对其模型使用<a href="https://onnx.ai/" target="_blank">开放神经网络交换 (ONNX)</a> 格式。 可以下载预先训练的模型，也可以训练自己的模型。</p>
<h2>机器学习入门</h2>
<pre>
可以通过多种方法在应用中使用 Windows 机器学习。 核心在于，只需执行几个简单的步骤即可。
获取经过训练的开放神经网络交换 (ONNX) 模型，或者使用 ONNXMLTools 将其他 ML 框架中训练的模型转换为 ONNX。
将 ONNX 模型文件添加到应用程序，或者在目标设备上以其他某种方式提供该文件。
将模型集成到应用程序代码中，然后生成并部署应用程序。
</pre>
内置 WinML 解决方案与 NuGet WinML 解决方案<br>
下表突出显示了内置 Windows ML 和 Windows ML NuGet 包的可用性、分发、语言支持、维护和前向兼容性方面。<br>
<table border="1" cellspacing="0" cellpadding="0">
<tr><td>属性</td><td>内置</td><td>NuGet</td></tr>
<tr><td>可用性</td><td>Windows 10 版本 1809 或更高版本</td><td>Windows 8.1 或更高版本</td></tr>
<tr><td>分布</td><td>内置到 Windows SDK</td><td>作为应用程序的一部分进行打包和分发</td></tr>
<tr><td>维护</td><td>Microsoft 驱动（客户自动受益）</td><td>开发人员驱动</td></tr>
<tr><td>向前兼容性</td><td>自动使用新功能进行前滚</td><td>开发人员需要手动更新包</td></tr>
</table>
<pre>
在使用内置解决方案的情况下运行应用程序时，人工智能 运行时（包含 ONNX 模型推理引擎）将评估 Windows 10 设备（或面向服务器部署时使用的 Windows Server 2019）上已训练的模型。
Windows ML 将处理硬件抽象，从而使开发人员可将目标定位在各种芯片上 — 包括 CPU、GPU 以及未来的 AI 加速器。 Windows ML 硬件加速构建在 DirectML 的基础之上。
DirectML 是用于运行 ML 推理的高性能低级别 API，是 DirectX 家族中的一员。
对于 NuGet 包，这些层显示为下图中所示的二进制文件。它内置于 Microsoft.ai.machinelearning.dll 中。它并不包含嵌入的 ONNX 运行时，ONNX 运行时内置于文件 onnxruntime.dll 中。
NuGet 包中包含的版本包含一个嵌入在其内部的 DirectML EP。最终的二进制文件 DirectML.dll 是 DirectML 的实际平台代码，它基于系统中内置的 Direct 3D 和计算驱动程序而构建。
这三个文件都包含在 NuGet 版本中，以便随应用程序一起分发。直接访问 onnxruntime.dll 还使你能够将目标定位于跨平台方案，同时让相同的、独立于硬件的加速扩展到所有系统设备上。
</pre>
<h2>ONNX 模型</h2>
Windows 机器学习支持开放神经网络交换 (ONNX) 格式的模型。 ONNX 是用于 ML 模型的开放格式，允许在不同的 ML 框架和工具之间交换模型。
<pre>
可以通过多种方式获取 ONNX 格式的模型，其中包括：

ONNX 模型库：包含针对不同类型任务的多个预先训练的 ONNX 模型。 下载 Windows ML 支持的版本，然后即可继续操作！

ML 训练框架的本机导出：多个训练框架支持针对 ONNX的本机导出功能，允许将训练的模型保存为特定版本的 ONNX 格式。

使用 ONNXMLTools 转换现有模型：允许将模型从几个训练框架格式转换为 ONNX。你可以指定要将模型转换为哪个版本的 ONNX。

Windows ML 并不支持所有 ONNX 版本。 若要了解应用程序针对的 Windows 版本中正式支持哪些 ONNX 版本，请查看 ONNX 版本和 Windows 版本。
一旦有了 ONNX 模型，即可将模型集成到应用的代码中，然后在 Windows 应用和设备中使用机器学习！
</pre>
<p><font size="6"><a name="训练教程">极人工智能</a>——训练教程</font></p>
 机器学习可用于各种可自定义的应用解决方案。 在这里，我们提供了几个完整的教程，其中内容涵盖了如何通过各种潜在的非代码或编程服务创建机器学习模型，以及如何将其集成到基本的 Windows ML 应用中。
 此外，还介绍了用于几种调整应用功能的高级方法。 如果只需大致了解现有模型的 API 用法或者想要查看示例，请查看下面的更多链接。
<pre>
<b>完整的应用教程</b>
以下教程介绍了如何创建机器学习模型，以及如何使用 Windows ML 将其合并到 Windows 10 应用中。
<b>无代码训练环境</b>
想使用现有实用程序来训练机器学习模型吗？ 这些教程涵盖了关于如何使用由现有服务训练的模型创建 Windows ML 应用的端到端演练。
<a href="https://learn.microsoft.com/zh-cn/windows/ai/windows-ml/tutorials/image-classification-intro" target="_blank">使用自定义视觉和 Windows ML 进行图像分类</a>
了解如何使用 Azure 自定义视觉服务来训练图像分类模型，并将该模型部署在 Windows ML 应用程序中，以便在计算机上本地运行。
<a href="https://learn.microsoft.com/zh-cn/windows/ai/windows-ml/tutorials/mlnet-intro" target="_blank">使用 ML.NET 和 Windows ML 进行图像分类</a>
了解如何使用 ML.NET Model Builder Visual Studio 扩展来创建 ONNX 模型并将该模型部署在应用程序中。

<b>代码训练环境</b>
这些教程介绍了如何创建自己的代码（而不是使用已有的服务）来训练 Windows ML 模型。
<a href="https://learn.microsoft.com/zh-cn/windows/ai/windows-ml/tutorials/pytorch-intro">使用 PyTorch 和 Windows ML 进行图像分类</a>
了解如何在计算机上安装 PyTorch、如何使用它来训练图像分类模型、如何将该模型转换为 ONNX 格式，以及如何将模型部署在应用程序中
<a href="https://learn.microsoft.com/zh-cn/windows/ai/windows-ml/tutorials/pytorch-analysis-intro">使用 PyTorch 和 Windows ML 进行数据分析</a>
了解如何在计算机上安装 PyTorch、如何使用它来训练数据分析模型、如何将该模型转换为 ONNX 格式，以及如何将模型部署在应用程序中。
<a href="https://learn.microsoft.com/zh-cn/windows/ai/windows-ml/tutorials/tensorflow-intro">使用 TensorFlow 和 Windows ML 进行物体检测</a>
了解如何在计算机上安装 TensorFlow、使用 YOLO 体系结构实现迁移学习、将模型转换为 ONNX，以及如何将模型部署在应用程序中。
</pre>
<h2>创建机器学习桌面应用程序</h2>
利用 Windows ML API，可以轻松地与极语言程序中的机器学习模型进行交互。 使用加载、绑定和评估这三个步骤，你的应用程序将可以利用机器学习功能。
<pre>
我们将创建 <a href="https://github.com/Microsoft/Windows-Machine-Learning/tree/master/Samples/SqueezeNetObjectDetection/Desktop/cpp">GitHub</a> 上提供的“对象检测”示例的简化版本。 如果希望查看它完成后的样子，你可以下载完整的示例。

我们将使用 WinRT 来访问 WinML API。 

本教程介绍以下操作：

加载机器学习模型
将图像加载为 <a href="https://learn.microsoft.com/zh-cn/uwp/api/windows.media.videoframe">VideoFrame</a>
绑定模型的输入和输出
评估模型并打印有意义的结果
</pre>
<h2>机器学习高级功能</h2>
<pre>
将现有 Windows ML 应用移植到极语言应用程序
在本教程中，我们将获取现有 WinML 桌面应用程序并移植它以使用可再分发的 NuGet 包。

<b></b>必备条件
一个 WinML 应用程序。 若要创建新的应用程序，请参阅教程：创建机器学习应用程序
下载 <a href="https://www.nuget.org/packages/Microsoft.Windows.CppWinRT/">CppWinRT NuGet</a> 包
<b></b>将 NuGet 包添加到项目
在现有应用程序的 Visual Studio 项目中，导航到“解决方案资源管理器”，然后选择“管理解决方案的 NuGet 包”。
选择 Microsoft.AI.MachineLearning NuGet 包。 确保要添加到正确的项目，然后按“安装”。

接下来，重新生成解决方案。 C++/WinRT 工具包将分析 Microsoft.AI.MachineLearning NuGet 包中新的头文件和元数据，避免在下一步中产生混淆。

<b>包含新的头文件</b>
为实现最佳做法，你应添加一个控制标志，以使你的应用能够在使用内置 Windows ML 和 NuGet 包之间来回切换。
引入 "lib/winai.lib" 
<b>更改命名空间</b>
接下来，使用控制标志允许 Windows::AI::Machinelearning 切换到 Microsoft::AI::MachineLearning 命名空间。 通过进行此更改，你的代码将自动使用 NuGet 包。
命名 Microsoft::AI::MachineLearning 
<b>更改预处理器定义</b>
现在，在“解决方案资源管理器”中右键单击该项目并选择“属性”。 在“属性”窗口中，选择“预处理器”页。 编辑“预处理器定义”，并将其更改为 USE_WINML_NUGET:_DEBUG。

<b>保存生成配置</b>
在解决方案资源管理器中右键单击解决方案并选择“属性” 。 在“属性”窗口中，选择“配置管理器” 。 打开“有效解决方案配置”的下拉菜单，然后选择“新建”。
 输入新解决方案配置的名称，并确保选中“创建新的项目配置”。 现在，可将预处理器定义保存在所需的生成配置中。

<b>生成并运行</b>
应用程序现已成功使用 WinML NuGet 包。
</pre>
</div>
</div>
</body>
</html>
